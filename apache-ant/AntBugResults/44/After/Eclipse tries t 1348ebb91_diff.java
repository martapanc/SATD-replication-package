diff --git a/WHATSNEW b/WHATSNEW
index e259f3995..b8b10d23a 100644
--- a/WHATSNEW
+++ b/WHATSNEW
@@ -1,1003 +1,1010 @@
 Changes from Ant 1.9.8 TO Ant 1.9.9
 ===================================
 
+Fixed bugs:
+-----------
+
+ * Ant 1.9.8 made Path#systemClasspath final which broke the Eclipse
+   integration.
+   Bugzilla Report 60582
+
 Changes from Ant 1.9.7 TO Ant 1.9.8
 ===================================
 
 Changes that could break older environments:
 -------------------------------------------
 
  * <fileset>/<zipfileset>/<tarfileset> exhibited undefined
    behavior when both the dir and file attribute have been used on the
    same instance. This will now cause the build to fail.
    Bugzilla Report 59402
 
  * The ant.java.version property will now hold the value "9" rather
    than "1.9" if running on Java 9.
 
  * <rmic> will no longer allow the -Xnew option (or xmic compiler) to
    be used when running on Java 9 since this option has been removed.
    Bugzilla Report 59906
 
 Fixed bugs:
 -----------
 
  * setDynamicAttribute on MacroInstance now lower-cases the attribute
    name in order to allow users of the API to use the attributes names
    they have specified.
    Bugzilla Report 59339
 
  * <get>'s quiet attribute was broken, it didn't suppress any messages.
    Bugzilla Report 59379
 
  * <zip>'s check whether an archive is already up-to-date failed on
    NTFS filesystems and re-created archives more often than necessary.
    Bugzilla Report 59562
 
  * AntClassLoader didn't delegate to the parent loader for classes in
    the "jdk" package or one of its subpackages. This hierarchy has
    been introduced with Java 7.
    Bugzilla Report 59556
 
  * The ant wrapper script used on Unix-like operating systems only
    worked on OSes where sed is GNU sed.
    Bugzilla Report 59898
 
  * <touch>'s default pattern as well as the default patterns used by
    the <date> (resource) selectors depended on the JDK being used - or
    rather the locale provider being used and the default locale
    provider changed with Java 9.
    They are now fixed and the documentation has been updated to
    reflect the real patterns used rather than a non-formal description
    of the expected format.
    Bugzilla Report 59909
 
  * Clarified the documentation of <get>'s retries attribute.
    Bugzilla Report 59930
 
  * The ant wrapper script failed if backticks were passed on the
    command line.
    Bugzilla Report 60150, 59445
 
  * The report generated by <junitreport> could contain duplicate
    characters in stack traces.
    Bugzilla Report 58661
 
 Other changes:
 --------------
 
  * <junit> now initializes the cause of the AssertionFailedError when
    converting from AssertionError.
    Bugzilla Report 58982
 
  * <scp> now supports compression via the optional compressed attribute.
    Bugzilla Report 47552
 
  * <junit> now supports JDK9 modules
    Github Pull Request #18
 
  * a new implementation "builtin" has been added to <native2ascii> and
    is the default when running on JDK9+ since the tool itself has been
    removed from the JDK.
    Bugzilla Report 59855
 
  * added a new <native2asciifilter> filter that can perform non-ASCII
    to Unicode-escape conversions.
 
  * <rmic> defaults to the "forking" compiler on JDK 9+ as the
    implementation class of rmic is not exported by its containing
    module and thus not accessible to Ant without applying -XaddExports
    magic.
    Bugzilla Report 59860
 
  * a new implementation "forking" has been added to <javah> and is
    used as default when running on JDK9.
 
  * support for javac's -h switch has been added with the
    nativeheaderdir attribute.
    Bugzilla Report 59905
 
  * it is now possible to set features of the TraX factory used by <xslt>
    and <junitreport>.
 
  * it is now possible to use references to Ant types and classloaders
    built around Ant <path>s as values for TraX factory attributes.
 
  * <junitreport> now enables the feature
    http://www.oracle.com/xml/jaxp/properties/enableExtensionFunctions
    when run on Java 9 so the redirect extension function can be used
    if when a SecurityManager is active.
    Bugzilla Report 60060
 
  * support for javac's --release switch introduced with Java9 has been
    added.
    Bugzilla Report 60172
 
 Changes from Ant 1.9.6 TO Ant 1.9.7
 ===================================
 
 Changes that could break older environments:
 -------------------------------------------
 
  * <exec> and <apply> used to ignore the dir attribute if it was the
    same as the current working directory.  They now no longer do,
    which changes the behavior for vmlauncher="false" which would have
    used the project's basedir rather than the current working
    directory in that case.
    Bugzilla Report 58555
 
 Fixed bugs:
 -----------
 
  * ZipOutputStream could cause an ArrayIndexOutOfBoundsException when
    adding entries with comments.  This never happens when using Ant as
    a build tool but may affect users using Ant's zip package as a
    library.
 
  * <gunzip> and <bunzip2> didn't work for non-filesystem resources.
 
  * <jar> ignored the zip64Mode attribute when creating manifest-only
    jars.  This resulted in jar files that couldn't be read by Java5.
    Bugzilla Report 58428
 
  * <untar> will now detect GNU tar longname/link records even if they
    don't use the names used by GNU tar itself.  star is known to
    create archives of that kind.
    https://issues.apache.org/jira/browse/COMPRESS-324
 
  * <script> could fail to find javax.script on JDK9 with Jigsaw.
    Bugzilla Report 58271
 
  * <import> sometimes failed to normalize file names which could lead
    to files getting imported twice which in turn could lead to targets
    getting executed twice.
    Bugzilla Report 58886
 
  * TarInputStream now properly extraxt directory entries with a
    non-zero size.
 
  * <union> would drop file resources pointing to the same file but
    using different names.
    Bugzilla Report 57965
 
  * <replace>'s result was undefined when using the replacefilterfile
    attribute and some keys inside the properties files have been
    substrings of other keys. Keys are now sorted by descending size.
    Bugzilla Report 58997
 
  * Ant fails to run when arguments contain double-quote character.
    Bugzilla Report 58898
 
  * Ant fails to run if ANT_HOME contains a double-quote character.
    Bugzilla Report 58874
 
  * Definer's way to parse URLs from classloader breaks with
    recent Java 9 builds (b108).
    Bugzilla Report 59130
 
  * <ant> and <antcall> now preserve the ext status set by an <exit>
    task.
    Bugzilla Report 59228
 
 Other changes:
 --------------
 
  * <scp> now supports (filesystem-only) resource collections in
    addition to filesets.
    Bugzilla Report 50769
 
  * The <http> condition has a new optional attribute followRedirects.
    Bugzilla Report 58840
 
  * <java> now supports Java9 modules.
    https://github.com/apache/ant/pull/15
 
  * <javac> now supports Java9 modules.
    https://github.com/apache/ant/pull/16
 
  * <sshexec> and <scp> have two new attributes serverAliveInterval and
    serverAliveCountMax that can be used to keep a intermediaries from
    closing idle connections.
    Bugzilla Report 59162
 
 Changes from Ant 1.9.5 TO Ant 1.9.6
 ===================================
 
 Changes that could break older environments:
 -------------------------------------------
 
 Fixed bugs:
 -----------
 
  * ArrayIndexOutOfBoundsException when ZIP extra fields are read and
    the entry contains an UnparseableExtraField.
    https://issues.apache.org/jira/browse/COMPRESS-317
 
 Other changes:
 --------------
 
 * Hidden <javaconstant> resource is published now. It reads the
   value of a specified java constant.
 
 
 Changes from Ant 1.9.4 TO Ant 1.9.5
 ===================================
 
 Changes that could break older environments:
 -------------------------------------------
 
  * The ReplaceTokens filter can now use token-separators longer than
    one character.  This means it can be used to replace mustache-style
    {{patterns}} and similar templates.  This is going to break code
    that invokes the setters on ReplaceTokens via the Java API as their
    parameters have been changed from char to String.  It may also
    break build files that specified multi character tokens and relied
    on Ant silently ignoring all but the first character.
    Bugzilla Report 56584
 
  * The changes that added <get>'s support for gzip encoding
    automatically uncompressed content that would not have been touched
    before - like when downloading .tar.gz files.  A new flag has been
    added to control the behavior and its default will make <get> work
    as it did in 1.9.3.  I.e. if you want it to work like 1.9.4
    you have to explicitly set tryGzipEncoding to true.
    Bugzilla Report 57048
 
 Fixed bugs:
 -----------
 
  * TarArchiveInputStream failed to read archives with empty gid/uid
    fields.
    Bugzilla Report 56641
 
  * TarArchiveInputStream could throw IOException when reading PAX
    headers from a "slow" InputStream.
 
  * XMLJunitResultFormatter could throw NullPointerException if Java
    cannot determine the local hostname.
    Bugzilla Report 56593
 
  * URLResource#getLastModified tried to access the connection to the
    URL without making sure it was established, potentially leading to
    a NullPointerException when using FTP.
    Bugzilla Report 56873
 
  * Long-Name and -link or PAX-header entries in TAR archives
    always had the current time as last modfication time, creating
    archives that are different at the byte level each time an
    archive was built.
 
  * runant.py should now work as well when the path of the Java executable
    contains spaces.
    github pull request #1
 
  * <junitreport> now supports nested <classpath> and <factory> elements.
    Bugzilla Report 47002
 
  * complete-ant-cmd.pl now also knows about the -file option.
    Bugzilla Report 57371
 
  * the br-replace template inside the XSLT stylesheets used by
    <junitreport> could cause stack overflows or out-of-memory errors
    when applied to big outputs.
    Bugzilla Report 57341
 
  * removed spurious warning about unclosed ZipFiles when reading the
    archive failed.
    Port of https://issues.apache.org/jira/browse/COMPRESS-297
 
  * FileUtils.rename which is used by several tasks can throw a
    NullPointerException if the "normal" renameTo operation fails and
    an exception occurs while rename falls back to copying and deleting
    the file.
    Bugzilla Report 57533
 
  * complete-ant-cmd.pl would incorrectly suggest words from the build
    file description.
    Bugzilla Report 51931
 
  * complete-ant-cmd.pl now also completes tasks without a description.
    Bugzilla Report 57542
 
  * LocalPropertyStack could run into ConcurrentModificationException
    when tasks spawned new child threads that accessed the properties.
    Bugzilla Report 55074
 
  * TarEntry's constructor with a File and a String arg didn't
    normalize the name.
 
  * Between 1.8.4 and 1.9.0 TarInputStream started to parse file
    names using the platform's default encoding rather than as ASCII.
    This has been a breaking change that has never been marked as such
    (in fact it went unnoticed).  In order to allow <untar> and
    <tarfileset> to work on platforms who's encoding doesn't match the
    encoding of file names inside the archive, both now support
    encoding attributes.
    The attribute has also been added to <tar> for symmetry.
    Bugzilla Report 57822
 
 Other changes:
 --------------
 
  * it is now possible to provide proxy configuration to signjar
    when using the timestamped authority.
    Bugzilla Report 56678
 
  * complete-ant-cmd.pl now also analyzes the ANT_ARGS environment
    variable.
    Bugzilla Report 57371
 
  * ported some of the write-optimization of Commons Compress 1.10 to
    the ZIP package
 
  * adapted unit tests to Java9 and added "javac1.9" as valid option
    for javac's compiler attribute.
 
  * performance improvements for <intersect>
    Bugzilla Report 57588
 
  * MailLogger can now add CC and BCC addresses.
    Bugzilla Report 57789.
 
  * <scp>'s buffer size has been increased from 1k to 100k to match
    <ftp> and <get>.
    github pull requests #8 and #9
 
  * The tar package can now deal with group and user ids bigger than
    0x80000000.
    https://issues.apache.org/jira/browse/COMPRESS-314
    https://issues.apache.org/jira/browse/COMPRESS-315
 
  * <scp> has new attributes fileMode and dirMode that control the
    permissions on the remote side when sending data via SSH.
    Bugzilla Report 43271.
 
  * New <allbutlast> and <allbutfirst> resource collections can be used
    to select all but a given subset of a resource collection.
    Bugzilla Report 57834.
 
 Changes from Ant 1.9.3 TO Ant 1.9.4
 ===================================
 
 Changes that could break older environments:
 -------------------------------------------
 
  * the prefixValues attribute of <property> didn't work as expected
    when set to false (the default).
    It is quite likely existing build files relied on the wrong
    behavior and expect Ant to resolve the value side against the
    properties defined in the property file itself - these build files
    must now explicitly set the prefixValues attribute to true.
    Bugzilla Report 54769
 
  * when matching an entry of a zip/tarfileset against a pattern a
    leading slash will be stripped from the entry name.  Most archives
    don't contain paths with leading slashes anyway.
    This may cause include/exclude patterns that start with a / to stop
    matching anything.  Such patterns only used to work by accident and
    only on platforms with multiple file system roots.
    Bugzilla Report 53949
 
  * DirectoryScanner and thus fileset/dirset will now silently drop all
    filesystem objects that are neither files nor directories according
    to java.io.File.  This prevents Ant from reading named pipes which
    might lead to blocking or other undefined behavior.
    Bugzilla Report 56149
 
  * BuildFileTest and BaseSelectorTest have both been deprecated in
    favour of BuildFileRule and BaseSelectorRule respectively, and the
    tests that previously extended these base tests have been converted to
    JUnit 4 tests using the new "rule"s. Any external test that sub-classed
    a test in the Ant workspace, rather than BuildFileTest, will need
    changed to either use JUnit4's annotations, or be modified to
    extend BuildFileTest directly. This will not affect any tests that are
    being executed by Ant's junit or batchtest tasks that are not specifically
    testing Ant's code.
 
 Fixed bugs:
 -----------
 
  * <import>/<include> failed when the importing file was loaded from an
    URI or a jar and it imported a file from the local file system via
    an absolute path.
    Bugzilla Report 50953
 
  * <import> could import the same resource twice when imported via
    different resource types.
    Bugzilla Report 55097
 
  * several calls to File#mkdirs could fall victim to a race condition
    where another thread already created the same directory.
    Bugzilla Report 55290
 
  * <manifestclasspath> created '/' rather than './' for the parent
    directory of the given jarfile.
    Bugzilla Report 55049
 
  * <concat>'s fixlastline="true" didn't work when using certain filter
    readers.
    Bugzilla Report 54672
 
  * several places where resources are read from jars will now
    explicitly disable caching to avoid problems with reloading jars.
    Bugzilla Report 54473
 
  * AntClassloader will now ignore files that are part of the classpath
    but not zip files when scanning for resources.  It used to throw an
    exception.
    Bugzilla Report 53964
 
  * <javadoc> caused a NullPointerException when no destdir was set.
    Bugzilla Report 55949
 
  * <jar filesetmanifest="mergewithoutmain"> would still include the
    Main section of the fileset manifests if there was no nested
    manifest or manifest attribute.
    Bugzilla Report 54171
 
  * reading of compiler args has become more defensive
    Bugzilla Report 53754
 
  * <copy> without force="true" would not only fail to overwrite a
    read-only file as expected but also remove the existing file.
    Bugzilla Report 53095
 
  * <delete removeNotFollowedSymlinks="true"> would remove symbolic
    links to not-included files.  It will still delete symlinks to
    directories that would have been followed even if they are not
    explicitly included.  exclude-Patterns can still be used to
    preserve symbolic links.
    Bugzilla Report 53959
 
  * Sometimes copy-operations using NIO FileChannels fail.  Ant will
    now try to use a Stream based copy operation as fallback when the
    Channel based copy fails.
    Bugzilla Reports 53102 and 54397
 
  * Javadoc.postProcessGeneratedJavadocs() fails for Classes that
    extend Javadoc
    Bugzilla Report 56047
 
  * TarInputStream will now read archives created by tar
    implementations that encode big numbers by not adding a trailing
    NUL.
 
  * the isExists() method of URLResource returned false positives for
    HTTP and FTP URLs.
 
 Other changes:
 --------------
 
  * initial support for Java 1.9
 
  * <sshexec> can optionally pass System.in to the remote process
    Bugzilla Report 55393
 
  * <sshexec> now supports capturing error output of the executed
    process and setting a property from the return code.
    Bugzilla Report 48478
 
  * <javadoc> now has an option to fail if javadoc issues warnings.
    Bugzilla Report 55015
 
  * <sql> has a new outputencoding attribute.
    Bugzilla Report 39541
 
  * changes to JUnitTestRunner and PlainJUnitResultFormatter to make
    OutOfMemoryErrors less likely.
    Bugzilla Report 45536
 
  * changes to DOMElementWriter to make OutOfMemoryErrors less likely.
    Bugzilla Report 54147
 
  * <redirector> has a new attribute binaryOutput that prevents Ant
    from splitting the output into lines.  This prevents binary output
    from being corrupted but may lead to error and normal output being
    mixed up.
    Bugzilla Report 55667
    Bugzilla Report 56156
 
  * the nested <message> elements of <mail> now have an optional
    inputEncoding attribute that can be used to specify the encoding of
    files read that don't use the platform's default encoding.
    Bugzilla Report 56258
 
  * The <get> task now explicitly accepts and supports the gzip content encoding.
    Bugzilla Report 49453
 
  * A new resourcecollection type <multirootfileset> acts like a union
    of <fileset>s and <dirset>s that share the same configuration but
    have different base directories.
    Bugzilla Report 48621
 
  * <get> has a quiet attribute that makes the task log errors only
    when enabled.
    GitHub Pull Request #1
 
 * <junit> has now a threads attribute allowing to run the tests in several threads.
   Bugzilla Report 55925
 
 * addition of a new ProcessUtil class providing the process id of the current process
 
 * changes to allow to run the JUnit testcases of Ant in parallel,
   by making them use unique temporary directories
 
 Changes from Ant 1.9.2 TO Ant 1.9.3
 ===================================
 
 Fixed bugs:
 -----------
 
  * <parallel> swallowed the status code of nested <fail> tasks.
    Bugzilla Report 55539.
 
  * a race condition could make <fixcrlf> tasks of parallel builds to
    interfere with each other.
    Bugzilla Report 54393.
 
  * <mail>'s mailport still didn't work properly when using smtps.
    Bugzilla Report 49267.
 
  * using attributes belonging to the if and unless namespaces
    made macrodef fail.
    Bugzilla Report 55885.
 
  * Ant 1.8 exec task changes have slowed exec to a crawl
    Bugzilla Report 54128.
 
  * Apt is not available under JDK 1.8
    Bugzilla Report 55922.
 
 
 Other changes:
 --------------
 
  * Documentation fix for if/unless attributes.  PR 55359.
 
  * tar entries with long link names are now handled the same way as
    entries with long names.
 
  * Addition of 'skipNonTests' attribute to <junit> and <batchtest>
    tasks to allow the tasks to skip classes that don't contain tests.
 
  * <filterset> now supports a nested <propertyset> to specify filters.
    Bugzilla Report 55794.
 
  * <xslt>'s params can now be typed.
    Bugzilla Report 21525.
 
  * build of Mac OS X pkg installer
    Bugzilla Report 55899.
 
 Changes from Ant 1.9.1 TO Ant 1.9.2
 ===================================
 
 Fixed bugs:
 -----------
 
  * Parsing of zip64 extra fields has become more lenient in order to
    be able to read archives created by DotNetZip and maybe other
    archivers as well.
 
  * TarInputStream should now properly read GNU longlink entries' names.
    Bugzilla Report 55040.
 
  * <java> and <exec> used to be too restrictive when evaluating
    whether a given set of options is compatible with spawning the new
    process.
    Bugzilla Report 55112.
 
 Other changes:
 --------------
 
  * <javadoc> will now post-process the generated in order to mitigate
    the frame injection attack possible in javadocs generated by Oracle
    JDKs prior to Java7 Update 25.  The vulnerability is known as
    CVE-2013-1571.
    There is an option to turn off the post-processing but it is only
    recommended you do so if all your builds use a JDK that's not
    vulnerable.
    Bugzilla Report 55132.
 
 Changes from Ant 1.9.0 TO Ant 1.9.1
 ===================================
 
 Changes that could break older environments:
 -------------------------------------------
 
  * Users who have their own ProjectHelper implementation will need to change it because the import and include tasks
    will now default the targetPrefix to ProjectHelper.USE_PROJECT_NAME_AS_TARGET_PREFIX.
    Users using the default ProjectHelper2 with ant need not worry about this change done to fix Bugzilla Report 54940.
 
 
 Fixed bugs:
 -----------
 
  * Corrected XSLTC error in <junitreport>.
    Bugzilla Report 54641.
 
  * Provide more control over Zip64 extensions created by <zip> and
    related tasks.  In particular no Zip64 extensions will be used at
    all by the <jar> task family by default - this is required for jars
    to be readably by Java5.
    Bugzilla Report 54762.
 
  * Fixed loading of external dependencies in JUnit task.
    Bugzilla Report 54835.
 
  * Target rewriting for nested "include" only works when "as" is specified.
    See also "Changes that could break older environments"
    Bugzilla Report 54940.
 
 
 Other changes:
 --------------
 
  * strict attribute added to <signjar>.
    Bugzilla Report 54889.
 
  * simplifying Execute.getEnvironmentVariables since we are only running on Java 1.5 or higher now
 
  * Added conditional attributes.
    Bugzilla Report 43362
 
  * Recommending to upgrade jsch to 0.1.50, particularly if you are using Java 1.7.
    jsch is the library behind the sshexec and scp Ant tasks.
    Versions of jsch older than 0.1.50 fail randomly under Java 1.7 with an error message "verify: false"
 
 Changes from Ant 1.8.4 TO Ant 1.9.0
 ===================================
 
 Changes that could break older environments:
 -------------------------------------------
 
  * Ant now requires at least Java 1.5 to compile and to run
 
  * FixCRLF used to treat the EOL value ASIS to convert to the system property
    line.separator. Specified was that ASIS would leave the EOL characters alone,
    the task now really leaves the EOL characters alone. This also implies that
    EOL ASIS will not insert a newline even if fixlast is set to true.
    Bugzilla report 53036
 
  * The CommandLauncher hierarchy that used to be a set of inner
    classes of Execute has been extracted to the
    org.apache.tools.ant.taskdefs.launcher package.
 
  * Any FileResource whose represented File has a parent also has a basedir.
 
  * Removing the Perforce Ant tasks replaced by tasks supplied by Perforce Inc.
 
  * Setting the default encoding of StringResource to UTF-8 instead of null
 
  * Upgrade JUnit 4 to JUnit 4.11
 
 Fixed bugs:
 -----------
 
  * Made VectorSet faster.
    Bugzilla Report 53622.
 
  * Incorrect URLs in Ant child POMs.
    Bugzilla Report 53617.
 
  * Subclasses of JUnitTask did not correctly find junit.jar.
    Bugzilla Report 53571.
 
  * External XML catalog resolver failed to use project basedir when given an
    unmentioned relative path like the internal resolver does.
    Bugzilla Report 52754.
 
  * Fixed some potential stream leaks.
    Bugzilla Reports 52738, 52740, 52742, 52743.
 
  * Updated documentation to fix spelling errors / broken links.
    Bugzilla Reports 53215, 53291, 53202
    
  * Unable to override system properties. It was not possible not to override
    system properties from the command line (or from a property file).
    Bugzilla Report 51792
    
  * <javac> by default fails when run on JDK 8.
    Bugzilla Report 53347.
 
  * ExtensionPoint doesn't work with nested import/include
    Bugzilla Report 53405.
 
  * <packagemapper> failed to strip the non-matched parts with
    handledirsep="true".
    Bugzilla Report 53399.
 
  * <expandproperties> filter caused a NullPointerException when input
    was empty.
    Bugzilla Report 53626.
 
  * <get> now supports HTTP redirects using status code 307.
    Bugzilla Report 54374.
 
  * ssh tasks prompt for kerberos username/password under Java 7
    Bugzilla Report 53437.
 
  * Zip task on <mappedresources> that excludes certain files by way of the mapper resulted in a NullPointerException
    Bugzilla Report 54026
 
  * The ant launcher script should properly detect JAVA_HOME on
    MacOS X 10.7
    Bugzilla Report 52632
 
  * Depend task does not handle invokeDynamic constant pool entries - java.lang.ClassFormatError: Invalid Constant Pool entry Type 18
    Bugzilla Report 54090
 
  * Base64Converter not properly handling bytes with MSB set (not masking byte to int conversion)
    Bugzilla Report 54460
 
  * The size resource comparator would return wrong results if file
    sizes differed by more than 2 GB.
    Bugzilla Report 54623
 
  * Unable to encode properly into UTF-8 when the system property file.encoding is
    set to ANSI_X3.4-1968.
    Bugzilla Report 54606
 
  * JUnit4 tests marked @Ignore do not appear in XML output
    Bugzilla Report 43969
 
 Other changes:
 --------------
 
  * merged the ZIP package from Commons Compress, it can now read
    archives using Zip64 extensions (files and archives bigger that 4GB
    and with more that 64k entries).
 
  * a new task <commandlauncher> can be used to configure the
    CommandLauncher used by Ant when forking external programs or new
    Java VMs.
    Bugzilla Report 52706.
 
  * merged the TAR package from Commons Compress, it can now read
    archives using POSIX extension headers and STAR extensions.
 
  * merged the BZIP2 package from Commons Compress, it can now
    optionally read files that contain multiple streams properly.
 
  * <bunzip2> will now properly expand files created by pbzip2 and
    similar tools that create files with multiple bzip2 streams.
 
  * <tar> now supports a new "posix" option for longfile-mode which
    will make it create PAX extension headers for long file names.  PAX
    extension headers are supported by all modern implementations of
    tar including GNU tar.
    This option should now be used in preference to "warn" or "gnu" as
    it is more portable.  For backwards compatibility reasons "warn"
    will still create "gnu" extensions rather than "posix" extensions.
 
  * The ProjectHelper class now exposes a method to be used by third party
    implementations to properly resolve the binding between target extensions
    and extension points.
    Bugzilla Report 53549.
 
  * Make extension point bindable to imported prefixed targets
    Bugzilla Report 53550.
 
  * Add the possibility to register a custom command line argument processor.
    See org.apache.tools.ant.ArgumentProcessor and manual/argumentprocessor.html
 
  * add the possibility to suppress stdout in the sshexec task.
    Bugzilla Report 50270.
 
  * add an encoding attribute to the contains selector.
    This will be useful to use the contains selector if the encoding of the VM is different from the encoding
    of the files being selected.
 
  * support for GNU Classpath.
    Bugzilla report 54760.
 
 Changes from Ant 1.8.3 TO Ant 1.8.4
 ===================================
 
 Fixed bugs:
 -----------
 
  * Ported libbzip2's fallback sort algorithm to CBZip2OutputStream to
    speed up compression in certain edge cases.  Merge from Commons
    Compress.
 
    Using specially crafted inputs this can be used as a denial of
    service attack.
    See http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-2098
 
 Changes from Ant 1.8.2 TO Ant 1.8.3
 ===================================
 
 Changes that could break older environments:
 -------------------------------------------
 
  * The Enumeration returned by AntClassLoader#getResources used to
    return null in nextElement after hasNextElement would return false.
    It has been changed to throw a NoSuchElementException instead so
    that it now adheres to the contract of java.util.Enumeration.
    Bugzilla Report 51579.
 
 Fixed bugs:
 -----------
 
  * Removed buggy duplicate JAR list in RPM mode.
    Bugzilla Report 52556.
 
  * Launcher fixed to pass the right class loader parent.
    Bugzilla Report 48633.
 
  * <junitreport> mishandled ${line.separator}.
    Bugzilla Report 51049.
 
  * <junitreport> did not work in embedded environments on JDK 7.
    Nor did <xslt> when using Xalan redirects.
    Bugzilla Report 51668, 52382.
 
  * Encoding of unicode escape sequences by the property file task
    Bugzilla Report 50515.
 
  * The code that implicitly sets the -source switch if only -target
    has been specified in <javac> was broken for Java 5 and 6.
    Bugzilla Report 50578.
 
  * MailLogger ignore the Maillogger.starttls.enable property.
    Bugzilla Report 50668.
 
  * Delete task example does not work
    Bugzilla Report 50816.
 
  * <splash>'s proxy handling has been delegated to <setproxy>
    internally so the two tasks are consistent.  <splash>'s way of not
    setting a proxy caused problems with other Java libraries.
    Bugzilla Report 50888.
 
  * Include task breaks dependencies or extension-points for multiple
    files.
    Bugzilla Report 50866.
 
  * Read on System.in hangs for forked java task.
    Bugzilla Report 50960.
 
  * FileResource specified using basedir/name attributes was non-functional.
 
  * Resource collection implementation of mapped PropertySet returned
    unusable resources.
 
  * The hasmethod condition failed with a NullPointerException when
    ignoresystemclasses is true and Ant tried to load a "restricted
    class" - i.e. a class that the Java VM will only accept when loaded
    via the bootclassloader (a java.* class).
    It will now fail with a more useful error message.
    Bugzilla Report 51035.
 
  * Exec task may mix the stderr and stdout output while logging it
    Bugzilla Report 50507.
 
  * Missing space between "finished" and timestamp in task/target 
    finish message from ProfileLogger.
    Bugzilla Report 51109.
 
  * Redirecting the output of a java, exec or apply task could print in the
    error output stream some "Pipe broken" errors.
    Bugzilla Report 48789.
 
  * ZipFile failed to clean up some resources which could lead to
    OutOfMemoryException while unzipping large archives.
    A similar problem in ZipArchiveOutputStream has been fixed as well.
    Bugzilla Report 42696.
 
  * quiet attribute added to the copy and move tasks, to be used together
    with failonerror=false, so warnings won't get logged 
    Bugzilla Report 48789.
 
  * System.in was closed and not readable anymore by the DefaultInputHandler 
    when Ant is used via its Java API.
    Bugzilla Report 51161
 
  * <sync> only supported a single non-fileset resource collection even
    though the manual said it could be multiple.
 
  * <sync> didn't work properly when working on resource collections.
    Bugzilla Report 51462.
 
  * <augment> cause a NullPointerException if it was used in a target
    that was invoked by multiple targets from the command line.
    Bugzilla Report 50894.
 
  * The ZipFile class could read past the start of the file if the
    given file is not a ZIP archive and it is smaller than the size of
    a ZIP "end of central directory record".
 
  * <javac> would create the empty package-info.class file in the wrong
    directory if no destdir was specified.  Note it may still pick the
    wrong directory if you specify more than one source directory but
    no destDir.  It is highly recommended that you always explicitly
    specify the destDir attribute.
    Bugzilla Report 51947.
 
  * packagemapper now honors the handleDirSep attribute.
    Bugzilla Report 51086.
 
  * the attributes of macrodef tasks had their values run through
    property expansion twice. Still true by default, but can be disabled.
    Bugzilla Report 42046.
 
  * jvc doesn't like it if source file names in argument files are
    quoted.
    Bugzilla Report 31667.
 
  * ZipFile didn't work properly for archives using unicode extra
    fields rather than UTF-8 filenames and the EFS-Flag.
 
  * Access to DirectoryScanner's default excludes wasn't synchronized.
    Bugzilla Report 52188.
 
  * When a Project instance was created by a custom tasks its
    createTask method didn't work.
    Bugzilla Report 50788.
 
 Other changes:
 --------------
 
  * -f/-file/-buildfile accepts a directory containing build.xml.
 
  * The <javacc>, <jjtree> and <jjdoc> now support a new maxmemory
    attribute.
    Bugzilla Report 50513.
 
  * the documented inputstring attribute of sshexec has been
    implemented and the actually existing attribute inputproperty
    documented.
    Bugzilla Report 50576.
 
  * The concat task now permits the name of its exposed resource
    by means of its 'resourcename' attribute.
 
  * The expandproperties filter now accepts a nested propertyset
    which, if specified, provides the properties for expansion.
    Bugzilla Report 51044.
 
  * <junit filtertrace="true"/> will no longer filter out the very
    first line of the stacktrace containing the original exception
    message even if it matches one of the filter expressions.
 
  * Upgraded to Apache AntUnit 1.2
 
  * Provide read access to Mkdir.dir.  Bugzilla Report 51684.
 
  * <delete> and <move> have a new attribute performGCOnFailedDelete
    that may - when set to true - help resolve some problems with
    deleting empty directories on NFS shares.
    Bugzilla Report 45786.
 
  * <loadfile> and <loadresource> used to log at level INFO to signal a
    property hasn't been set when the resource was empty even if the
    quiet attribute was set to true.  They will now use VERBOSE
    instead.
    Bugzilla Report 52107.
 
  * <javac> has a new attribute createMissingPackageInfoClass that can
    be set to false to prevent Ant from creating empty dummy classes
    used for up-to-date-ness checks.
    Bugzilla Report 52096.
 
  * URLResources#isExists has become less noisy.
    Bugzilla Report 51829.
 
  * The <retry> task has a new optional attribute retryDelay that can
    be used to make the task sleep between retry attempts.
    Bugzilla Report 52076.
 
  * <signjar> has new attributes that control the signature and digest
    algorithms.
    Bugzilla Report 52344.
 
  * Initial support for Java 8.
 
  * <sshexec> can optionally create a pseudo terminal (like ssh -t)
    Bugzilla Report 52554.
 
 Changes from Ant 1.8.1 TO Ant 1.8.2
 ===================================
 
 Changes that could break older environments:
diff --git a/src/main/org/apache/tools/ant/types/Path.java b/src/main/org/apache/tools/ant/types/Path.java
index c4f244c74..16270e360 100644
--- a/src/main/org/apache/tools/ant/types/Path.java
+++ b/src/main/org/apache/tools/ant/types/Path.java
@@ -1,775 +1,776 @@
 /*
  *  Licensed to the Apache Software Foundation (ASF) under one or more
  *  contributor license agreements.  See the NOTICE file distributed with
  *  this work for additional information regarding copyright ownership.
  *  The ASF licenses this file to You under the Apache License, Version 2.0
  *  (the "License"); you may not use this file except in compliance with
  *  the License.  You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0
  *
  *  Unless required by applicable law or agreed to in writing, software
  *  distributed under the License is distributed on an "AS IS" BASIS,
  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  *
  */
 
 package org.apache.tools.ant.types;
 
 import java.io.File;
 import java.lang.reflect.Method;
 import java.util.Collections;
 import java.util.Iterator;
 import java.util.Locale;
 import java.util.Stack;
 import java.util.Vector;
 
 import org.apache.tools.ant.BuildException;
 import org.apache.tools.ant.MagicNames;
 import org.apache.tools.ant.PathTokenizer;
 import org.apache.tools.ant.Project;
 import org.apache.tools.ant.types.resources.FileResourceIterator;
 import org.apache.tools.ant.types.resources.Union;
 import org.apache.tools.ant.util.FileUtils;
 import org.apache.tools.ant.util.JavaEnvUtils;
 
 /**
  * This object represents a path as used by CLASSPATH or PATH
  * environment variable. A path might also be described as a collection
  * of unique filesystem resources.
  * <p>
  * <code>
  * &lt;sometask&gt;<br>
  * &nbsp;&nbsp;&lt;somepath&gt;<br>
  * &nbsp;&nbsp;&nbsp;&nbsp;&lt;pathelement location="/path/to/file.jar" /&gt;<br>
  * &nbsp;&nbsp;&nbsp;&nbsp;&lt;pathelement
  *  path="/path/to/file2.jar:/path/to/class2;/path/to/class3" /&gt;
  * <br>
  * &nbsp;&nbsp;&nbsp;&nbsp;&lt;pathelement location="/path/to/file3.jar" /&gt;<br>
  * &nbsp;&nbsp;&nbsp;&nbsp;&lt;pathelement location="/path/to/file4.jar" /&gt;<br>
  * &nbsp;&nbsp;&lt;/somepath&gt;<br>
  * &lt;/sometask&gt;<br>
  * </code>
  * <p>
  * The object implementation <code>sometask</code> must provide a method called
  * <code>createSomepath</code> which returns an instance of <code>Path</code>.
  * Nested path definitions are handled by the Path object and must be labeled
  * <code>pathelement</code>.<p>
  *
  * The path element takes a parameter <code>path</code> which will be parsed
  * and split into single elements. It will usually be used
  * to define a path from an environment variable.
  */
 
 public class Path extends DataType implements Cloneable, ResourceCollection {
     // CheckStyle:VisibilityModifier OFF - bc
 
+    // non-final as some IDE integrations (at least Eclipse) want to override it
     /** The system classpath as a Path object */
-    public static final Path systemClasspath =
+    public static Path systemClasspath = //NOSONAR
         new Path(null, System.getProperty("java.class.path"));
 
 
     /**
      * The system bootclasspath as a Path object.
      *
      * @since Ant 1.6.2
      */
     public static final Path systemBootClasspath =
         new Path(null, System.getProperty("sun.boot.class.path"));
 
     // CheckStyle:VisibilityModifier OFF - bc
 
     /**
      * Helper class, holds the nested <code>&lt;pathelement&gt;</code> values.
      */
     public class PathElement implements ResourceCollection {
         private String[] parts;
 
         /**
          * Set the location.
          *
          * @param loc a <code>File</code> value
          */
         public void setLocation(File loc) {
             parts = new String[] {translateFile(loc.getAbsolutePath())};
         }
 
         /**
          * Set the path.
          *
          * @param path a <code>String</code> value
          */
         public void setPath(String path) {
             parts = Path.translatePath(getProject(), path);
         }
 
         /**
          * Return the converted pathelements.
          *
          * @return a <code>String[]</code> value
          */
         public String[] getParts() {
             return parts;
         }
 
         /**
          * Create an iterator.
          * @return an iterator.
          */
         public Iterator<Resource> iterator() {
             return new FileResourceIterator(getProject(), null, parts);
         }
 
         /**
          * Check if this resource is only for filesystems.
          * @return true.
          */
         public boolean isFilesystemOnly() {
             return true;
         }
 
         /**
          * Get the number of resources.
          * @return the number of parts.
          */
         public int size() {
             return parts == null ? 0 : parts.length;
         }
 
     }
 
     private Boolean preserveBC;
 
     private Union union = null;
     private boolean cache = false;
 
     /**
      * Invoked by IntrospectionHelper for <code>setXXX(Path p)</code>
      * attribute setters.
      * @param p the <code>Project</code> for this path.
      * @param path the <code>String</code> path definition.
      */
     public Path(Project p, String path) {
         this(p);
         createPathElement().setPath(path);
     }
 
     /**
      * Construct an empty <code>Path</code>.
      * @param project the <code>Project</code> for this path.
      */
     public Path(Project project) {
         setProject(project);
     }
 
     /**
      * Adds a element definition to the path.
      * @param location the location of the element to add (must not be
      * <code>null</code> nor empty.
      * @throws BuildException on error
      */
     public void setLocation(File location) throws BuildException {
         checkAttributesAllowed();
         createPathElement().setLocation(location);
     }
 
     /**
      * Parses a path definition and creates single PathElements.
      * @param path the <code>String</code> path definition.
      * @throws BuildException on error
      */
     public void setPath(String path) throws BuildException {
         checkAttributesAllowed();
         createPathElement().setPath(path);
     }
 
     /**
      * Makes this instance in effect a reference to another Path instance.
      *
      * <p>You must not set another attribute or nest elements inside
      * this element if you make it a reference.</p>
      * @param r the reference to another Path
      * @throws BuildException on error
      */
     public void setRefid(Reference r) throws BuildException {
         if (union != null) {
             throw tooManyAttributes();
         }
         super.setRefid(r);
     }
 
     /**
      * Creates the nested <code>&lt;pathelement&gt;</code> element.
      * @return the <code>PathElement</code> to be configured
      * @throws BuildException on error
      */
     public PathElement createPathElement() throws BuildException {
         if (isReference()) {
             throw noChildrenAllowed();
         }
         PathElement pe = new PathElement();
         add(pe);
         return pe;
     }
 
     /**
      * Adds a nested <code>&lt;fileset&gt;</code> element.
      * @param fs a <code>FileSet</code> to be added to the path
      * @throws BuildException on error
      */
     public void addFileset(FileSet fs) throws BuildException {
         if (fs.getProject() == null) {
             fs.setProject(getProject());
         }
         add(fs);
     }
 
     /**
      * Adds a nested <code>&lt;filelist&gt;</code> element.
      * @param fl a <code>FileList</code> to be added to the path
      * @throws BuildException on error
      */
     public void addFilelist(FileList fl) throws BuildException {
         if (fl.getProject() == null) {
             fl.setProject(getProject());
         }
         add(fl);
     }
 
     /**
      * Adds a nested <code>&lt;dirset&gt;</code> element.
      * @param dset a <code>DirSet</code> to be added to the path
      * @throws BuildException on error
      */
     public void addDirset(DirSet dset) throws BuildException {
         if (dset.getProject() == null) {
             dset.setProject(getProject());
         }
         add(dset);
     }
 
     /**
      * Adds a nested path
      * @param path a <code>Path</code> to be added to the path
      * @throws BuildException on error
      * @since Ant 1.6
      */
     public void add(Path path) throws BuildException {
         if (path == this) {
             throw circularReference();
         }
         if (path.getProject() == null) {
             path.setProject(getProject());
         }
         add((ResourceCollection) path);
     }
 
     /**
      * Add a nested <code>ResourceCollection</code>.
      * @param c the ResourceCollection to add.
      * @since Ant 1.7
      */
     public void add(ResourceCollection c) {
         checkChildrenAllowed();
         if (c == null) {
             return;
         }
         if (union == null) {
             union = new Union();
             union.setProject(getProject());
             union.setCache(cache);
         }
         union.add(c);
         setChecked(false);
     }
 
     /**
      * Creates a nested <code>&lt;path&gt;</code> element.
      * @return a <code>Path</code> to be configured
      * @throws BuildException on error
      */
     public Path createPath() throws BuildException {
         Path p = new Path(getProject());
         add(p);
         return p;
     }
 
     /**
      * Append the contents of the other Path instance to this.
      * @param other a <code>Path</code> to be added to the path
      */
     public void append(Path other) {
         if (other == null) {
             return;
         }
         add(other);
     }
 
     /**
      * Adds the components on the given path which exist to this
      * Path. Components that don't exist aren't added.
      *
      * @param source - source path whose components are examined for existence
      */
      public void addExisting(Path source) {
          addExisting(source, false);
      }
 
     /**
      * Same as addExisting, but support classpath behavior if tryUserDir
      * is true. Classpaths are relative to user dir, not the project base.
      * That used to break jspc test
      *
      * @param source the source path
      * @param tryUserDir  if true try the user directory if the file is not present
      */
     public void addExisting(Path source, boolean tryUserDir) {
         String[] list = source.list();
         File userDir = (tryUserDir) ? new File(System.getProperty("user.dir"))
                 : null;
 
         for (int i = 0; i < list.length; i++) {
             File f = resolveFile(getProject(), list[i]);
 
             // probably not the best choice, but it solves the problem of
             // relative paths in CLASSPATH
             if (tryUserDir && !f.exists()) {
                 f = new File(userDir, list[i]);
             }
             if (f.exists()) {
                 setLocation(f);
             } else if (f.getParentFile() != null && f.getParentFile().exists()
                        && containsWildcards(f.getName())) {
                 setLocation(f);
                 log("adding " + f + " which contains wildcards and may not"
                     + " do what you intend it to do depending on your OS or"
                     + " version of Java", Project.MSG_VERBOSE);
             } else {
                 log("dropping " + f + " from path as it doesn't exist",
                     Project.MSG_VERBOSE);
             }
         }
     }
 
     /**
      * Whether to cache the current path.
      * @since Ant 1.8.0
      */
     public void setCache(boolean b) {
         checkAttributesAllowed();
         cache = b;
         if (union != null) {
             union.setCache(b);
         }
     }
 
     /**
      * Returns all path elements defined by this and nested path objects.
      * @return list of path elements.
      */
     public String[] list() {
         if (isReference()) {
             return ((Path) getCheckedRef()).list();
         }
         return assertFilesystemOnly(union) == null
             ? new String[0] : union.list();
     }
 
     /**
      * Returns a textual representation of the path, which can be used as
      * CLASSPATH or PATH environment variable definition.
      * @return a textual representation of the path.
      */
     public String toString() {
         return isReference() ? getCheckedRef().toString()
             : union == null ? "" : union.toString();
     }
 
     /**
      * Splits a PATH (with : or ; as separators) into its parts.
      * @param project the project to use
      * @param source a <code>String</code> value
      * @return an array of strings, one for each path element
      */
     public static String[] translatePath(Project project, String source) {
         final Vector<String> result = new Vector<String>();
         if (source == null) {
             return new String[0];
         }
         PathTokenizer tok = new PathTokenizer(source);
         StringBuffer element = new StringBuffer();
         while (tok.hasMoreTokens()) {
             String pathElement = tok.nextToken();
             try {
                 element.append(resolveFile(project, pathElement).getPath());
             } catch (BuildException e) {
                 project.log("Dropping path element " + pathElement
                     + " as it is not valid relative to the project",
                     Project.MSG_VERBOSE);
             }
             for (int i = 0; i < element.length(); i++) {
                 translateFileSep(element, i);
             }
             result.addElement(element.toString());
             element = new StringBuffer();
         }
         return result.toArray(new String[result.size()]);
     }
 
     /**
      * Returns its argument with all file separator characters
      * replaced so that they match the local OS conventions.
      * @param source the path to convert
      * @return the converted path
      */
     public static String translateFile(String source) {
         if (source == null) {
           return "";
         }
         final StringBuffer result = new StringBuffer(source);
         for (int i = 0; i < result.length(); i++) {
             translateFileSep(result, i);
         }
         return result.toString();
     }
 
     /**
      * Translates occurrences at a position of / or \ to correct separator of the
      * current platform and returns whether it had to do a
      * replacement.
      * @param buffer a buffer containing a string
      * @param pos the position in the string buffer to convert
      * @return true if the character was a / or \
      */
     protected static boolean translateFileSep(StringBuffer buffer, int pos) {
         if (buffer.charAt(pos) == '/' || buffer.charAt(pos) == '\\') {
             buffer.setCharAt(pos, File.separatorChar);
             return true;
         }
         return false;
     }
 
     /**
      * Fulfill the ResourceCollection contract.
      * @return number of elements as int.
      */
     public synchronized int size() {
         if (isReference()) {
             return ((Path) getCheckedRef()).size();
         }
         dieOnCircularReference();
         return union == null ? 0 : assertFilesystemOnly(union).size();
     }
 
     /**
      * Clone this Path.
      * @return Path with shallowly cloned Resource children.
      */
     public Object clone() {
         try {
             Path result = (Path) super.clone();
             result.union = union == null ? union : (Union) union.clone();
             return result;
         } catch (CloneNotSupportedException e) {
             throw new BuildException(e);
         }
     }
 
     /**
      * Overrides the version of DataType to recurse on all DataType
      * child elements that may have been added.
      * @param stk the stack of data types to use (recursively).
      * @param p   the project to use to dereference the references.
      * @throws BuildException on error.
      */
     protected synchronized void dieOnCircularReference(Stack<Object> stk, Project p)
         throws BuildException {
         if (isChecked()) {
             return;
         }
         if (isReference()) {
             super.dieOnCircularReference(stk, p);
         } else {
             if (union != null) {
                 pushAndInvokeCircularReferenceCheck(union, stk, p);
             }
             setChecked(true);
         }
     }
 
     /**
      * Resolve a filename with Project's help - if we know one that is.
      */
     private static File resolveFile(Project project, String relativeName) {
         return FileUtils.getFileUtils().resolveFile(
             (project == null) ? null : project.getBaseDir(), relativeName);
     }
 
     /**
      * Concatenates the system class path in the order specified by
      * the ${build.sysclasspath} property - using &quot;last&quot; as
      * default value.
      * @return the concatenated path
      */
     public Path concatSystemClasspath() {
         return concatSystemClasspath("last");
     }
 
     /**
      * Concatenates the system class path in the order specified by
      * the ${build.sysclasspath} property - using the supplied value
      * if ${build.sysclasspath} has not been set.
      * @param defValue the order ("first", "last", "only")
      * @return the concatenated path
      */
     public Path concatSystemClasspath(String defValue) {
         return concatSpecialPath(defValue, Path.systemClasspath);
     }
 
     /**
      * Concatenates the system boot class path in the order specified
      * by the ${build.sysclasspath} property - using the supplied
      * value if ${build.sysclasspath} has not been set.
      * @param defValue the order ("first", "last", "only")
      * @return the concatenated path
      */
     public Path concatSystemBootClasspath(String defValue) {
         return concatSpecialPath(defValue, Path.systemBootClasspath);
     }
 
     /**
      * Concatenates a class path in the order specified by the
      * ${build.sysclasspath} property - using the supplied value if
      * ${build.sysclasspath} has not been set.
      */
     private Path concatSpecialPath(String defValue, Path p) {
         Path result = new Path(getProject());
 
         String order = defValue;
         String o = getProject() != null
             ? getProject().getProperty(MagicNames.BUILD_SYSCLASSPATH)
             : System.getProperty(MagicNames.BUILD_SYSCLASSPATH);
         if (o != null) {
             order = o;
         }
         if (order.equals("only")) {
             // only: the developer knows what (s)he is doing
             result.addExisting(p, true);
 
         } else if (order.equals("first")) {
             // first: developer could use a little help
             result.addExisting(p, true);
             result.addExisting(this);
 
         } else if (order.equals("ignore")) {
             // ignore: don't trust anyone
             result.addExisting(this);
 
         } else {
             // last: don't trust the developer
             if (!order.equals("last")) {
                 log("invalid value for " + MagicNames.BUILD_SYSCLASSPATH
                     + ": " + order,
                     Project.MSG_WARN);
             }
             result.addExisting(this);
             result.addExisting(p, true);
         }
         return result;
     }
 
     /**
      * Add the Java Runtime classes to this Path instance.
      */
     public void addJavaRuntime() {
         if (JavaEnvUtils.isKaffe()) {
             // newer versions of Kaffe (1.1.1+) won't have this,
             // but this will be sorted by FileSet anyway.
             File kaffeShare = new File(System.getProperty("java.home")
                                        + File.separator + "share"
                                        + File.separator + "kaffe");
             if (kaffeShare.isDirectory()) {
                 FileSet kaffeJarFiles = new FileSet();
                 kaffeJarFiles.setDir(kaffeShare);
                 kaffeJarFiles.setIncludes("*.jar");
                 addFileset(kaffeJarFiles);
             }
         } else if ("GNU libgcj".equals(System.getProperty("java.vm.name"))) {
             addExisting(systemBootClasspath);
         }
 
         if (System.getProperty("java.vendor").toLowerCase(Locale.ENGLISH).indexOf("microsoft") >= 0) {
             // TODO is this code still necessary? is there any 1.2+ port?
             // Pull in *.zip from packages directory
             FileSet msZipFiles = new FileSet();
             msZipFiles.setDir(new File(System.getProperty("java.home")
                 + File.separator + "Packages"));
             msZipFiles.setIncludes("*.ZIP");
             addFileset(msZipFiles);
         } else {
             // JDK 1.2+ seems to set java.home to the JRE directory.
             addExisting(new Path(null,
                                  System.getProperty("java.home")
                                  + File.separator + "lib"
                                  + File.separator + "rt.jar"));
             // Just keep the old version as well and let addExisting
             // sort it out.
             addExisting(new Path(null,
                                  System.getProperty("java.home")
                                  + File.separator + "jre"
                                  + File.separator + "lib"
                                  + File.separator + "rt.jar"));
 
             // Sun's and Apple's 1.4 have JCE and JSSE in separate jars.
             String[] secJars = {"jce", "jsse"};
             for (int i = 0; i < secJars.length; i++) {
                 addExisting(new Path(null,
                                      System.getProperty("java.home")
                                      + File.separator + "lib"
                                      + File.separator + secJars[i] + ".jar"));
                 addExisting(new Path(null,
                                      System.getProperty("java.home")
                                      + File.separator + ".."
                                      + File.separator + "Classes"
                                      + File.separator + secJars[i] + ".jar"));
             }
 
             // IBM's 1.4 has rt.jar split into 4 smaller jars and a combined
             // JCE/JSSE in security.jar.
             String[] ibmJars
                 = {"core", "graphics", "security", "server", "xml"};
             for (int i = 0; i < ibmJars.length; i++) {
                 addExisting(new Path(null,
                                      System.getProperty("java.home")
                                      + File.separator + "lib"
                                      + File.separator + ibmJars[i] + ".jar"));
             }
 
             // Added for MacOS X
             addExisting(new Path(null,
                                  System.getProperty("java.home")
                                  + File.separator + ".."
                                  + File.separator + "Classes"
                                  + File.separator + "classes.jar"));
             addExisting(new Path(null,
                                  System.getProperty("java.home")
                                  + File.separator + ".."
                                  + File.separator + "Classes"
                                  + File.separator + "ui.jar"));
         }
     }
 
     /**
      * Emulation of extdirs feature in java >= 1.2.
      * This method adds all files in the given
      * directories (but not in sub-directories!) to the classpath,
      * so that you don't have to specify them all one by one.
      * @param extdirs - Path to append files to
      */
     public void addExtdirs(Path extdirs) {
         if (extdirs == null) {
             String extProp = System.getProperty("java.ext.dirs");
             if (extProp != null) {
                 extdirs = new Path(getProject(), extProp);
             } else {
                 return;
             }
         }
 
         String[] dirs = extdirs.list();
         for (int i = 0; i < dirs.length; i++) {
             File dir = resolveFile(getProject(), dirs[i]);
             if (dir.exists() && dir.isDirectory()) {
                 FileSet fs = new FileSet();
                 fs.setDir(dir);
                 fs.setIncludes("*");
                 addFileset(fs);
             }
         }
     }
 
     /**
      * Fulfill the ResourceCollection contract. The Iterator returned
      * will throw ConcurrentModificationExceptions if ResourceCollections
      * are added to this container while the Iterator is in use.
      * @return a "fail-fast" Iterator.
      */
     public final synchronized Iterator<Resource> iterator() {
         if (isReference()) {
             return ((Path) getCheckedRef()).iterator();
         }
         dieOnCircularReference();
         if (getPreserveBC()) {
             return new FileResourceIterator(getProject(), null, list());
         }
         return union == null ? Collections.<Resource> emptySet().iterator()
             : assertFilesystemOnly(union).iterator();
     }
 
     /**
      * Fulfill the ResourceCollection contract.
      * @return whether this is a filesystem-only resource collection.
      */
     public synchronized boolean isFilesystemOnly() {
         if (isReference()) {
             return ((Path) getCheckedRef()).isFilesystemOnly();
         }
         dieOnCircularReference();
         assertFilesystemOnly(union);
         return true;
     }
 
     /**
      * Verify the specified ResourceCollection is filesystem-only.
      * @param rc the ResourceCollection to check.
      * @throws BuildException if <code>rc</code> is not filesystem-only.
      * @return the passed in ResourceCollection.
      */
     protected ResourceCollection assertFilesystemOnly(ResourceCollection rc) {
         if (rc != null && !(rc.isFilesystemOnly())) {
             throw new BuildException(getDataTypeName()
                 + " allows only filesystem resources.");
         }
         return rc;
     }
 
     /**
      * Helps determine whether to preserve BC by calling <code>list()</code> on subclasses.
      * The default behavior of this method is to return <code>true</code> for any subclass
      * that implements <code>list()</code>; this can, of course, be avoided by overriding
      * this method to return <code>false</code>. It is not expected that the result of this
      * method should change over time, thus it is called only once.
      * @return <code>true</code> if <code>iterator()</code> should delegate to <code>list()</code>.
      */
     protected boolean delegateIteratorToList() {
         if (getClass().equals(Path.class)) {
             return false;
         }
         try {
             Method listMethod = getClass().getMethod("list", (Class[]) null);
             return !listMethod.getDeclaringClass().equals(Path.class);
         } catch (Exception e) {
             //shouldn't happen, but
             return false;
         }
     }
 
     private synchronized boolean getPreserveBC() {
         if (preserveBC == null) {
             preserveBC = delegateIteratorToList() ? Boolean.TRUE : Boolean.FALSE;
         }
         return preserveBC.booleanValue();
     }
 
     /**
      * Does the given file name contain wildcards?
      * @since Ant 1.8.2
      */
     private static boolean containsWildcards(String path) {
         return path != null
             && (path.indexOf("*") > -1 || path.indexOf("?") > -1);
     }
 
 }
