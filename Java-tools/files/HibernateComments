// NONE might be a better option moving forward in the case of callable
//perhaps not really necessary...
// todo : what else to do here?
//TODO: disable batch loading if lockMode > READ?
// todo : what else to do here?
//TODO: to handle concurrent writes correctly
// gets a chance to see all hibernate.c3p0.*
//note there is a wierd implementation in the client side
// this should be refactored to instead expose a method to assemble a EntityEntry based on this
// Do we need to drop constraints before dropping tables in this dialect?
* FIXME Per the RegionFactory class Javadoc
// Does this dialect support check constraints?
// this is called by SessionFactory irregardless
// Does this dialect support the UNIQUE column syntax?
// this is done here 'cos we might only know the type here (ugly!)
// Does this dialect support the FOR UPDATE syntax?
// todo : what is the implication of this?
// todo : YUCK!!!
how *should* this work for non-pojo entities?
// Does this dialect support FOR UPDATE OF
//TODO: really bad
//TODO: is it kosher to do it here?
//TODO: better to degrade to lazy="false" if uninstrumented
// Does this dialect support the Oracle-style FOR UPDATE NOWAIT syntax?
* FIXME Per the RegionFactory class Javadoc
//Icky workaround for MySQL bug:
// we have to set up the table later!! yuck
//TODO: Somehow add the newly created foreign keys to the internal collection
// This inner class implements a case statement....perhaps im being a bit over-clever here
//TODO: merge into one method!
// TODO: this is a bit of copy/paste from IndexedCollection.createPrimaryKey()
// TODO: what type?
//TODO: inefficient
//FIXME: get the PersistentClass
// todo : we can remove this once the deprecated ctor can be made private...
//TODO: this is too conservative
//TODO: redesign how PropertyAccessors are acquired...
// TODO : not so sure this is needed...
// todo : we can remove this once the deprecated ctor can be made private...
//create an index on the key columns??
/* TODO: joinKeyColumnName & foreignKeyColumnName should be called either here or at a
//TODO: improve this hack!
cos it depends upon ordering of mapping doc
//use of trim() here is ugly?
//TODO: ideally we need the construction of PropertyAccessor to take the following:
// can happen because of the multiple ways Cache.remove()
//ick!
// todo : we can remove this once the deprecated ctor can be made private...
// TODO: this is very suboptimal for some subclasses (namely components)
//TODO: should this be Session.instantiate(Persister
//TODO: suck this into initLaziness!
// todo : we can remove this once the deprecated ctor can be made private...
// 'hibernate.temp.use_jdbc_metadata_defaults' is a temporary magic value
//TODO: is this right??
//ie. the subquery! yuck!
//use of a stringbuffer to workaround a JDK bug
//TODO: copy/paste from recreate()
for backward compatibility of sets with no
// todo : this eventually needs to be removed
// todo : remove
//just to help out during the load (ugly
// hack/workaround as sqlquery impl depend on having a key.
//TODO: handle the case of a foreign key to something other than the pk
//TODO: assumes all collections disassemble to an array!
// todo : would love to have this work on a notification basis
// TODO: is it really neceassry to provide Configuration to CollectionPersisters ?
//TODO: deprecated
//TODO possibly relax that
come up with a better way to check this (plus see above comment)
//use a degenerated strategy for backward compatibility
//TODO: this is temporary in that the end result will probably not take a Property reference per-se.
// todo : better to handle dynamic filters through implicit DynamicFilterParameterSpecification
// get the right object from the list ... would it be easier to just call getEntity() ??
// TODO: should "record" how many properties we have reffered to - and if we
//TODO: this dependency is kinda Bad
//TODO: get SQL rendering out of this package!
// why does this matter?
to account for newly saved entities in query
//TODO: get SQL rendering out of this package!
//TODO: can we *always* use the "null property" approach for everything?
// does this need holdlock also? : return tableName + " with (updlock
//TODO: or we could do this polymorphically
// todo : remove this and just have subclasses use Isolater/IsolatedWork directly...
at least needed this dropped after use
// is it necessary to register %exact since it can only appear in a where clause?
// Does this dialect support the ALTER TABLE syntax?
// TODO: shift it into unsaved-value strategy
//TODO: reenable if we also fix the above todo
// orphans should not be deleted during copy??
// orphans should not be deleted during merge??
//TODO: suck this logic into the collection!
// todo : we can actually just determine this from the incoming EntityEntry-s
//TODO: this bit actually has to be called after all cascades!
// this class has no proxies (so do a shortcut)
//TODO: Should this be an InitializeEntityEventListener??? (watch out for performance!)
// todo : need map? the prob is a proper key
//TODO: better to pass the id in as an argument?
//do we even really need this? the update will fail anyway....
//TODO: would it be better to do a refresh from db?
* This form used from annotations (?).  Essentially the same as the above using a
//TODO: ugly here:
//TODO: not quite sure about the full implications of this!
// this only works because collection entries are kept in a sequenced
// todo : i'd much rather have this done from #endLoadingCollection(CollectionPersister
// NOTE : here we cleanup the load context when we have no more local
// todo : add the notion of enabled filters to the CacheKey to differentiate filtered collections from non-filtered
//TODO: reuse the PostLoadEvent...
// todo : should we check the current isolation mode explicitly?
//TODO: or an array!! we can't lock objects with arrays now??
// TODO: iteratively get transient entities and retry merge until one of the following conditions:
// this will also (inefficiently) handle arrays
// TODO : perhaps we should additionally require that the incoming entity
* TODO: This will need to be refactored at some point.
// TODO : most of below was taken verbatim from DotNode
// todo : currently expects that the individual with expressions apply to the same sql table join
// No explicit select expression
// TODO : better way?!?
// Attempt to work around "ghost" ImpliedFromElements that occasionally
// Not possible to simply re-use the versionPropertyNode here as it causes
// TODO: Downcast to avoid using an interface?  Yuck.
// at some point the generate phase needs to be moved out of here
//TODO:this is only needed during compilation .. can we eliminate the instvar?
// TODO : absolutely no usages of this constructor form
//TODO: is this a bit ugly?
if only properties mapped to the "base table" are referenced
// TODO : remove these last two as batcher is no longer managing connections
// VERY IMPORTANT!!!! - This class needs to be free of any static references
// TODO : we really need to be able to deal with component paths here also
// TODO : an optimization here would be to consider cascade deletes and not gen those delete statements
//TODO: switch statements are always evil! We already had bugs because
// really there are two situations where it should be ok to allow the insertion
// implicit joins are always(?) ok to reuse
//TODO: used to be exprNoParens! was this needed?
// TODO : we may also want to check that the types here map to exactly one column/JDBC-type
// we do not know either type
// TODO: get SQL rendering out of here
// We would probably refactor to have LogicParser (builds a tree of simple
// short-circuit for performance...
// not absolutely necessary
// try block is a hack around fact that currently tuplizers are not
//TODO: this is one of the ugliest and most fragile pieces of code in Hibernate....
//TODO: implement functionality
//yuck!
the incoming property could not be found so we
//TODO: make this a bit nicer
// yuck!
// todo : potentially look at optimizing these two arrays
//note that i parameter is now unused (delete it?)
// TODO: Figure out a better way to get the FROM elements in a proper tree structure
// TODO : this constructor form is *only* used from constructor directly below us
// todo : remove
// We should reengineer this class so that
// todo : should this get moved to PersistentContext?
// TODO: something much better - look at the type of the other expression!
//TODO: this class does too many things! we need a different
//TODO: optimize this better!
//TODO: should we allow suffixes on these ?
//TODO: is this really necessary????
// TODO : not sure the best way to handle this
//TODO: is there a better way?
//The class is now way to complex!
// TODO : would be really nice to cache the spec on the query-def so as to not have to re-calc the hash
//name from a super query (a bit inelegant that it shows up here)
// used to count the nesting of parentheses
// todo : we can remove this once the deprecated ctor can be made private...
//put() has nowait semantics
// ugly hack for cases like "elements(foo.bar.collection)"
// FIXME Hacky workaround to JBCACHE-1202
//TODO: COPY/PASTE FROM SessionImpl
// todo : need to find a clean way to handle the "event source" role
//Must be done here because of side-effect! yuck...
//We should actually rework this class to not implement Parser
// TODO : should remove this exposure
// we may be screwed here since the collection action is about to execute
// TODO : is there a way to tell whether a persister is truly discrim-column based inheritence?
//work around a bug in all known connection pools....
//TODO: reuse the PreLoadEvent
// Need a better way to define the suffixes here...
//workaround for WebLogic
//TODO: temporary
// TODO : YUCK!!!  fix after HHH-1907 is complete
// would be great to move all this below here into another method that could also be used
//TODO: the i==entitySpan-1 bit depends upon subclass implementation (very bad)
complex stuff here
//TODO: add a CriteriaImplementor interface
// polymorphism not really handled completely correctly
//This is not very nice (and quite slow):
//TODO: get SQL rendering out of here
// meant to handle dynamic instantiation queries...(Copy from QueryLoader)
// TODO: what should be the actual exception type here?
// worrying about proxies is perhaps a little bit of overkill here...
// todo : throw exception?  maybe warn if not the same?
//TODO: make EntityPersister *not* depend on SessionFactoryImplementor
// TODO : what amount of significant digits need to be supported here?
//for backward compatibility
// todo : we can remove this once the deprecated ctor can be made private...
// TODO: copy/paste from ManyToOneType
//TODO: code duplication with SingleTableEntityPersister
// todo : throw exception?
//should this interface extend PropertyMapping?
// TODO: here is why we need to make bytecode provider global :(
//TODO: currently keeps Getters and Setters (instead of PropertyAccessors) because of the way getGetter()
// todo : we can remove this once the deprecated ctor can be made private...
//TODO: Yuck! This is not quite good enough
//TODO: implement caching?! proxies?!
// is this really necessary?
//TODO: this is a little inefficient
//TODO: this is a bit arbitrary
"	 * FIXME: even if isInverse=""true""?"
// TODO: Fix this so it will work for non-POJO entity mode
//TODO: move these to a new JoinableType abstract class
//TODO: would be nice to handle proxy classes elegantly!
//TODO: i'm not sure
//TODO: is there a more elegant way than downcasting?
// todo : remove
//TODO: remove use of instanceof!
//create an index on the key columns??
//TODO: make this a bit nicer
// todo : we can remove this once the deprecated ctor can be made private...
//TODO: perhaps this should be some other RuntimeException...
//Yuck:
//TODO: need some caching scheme? really comes down to decision
// todo : this eventually needs to be removed
//TODO: design new lifecycle for ProxyFactory
// todo: we should really just collect these from the various SelectExpressions
// TODO: Should this really return null?  If not
// todo : should seriously consider not allowing a txn to begin from a child session
// should indicate that we are processing an INSERT/UPDATE/DELETE
// TODO : this really needs to be delayed unitl after we definitively know all node types
// TODO : make this the factory for "entity mode related" sessions
// create an index on the key columns??
//is this ok?
//TODO: would it be better to simply pass the qualified table name
// perhaps this should be an exception since it is only ever used
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!
// Put a placeholder in entries
//TODO: should this be Session.instantiate(Persister
//TODO: we should throw an exception if we really *know* for sure
// TODO: The order in which entities are saved may matter (e.g.
//TODO: if object was an uninitialized proxy
//TODO: put this stuff back in to read snapshot from
//TODO: not quite sure about the full implications of this!
//this is kinda the best we can do...
/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */
//TODO: this needn't exclude subclasses...
//TODO: we use two visitors here
//TODO: does this really need to be here?
// should leading trim-characters be trimmed?
//it is possible that the tree-walking in OuterJoinLoader can get to
// TODO: an alternative is to check if the owner has changed
//I suppose?
// TBD should this be varbinary($1)?
//shortcut
//TODO: we should provide some way to get keys of collection of statistics to make it easier to retrieve from a GUI perspective
// TODO : probably better to calculate these and pass them in
// todo : should we additionally check the current isolation mode explicitly?
//TODO: simply remove this override
//TODO: get SQL rendering out of this package!
// todo : is there really any reason to kkeep trying if this fails once?
// TODO : not sure this is correct
//HSQL has no Blob/Clob support .... but just put these here for now!
//TODO: perhaps this does need to cascade after all....
// yick!  need this for proper serialization/deserialization handling...
//TODO: should orphans really be deleted during lock???
// todo : move to StringHelper?
// Sets can be just a view of a part of another collection
// TODO: It would be really
//TODO: move to .sql package!!
//TODO: look at the owning property and check that it
// TODO : add this info to the translator and aggregate it here...
//TODO possibly relax that
// would be better to use the element-type to determine
//TODO: code duplication with JoinedSubclassEntityPersister
//TODO: refactor to .sql package
//TODO: *two* hashmap lookups here is one too many...
//note that this method could easily be moved up to BasicEntityPersister
// from the collection of associations
//TODO: this class depends directly upon CriteriaImpl
// Do we need to qualify index names with the schema name?
//TODO: We probably should have a StatisticsNotPublishedException
//TODO: get SQL rendering out of this package!
//TODO race conditions can happen here
// TODO: Fix this so it will work for non-POJO entity mode
//TODO: need to make the majority of this functionality into a top-level support class for custom impl support
// TODO: it would be better if this was done at the higher level by Printer
//TODO: inefficient if that cache is just going to ignore the updated state!
// TODO: an alternative is to check if the owner has changed
//TODO:refactor + make this method private
// TODO : keep seperate notions of QT[] here for shallow/non-shallow queries...
//      needed because currently persister is the one that
// this is called by SessionFactory irregardless
//swaldman 2004-02-07: modify to allow null values to signify fall through to c3p0 PoolConfig defaults
// work around that crazy issue where the tree contains
but needed for collections with a "." node mapping
//FIXME: get the PersistentClass
// TODO : would be great to have a Mapping#hasNonIdentifierPropertyNamedId method
// TODO: cache the entity name somewhere so that it is available to this exception
//TODO: is this really necessary????
//TODO:  this is kinda slow...
//TODO: move to .sql package
//TODO: I am not so sure about the exception handling in this bit!
//ugly little workaround for fact that createUniqueKeyLoaders() does not handle component properties
// append the SQL to return the generated identifier
//This is really ugly
// todo : modify the class definition if not already transformed...
//TODO: should we use SELECT .. FOR UPDATE?
/** Create an action that will evict collection and entity regions based on queryspaces (table names).
//TODO: is this 100% correct?
// todo : obviously get rid of all this junk
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!
//use of a stringbuffer to workaround a JDK bug
//TODO: move into collection type
// TODO should we just collect these like with the collections above?
// todo : should really move this log statement to CollectionType
// FIXME Hacky workaround to JBCACHE-1202
//hum ... should we cascade anyway? throw an exception? fine like it is?
// todo: this might really even be moved into the cfg package and used as the basis for all things which are configurable.
//TODO: copy/paste from insertRows()
//TODO: suck into event class
since getTypeName() actually throws an exception!
is used by SessionFactoryImpl to hand to the generated SessionImpl
// xmlforest requires a new kind of function constructor
// TODO Is this a valid operation on a timestamps cache?
// TODO: I considered validating the presence of the TS cache here
// TODO Why not use the timestamp in a DataVersion?
// todo : eventually merge this with TreeCache and just add optional opt-lock support there.
     * FIXME Per the RegionFactory class Javadoc
// work around the "feature" where tree cache is validating the
// TODO: I considered validating TS cache config here
// can happen because of the multiple ways Cache.remove()
//need to do that here rather than in the save event listener to let
// unhappy about this being public ... is there a better way?
// TODO : safe to interpret "map.remove(key) == null" as non-dirty?
// FIXME hack to work around fact that calling
// work around the "feature" where tree cache is validating the
// TODO Is this a valid operation on a timestamps cache?
// todo : what else to do here?
// TODO: Replace this with a more elegant solution.
// short cut check...
//TODO: to handle concurrent writes correctly
//put() has nowait semantics
// this is ugly here
// TODO : will need reference to session factory to fully complete HHH-1907
//yuck!
// inheritance cycle detection (paranoid check)
// todo : remove
// TODO: encapsulate the protected instance variables!