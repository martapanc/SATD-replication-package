diff --git a/bin/saveservice.properties b/bin/saveservice.properties
index 61c8c8879..12e87f5c4 100644
--- a/bin/saveservice.properties
+++ b/bin/saveservice.properties
@@ -1,291 +1,296 @@
 #---------------------------------------------------------
 #         SAVESERVICE PROPERTIES
 #---------------------------------------------------------
 
 ##   Licensed to the Apache Software Foundation (ASF) under one or more
 ##   contributor license agreements.  See the NOTICE file distributed with
 ##   this work for additional information regarding copyright ownership.
 ##   The ASF licenses this file to You under the Apache License, Version 2.0
 ##   (the "License"); you may not use this file except in compliance with
 ##   the License.  You may obtain a copy of the License at
 ## 
 ##       http://www.apache.org/licenses/LICENSE-2.0
 ## 
 ##   Unless required by applicable law or agreed to in writing, software
 ##   distributed under the License is distributed on an "AS IS" BASIS,
 ##   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 ##   See the License for the specific language governing permissions and
 ##   limitations under the License.
 
 #---------------------------------------------------------
 # N.B. To ensure backward compatibility, please do not
 # change or delete any entries that have been used.
 # New entries can be added as necessary.
 #
 # Note that keys starting with an underscore are special,
 # and are not used as aliases.
 #
 # Please keep the entries in alphabetical order within the sections
 # to reduce the likelihood of duplicates
 #
 # version number of this file (automatically generated by SVN)
 _file_version=$Revision$
 #
 # Conversion version (for JMX output files)
 # Must be updated if the file has been changed since the previous release
 #
 # 1.7 = 2.1.1
 # 1.8 = 2.1.2
 #
 _version=1.8
 #
+#
+# Character set encoding used to read and write Jmeter files
+#
+_file_encoding=UTF-8
+#
 #---------------------------------------------------------
 #
 # The following properties are used to create aliases
 # [Must all start with capital letter]
 #
 AccessLogSampler=org.apache.jmeter.protocol.http.sampler.AccessLogSampler
 AjpSampler=org.apache.jmeter.protocol.http.sampler.AjpSampler
 AjpSamplerGui=org.apache.jmeter.protocol.http.control.gui.AjpSamplerGui
 AnchorModifier=org.apache.jmeter.protocol.http.modifier.AnchorModifier
 AnchorModifierGui=org.apache.jmeter.protocol.http.modifier.gui.AnchorModifierGui
 Argument=org.apache.jmeter.config.Argument
 Arguments=org.apache.jmeter.config.Arguments
 ArgumentsPanel=org.apache.jmeter.config.gui.ArgumentsPanel
 AssertionGui=org.apache.jmeter.assertions.gui.AssertionGui
 AssertionVisualizer=org.apache.jmeter.visualizers.AssertionVisualizer
 AuthManager=org.apache.jmeter.protocol.http.control.AuthManager
 Authorization=org.apache.jmeter.protocol.http.control.Authorization
 AuthPanel=org.apache.jmeter.protocol.http.gui.AuthPanel
 BarChart=org.apache.jmeter.testelement.BarChart
 BarChartGui=org.apache.jmeter.report.gui.BarChartGui
 BeanShellAssertion=org.apache.jmeter.assertions.BeanShellAssertion
 BeanShellAssertionGui=org.apache.jmeter.assertions.gui.BeanShellAssertionGui
 BeanShellListener=org.apache.jmeter.visualizers.BeanShellListener
 BeanShellPostProcessor=org.apache.jmeter.extractor.BeanShellPostProcessor
 BeanShellPreProcessor=org.apache.jmeter.modifiers.BeanShellPreProcessor
 BeanShellSampler=org.apache.jmeter.protocol.java.sampler.BeanShellSampler
 BeanShellSamplerGui=org.apache.jmeter.protocol.java.control.gui.BeanShellSamplerGui
 BeanShellTimer=org.apache.jmeter.timers.BeanShellTimer
 BSFSampler=org.apache.jmeter.protocol.java.sampler.BSFSampler
 BSFSamplerGui=org.apache.jmeter.protocol.java.control.gui.BSFSamplerGui
 ConfigTestElement=org.apache.jmeter.config.ConfigTestElement
 ConstantThroughputTimer=org.apache.jmeter.timers.ConstantThroughputTimer
 ConstantTimer=org.apache.jmeter.timers.ConstantTimer
 ConstantTimerGui=org.apache.jmeter.timers.gui.ConstantTimerGui
 Cookie=org.apache.jmeter.protocol.http.control.Cookie
 CookieManager=org.apache.jmeter.protocol.http.control.CookieManager
 CookiePanel=org.apache.jmeter.protocol.http.gui.CookiePanel
 CounterConfig=org.apache.jmeter.modifiers.CounterConfig
 CounterConfigGui=org.apache.jmeter.modifiers.gui.CounterConfigGui
 CSVDataSet=org.apache.jmeter.config.CSVDataSet
 DistributionGraphVisualizer=org.apache.jmeter.visualizers.DistributionGraphVisualizer
 DurationAssertion=org.apache.jmeter.assertions.DurationAssertion
 DurationAssertionGui=org.apache.jmeter.assertions.gui.DurationAssertionGui
 # Todo - wrong name?
 FloatProperty=org.apache.jmeter.testelement.property.FloatProperty
 ForeachController=org.apache.jmeter.control.ForeachController
 ForeachControlPanel=org.apache.jmeter.control.gui.ForeachControlPanel
 FtpConfigGui=org.apache.jmeter.protocol.ftp.config.gui.FtpConfigGui
 FTPSampler=org.apache.jmeter.protocol.ftp.sampler.FTPSampler
 FtpTestSamplerGui=org.apache.jmeter.protocol.ftp.control.gui.FtpTestSamplerGui
 GaussianRandomTimer=org.apache.jmeter.timers.GaussianRandomTimer
 GaussianRandomTimerGui=org.apache.jmeter.timers.gui.GaussianRandomTimerGui
 GenericController=org.apache.jmeter.control.GenericController
 GraphAccumVisualizer=org.apache.jmeter.visualizers.GraphAccumVisualizer
 GraphVisualizer=org.apache.jmeter.visualizers.GraphVisualizer
 Header=org.apache.jmeter.protocol.http.control.Header
 HeaderManager=org.apache.jmeter.protocol.http.control.HeaderManager
 HeaderPanel=org.apache.jmeter.protocol.http.gui.HeaderPanel
 HTMLAssertion=org.apache.jmeter.assertions.HTMLAssertion
 HTMLAssertionGui=org.apache.jmeter.assertions.gui.HTMLAssertionGui
 HTMLReportWriter=org.apache.jmeter.report.writers.HTMLReportWriter
 HTMLReportWriterGui=org.apache.jmeter.report.writers.gui.HTMLReportWriterGui
 HTTPArgument=org.apache.jmeter.protocol.http.util.HTTPArgument
 HTTPArgumentsPanel=org.apache.jmeter.protocol.http.gui.HTTPArgumentsPanel
 HttpDefaultsGui=org.apache.jmeter.protocol.http.config.gui.HttpDefaultsGui
 HTTPSampler=org.apache.jmeter.protocol.http.sampler.HTTPSampler
 HttpMirrorControl=org.apache.jmeter.protocol.http.control.HttpMirrorControl
 HttpMirrorControlGui=org.apache.jmeter.protocol.http.control.gui.HttpMirrorControlGui
 HTTPSampler2=org.apache.jmeter.protocol.http.sampler.HTTPSampler2
 HttpTestSampleGui=org.apache.jmeter.protocol.http.control.gui.HttpTestSampleGui
 HttpTestSampleGui2=org.apache.jmeter.protocol.http.control.gui.HttpTestSampleGui2
 IfController=org.apache.jmeter.control.IfController
 IfControllerPanel=org.apache.jmeter.control.gui.IfControllerPanel
 IncludeController=org.apache.jmeter.control.IncludeController
 IncludeControllerGui=org.apache.jmeter.control.gui.IncludeControllerGui
 InterleaveControl=org.apache.jmeter.control.InterleaveControl
 InterleaveControlGui=org.apache.jmeter.control.gui.InterleaveControlGui
 JavaConfig=org.apache.jmeter.protocol.java.config.JavaConfig
 JavaConfigGui=org.apache.jmeter.protocol.java.config.gui.JavaConfigGui
 JavaSampler=org.apache.jmeter.protocol.java.sampler.JavaSampler
 JavaTestSamplerGui=org.apache.jmeter.protocol.java.control.gui.JavaTestSamplerGui
 JDBCDataSource=org.apache.jmeter.protocol.jdbc.config.DataSourceElement
 JDBCSampler=org.apache.jmeter.protocol.jdbc.sampler.JDBCSampler
 JMSConfigGui=org.apache.jmeter.protocol.jms.control.gui.JMSConfigGui
 JMSPublisherGui=org.apache.jmeter.protocol.jms.control.gui.JMSPublisherGui
 JMSSampler=org.apache.jmeter.protocol.jms.sampler.JMSSampler
 JMSSubscriberGui=org.apache.jmeter.protocol.jms.control.gui.JMSSubscriberGui
 JndiDefaultsGui=org.apache.jmeter.protocol.jms.control.gui.JndiDefaultsGui
 JUnitSampler=org.apache.jmeter.protocol.java.sampler.JUnitSampler
 JUnitTestSamplerGui=org.apache.jmeter.protocol.java.control.gui.JUnitTestSamplerGui
 LDAPArgument=org.apache.jmeter.protocol.ldap.config.gui.LDAPArgument
 LDAPArguments=org.apache.jmeter.protocol.ldap.config.gui.LDAPArguments
 LDAPArgumentsPanel=org.apache.jmeter.protocol.ldap.config.gui.LDAPArgumentsPanel
 LdapConfigGui=org.apache.jmeter.protocol.ldap.config.gui.LdapConfigGui
 LdapExtConfigGui=org.apache.jmeter.protocol.ldap.config.gui.LdapExtConfigGui
 LDAPExtSampler=org.apache.jmeter.protocol.ldap.sampler.LDAPExtSampler
 LdapExtTestSamplerGui=org.apache.jmeter.protocol.ldap.control.gui.LdapExtTestSamplerGui
 LDAPSampler=org.apache.jmeter.protocol.ldap.sampler.LDAPSampler
 LdapTestSamplerGui=org.apache.jmeter.protocol.ldap.control.gui.LdapTestSamplerGui
 LineChart=org.apache.jmeter.testelement.LineChart
 LineGraphGui=org.apache.jmeter.report.gui.LineGraphGui
 LogicControllerGui=org.apache.jmeter.control.gui.LogicControllerGui
 LoginConfig=org.apache.jmeter.config.LoginConfig
 LoginConfigGui=org.apache.jmeter.config.gui.LoginConfigGui
 LoopController=org.apache.jmeter.control.LoopController
 LoopControlPanel=org.apache.jmeter.control.gui.LoopControlPanel
 MailerModel=org.apache.jmeter.reporters.MailerModel
 MailerResultCollector=org.apache.jmeter.reporters.MailerResultCollector
 MailerVisualizer=org.apache.jmeter.visualizers.MailerVisualizer
 MailReaderSampler=org.apache.jmeter.protocol.mail.sampler.MailReaderSampler
 MailReaderSamplerGui=org.apache.jmeter.protocol.mail.sampler.gui.MailReaderSamplerGui
 MD5HexAssertion=org.apache.jmeter.assertions.MD5HexAssertion
 MD5HexAssertionGUI=org.apache.jmeter.assertions.gui.MD5HexAssertionGUI
 ModuleController=org.apache.jmeter.control.ModuleController
 ModuleControllerGui=org.apache.jmeter.control.gui.ModuleControllerGui
 MonitorHealthVisualizer=org.apache.jmeter.visualizers.MonitorHealthVisualizer
 NamePanel=org.apache.jmeter.gui.NamePanel
 OnceOnlyController=org.apache.jmeter.control.OnceOnlyController
 OnceOnlyControllerGui=org.apache.jmeter.control.gui.OnceOnlyControllerGui
 ParamMask=org.apache.jmeter.protocol.http.modifier.ParamMask
 ParamModifier=org.apache.jmeter.protocol.http.modifier.ParamModifier
 ParamModifierGui=org.apache.jmeter.protocol.http.modifier.gui.ParamModifierGui
 ProxyControl=org.apache.jmeter.protocol.http.proxy.ProxyControl
 ProxyControlGui=org.apache.jmeter.protocol.http.proxy.gui.ProxyControlGui
 PublisherSampler=org.apache.jmeter.protocol.jms.sampler.PublisherSampler
 RandomControlGui=org.apache.jmeter.control.gui.RandomControlGui
 RandomController=org.apache.jmeter.control.RandomController
 RandomOrderController=org.apache.jmeter.control.RandomOrderController
 RandomOrderControllerGui=org.apache.jmeter.control.gui.RandomOrderControllerGui
 RecordController=org.apache.jmeter.protocol.http.control.gui.RecordController
 RecordingController=org.apache.jmeter.protocol.http.control.RecordingController
 ReflectionThreadGroup=org.apache.jmeter.threads.ReflectionThreadGroup
 RegexExtractor=org.apache.jmeter.extractor.RegexExtractor
 RegexExtractorGui=org.apache.jmeter.extractor.gui.RegexExtractorGui
 RemoteListenerWrapper=org.apache.jmeter.samplers.RemoteListenerWrapper
 RemoteSampleListenerWrapper=org.apache.jmeter.samplers.RemoteSampleListenerWrapper
 RemoteTestListenerWrapper=org.apache.jmeter.samplers.RemoteTestListenerWrapper
 ReportGui=org.apache.jmeter.control.gui.ReportGui
 ReportPage=org.apache.jmeter.testelement.ReportPage
 ReportPageGui=org.apache.jmeter.report.gui.ReportPageGui
 ReportPlan=org.apache.jmeter.testelement.ReportPlan
 ResponseAssertion=org.apache.jmeter.assertions.ResponseAssertion
 ResultAction=org.apache.jmeter.reporters.ResultAction
 ResultActionGui=org.apache.jmeter.reporters.gui.ResultActionGui
 ResultCollector=org.apache.jmeter.reporters.ResultCollector
 ResultSaver=org.apache.jmeter.reporters.ResultSaver
 ResultSaverGui=org.apache.jmeter.reporters.gui.ResultSaverGui
 RunTime=org.apache.jmeter.control.RunTime
 RunTimeGui=org.apache.jmeter.control.gui.RunTimeGui
 SampleSaveConfiguration=org.apache.jmeter.samplers.SampleSaveConfiguration
 SimpleConfigGui=org.apache.jmeter.config.gui.SimpleConfigGui
 SimpleDataWriter=org.apache.jmeter.visualizers.SimpleDataWriter
 SizeAssertion=org.apache.jmeter.assertions.SizeAssertion
 SizeAssertionGui=org.apache.jmeter.assertions.gui.SizeAssertionGui
 SoapSampler=org.apache.jmeter.protocol.http.sampler.SoapSampler
 SoapSamplerGui=org.apache.jmeter.protocol.http.control.gui.SoapSamplerGui
 SplineVisualizer=org.apache.jmeter.visualizers.SplineVisualizer
 StatGraphVisualizer=org.apache.jmeter.visualizers.StatGraphVisualizer
 StatVisualizer=org.apache.jmeter.visualizers.StatVisualizer
 SubscriberSampler=org.apache.jmeter.protocol.jms.sampler.SubscriberSampler
 Summariser=org.apache.jmeter.reporters.Summariser
 SummariserGui=org.apache.jmeter.reporters.gui.SummariserGui
 SummaryReport=org.apache.jmeter.visualizers.SummaryReport
 SwitchController=org.apache.jmeter.control.SwitchController
 SwitchControllerGui=org.apache.jmeter.control.gui.SwitchControllerGui
 SyncTimer=org.apache.jmeter.timers.SyncTimer
 Table=org.apache.jmeter.testelement.Table
 TableGui=org.apache.jmeter.report.gui.TableGui
 TableVisualizer=org.apache.jmeter.visualizers.TableVisualizer
 TCPConfigGui=org.apache.jmeter.protocol.tcp.config.gui.TCPConfigGui
 TCPSampler=org.apache.jmeter.protocol.tcp.sampler.TCPSampler
 TCPSamplerGui=org.apache.jmeter.protocol.tcp.control.gui.TCPSamplerGui
 TestAction=org.apache.jmeter.sampler.TestAction
 TestActionGui=org.apache.jmeter.sampler.gui.TestActionGui
 TestBeanGUI=org.apache.jmeter.testbeans.gui.TestBeanGUI
 TestPlan=org.apache.jmeter.testelement.TestPlan
 TestPlanGui=org.apache.jmeter.control.gui.TestPlanGui
 ThreadGroup=org.apache.jmeter.threads.ThreadGroup
 ThreadGroupGui=org.apache.jmeter.threads.gui.ThreadGroupGui
 ThroughputController=org.apache.jmeter.control.ThroughputController
 ThroughputControllerGui=org.apache.jmeter.control.gui.ThroughputControllerGui
 TransactionController=org.apache.jmeter.control.TransactionController
 TransactionControllerGui=org.apache.jmeter.control.gui.TransactionControllerGui
 UniformRandomTimer=org.apache.jmeter.timers.UniformRandomTimer
 UniformRandomTimerGui=org.apache.jmeter.timers.gui.UniformRandomTimerGui
 URLRewritingModifier=org.apache.jmeter.protocol.http.modifier.URLRewritingModifier
 URLRewritingModifierGui=org.apache.jmeter.protocol.http.modifier.gui.URLRewritingModifierGui
 UserParameterModifier=org.apache.jmeter.protocol.http.modifier.UserParameterModifier
 UserParameterModifierGui=org.apache.jmeter.protocol.http.modifier.gui.UserParameterModifierGui
 UserParameters=org.apache.jmeter.modifiers.UserParameters
 UserParametersGui=org.apache.jmeter.modifiers.gui.UserParametersGui
 ViewResultsFullVisualizer=org.apache.jmeter.visualizers.ViewResultsFullVisualizer
 WebServiceSampler=org.apache.jmeter.protocol.http.sampler.WebServiceSampler
 WebServiceSamplerGui=org.apache.jmeter.protocol.http.control.gui.WebServiceSamplerGui
 WhileController=org.apache.jmeter.control.WhileController
 WhileControllerGui=org.apache.jmeter.control.gui.WhileControllerGui
 WorkBench=org.apache.jmeter.testelement.WorkBench
 WorkBenchGui=org.apache.jmeter.control.gui.WorkBenchGui
 XMLAssertion=org.apache.jmeter.assertions.XMLAssertion
 XMLAssertionGui=org.apache.jmeter.assertions.gui.XMLAssertionGui
 XMLSchemaAssertion=org.apache.jmeter.assertions.XMLSchemaAssertion
 XMLSchemaAssertionGUI=org.apache.jmeter.assertions.gui.XMLSchemaAssertionGUI
 XPathAssertion=org.apache.jmeter.assertions.XPathAssertion
 XPathAssertionGui=org.apache.jmeter.assertions.gui.XPathAssertionGui
 XPathExtractor=org.apache.jmeter.extractor.XPathExtractor
 XPathExtractorGui=org.apache.jmeter.extractor.gui.XPathExtractorGui
 #
 # Properties - all start with lower case letter and end with Prop
 #
 boolProp=org.apache.jmeter.testelement.property.BooleanProperty
 collectionProp=org.apache.jmeter.testelement.property.CollectionProperty
 doubleProp=org.apache.jmeter.testelement.property.DoubleProperty
 elementProp=org.apache.jmeter.testelement.property.TestElementProperty
 intProp=org.apache.jmeter.testelement.property.IntegerProperty
 longProp=org.apache.jmeter.testelement.property.LongProperty
 mapProp=org.apache.jmeter.testelement.property.MapProperty
 objProp=org.apache.jmeter.testelement.property.ObjectProperty
 stringProp=org.apache.jmeter.testelement.property.StringProperty
 #
 # Other - must start with a lower case letter (and not end with Prop)
 # (otherwise they could clash with the initial set of aliases)
 #
 hashTree=org.apache.jorphan.collections.ListedHashTree
 jmeterTestPlan=org.apache.jmeter.save.ScriptWrapper
 sample=org.apache.jmeter.samplers.SampleResult
 httpSample=org.apache.jmeter.protocol.http.sampler.HTTPSampleResult
 testResults=org.apache.jmeter.save.TestResultWrapper
 assertionResult=org.apache.jmeter.assertions.AssertionResult
 monitorStats=org.apache.jmeter.visualizers.MonitorStats
 #
 # Converters to register.  Must start line with '_'
 # If the converter is a collection of subitems, set equal to "collection"
 # If the converter needs to know the class mappings but is not a collection of 
 #      subitems, set it equal to "mapping"
 _org.apache.jmeter.protocol.http.util.HTTPResultConverter=collection
 _org.apache.jmeter.save.converters.BooleanPropertyConverter=
 _org.apache.jmeter.save.converters.IntegerPropertyConverter=
 _org.apache.jmeter.save.converters.LongPropertyConverter=
 _org.apache.jmeter.save.converters.MultiPropertyConverter=collection
 _org.apache.jmeter.save.converters.SampleResultConverter=collection
 _org.apache.jmeter.save.converters.SampleSaveConfigurationConverter=collection
 _org.apache.jmeter.save.converters.StringPropertyConverter=
 _org.apache.jmeter.save.converters.HashTreeConverter=collection
 _org.apache.jmeter.save.converters.TestElementConverter=collection
 _org.apache.jmeter.save.converters.TestElementPropertyConverter=collection
 _org.apache.jmeter.save.converters.TestResultWrapperConverter=collection
 _org.apache.jmeter.save.ScriptWrapperConverter=mapping
 #
 #	Remember to update the _version entry
 #
\ No newline at end of file
diff --git a/bin/testfiles/AssertionTestPlan.jmx b/bin/testfiles/AssertionTestPlan.jmx
index d73ecb313..e7be422ee 100644
--- a/bin/testfiles/AssertionTestPlan.jmx
+++ b/bin/testfiles/AssertionTestPlan.jmx
@@ -1,122 +1,123 @@
+<?xml version="1.0" encoding="UTF-8"?>
 <jmeterTestPlan version="1.2" properties="1.8">
   <hashTree>
     <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
+      <collectionProp name="TestPlan.thread_groups"/>
       <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
         <collectionProp name="Arguments.arguments"/>
       </elementProp>
-      <collectionProp name="TestPlan.thread_groups"/>
       <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
       <boolProp name="TestPlan.functional_mode">false</boolProp>
       <stringProp name="TestPlan.comments"></stringProp>
     </TestPlan>
     <hashTree>
       <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
         <longProp name="ThreadGroup.start_time">0</longProp>
         <stringProp name="ThreadGroup.delay"></stringProp>
         <stringProp name="ThreadGroup.duration"></stringProp>
         <stringProp name="ThreadGroup.num_threads">1</stringProp>
         <boolProp name="ThreadGroup.scheduler">false</boolProp>
         <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
           <stringProp name="LoopController.loops">1</stringProp>
           <boolProp name="LoopController.continue_forever">false</boolProp>
         </elementProp>
         <longProp name="ThreadGroup.end_time">0</longProp>
         <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
         <stringProp name="ThreadGroup.ramp_time">0</stringProp>
       </ThreadGroup>
       <hashTree>
         <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="HTTP Request" enabled="true">
           <stringProp name="HTTPSampler.path">/</stringProp>
           <stringProp name="HTTPSampler.method">GET</stringProp>
           <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
           <stringProp name="HTTPSampler.protocol">http</stringProp>
           <boolProp name="HTTPSampler.image_parser">false</boolProp>
           <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
           <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
             <collectionProp name="Arguments.arguments"/>
           </elementProp>
           <stringProp name="HTTPSampler.port"></stringProp>
           <stringProp name="HTTPSampler.mimetype"></stringProp>
           <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
-          <stringProp name="HTTPSampler.monitor">false</stringProp>
           <stringProp name="HTTPSampler.domain">jakarta.apache.org</stringProp>
+          <stringProp name="HTTPSampler.monitor">false</stringProp>
           <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
           <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
         </HTTPSampler>
         <hashTree>
           <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion" enabled="true">
             <collectionProp name="Asserion.test_strings">
               <stringProp name="-1139173792">&lt;/html&gt;</stringProp>
             </collectionProp>
             <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
-            <intProp name="Assertion.test_type">2</intProp>
             <stringProp name="Assertion.assume_success">false</stringProp>
+            <intProp name="Assertion.test_type">2</intProp>
           </ResponseAssertion>
           <hashTree/>
         </hashTree>
         <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="File Reporter" enabled="true">
           <objProp>
             <value class="SampleSaveConfiguration">
               <time>true</time>
               <latency>true</latency>
               <timestamp>true</timestamp>
               <success>true</success>
               <label>true</label>
               <code>true</code>
               <message>true</message>
               <threadName>false</threadName>
               <dataType>true</dataType>
               <encoding>true</encoding>
               <assertions>false</assertions>
               <subresults>false</subresults>
               <responseData>false</responseData>
               <samplerData>false</samplerData>
               <xml>true</xml>
               <fieldNames>true</fieldNames>
               <responseHeaders>false</responseHeaders>
               <requestHeaders>false</requestHeaders>
               <responseDataOnError>false</responseDataOnError>
               <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
               <assertionsResultsToSave>0</assertionsResultsToSave>
             </value>
             <name>saveConfig</name>
           </objProp>
           <stringProp name="filename">assertion.dat</stringProp>
           <boolProp name="ResultCollector.error_logging">false</boolProp>
         </ResultCollector>
         <hashTree/>
         <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
           <objProp>
             <value class="SampleSaveConfiguration">
               <time>true</time>
               <latency>true</latency>
               <timestamp>true</timestamp>
               <success>true</success>
               <label>true</label>
               <code>true</code>
               <message>true</message>
               <threadName>false</threadName>
               <dataType>true</dataType>
               <encoding>true</encoding>
               <assertions>false</assertions>
               <subresults>false</subresults>
               <responseData>false</responseData>
               <samplerData>false</samplerData>
               <xml>true</xml>
               <fieldNames>true</fieldNames>
               <responseHeaders>false</responseHeaders>
               <requestHeaders>false</requestHeaders>
               <responseDataOnError>false</responseDataOnError>
               <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
               <assertionsResultsToSave>0</assertionsResultsToSave>
             </value>
             <name>saveConfig</name>
           </objProp>
           <stringProp name="filename"></stringProp>
           <boolProp name="ResultCollector.error_logging">false</boolProp>
         </ResultCollector>
         <hashTree/>
       </hashTree>
     </hashTree>
   </hashTree>
 </jmeterTestPlan>
diff --git a/bin/testfiles/AuthManagerTestPlan.jmx b/bin/testfiles/AuthManagerTestPlan.jmx
index ba1d653ac..a823e40bc 100644
--- a/bin/testfiles/AuthManagerTestPlan.jmx
+++ b/bin/testfiles/AuthManagerTestPlan.jmx
@@ -1,141 +1,142 @@
+<?xml version="1.0" encoding="UTF-8"?>
 <jmeterTestPlan version="1.2" properties="1.8">
   <hashTree>
     <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
+      <collectionProp name="TestPlan.thread_groups"/>
       <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
         <collectionProp name="Arguments.arguments"/>
       </elementProp>
-      <collectionProp name="TestPlan.thread_groups"/>
       <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
       <boolProp name="TestPlan.functional_mode">false</boolProp>
       <stringProp name="TestPlan.comments"></stringProp>
     </TestPlan>
     <hashTree>
       <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
         <longProp name="ThreadGroup.start_time">0</longProp>
         <stringProp name="ThreadGroup.delay"></stringProp>
         <stringProp name="ThreadGroup.duration"></stringProp>
         <stringProp name="ThreadGroup.num_threads">1</stringProp>
         <boolProp name="ThreadGroup.scheduler">false</boolProp>
         <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
           <stringProp name="LoopController.loops">1</stringProp>
           <boolProp name="LoopController.continue_forever">false</boolProp>
         </elementProp>
         <longProp name="ThreadGroup.end_time">0</longProp>
         <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
         <stringProp name="ThreadGroup.ramp_time">0</stringProp>
       </ThreadGroup>
       <hashTree>
         <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
           <collectionProp name="AuthManager.auth_list">
             <elementProp name="" elementType="Authorization">
               <stringProp name="Authorization.url">http://localhost/secret</stringProp>
               <stringProp name="Authorization.realm"></stringProp>
               <stringProp name="Authorization.domain"></stringProp>
               <stringProp name="Authorization.password">spot</stringProp>
               <stringProp name="Authorization.username">kevin</stringProp>
             </elementProp>
           </collectionProp>
         </AuthManager>
         <hashTree/>
         <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
           <stringProp name="HTTPSampler.path">/</stringProp>
           <stringProp name="HTTPSampler.domain">localhost</stringProp>
           <stringProp name="HTTPSampler.protocol"></stringProp>
-          <stringProp name="HTTPSampler.port"></stringProp>
           <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
             <collectionProp name="Arguments.arguments"/>
           </elementProp>
+          <stringProp name="HTTPSampler.port"></stringProp>
         </ConfigTestElement>
         <hashTree/>
         <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="SecretPage1" enabled="true">
           <stringProp name="HTTPSampler.path">/secret/index.html</stringProp>
           <stringProp name="HTTPSampler.method">GET</stringProp>
           <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
           <stringProp name="HTTPSampler.protocol">http</stringProp>
           <boolProp name="HTTPSampler.image_parser">false</boolProp>
           <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
           <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
             <collectionProp name="Arguments.arguments"/>
           </elementProp>
           <stringProp name="HTTPSampler.port"></stringProp>
           <stringProp name="HTTPSampler.mimetype"></stringProp>
           <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
-          <stringProp name="HTTPSampler.monitor">false</stringProp>
           <stringProp name="HTTPSampler.domain"></stringProp>
+          <stringProp name="HTTPSampler.monitor">false</stringProp>
           <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
           <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
         </HTTPSampler>
         <hashTree/>
         <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="SecretPage2" enabled="true">
           <stringProp name="HTTPSampler.path">/secret/index2.html</stringProp>
           <stringProp name="HTTPSampler.method">GET</stringProp>
           <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
           <stringProp name="HTTPSampler.protocol">http</stringProp>
           <boolProp name="HTTPSampler.image_parser">false</boolProp>
           <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
           <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
             <collectionProp name="Arguments.arguments"/>
           </elementProp>
           <stringProp name="HTTPSampler.port"></stringProp>
           <stringProp name="HTTPSampler.mimetype"></stringProp>
           <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
-          <stringProp name="HTTPSampler.monitor">false</stringProp>
           <stringProp name="HTTPSampler.domain"></stringProp>
+          <stringProp name="HTTPSampler.monitor">false</stringProp>
           <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
           <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
         </HTTPSampler>
         <hashTree/>
         <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="NoSecretPage" enabled="true">
           <stringProp name="HTTPSampler.path">/index.html</stringProp>
           <stringProp name="HTTPSampler.method">GET</stringProp>
           <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
           <stringProp name="HTTPSampler.protocol">http</stringProp>
           <boolProp name="HTTPSampler.image_parser">false</boolProp>
           <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
           <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
             <collectionProp name="Arguments.arguments"/>
           </elementProp>
           <stringProp name="HTTPSampler.port"></stringProp>
           <stringProp name="HTTPSampler.mimetype"></stringProp>
           <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
-          <stringProp name="HTTPSampler.monitor">false</stringProp>
           <stringProp name="HTTPSampler.domain"></stringProp>
+          <stringProp name="HTTPSampler.monitor">false</stringProp>
           <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
           <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
         </HTTPSampler>
         <hashTree/>
         <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="File Reporter" enabled="true">
           <objProp>
             <value class="SampleSaveConfiguration">
               <time>true</time>
               <latency>true</latency>
               <timestamp>true</timestamp>
               <success>true</success>
               <label>true</label>
               <code>true</code>
               <message>true</message>
               <threadName>false</threadName>
               <dataType>true</dataType>
               <encoding>true</encoding>
               <assertions>false</assertions>
               <subresults>false</subresults>
               <responseData>false</responseData>
               <samplerData>false</samplerData>
               <xml>true</xml>
               <fieldNames>true</fieldNames>
               <responseHeaders>false</responseHeaders>
               <requestHeaders>false</requestHeaders>
               <responseDataOnError>false</responseDataOnError>
               <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
               <assertionsResultsToSave>0</assertionsResultsToSave>
             </value>
             <name>saveConfig</name>
           </objProp>
           <stringProp name="filename">auth-manager.dat</stringProp>
           <boolProp name="ResultCollector.error_logging">false</boolProp>
         </ResultCollector>
         <hashTree/>
       </hashTree>
     </hashTree>
   </hashTree>
 </jmeterTestPlan>
diff --git a/bin/testfiles/GuiTest.jmx b/bin/testfiles/GuiTest.jmx
index 7746f3e18..901e33d18 100644
--- a/bin/testfiles/GuiTest.jmx
+++ b/bin/testfiles/GuiTest.jmx
@@ -1,868 +1,869 @@
+<?xml version="1.0" encoding="UTF-8"?>
 <jmeterTestPlan version="1.2" properties="1.8">
   <hashTree>
     <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
+      <collectionProp name="TestPlan.thread_groups"/>
       <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
         <collectionProp name="Arguments.arguments">
           <elementProp name="server" elementType="Argument">
             <stringProp name="Argument.metadata">=</stringProp>
             <stringProp name="Argument.value">jakarta.apache.org</stringProp>
             <stringProp name="Argument.name">server</stringProp>
           </elementProp>
           <elementProp name="server" elementType="Argument">
             <stringProp name="Argument.metadata">=</stringProp>
             <stringProp name="Argument.value">jakarta.apache.org</stringProp>
             <stringProp name="Argument.name">server</stringProp>
           </elementProp>
         </collectionProp>
       </elementProp>
-      <collectionProp name="TestPlan.thread_groups"/>
       <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
       <boolProp name="TestPlan.functional_mode">false</boolProp>
       <stringProp name="TestPlan.comments"></stringProp>
     </TestPlan>
     <hashTree>
       <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Components" enabled="true">
         <longProp name="ThreadGroup.start_time">0</longProp>
         <stringProp name="ThreadGroup.delay"></stringProp>
         <stringProp name="ThreadGroup.duration"></stringProp>
         <stringProp name="ThreadGroup.num_threads">1</stringProp>
         <boolProp name="ThreadGroup.scheduler">false</boolProp>
         <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
           <intProp name="LoopController.loops">-1</intProp>
           <boolProp name="LoopController.continue_forever">false</boolProp>
         </elementProp>
         <longProp name="ThreadGroup.end_time">0</longProp>
         <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
         <stringProp name="ThreadGroup.ramp_time">1</stringProp>
       </ThreadGroup>
       <hashTree>
         <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Assertions" enabled="true"/>
         <hashTree>
           <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion" enabled="true">
             <collectionProp name="Asserion.test_strings">
               <stringProp name="0"></stringProp>
               <stringProp name="0"></stringProp>
               <stringProp name="0"></stringProp>
               <stringProp name="0"></stringProp>
               <stringProp name="0"></stringProp>
               <stringProp name="0"></stringProp>
               <stringProp name="0"></stringProp>
               <stringProp name="0"></stringProp>
             </collectionProp>
             <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
-            <intProp name="Assertion.test_type">2</intProp>
             <stringProp name="Assertion.assume_success">false</stringProp>
+            <intProp name="Assertion.test_type">2</intProp>
           </ResponseAssertion>
           <hashTree/>
           <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="true">
             <longProp name="DurationAssertion.duration">0</longProp>
           </DurationAssertion>
           <hashTree/>
           <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="Size Assertion" enabled="true">
             <intProp name="SizeAssertion.operator">1</intProp>
             <longProp name="SizeAssertion.size">0</longProp>
           </SizeAssertion>
           <hashTree/>
           <XMLAssertion guiclass="XMLAssertionGui" testclass="XMLAssertion" testname="XML Assertion" enabled="true"/>
           <hashTree/>
         </hashTree>
         <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Control" enabled="true"/>
         <hashTree>
           <InterleaveControl guiclass="InterleaveControlGui" testclass="InterleaveControl" testname="Interleave Controller" enabled="true">
             <intProp name="InterleaveControl.style">1</intProp>
           </InterleaveControl>
           <hashTree/>
           <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="ModuleController" enabled="true">
             <collectionProp name="ModuleController.node_path">
               <stringProp name="-1227702913">WorkBench</stringProp>
               <stringProp name="764597751">Test Plan</stringProp>
               <stringProp name="1546018614">Components</stringProp>
               <stringProp name="-209934895">Assertions</stringProp>
               <stringProp name="-209934895">Assertions</stringProp>
             </collectionProp>
           </ModuleController>
           <hashTree/>
           <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
           <hashTree/>
           <RandomController guiclass="RandomControlGui" testclass="RandomController" testname="Random Controller" enabled="true">
             <intProp name="InterleaveControl.style">1</intProp>
           </RandomController>
           <hashTree/>
           <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller" enabled="true">
             <intProp name="ThroughputController.style">0</intProp>
             <FloatProperty>
               <value>100.0</value>
               <savedValue>0.0</savedValue>
               <name>ThroughputController.percentThroughput</name>
             </FloatProperty>
             <boolProp name="ThroughputController.perThread">true</boolProp>
             <intProp name="ThroughputController.maxThroughput">1</intProp>
           </ThroughputController>
           <hashTree/>
           <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
             <stringProp name="IfController.condition">${__threadNum()} == 3</stringProp>
           </IfController>
           <hashTree/>
         </hashTree>
         <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Post Processors" enabled="true"/>
         <hashTree>
           <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
             <stringProp name="RegexExtractor.default"></stringProp>
             <stringProp name="RegexExtractor.regex"></stringProp>
             <stringProp name="RegexExtractor.useHeaders">false</stringProp>
-            <stringProp name="RegexExtractor.template"></stringProp>
             <stringProp name="RegexExtractor.match_number"></stringProp>
+            <stringProp name="RegexExtractor.template"></stringProp>
             <stringProp name="RegexExtractor.refname"></stringProp>
           </RegexExtractor>
           <hashTree/>
         </hashTree>
         <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Pre Processors" enabled="true"/>
         <hashTree>
           <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter Config" enabled="true">
             <stringProp name="CounterConfig.start">0</stringProp>
             <stringProp name="CounterConfig.incr">0</stringProp>
             <stringProp name="CounterConfig.name"></stringProp>
             <boolProp name="CounterConfig.per_user">false</boolProp>
             <stringProp name="CounterConfig.end">0</stringProp>
           </CounterConfig>
           <hashTree/>
           <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
             <collectionProp name="UserParameters.names">
               <stringProp name="username">username</stringProp>
               <stringProp name="password">password</stringProp>
               <stringProp name="category">category</stringProp>
               <stringProp name="color">color</stringProp>
             </collectionProp>
             <collectionProp name="UserParameters.thread_values">
               <collectionProp name="-1599762143">
                 <stringProp name="user1">user1</stringProp>
                 <stringProp name="pass1">pass1</stringProp>
                 <stringProp name="cat1">cat1</stringProp>
                 <stringProp name="red">red</stringProp>
               </collectionProp>
               <collectionProp name="2144649063">
                 <stringProp name="user2">user2</stringProp>
                 <stringProp name="pass2">pass2</stringProp>
                 <stringProp name="cat2">cat2</stringProp>
                 <stringProp name="green">green</stringProp>
               </collectionProp>
               <collectionProp name="-1601708465">
                 <stringProp name="user3">user3</stringProp>
                 <stringProp name="pass3">pass3</stringProp>
                 <stringProp name="cat3">cat3</stringProp>
                 <stringProp name=""></stringProp>
               </collectionProp>
             </collectionProp>
             <boolProp name="UserParameters.per_iteration">true</boolProp>
           </UserParameters>
           <hashTree/>
         </hashTree>
         <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Timers" enabled="true"/>
         <hashTree>
           <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
             <stringProp name="throughput">60</stringProp>
             <boolProp name="legacyMode">false</boolProp>
           </ConstantThroughputTimer>
           <hashTree/>
           <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
             <stringProp name="ConstantTimer.delay">300</stringProp>
           </ConstantTimer>
           <hashTree/>
           <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
-            <stringProp name="RandomTimer.range">100.0</stringProp>
             <stringProp name="ConstantTimer.delay">300</stringProp>
+            <stringProp name="RandomTimer.range">100.0</stringProp>
           </GaussianRandomTimer>
           <hashTree/>
           <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
-            <stringProp name="RandomTimer.range">100.0</stringProp>
             <stringProp name="ConstantTimer.delay">300</stringProp>
+            <stringProp name="RandomTimer.range">100.0</stringProp>
           </UniformRandomTimer>
           <hashTree/>
         </hashTree>
         <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Visualizers" enabled="true"/>
         <hashTree>
           <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Visualizer" enabled="true">
             <objProp>
               <value class="SampleSaveConfiguration">
                 <time>true</time>
                 <latency>true</latency>
                 <timestamp>true</timestamp>
                 <success>true</success>
                 <label>true</label>
                 <code>true</code>
                 <message>true</message>
                 <threadName>false</threadName>
                 <dataType>true</dataType>
                 <encoding>true</encoding>
                 <assertions>false</assertions>
                 <subresults>false</subresults>
                 <responseData>false</responseData>
                 <samplerData>false</samplerData>
                 <xml>true</xml>
                 <fieldNames>true</fieldNames>
                 <responseHeaders>false</responseHeaders>
                 <requestHeaders>false</requestHeaders>
                 <responseDataOnError>false</responseDataOnError>
                 <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                 <assertionsResultsToSave>0</assertionsResultsToSave>
               </value>
               <name>saveConfig</name>
             </objProp>
             <stringProp name="filename"></stringProp>
             <boolProp name="ResultCollector.error_logging">false</boolProp>
           </ResultCollector>
           <hashTree/>
           <ResultCollector guiclass="GraphAccumVisualizer" testclass="ResultCollector" testname="Graph Accum Visualizer" enabled="true">
             <objProp>
               <value class="SampleSaveConfiguration">
                 <time>true</time>
                 <latency>true</latency>
                 <timestamp>true</timestamp>
                 <success>true</success>
                 <label>true</label>
                 <code>true</code>
                 <message>true</message>
                 <threadName>false</threadName>
                 <dataType>true</dataType>
                 <encoding>true</encoding>
                 <assertions>false</assertions>
                 <subresults>false</subresults>
                 <responseData>false</responseData>
                 <samplerData>false</samplerData>
                 <xml>true</xml>
                 <fieldNames>true</fieldNames>
                 <responseHeaders>false</responseHeaders>
                 <requestHeaders>false</requestHeaders>
                 <responseDataOnError>false</responseDataOnError>
                 <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                 <assertionsResultsToSave>0</assertionsResultsToSave>
               </value>
               <name>saveConfig</name>
             </objProp>
             <stringProp name="filename"></stringProp>
             <boolProp name="ResultCollector.error_logging">false</boolProp>
           </ResultCollector>
           <hashTree/>
           <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="Graph Visualizer" enabled="true">
             <objProp>
               <value class="SampleSaveConfiguration">
                 <time>true</time>
                 <latency>true</latency>
                 <timestamp>true</timestamp>
                 <success>true</success>
                 <label>true</label>
                 <code>true</code>
                 <message>true</message>
                 <threadName>false</threadName>
                 <dataType>true</dataType>
                 <encoding>true</encoding>
                 <assertions>false</assertions>
                 <subresults>false</subresults>
                 <responseData>false</responseData>
                 <samplerData>false</samplerData>
                 <xml>true</xml>
                 <fieldNames>true</fieldNames>
                 <responseHeaders>false</responseHeaders>
                 <requestHeaders>false</requestHeaders>
                 <responseDataOnError>false</responseDataOnError>
                 <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                 <assertionsResultsToSave>0</assertionsResultsToSave>
               </value>
               <name>saveConfig</name>
             </objProp>
             <stringProp name="filename"></stringProp>
             <boolProp name="ResultCollector.error_logging">false</boolProp>
           </ResultCollector>
           <hashTree/>
           <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Simple Data Writer" enabled="true">
             <objProp>
               <value class="SampleSaveConfiguration">
                 <time>true</time>
                 <latency>true</latency>
                 <timestamp>true</timestamp>
                 <success>true</success>
                 <label>true</label>
                 <code>true</code>
                 <message>true</message>
                 <threadName>false</threadName>
                 <dataType>true</dataType>
                 <encoding>true</encoding>
                 <assertions>false</assertions>
                 <subresults>false</subresults>
                 <responseData>false</responseData>
                 <samplerData>false</samplerData>
                 <xml>true</xml>
                 <fieldNames>true</fieldNames>
                 <responseHeaders>false</responseHeaders>
                 <requestHeaders>false</requestHeaders>
                 <responseDataOnError>false</responseDataOnError>
                 <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                 <assertionsResultsToSave>0</assertionsResultsToSave>
               </value>
               <name>saveConfig</name>
             </objProp>
             <stringProp name="filename"></stringProp>
             <boolProp name="ResultCollector.error_logging">false</boolProp>
           </ResultCollector>
           <hashTree/>
           <ResultCollector guiclass="SplineVisualizer" testclass="ResultCollector" testname="Spline Visualizer" enabled="true">
             <objProp>
               <value class="SampleSaveConfiguration">
                 <time>true</time>
                 <latency>true</latency>
                 <timestamp>true</timestamp>
                 <success>true</success>
                 <label>true</label>
                 <code>true</code>
                 <message>true</message>
                 <threadName>false</threadName>
                 <dataType>true</dataType>
                 <encoding>true</encoding>
                 <assertions>false</assertions>
                 <subresults>false</subresults>
                 <responseData>false</responseData>
                 <samplerData>false</samplerData>
                 <xml>true</xml>
                 <fieldNames>true</fieldNames>
                 <responseHeaders>false</responseHeaders>
                 <requestHeaders>false</requestHeaders>
                 <responseDataOnError>false</responseDataOnError>
                 <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                 <assertionsResultsToSave>0</assertionsResultsToSave>
               </value>
               <name>saveConfig</name>
             </objProp>
             <stringProp name="filename"></stringProp>
             <boolProp name="ResultCollector.error_logging">false</boolProp>
           </ResultCollector>
           <hashTree/>
           <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="StatVisualizer" enabled="true">
             <objProp>
               <value class="SampleSaveConfiguration">
                 <time>true</time>
                 <latency>true</latency>
                 <timestamp>true</timestamp>
                 <success>true</success>
                 <label>true</label>
                 <code>true</code>
                 <message>true</message>
                 <threadName>false</threadName>
                 <dataType>true</dataType>
                 <encoding>true</encoding>
                 <assertions>false</assertions>
                 <subresults>false</subresults>
                 <responseData>false</responseData>
                 <samplerData>false</samplerData>
                 <xml>true</xml>
                 <fieldNames>true</fieldNames>
                 <responseHeaders>false</responseHeaders>
                 <requestHeaders>false</requestHeaders>
                 <responseDataOnError>false</responseDataOnError>
                 <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                 <assertionsResultsToSave>0</assertionsResultsToSave>
               </value>
               <name>saveConfig</name>
             </objProp>
             <stringProp name="filename"></stringProp>
             <boolProp name="ResultCollector.error_logging">false</boolProp>
           </ResultCollector>
           <hashTree/>
           <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="Table Visualizer" enabled="true">
             <objProp>
               <value class="SampleSaveConfiguration">
                 <time>true</time>
                 <latency>true</latency>
                 <timestamp>true</timestamp>
                 <success>true</success>
                 <label>true</label>
                 <code>true</code>
                 <message>true</message>
                 <threadName>false</threadName>
                 <dataType>true</dataType>
                 <encoding>true</encoding>
                 <assertions>false</assertions>
                 <subresults>false</subresults>
                 <responseData>false</responseData>
                 <samplerData>false</samplerData>
                 <xml>true</xml>
                 <fieldNames>true</fieldNames>
                 <responseHeaders>false</responseHeaders>
                 <requestHeaders>false</requestHeaders>
                 <responseDataOnError>false</responseDataOnError>
                 <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                 <assertionsResultsToSave>0</assertionsResultsToSave>
               </value>
               <name>saveConfig</name>
             </objProp>
             <stringProp name="filename"></stringProp>
             <boolProp name="ResultCollector.error_logging">false</boolProp>
           </ResultCollector>
           <hashTree/>
           <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Full Visualizer" enabled="true">
             <objProp>
               <value class="SampleSaveConfiguration">
                 <time>true</time>
                 <latency>true</latency>
                 <timestamp>true</timestamp>
                 <success>true</success>
                 <label>true</label>
                 <code>true</code>
                 <message>true</message>
                 <threadName>false</threadName>
                 <dataType>true</dataType>
                 <encoding>true</encoding>
                 <assertions>false</assertions>
                 <subresults>false</subresults>
                 <responseData>false</responseData>
                 <samplerData>false</samplerData>
                 <xml>true</xml>
                 <fieldNames>true</fieldNames>
                 <responseHeaders>false</responseHeaders>
                 <requestHeaders>false</requestHeaders>
                 <responseDataOnError>false</responseDataOnError>
                 <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                 <assertionsResultsToSave>0</assertionsResultsToSave>
               </value>
               <name>saveConfig</name>
             </objProp>
             <stringProp name="filename"></stringProp>
             <boolProp name="ResultCollector.error_logging">false</boolProp>
           </ResultCollector>
           <hashTree/>
         </hashTree>
       </hashTree>
       <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Core" enabled="true">
         <longProp name="ThreadGroup.start_time">0</longProp>
         <stringProp name="ThreadGroup.delay"></stringProp>
         <stringProp name="ThreadGroup.duration"></stringProp>
         <stringProp name="ThreadGroup.num_threads">1</stringProp>
         <boolProp name="ThreadGroup.scheduler">false</boolProp>
         <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
           <intProp name="LoopController.loops">-1</intProp>
           <boolProp name="LoopController.continue_forever">false</boolProp>
         </elementProp>
         <longProp name="ThreadGroup.end_time">0</longProp>
         <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
         <stringProp name="ThreadGroup.ramp_time">1</stringProp>
       </ThreadGroup>
       <hashTree>
         <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Config" enabled="true"/>
         <hashTree>
           <ConfigTestElement guiclass="LoginConfigGui" testclass="ConfigTestElement" testname="Login Config Element" enabled="true">
             <stringProp name="ConfigTestElement.username"></stringProp>
             <stringProp name="ConfigTestElement.password"></stringProp>
           </ConfigTestElement>
           <hashTree/>
           <ConfigTestElement guiclass="SimpleConfigGui" testclass="ConfigTestElement" testname="Simple Config Element" enabled="true"/>
           <hashTree/>
           <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
             <stringProp name="variableNames"></stringProp>
             <stringProp name="filename"></stringProp>
           </CSVDataSet>
           <hashTree/>
         </hashTree>
         <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Control" enabled="true"/>
         <hashTree>
           <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
           <hashTree/>
           <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
             <stringProp name="LoopController.loops">1</stringProp>
             <boolProp name="LoopController.continue_forever">true</boolProp>
           </LoopController>
           <hashTree/>
         </hashTree>
       </hashTree>
       <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Protocol: FTP" enabled="true">
         <longProp name="ThreadGroup.start_time">0</longProp>
         <stringProp name="ThreadGroup.delay"></stringProp>
         <stringProp name="ThreadGroup.duration"></stringProp>
         <stringProp name="ThreadGroup.num_threads">1</stringProp>
         <boolProp name="ThreadGroup.scheduler">false</boolProp>
         <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
           <intProp name="LoopController.loops">-1</intProp>
           <boolProp name="LoopController.continue_forever">false</boolProp>
         </elementProp>
         <longProp name="ThreadGroup.end_time">0</longProp>
         <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
         <stringProp name="ThreadGroup.ramp_time">1</stringProp>
       </ThreadGroup>
       <hashTree>
         <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Config" enabled="true"/>
         <hashTree>
           <ConfigTestElement guiclass="FtpConfigGui" testclass="ConfigTestElement" testname="FTP Config" enabled="true">
             <stringProp name="FTPSampler.server"></stringProp>
             <stringProp name="FTPSampler.filename"></stringProp>
           </ConfigTestElement>
           <hashTree/>
         </hashTree>
         <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Control" enabled="true"/>
         <hashTree>
           <FTPSampler guiclass="FtpTestSamplerGui" testclass="FTPSampler" testname="FTP Test Sampler" enabled="true">
             <stringProp name="FTPSampler.server"></stringProp>
             <stringProp name="FTPSampler.filename"></stringProp>
             <stringProp name="ConfigTestElement.username"></stringProp>
             <stringProp name="ConfigTestElement.password"></stringProp>
           </FTPSampler>
           <hashTree/>
         </hashTree>
       </hashTree>
       <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Protocol: HTTP" enabled="true">
         <longProp name="ThreadGroup.start_time">0</longProp>
         <stringProp name="ThreadGroup.delay"></stringProp>
         <stringProp name="ThreadGroup.duration"></stringProp>
         <stringProp name="ThreadGroup.num_threads">1</stringProp>
         <boolProp name="ThreadGroup.scheduler">false</boolProp>
         <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
           <intProp name="LoopController.loops">-1</intProp>
           <boolProp name="LoopController.continue_forever">false</boolProp>
         </elementProp>
         <longProp name="ThreadGroup.end_time">0</longProp>
         <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
         <stringProp name="ThreadGroup.ramp_time">1</stringProp>
       </ThreadGroup>
       <hashTree>
         <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Config" enabled="true"/>
         <hashTree>
           <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
             <stringProp name="HTTPSampler.path"></stringProp>
             <stringProp name="HTTPSampler.domain"></stringProp>
             <stringProp name="HTTPSampler.protocol"></stringProp>
-            <stringProp name="HTTPSampler.port"></stringProp>
             <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Argument List" enabled="true">
               <collectionProp name="Arguments.arguments"/>
             </elementProp>
+            <stringProp name="HTTPSampler.port"></stringProp>
           </ConfigTestElement>
           <hashTree/>
         </hashTree>
         <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Control" enabled="true"/>
         <hashTree>
           <RecordingController guiclass="RecordController" testclass="RecordingController" testname="Recording Controller" enabled="true"/>
           <hashTree/>
         </hashTree>
         <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GUI" enabled="true"/>
         <hashTree>
           <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="AuthPanel" enabled="true">
             <collectionProp name="AuthManager.auth_list"/>
           </AuthManager>
           <hashTree/>
           <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="Cookie Panel" enabled="true">
             <boolProp name="CookieManager.clearEachIteration">false</boolProp>
             <collectionProp name="CookieManager.cookies"/>
           </CookieManager>
           <hashTree/>
           <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header Panel" enabled="true">
             <collectionProp name="HeaderManager.headers"/>
           </HeaderManager>
           <hashTree/>
         </hashTree>
         <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Pre Processors" enabled="true"/>
         <hashTree>
           <AnchorModifier guiclass="AnchorModifierGui" testclass="AnchorModifier" testname="Anchor Modifier" enabled="true"/>
           <hashTree/>
           <ParamModifier guiclass="ParamModifierGui" testclass="ParamModifier" testname="Param Modifier" enabled="true">
             <elementProp name="ParamModifier.mask" elementType="ParamMask">
               <longProp name="ParamModifier.upper_bound">10</longProp>
               <stringProp name="ParamModifier.prefix"></stringProp>
               <longProp name="ParamModifier.lower_bound">0</longProp>
               <stringProp name="ParamModifier.suffix"></stringProp>
               <longProp name="ParamModifier.increment">1</longProp>
               <stringProp name="ParamModifier.field_name"></stringProp>
             </elementProp>
           </ParamModifier>
           <hashTree/>
           <URLRewritingModifier guiclass="URLRewritingModifierGui" testclass="URLRewritingModifier" testname="URL Rewriting Modifier" enabled="true">
             <boolProp name="path_extension">false</boolProp>
             <boolProp name="path_extension_no_questionmark">false</boolProp>
-            <boolProp name="path_extension_no_equals">false</boolProp>
             <stringProp name="argument_name"></stringProp>
+            <boolProp name="path_extension_no_equals">false</boolProp>
           </URLRewritingModifier>
           <hashTree/>
           <UserParameterModifier guiclass="UserParameterModifierGui" testclass="UserParameterModifier" testname="User Parameter Modifier" enabled="true">
             <stringProp name="UserParameterModifier.xmluri">users.xml</stringProp>
           </UserParameterModifier>
           <hashTree/>
         </hashTree>
         <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Samplers" enabled="true"/>
         <hashTree>
           <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="HTTP Test Sampler" enabled="true">
             <stringProp name="HTTPSampler.path"></stringProp>
             <stringProp name="HTTPSampler.method">POST</stringProp>
             <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
             <stringProp name="HTTPSampler.protocol"></stringProp>
             <boolProp name="HTTPSampler.image_parser">false</boolProp>
             <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
             <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="Argument List" enabled="true">
               <collectionProp name="Arguments.arguments"/>
             </elementProp>
             <stringProp name="HTTPSampler.port"></stringProp>
             <stringProp name="HTTPSampler.mimetype"></stringProp>
             <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
-            <stringProp name="HTTPSampler.domain"></stringProp>
             <stringProp name="HTTPSampler.monitor">false</stringProp>
+            <stringProp name="HTTPSampler.domain"></stringProp>
             <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
             <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
           </HTTPSampler>
           <hashTree/>
           <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="SOAP Sampler" enabled="true">
             <stringProp name="HTTPSampler.path">/</stringProp>
             <stringProp name="HTTPSampler.encoded_path">/</stringProp>
             <stringProp name="HTTPSampler.method">POST</stringProp>
             <stringProp name="HTTPSampler.protocol">http</stringProp>
             <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
               <collectionProp name="Arguments.arguments"/>
             </elementProp>
             <intProp name="HTTPSampler.port">-1</intProp>
             <stringProp name="HTTPSampler.domain"></stringProp>
             <stringProp name="HTTPSamper.xml_data"></stringProp>
             <stringProp name="SoapSampler.URL_DATA"></stringProp>
           </SoapSampler>
           <hashTree/>
           <WebServiceSampler guiclass="WebServiceSamplerGui" testclass="WebServiceSampler" testname="WebService (SOAP) Request" enabled="true">
             <stringProp name="HTTPSampler.path">/</stringProp>
             <stringProp name="HTTPSampler.encoded_path">/</stringProp>
             <stringProp name="HTTPSampler.method">POST</stringProp>
             <stringProp name="WebServiceSampler.proxy_host"></stringProp>
             <stringProp name="HTTPSampler.protocol">http</stringProp>
             <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
               <collectionProp name="Arguments.arguments"/>
             </elementProp>
             <stringProp name="WebServiceSampler.proxy_port"></stringProp>
             <intProp name="HTTPSampler.port">80</intProp>
             <stringProp name="WebServiceSampler.use_proxy">false</stringProp>
             <stringProp name="Soap.Action"></stringProp>
             <stringProp name="WebServiceSampler.xml_data_file"></stringProp>
-            <stringProp name="WebserviceSampler.wsdl_url"></stringProp>
-            <stringProp name="WebServiceSampler.xml_path_loc"></stringProp>
             <stringProp name="WebServiceSampler.read_response">false</stringProp>
+            <stringProp name="WebServiceSampler.xml_path_loc"></stringProp>
+            <stringProp name="WebserviceSampler.wsdl_url"></stringProp>
             <stringProp name="WebServiceSampler.memory_cache">false</stringProp>
             <stringProp name="HTTPSampler.domain"></stringProp>
             <stringProp name="HTTPSamper.xml_data"></stringProp>
           </WebServiceSampler>
           <hashTree/>
           <AccessLogSampler guiclass="TestBeanGUI" testclass="AccessLogSampler" testname="Tomcat Access Log Sampler" enabled="true">
             <stringProp name="AccessLogSampler.parser_class_name">org.apache.jmeter.protocol.http.util.accesslog.TCLogParser</stringProp>
             <boolProp name="HTTPSampler.image_parser">false</boolProp>
             <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
               <collectionProp name="Arguments.arguments"/>
             </elementProp>
             <intProp name="HTTPSampler.port">80</intProp>
             <stringProp name="parserClassName">org.apache.jmeter.protocol.http.util.accesslog.TCLogParser</stringProp>
             <stringProp name="portString"></stringProp>
             <stringProp name="logFile"></stringProp>
             <stringProp name="HTTPSampler.domain"></stringProp>
             <stringProp name="domain"></stringProp>
             <stringProp name="AccessLogSampler.generator_class_name">org.apache.jmeter.protocol.http.util.accesslog.StandardGenerator</stringProp>
-            <stringProp name="AccessLogSampler.log_file"></stringProp>
             <boolProp name="imageParsing">false</boolProp>
+            <stringProp name="AccessLogSampler.log_file"></stringProp>
           </AccessLogSampler>
           <hashTree/>
         </hashTree>
       </hashTree>
       <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Protocol: Java" enabled="true">
         <longProp name="ThreadGroup.start_time">0</longProp>
         <stringProp name="ThreadGroup.delay"></stringProp>
         <stringProp name="ThreadGroup.duration"></stringProp>
         <stringProp name="ThreadGroup.num_threads">1</stringProp>
         <boolProp name="ThreadGroup.scheduler">false</boolProp>
         <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
           <intProp name="LoopController.loops">-1</intProp>
           <boolProp name="LoopController.continue_forever">false</boolProp>
         </elementProp>
         <longProp name="ThreadGroup.end_time">0</longProp>
         <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
         <stringProp name="ThreadGroup.ramp_time">1</stringProp>
       </ThreadGroup>
       <hashTree>
         <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Config" enabled="true"/>
         <hashTree>
           <JavaConfig guiclass="JavaConfigGui" testclass="JavaConfig" testname="Java Config" enabled="true">
             <stringProp name="classname">org.apache.jmeter.protocol.java.test.SleepTest</stringProp>
             <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
               <collectionProp name="Arguments.arguments">
                 <elementProp name="SleepTime" elementType="Argument">
                   <stringProp name="Argument.metadata">=</stringProp>
                   <stringProp name="Argument.value">1000</stringProp>
                   <stringProp name="Argument.name">SleepTime</stringProp>
                 </elementProp>
                 <elementProp name="SleepMask" elementType="Argument">
                   <stringProp name="Argument.metadata">=</stringProp>
                   <stringProp name="Argument.value">0x3FF</stringProp>
                   <stringProp name="Argument.name">SleepMask</stringProp>
                 </elementProp>
               </collectionProp>
             </elementProp>
           </JavaConfig>
           <hashTree/>
         </hashTree>
         <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Control" enabled="true"/>
         <hashTree>
           <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="Java SleepTest" enabled="true">
             <stringProp name="classname">org.apache.jmeter.protocol.java.test.SleepTest</stringProp>
             <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
               <collectionProp name="Arguments.arguments">
                 <elementProp name="SleepTime" elementType="Argument">
                   <stringProp name="Argument.metadata">=</stringProp>
                   <stringProp name="Argument.value">1000</stringProp>
                   <stringProp name="Argument.name">SleepTime</stringProp>
                 </elementProp>
                 <elementProp name="SleepMask" elementType="Argument">
                   <stringProp name="Argument.metadata">=</stringProp>
                   <stringProp name="Argument.value">0x3FF</stringProp>
                   <stringProp name="Argument.name">SleepMask</stringProp>
                 </elementProp>
               </collectionProp>
             </elementProp>
           </JavaSampler>
           <hashTree/>
           <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="JavaTest" enabled="true">
             <stringProp name="classname">org.apache.jmeter.protocol.java.test.JavaTest</stringProp>
             <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
               <collectionProp name="Arguments.arguments">
                 <elementProp name="Sleep_Time" elementType="Argument">
                   <stringProp name="Argument.metadata">=</stringProp>
                   <stringProp name="Argument.value">100</stringProp>
                   <stringProp name="Argument.name">Sleep_Time</stringProp>
                 </elementProp>
                 <elementProp name="Sleep_Mask" elementType="Argument">
                   <stringProp name="Argument.metadata">=</stringProp>
                   <stringProp name="Argument.value">0xFF</stringProp>
                   <stringProp name="Argument.name">Sleep_Mask</stringProp>
                 </elementProp>
                 <elementProp name="Label" elementType="Argument">
                   <stringProp name="Argument.metadata">=</stringProp>
                   <stringProp name="Argument.value">JavaTest</stringProp>
                   <stringProp name="Argument.name">Label</stringProp>
                 </elementProp>
                 <elementProp name="ResponseCode" elementType="Argument">
                   <stringProp name="Argument.metadata">=</stringProp>
                   <stringProp name="Argument.value">200 (or any other number)</stringProp>
                   <stringProp name="Argument.name">ResponseCode</stringProp>
                 </elementProp>
                 <elementProp name="ResponseMessage" elementType="Argument">
                   <stringProp name="Argument.metadata">=</stringProp>
                   <stringProp name="Argument.value">OK (or any other text)</stringProp>
                   <stringProp name="Argument.name">ResponseMessage</stringProp>
                 </elementProp>
                 <elementProp name="Status" elementType="Argument">
                   <stringProp name="Argument.metadata">=</stringProp>
                   <stringProp name="Argument.value">OK</stringProp>
                   <stringProp name="Argument.name">Status</stringProp>
                 </elementProp>
                 <elementProp name="SamplerData" elementType="Argument">
                   <stringProp name="Argument.metadata">=</stringProp>
                   <stringProp name="Argument.value">SamplerData goes here</stringProp>
                   <stringProp name="Argument.name">SamplerData</stringProp>
                 </elementProp>
                 <elementProp name="ResultData" elementType="Argument">
                   <stringProp name="Argument.metadata">=</stringProp>
                   <stringProp name="Argument.value">ResultData goes here</stringProp>
                   <stringProp name="Argument.name">ResultData</stringProp>
                 </elementProp>
               </collectionProp>
             </elementProp>
           </JavaSampler>
           <hashTree/>
           <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
             <stringProp name="BeanShellSampler.filename"></stringProp>
             <stringProp name="BeanShellSampler.query">ResponseCode=12;
 ResponseMessage=&quot;Buckle my shoe&quot;;
 IsSuccess=false;
 Label=&quot;Sticky&quot;;
 // FileName is the Script file name
 // bsh.args[1] == &quot;quick&quot;
 return &quot;This will go into the Response Data field&quot;;</stringProp>
             <stringProp name="BeanShellSampler.parameters">the quick brown fox</stringProp>
           </BeanShellSampler>
           <hashTree/>
         </hashTree>
       </hashTree>
       <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Protocol: JDBC" enabled="true">
         <longProp name="ThreadGroup.start_time">0</longProp>
         <stringProp name="ThreadGroup.delay"></stringProp>
         <stringProp name="ThreadGroup.duration"></stringProp>
         <stringProp name="ThreadGroup.num_threads">1</stringProp>
         <boolProp name="ThreadGroup.scheduler">false</boolProp>
         <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
           <intProp name="LoopController.loops">-1</intProp>
           <boolProp name="LoopController.continue_forever">false</boolProp>
         </elementProp>
         <longProp name="ThreadGroup.end_time">0</longProp>
         <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
         <stringProp name="ThreadGroup.ramp_time">1</stringProp>
       </ThreadGroup>
       <hashTree>
         <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Config" enabled="true"/>
         <hashTree>
           <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
             <stringProp name="password"></stringProp>
             <stringProp name="checkQuery">Select 1</stringProp>
             <stringProp name="timeout">10000</stringProp>
             <stringProp name="trimInterval">60000</stringProp>
             <boolProp name="autocommit">true</boolProp>
             <stringProp name="poolMax">10</stringProp>
             <stringProp name="driver"></stringProp>
             <stringProp name="connectionAge">5000</stringProp>
             <stringProp name="dataSource"></stringProp>
-            <boolProp name="keepAlive">true</boolProp>
             <stringProp name="username"></stringProp>
+            <boolProp name="keepAlive">true</boolProp>
             <stringProp name="dbUrl"></stringProp>
           </JDBCDataSource>
           <hashTree/>
         </hashTree>
         <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Control" enabled="true"/>
         <hashTree>
           <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Test Sample" enabled="true">
             <stringProp name="JDBCSampler.url"></stringProp>
             <stringProp name="JDBCSampler.connections">1</stringProp>
             <stringProp name="ConfigTestElement.username"></stringProp>
             <stringProp name="JDBCSampler.maxuse">50</stringProp>
             <stringProp name="dataSource"></stringProp>
             <stringProp name="query"></stringProp>
             <stringProp name="JDBCSampler.driver"></stringProp>
             <stringProp name="JDBCSampler.connPoolClass">org.apache.jmeter.protocol.jdbc.util.JMeter19ConnectionPool</stringProp>
             <stringProp name="ConfigTestElement.password"></stringProp>
           </JDBCSampler>
           <hashTree/>
         </hashTree>
       </hashTree>
       <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="LDAP" enabled="true">
         <longProp name="ThreadGroup.start_time">0</longProp>
         <stringProp name="ThreadGroup.delay"></stringProp>
         <stringProp name="ThreadGroup.duration"></stringProp>
         <stringProp name="ThreadGroup.num_threads">1</stringProp>
         <boolProp name="ThreadGroup.scheduler">false</boolProp>
         <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
           <intProp name="LoopController.loops">-1</intProp>
           <boolProp name="LoopController.continue_forever">false</boolProp>
         </elementProp>
         <longProp name="ThreadGroup.end_time">0</longProp>
         <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
         <stringProp name="ThreadGroup.ramp_time">1</stringProp>
       </ThreadGroup>
       <hashTree>
         <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Config" enabled="true"/>
         <hashTree>
           <ConfigTestElement guiclass="LdapConfigGui" testclass="ConfigTestElement" testname="LDAP Request Defaults" enabled="true">
             <stringProp name="rootdn"></stringProp>
             <stringProp name="servername"></stringProp>
             <stringProp name="port"></stringProp>
             <boolProp name="user_defined">false</boolProp>
           </ConfigTestElement>
           <hashTree/>
         </hashTree>
         <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Samplers" enabled="true"/>
         <hashTree>
           <LDAPSampler guiclass="LdapTestSamplerGui" testclass="LDAPSampler" testname="LDAP Request" enabled="true">
             <stringProp name="rootdn"></stringProp>
             <stringProp name="servername"></stringProp>
             <stringProp name="ConfigTestElement.username"></stringProp>
             <stringProp name="port"></stringProp>
-            <boolProp name="user_defined">false</boolProp>
             <stringProp name="ConfigTestElement.password"></stringProp>
+            <boolProp name="user_defined">false</boolProp>
           </LDAPSampler>
           <hashTree/>
         </hashTree>
       </hashTree>
     </hashTree>
   </hashTree>
 </jmeterTestPlan>
diff --git a/bin/testfiles/HeaderManagerTestPlan.jmx b/bin/testfiles/HeaderManagerTestPlan.jmx
index 290eb21df..07db88219 100644
--- a/bin/testfiles/HeaderManagerTestPlan.jmx
+++ b/bin/testfiles/HeaderManagerTestPlan.jmx
@@ -1,90 +1,91 @@
+<?xml version="1.0" encoding="UTF-8"?>
 <jmeterTestPlan version="1.2" properties="1.8">
   <hashTree>
     <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
-      <collectionProp name="TestPlan.thread_groups"/>
       <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
         <collectionProp name="Arguments.arguments"/>
       </elementProp>
+      <collectionProp name="TestPlan.thread_groups"/>
       <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
       <boolProp name="TestPlan.functional_mode">false</boolProp>
       <stringProp name="TestPlan.comments"></stringProp>
     </TestPlan>
     <hashTree>
       <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
         <longProp name="ThreadGroup.start_time">0</longProp>
         <stringProp name="ThreadGroup.delay"></stringProp>
         <stringProp name="ThreadGroup.duration"></stringProp>
         <stringProp name="ThreadGroup.num_threads">1</stringProp>
         <boolProp name="ThreadGroup.scheduler">false</boolProp>
         <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
           <stringProp name="LoopController.loops">1</stringProp>
           <boolProp name="LoopController.continue_forever">false</boolProp>
         </elementProp>
         <longProp name="ThreadGroup.end_time">0</longProp>
         <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
         <stringProp name="ThreadGroup.ramp_time">0</stringProp>
       </ThreadGroup>
       <hashTree>
         <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
           <collectionProp name="HeaderManager.headers">
             <elementProp name="User-Agent" elementType="Header">
               <stringProp name="Header.value">Mozilla/4.0 (compatible; MSIE 5.5; Windows 98)</stringProp>
               <stringProp name="Header.name">User-Agent</stringProp>
             </elementProp>
           </collectionProp>
         </HeaderManager>
         <hashTree/>
         <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="HTTP Request" enabled="true">
           <stringProp name="HTTPSampler.path">/</stringProp>
           <stringProp name="HTTPSampler.method">GET</stringProp>
           <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
           <stringProp name="HTTPSampler.protocol">http</stringProp>
           <boolProp name="HTTPSampler.image_parser">false</boolProp>
           <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
           <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
             <collectionProp name="Arguments.arguments"/>
           </elementProp>
           <stringProp name="HTTPSampler.port"></stringProp>
           <stringProp name="HTTPSampler.mimetype"></stringProp>
           <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
-          <stringProp name="HTTPSampler.monitor">false</stringProp>
           <stringProp name="HTTPSampler.domain">jakarta.apache.org</stringProp>
+          <stringProp name="HTTPSampler.monitor">false</stringProp>
           <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
           <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
         </HTTPSampler>
         <hashTree/>
         <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="File Reporter" enabled="true">
           <objProp>
             <value class="SampleSaveConfiguration">
               <time>true</time>
               <latency>true</latency>
               <timestamp>true</timestamp>
               <success>true</success>
               <label>true</label>
               <code>true</code>
               <message>true</message>
               <threadName>false</threadName>
               <dataType>true</dataType>
               <encoding>true</encoding>
               <assertions>false</assertions>
               <subresults>false</subresults>
               <responseData>false</responseData>
               <samplerData>false</samplerData>
               <xml>true</xml>
               <fieldNames>true</fieldNames>
               <responseHeaders>false</responseHeaders>
               <requestHeaders>false</requestHeaders>
               <responseDataOnError>false</responseDataOnError>
               <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
               <assertionsResultsToSave>0</assertionsResultsToSave>
             </value>
             <name>saveConfig</name>
           </objProp>
           <stringProp name="filename">header-manager.dat</stringProp>
           <boolProp name="ResultCollector.error_logging">false</boolProp>
         </ResultCollector>
         <hashTree/>
       </hashTree>
     </hashTree>
   </hashTree>
 </jmeterTestPlan>
diff --git a/bin/testfiles/InterleaveTestPlan.jmx b/bin/testfiles/InterleaveTestPlan.jmx
index f1063b69a..c6dc0e9df 100644
--- a/bin/testfiles/InterleaveTestPlan.jmx
+++ b/bin/testfiles/InterleaveTestPlan.jmx
@@ -1,134 +1,135 @@
+<?xml version="1.0" encoding="UTF-8"?>
 <jmeterTestPlan version="1.2" properties="1.8">
   <hashTree>
     <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
+      <collectionProp name="TestPlan.thread_groups"/>
       <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
         <collectionProp name="Arguments.arguments"/>
       </elementProp>
-      <collectionProp name="TestPlan.thread_groups"/>
       <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
       <boolProp name="TestPlan.functional_mode">false</boolProp>
       <stringProp name="TestPlan.comments"></stringProp>
     </TestPlan>
     <hashTree>
       <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Jakarta Users" enabled="true">
         <longProp name="ThreadGroup.start_time">0</longProp>
         <stringProp name="ThreadGroup.delay"></stringProp>
         <stringProp name="ThreadGroup.duration"></stringProp>
         <stringProp name="ThreadGroup.num_threads">2</stringProp>
         <boolProp name="ThreadGroup.scheduler">false</boolProp>
         <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
           <stringProp name="LoopController.loops">5</stringProp>
           <boolProp name="LoopController.continue_forever">false</boolProp>
         </elementProp>
         <longProp name="ThreadGroup.end_time">0</longProp>
         <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
         <stringProp name="ThreadGroup.ramp_time">0</stringProp>
       </ThreadGroup>
       <hashTree>
         <InterleaveControl guiclass="InterleaveControlGui" testclass="InterleaveControl" testname="Interleave Controller" enabled="true">
           <intProp name="InterleaveControl.style">0</intProp>
         </InterleaveControl>
         <hashTree>
           <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="Defaults" enabled="true">
             <stringProp name="HTTPSampler.path"></stringProp>
             <stringProp name="HTTPSampler.domain"></stringProp>
             <stringProp name="HTTPSampler.protocol"></stringProp>
+            <stringProp name="HTTPSampler.port"></stringProp>
             <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
               <collectionProp name="Arguments.arguments"/>
             </elementProp>
-            <stringProp name="HTTPSampler.port"></stringProp>
           </ConfigTestElement>
           <hashTree/>
           <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="News Page" enabled="true">
             <stringProp name="HTTPSampler.path">/site/news.html</stringProp>
             <stringProp name="HTTPSampler.method">GET</stringProp>
             <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
             <stringProp name="HTTPSampler.protocol">http</stringProp>
             <boolProp name="HTTPSampler.image_parser">false</boolProp>
             <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
             <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
               <collectionProp name="Arguments.arguments"/>
             </elementProp>
             <stringProp name="HTTPSampler.port"></stringProp>
             <stringProp name="HTTPSampler.mimetype"></stringProp>
             <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
-            <stringProp name="HTTPSampler.domain"></stringProp>
             <stringProp name="HTTPSampler.monitor">false</stringProp>
+            <stringProp name="HTTPSampler.domain"></stringProp>
             <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
             <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
           </HTTPSampler>
           <hashTree/>
           <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="FAQ Page" enabled="true">
             <stringProp name="HTTPSampler.path">/site/faqs.html</stringProp>
             <stringProp name="HTTPSampler.method">GET</stringProp>
             <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
             <stringProp name="HTTPSampler.protocol">http</stringProp>
             <boolProp name="HTTPSampler.image_parser">false</boolProp>
             <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
             <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
               <collectionProp name="Arguments.arguments"/>
             </elementProp>
             <stringProp name="HTTPSampler.port"></stringProp>
             <stringProp name="HTTPSampler.mimetype"></stringProp>
             <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
-            <stringProp name="HTTPSampler.domain"></stringProp>
             <stringProp name="HTTPSampler.monitor">false</stringProp>
+            <stringProp name="HTTPSampler.domain"></stringProp>
             <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
             <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
           </HTTPSampler>
           <hashTree/>
           <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="Gump Page" enabled="true">
             <stringProp name="HTTPSampler.path">/gump</stringProp>
             <stringProp name="HTTPSampler.method">GET</stringProp>
             <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
             <stringProp name="HTTPSampler.protocol">http</stringProp>
             <boolProp name="HTTPSampler.image_parser">false</boolProp>
             <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
             <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
               <collectionProp name="Arguments.arguments"/>
             </elementProp>
             <stringProp name="HTTPSampler.port"></stringProp>
             <stringProp name="HTTPSampler.mimetype"></stringProp>
             <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
-            <stringProp name="HTTPSampler.domain"></stringProp>
             <stringProp name="HTTPSampler.monitor">false</stringProp>
+            <stringProp name="HTTPSampler.domain"></stringProp>
             <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
             <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
           </HTTPSampler>
           <hashTree/>
         </hashTree>
         <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="File Reporter" enabled="true">
           <objProp>
             <value class="SampleSaveConfiguration">
               <time>true</time>
               <latency>true</latency>
               <timestamp>true</timestamp>
               <success>true</success>
               <label>true</label>
               <code>true</code>
               <message>true</message>
               <threadName>false</threadName>
               <dataType>true</dataType>
               <encoding>true</encoding>
               <assertions>false</assertions>
               <subresults>false</subresults>
               <responseData>false</responseData>
               <samplerData>false</samplerData>
               <xml>true</xml>
               <fieldNames>true</fieldNames>
               <responseHeaders>false</responseHeaders>
               <requestHeaders>false</requestHeaders>
               <responseDataOnError>false</responseDataOnError>
               <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
               <assertionsResultsToSave>0</assertionsResultsToSave>
             </value>
             <name>saveConfig</name>
           </objProp>
           <stringProp name="filename">interleave-test.dat</stringProp>
           <boolProp name="ResultCollector.error_logging">false</boolProp>
         </ResultCollector>
         <hashTree/>
       </hashTree>
     </hashTree>
   </hashTree>
 </jmeterTestPlan>
diff --git a/bin/testfiles/InterleaveTestPlan2.jmx b/bin/testfiles/InterleaveTestPlan2.jmx
index 994a2ce03..4bfb5f969 100644
--- a/bin/testfiles/InterleaveTestPlan2.jmx
+++ b/bin/testfiles/InterleaveTestPlan2.jmx
@@ -1,163 +1,164 @@
+<?xml version="1.0" encoding="UTF-8"?>
 <jmeterTestPlan version="1.2" properties="1.8">
   <hashTree>
     <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
+      <collectionProp name="TestPlan.thread_groups"/>
       <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
         <collectionProp name="Arguments.arguments"/>
       </elementProp>
-      <collectionProp name="TestPlan.thread_groups"/>
       <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
       <boolProp name="TestPlan.functional_mode">false</boolProp>
       <stringProp name="TestPlan.comments"></stringProp>
     </TestPlan>
     <hashTree>
       <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Jakarta Users" enabled="true">
         <longProp name="ThreadGroup.start_time">0</longProp>
         <stringProp name="ThreadGroup.delay"></stringProp>
         <stringProp name="ThreadGroup.duration"></stringProp>
         <stringProp name="ThreadGroup.num_threads">1</stringProp>
         <boolProp name="ThreadGroup.scheduler">false</boolProp>
         <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
           <stringProp name="LoopController.loops">8</stringProp>
           <boolProp name="LoopController.continue_forever">false</boolProp>
         </elementProp>
         <longProp name="ThreadGroup.end_time">0</longProp>
         <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
         <stringProp name="ThreadGroup.ramp_time">0</stringProp>
       </ThreadGroup>
       <hashTree>
         <InterleaveControl guiclass="InterleaveControlGui" testclass="InterleaveControl" testname="Interleave Controller" enabled="true">
           <intProp name="InterleaveControl.style">0</intProp>
         </InterleaveControl>
         <hashTree>
           <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="Defaults" enabled="true">
             <stringProp name="HTTPSampler.path">/</stringProp>
             <stringProp name="HTTPSampler.domain">jakarta.apache.org</stringProp>
             <stringProp name="HTTPSampler.protocol"></stringProp>
+            <stringProp name="HTTPSampler.port"></stringProp>
             <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
               <collectionProp name="Arguments.arguments"/>
             </elementProp>
-            <stringProp name="HTTPSampler.port"></stringProp>
           </ConfigTestElement>
           <hashTree/>
           <InterleaveControl guiclass="InterleaveControlGui" testclass="InterleaveControl" testname="Interleave Controller" enabled="true">
             <intProp name="InterleaveControl.style">0</intProp>
           </InterleaveControl>
           <hashTree>
             <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="Home Page" enabled="true">
               <stringProp name="HTTPSampler.path">/</stringProp>
               <stringProp name="HTTPSampler.method">GET</stringProp>
               <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
               <stringProp name="HTTPSampler.protocol">http</stringProp>
               <boolProp name="HTTPSampler.image_parser">false</boolProp>
               <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
               <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                 <collectionProp name="Arguments.arguments"/>
               </elementProp>
               <stringProp name="HTTPSampler.port"></stringProp>
               <stringProp name="HTTPSampler.mimetype"></stringProp>
               <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
-              <stringProp name="HTTPSampler.domain"></stringProp>
               <stringProp name="HTTPSampler.monitor">false</stringProp>
+              <stringProp name="HTTPSampler.domain"></stringProp>
               <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
               <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
             </HTTPSampler>
             <hashTree/>
             <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="CVS Page" enabled="true">
               <stringProp name="HTTPSampler.path">/site/cvsindex.html</stringProp>
               <stringProp name="HTTPSampler.method">GET</stringProp>
               <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
               <stringProp name="HTTPSampler.protocol">http</stringProp>
               <boolProp name="HTTPSampler.image_parser">false</boolProp>
               <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
               <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                 <collectionProp name="Arguments.arguments"/>
               </elementProp>
               <stringProp name="HTTPSampler.port"></stringProp>
               <stringProp name="HTTPSampler.mimetype"></stringProp>
               <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
-              <stringProp name="HTTPSampler.domain"></stringProp>
               <stringProp name="HTTPSampler.monitor">false</stringProp>
+              <stringProp name="HTTPSampler.domain"></stringProp>
               <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
               <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
             </HTTPSampler>
             <hashTree/>
           </hashTree>
           <InterleaveControl guiclass="InterleaveControlGui" testclass="InterleaveControl" testname="Interleave Controller" enabled="true">
             <intProp name="InterleaveControl.style">0</intProp>
           </InterleaveControl>
           <hashTree>
             <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="Bug Page" enabled="true">
               <stringProp name="HTTPSampler.path">/site/bugs.html</stringProp>
               <stringProp name="HTTPSampler.method">GET</stringProp>
               <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
               <stringProp name="HTTPSampler.protocol">http</stringProp>
               <boolProp name="HTTPSampler.image_parser">false</boolProp>
               <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
               <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                 <collectionProp name="Arguments.arguments"/>
               </elementProp>
               <stringProp name="HTTPSampler.port"></stringProp>
               <stringProp name="HTTPSampler.mimetype"></stringProp>
               <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
-              <stringProp name="HTTPSampler.domain"></stringProp>
               <stringProp name="HTTPSampler.monitor">false</stringProp>
+              <stringProp name="HTTPSampler.domain"></stringProp>
               <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
               <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
             </HTTPSampler>
             <hashTree/>
             <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="FAQ Page" enabled="true">
               <stringProp name="HTTPSampler.path">/site/faqs.html</stringProp>
               <stringProp name="HTTPSampler.method">GET</stringProp>
               <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
               <stringProp name="HTTPSampler.protocol">http</stringProp>
               <boolProp name="HTTPSampler.image_parser">false</boolProp>
               <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
               <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                 <collectionProp name="Arguments.arguments"/>
               </elementProp>
               <stringProp name="HTTPSampler.port"></stringProp>
               <stringProp name="HTTPSampler.mimetype"></stringProp>
               <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
-              <stringProp name="HTTPSampler.domain"></stringProp>
               <stringProp name="HTTPSampler.monitor">false</stringProp>
+              <stringProp name="HTTPSampler.domain"></stringProp>
               <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
               <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
             </HTTPSampler>
             <hashTree/>
           </hashTree>
         </hashTree>
         <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="File Reporter" enabled="true">
           <objProp>
             <value class="SampleSaveConfiguration">
               <time>true</time>
               <latency>true</latency>
               <timestamp>true</timestamp>
               <success>true</success>
               <label>true</label>
               <code>true</code>
               <message>true</message>
               <threadName>false</threadName>
               <dataType>true</dataType>
               <encoding>true</encoding>
               <assertions>false</assertions>
               <subresults>false</subresults>
               <responseData>false</responseData>
               <samplerData>false</samplerData>
               <xml>true</xml>
               <fieldNames>true</fieldNames>
               <responseHeaders>false</responseHeaders>
               <requestHeaders>false</requestHeaders>
               <responseDataOnError>false</responseDataOnError>
               <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
               <assertionsResultsToSave>0</assertionsResultsToSave>
             </value>
             <name>saveConfig</name>
           </objProp>
           <stringProp name="filename">interleave-test2.dat</stringProp>
           <boolProp name="ResultCollector.error_logging">false</boolProp>
         </ResultCollector>
         <hashTree/>
       </hashTree>
     </hashTree>
   </hashTree>
 </jmeterTestPlan>
diff --git a/bin/testfiles/LoopTestPlan.jmx b/bin/testfiles/LoopTestPlan.jmx
index 5d2e01891..1cb218997 100644
--- a/bin/testfiles/LoopTestPlan.jmx
+++ b/bin/testfiles/LoopTestPlan.jmx
@@ -1,116 +1,117 @@
+<?xml version="1.0" encoding="UTF-8"?>
 <jmeterTestPlan version="1.2" properties="1.8">
   <hashTree>
     <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
+      <collectionProp name="TestPlan.thread_groups"/>
       <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
         <collectionProp name="Arguments.arguments"/>
       </elementProp>
-      <collectionProp name="TestPlan.thread_groups"/>
       <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
       <boolProp name="TestPlan.functional_mode">false</boolProp>
       <stringProp name="TestPlan.comments"></stringProp>
     </TestPlan>
     <hashTree>
       <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Jakarta Users" enabled="true">
         <longProp name="ThreadGroup.start_time">0</longProp>
         <stringProp name="ThreadGroup.delay"></stringProp>
         <stringProp name="ThreadGroup.duration"></stringProp>
         <stringProp name="ThreadGroup.num_threads">1</stringProp>
         <boolProp name="ThreadGroup.scheduler">false</boolProp>
         <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
           <stringProp name="LoopController.loops">1</stringProp>
           <boolProp name="LoopController.continue_forever">false</boolProp>
         </elementProp>
         <longProp name="ThreadGroup.end_time">0</longProp>
         <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
         <stringProp name="ThreadGroup.ramp_time">0</stringProp>
       </ThreadGroup>
       <hashTree>
         <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="Defaults" enabled="true">
           <stringProp name="HTTPSampler.path">/</stringProp>
           <stringProp name="HTTPSampler.domain">jakarta.apache.org</stringProp>
           <stringProp name="HTTPSampler.protocol"></stringProp>
+          <stringProp name="HTTPSampler.port"></stringProp>
           <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
             <collectionProp name="Arguments.arguments"/>
           </elementProp>
-          <stringProp name="HTTPSampler.port"></stringProp>
         </ConfigTestElement>
         <hashTree/>
         <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="Home Page" enabled="true">
           <stringProp name="HTTPSampler.path">/</stringProp>
           <stringProp name="HTTPSampler.method">GET</stringProp>
           <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
           <stringProp name="HTTPSampler.protocol">http</stringProp>
           <boolProp name="HTTPSampler.image_parser">false</boolProp>
           <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
           <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
             <collectionProp name="Arguments.arguments"/>
           </elementProp>
           <stringProp name="HTTPSampler.port"></stringProp>
           <stringProp name="HTTPSampler.mimetype"></stringProp>
           <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
-          <stringProp name="HTTPSampler.domain"></stringProp>
           <stringProp name="HTTPSampler.monitor">false</stringProp>
+          <stringProp name="HTTPSampler.domain"></stringProp>
           <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
           <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
         </HTTPSampler>
         <hashTree/>
         <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
           <stringProp name="LoopController.loops">5</stringProp>
           <stringProp name="LoopController.continue_forever">true</stringProp>
         </LoopController>
         <hashTree>
           <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="News Page" enabled="true">
             <stringProp name="HTTPSampler.path">/site/news.html</stringProp>
             <stringProp name="HTTPSampler.method">GET</stringProp>
             <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
             <stringProp name="HTTPSampler.protocol">http</stringProp>
             <boolProp name="HTTPSampler.image_parser">false</boolProp>
             <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
             <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
               <collectionProp name="Arguments.arguments"/>
             </elementProp>
             <stringProp name="HTTPSampler.port"></stringProp>
             <stringProp name="HTTPSampler.mimetype"></stringProp>
             <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
-            <stringProp name="HTTPSampler.domain"></stringProp>
             <stringProp name="HTTPSampler.monitor">false</stringProp>
+            <stringProp name="HTTPSampler.domain"></stringProp>
             <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
             <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
           </HTTPSampler>
           <hashTree/>
         </hashTree>
         <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="File Reporter" enabled="true">
           <objProp>
             <value class="SampleSaveConfiguration">
               <time>true</time>
               <latency>true</latency>
               <timestamp>true</timestamp>
               <success>true</success>
               <label>true</label>
               <code>true</code>
               <message>true</message>
               <threadName>false</threadName>
               <dataType>true</dataType>
               <encoding>true</encoding>
               <assertions>false</assertions>
               <subresults>false</subresults>
               <responseData>false</responseData>
               <samplerData>false</samplerData>
               <xml>true</xml>
               <fieldNames>true</fieldNames>
               <responseHeaders>false</responseHeaders>
               <requestHeaders>false</requestHeaders>
               <responseDataOnError>false</responseDataOnError>
               <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
               <assertionsResultsToSave>0</assertionsResultsToSave>
             </value>
             <name>saveConfig</name>
           </objProp>
           <stringProp name="filename">loop-test.dat</stringProp>
           <boolProp name="ResultCollector.error_logging">false</boolProp>
         </ResultCollector>
         <hashTree/>
       </hashTree>
     </hashTree>
   </hashTree>
 </jmeterTestPlan>
diff --git a/bin/testfiles/Modification Manager.jmx b/bin/testfiles/Modification Manager.jmx
index fdcbe0285..3c66f4e27 100644
--- a/bin/testfiles/Modification Manager.jmx	
+++ b/bin/testfiles/Modification Manager.jmx	
@@ -1,69 +1,70 @@
+<?xml version="1.0" encoding="UTF-8"?>
 <jmeterTestPlan version="1.2" properties="1.8">
   <hashTree>
     <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
+      <collectionProp name="TestPlan.thread_groups"/>
       <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
         <collectionProp name="Arguments.arguments"/>
       </elementProp>
-      <collectionProp name="TestPlan.thread_groups"/>
       <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
       <boolProp name="TestPlan.functional_mode">false</boolProp>
       <stringProp name="TestPlan.comments"></stringProp>
     </TestPlan>
     <hashTree>
       <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Modification Manager" enabled="true"/>
       <hashTree>
         <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
         <hashTree>
           <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="Web Testing" enabled="true">
             <stringProp name="HTTPSampler.path">/xdx/admin/inspect_job.jsp</stringProp>
             <stringProp name="HTTPSampler.method">GET</stringProp>
             <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
             <stringProp name="HTTPSampler.protocol">http</stringProp>
             <boolProp name="HTTPSampler.image_parser">false</boolProp>
             <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
             <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
               <collectionProp name="Arguments.arguments">
                 <elementProp name="" elementType="HTTPArgument">
                   <stringProp name="Argument.metadata">=</stringProp>
                   <stringProp name="Argument.value">.*</stringProp>
                   <boolProp name="HTTPArgument.use_equals">true</boolProp>
                   <stringProp name="Argument.name">request.job_id</stringProp>
-                  <stringProp name="HTTPArgument.encoded_name">request.job_id</stringProp>
                   <stringProp name="HTTPArgument.always_encode">true</stringProp>
+                  <stringProp name="HTTPArgument.encoded_name">request.job_id</stringProp>
                   <stringProp name="HTTPArgument.encoded_value">.*</stringProp>
                 </elementProp>
                 <elementProp name="" elementType="HTTPArgument">
                   <stringProp name="Argument.metadata">=</stringProp>
                   <stringProp name="Argument.value">opjobadmin.action.inspect</stringProp>
                   <boolProp name="HTTPArgument.use_equals">true</boolProp>
                   <stringProp name="Argument.name">request.action1</stringProp>
-                  <stringProp name="HTTPArgument.encoded_name">request.action1</stringProp>
                   <stringProp name="HTTPArgument.always_encode">true</stringProp>
+                  <stringProp name="HTTPArgument.encoded_name">request.action1</stringProp>
                   <stringProp name="HTTPArgument.encoded_value">opjobadmin.action.inspect</stringProp>
                 </elementProp>
               </collectionProp>
             </elementProp>
             <stringProp name="HTTPSampler.port">80</stringProp>
             <stringProp name="HTTPSampler.mimetype"></stringProp>
             <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
-            <stringProp name="HTTPSampler.domain"></stringProp>
             <stringProp name="HTTPSampler.monitor">false</stringProp>
+            <stringProp name="HTTPSampler.domain"></stringProp>
             <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
             <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
           </HTTPSampler>
           <hashTree/>
           <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
             <stringProp name="HTTPSampler.path"></stringProp>
             <stringProp name="HTTPSampler.domain">13.231.197.158</stringProp>
             <stringProp name="HTTPSampler.protocol"></stringProp>
+            <stringProp name="HTTPSampler.port">80</stringProp>
             <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
               <collectionProp name="Arguments.arguments"/>
             </elementProp>
-            <stringProp name="HTTPSampler.port">80</stringProp>
           </ConfigTestElement>
           <hashTree/>
         </hashTree>
       </hashTree>
     </hashTree>
   </hashTree>
 </jmeterTestPlan>
diff --git a/bin/testfiles/OnceOnlyTestPlan.jmx b/bin/testfiles/OnceOnlyTestPlan.jmx
index 7fa4b025f..610a46bbb 100644
--- a/bin/testfiles/OnceOnlyTestPlan.jmx
+++ b/bin/testfiles/OnceOnlyTestPlan.jmx
@@ -1,113 +1,114 @@
+<?xml version="1.0" encoding="UTF-8"?>
 <jmeterTestPlan version="1.2" properties="1.8">
   <hashTree>
     <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
+      <collectionProp name="TestPlan.thread_groups"/>
       <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
         <collectionProp name="Arguments.arguments"/>
       </elementProp>
-      <collectionProp name="TestPlan.thread_groups"/>
       <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
       <boolProp name="TestPlan.functional_mode">false</boolProp>
       <stringProp name="TestPlan.comments"></stringProp>
     </TestPlan>
     <hashTree>
       <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Jakarta Users" enabled="true">
         <longProp name="ThreadGroup.start_time">0</longProp>
         <stringProp name="ThreadGroup.delay"></stringProp>
         <stringProp name="ThreadGroup.duration"></stringProp>
         <stringProp name="ThreadGroup.num_threads">2</stringProp>
         <boolProp name="ThreadGroup.scheduler">false</boolProp>
         <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
           <stringProp name="LoopController.loops">3</stringProp>
           <boolProp name="LoopController.continue_forever">false</boolProp>
         </elementProp>
         <longProp name="ThreadGroup.end_time">0</longProp>
         <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
         <stringProp name="ThreadGroup.ramp_time">0</stringProp>
       </ThreadGroup>
       <hashTree>
         <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="Defaults" enabled="true">
           <stringProp name="HTTPSampler.path">/</stringProp>
           <stringProp name="HTTPSampler.domain">jakarta.apache.org</stringProp>
           <stringProp name="HTTPSampler.protocol"></stringProp>
+          <stringProp name="HTTPSampler.port"></stringProp>
           <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
             <collectionProp name="Arguments.arguments"/>
           </elementProp>
-          <stringProp name="HTTPSampler.port"></stringProp>
         </ConfigTestElement>
         <hashTree/>
         <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
         <hashTree>
           <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="Home Page" enabled="true">
             <stringProp name="HTTPSampler.path">/</stringProp>
             <stringProp name="HTTPSampler.method">GET</stringProp>
             <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
             <stringProp name="HTTPSampler.protocol">http</stringProp>
             <boolProp name="HTTPSampler.image_parser">false</boolProp>
             <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
             <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
               <collectionProp name="Arguments.arguments"/>
             </elementProp>
             <stringProp name="HTTPSampler.port"></stringProp>
             <stringProp name="HTTPSampler.mimetype"></stringProp>
             <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
-            <stringProp name="HTTPSampler.domain"></stringProp>
             <stringProp name="HTTPSampler.monitor">false</stringProp>
+            <stringProp name="HTTPSampler.domain"></stringProp>
             <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
             <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
           </HTTPSampler>
           <hashTree/>
         </hashTree>
         <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="Bug Page" enabled="true">
           <stringProp name="HTTPSampler.path">/site/bugs.html</stringProp>
           <stringProp name="HTTPSampler.method">GET</stringProp>
           <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
           <stringProp name="HTTPSampler.protocol">http</stringProp>
           <boolProp name="HTTPSampler.image_parser">false</boolProp>
           <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
           <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
             <collectionProp name="Arguments.arguments"/>
           </elementProp>
           <stringProp name="HTTPSampler.port"></stringProp>
           <stringProp name="HTTPSampler.mimetype"></stringProp>
           <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
-          <stringProp name="HTTPSampler.domain"></stringProp>
           <stringProp name="HTTPSampler.monitor">false</stringProp>
+          <stringProp name="HTTPSampler.domain"></stringProp>
           <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
           <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
         </HTTPSampler>
         <hashTree/>
         <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="File Reporter" enabled="true">
           <objProp>
             <value class="SampleSaveConfiguration">
               <time>true</time>
               <latency>true</latency>
               <timestamp>true</timestamp>
               <success>true</success>
               <label>true</label>
               <code>true</code>
               <message>true</message>
               <threadName>false</threadName>
               <dataType>true</dataType>
               <encoding>true</encoding>
               <assertions>false</assertions>
               <subresults>false</subresults>
               <responseData>false</responseData>
               <samplerData>false</samplerData>
               <xml>true</xml>
               <fieldNames>true</fieldNames>
               <responseHeaders>false</responseHeaders>
               <requestHeaders>false</requestHeaders>
               <responseDataOnError>false</responseDataOnError>
               <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
               <assertionsResultsToSave>0</assertionsResultsToSave>
             </value>
             <name>saveConfig</name>
           </objProp>
           <stringProp name="filename">once-only-test.dat</stringProp>
           <boolProp name="ResultCollector.error_logging">false</boolProp>
         </ResultCollector>
         <hashTree/>
       </hashTree>
     </hashTree>
   </hashTree>
 </jmeterTestPlan>
diff --git a/bin/testfiles/ProxyServerTestPlan.jmx b/bin/testfiles/ProxyServerTestPlan.jmx
index a9cc95533..de16f16c9 100644
--- a/bin/testfiles/ProxyServerTestPlan.jmx
+++ b/bin/testfiles/ProxyServerTestPlan.jmx
@@ -1,43 +1,44 @@
+<?xml version="1.0" encoding="UTF-8"?>
 <jmeterTestPlan version="1.2" properties="1.8">
   <hashTree>
     <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
+      <collectionProp name="TestPlan.thread_groups"/>
       <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
         <collectionProp name="Arguments.arguments"/>
       </elementProp>
-      <collectionProp name="TestPlan.thread_groups"/>
       <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
       <boolProp name="TestPlan.functional_mode">false</boolProp>
       <stringProp name="TestPlan.comments"></stringProp>
     </TestPlan>
     <hashTree>
       <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
         <longProp name="ThreadGroup.start_time">0</longProp>
         <stringProp name="ThreadGroup.delay"></stringProp>
         <stringProp name="ThreadGroup.duration"></stringProp>
         <stringProp name="ThreadGroup.num_threads">1</stringProp>
         <boolProp name="ThreadGroup.scheduler">false</boolProp>
         <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
           <stringProp name="LoopController.loops">1</stringProp>
           <boolProp name="LoopController.continue_forever">false</boolProp>
         </elementProp>
         <longProp name="ThreadGroup.end_time">0</longProp>
         <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
         <stringProp name="ThreadGroup.ramp_time">0</stringProp>
       </ThreadGroup>
       <hashTree>
         <ProxyControl guiclass="ProxyControlGui" testclass="ProxyControl" testname="HTTP Proxy Server" enabled="true">
           <intProp name="ProxyControlGui.grouping_mode">0</intProp>
           <boolProp name="ProxyControlGui.capture_http_headers">true</boolProp>
           <boolProp name="ProxyControlGui.use_keepalive">true</boolProp>
           <collectionProp name="ProxyControlGui.include_list">
             <stringProp name="58624487">&lt;html</stringProp>
           </collectionProp>
           <collectionProp name="ProxyControlGui.exclude_list"/>
           <stringProp name="ProxyControlGui.port">8080</stringProp>
           <boolProp name="ProxyControlGui.add_assertion">false</boolProp>
         </ProxyControl>
         <hashTree/>
       </hashTree>
     </hashTree>
   </hashTree>
 </jmeterTestPlan>
diff --git a/bin/testfiles/SimpleTestPlan.jmx b/bin/testfiles/SimpleTestPlan.jmx
index 549e8f02d..c88dacf12 100644
--- a/bin/testfiles/SimpleTestPlan.jmx
+++ b/bin/testfiles/SimpleTestPlan.jmx
@@ -1,154 +1,155 @@
+<?xml version="1.0" encoding="UTF-8"?>
 <jmeterTestPlan version="1.2" properties="1.8">
   <hashTree>
     <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="TestPlan" enabled="true">
+      <collectionProp name="TestPlan.thread_groups"/>
       <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
         <collectionProp name="Arguments.arguments"/>
       </elementProp>
-      <collectionProp name="TestPlan.thread_groups"/>
       <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
       <boolProp name="TestPlan.functional_mode">false</boolProp>
       <stringProp name="TestPlan.comments"></stringProp>
     </TestPlan>
     <hashTree>
       <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Jakarta Users" enabled="true">
         <longProp name="ThreadGroup.start_time">0</longProp>
         <stringProp name="ThreadGroup.delay"></stringProp>
         <stringProp name="ThreadGroup.duration"></stringProp>
         <stringProp name="ThreadGroup.num_threads">1</stringProp>
         <boolProp name="ThreadGroup.scheduler">false</boolProp>
         <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="LoopController" enabled="true">
           <stringProp name="LoopController.loops">1</stringProp>
           <boolProp name="LoopController.continue_forever">false</boolProp>
         </elementProp>
         <longProp name="ThreadGroup.end_time">0</longProp>
         <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
         <stringProp name="ThreadGroup.ramp_time">0</stringProp>
       </ThreadGroup>
       <hashTree>
         <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="Defaults" enabled="true">
           <stringProp name="HTTPSampler.path">/</stringProp>
           <stringProp name="HTTPSampler.domain">jakarta.apache.org</stringProp>
           <stringProp name="HTTPSampler.protocol"></stringProp>
+          <stringProp name="HTTPSampler.port"></stringProp>
           <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
             <collectionProp name="Arguments.arguments"/>
           </elementProp>
-          <stringProp name="HTTPSampler.port"></stringProp>
         </ConfigTestElement>
         <hashTree/>
         <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Ant Pages" enabled="true"/>
         <hashTree>
           <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="Home Page" enabled="true">
             <stringProp name="HTTPSampler.path">/ant/index.html</stringProp>
             <stringProp name="HTTPSampler.method">GET</stringProp>
             <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
             <stringProp name="HTTPSampler.protocol">http</stringProp>
             <boolProp name="HTTPSampler.image_parser">false</boolProp>
             <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
             <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
               <collectionProp name="Arguments.arguments"/>
             </elementProp>
             <stringProp name="HTTPSampler.port"></stringProp>
             <stringProp name="HTTPSampler.mimetype"></stringProp>
             <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
-            <stringProp name="HTTPSampler.domain"></stringProp>
             <stringProp name="HTTPSampler.monitor">false</stringProp>
+            <stringProp name="HTTPSampler.domain"></stringProp>
             <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
             <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
           </HTTPSampler>
           <hashTree/>
           <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="News Page" enabled="true">
             <stringProp name="HTTPSampler.path">/ant/antnews.html</stringProp>
             <stringProp name="HTTPSampler.method">GET</stringProp>
             <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
             <stringProp name="HTTPSampler.protocol">http</stringProp>
             <boolProp name="HTTPSampler.image_parser">false</boolProp>
             <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
             <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
               <collectionProp name="Arguments.arguments"/>
             </elementProp>
             <stringProp name="HTTPSampler.port"></stringProp>
             <stringProp name="HTTPSampler.mimetype"></stringProp>
             <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
-            <stringProp name="HTTPSampler.domain"></stringProp>
             <stringProp name="HTTPSampler.monitor">false</stringProp>
+            <stringProp name="HTTPSampler.domain"></stringProp>
             <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
             <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
           </HTTPSampler>
           <hashTree/>
         </hashTree>
         <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Log4J Pages" enabled="true"/>
         <hashTree>
           <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="Home Page" enabled="true">
             <stringProp name="HTTPSampler.path">/log4j/index.html</stringProp>
             <stringProp name="HTTPSampler.method">GET</stringProp>
             <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
             <stringProp name="HTTPSampler.protocol">http</stringProp>
             <boolProp name="HTTPSampler.image_parser">false</boolProp>
             <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
             <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
               <collectionProp name="Arguments.arguments"/>
             </elementProp>
             <stringProp name="HTTPSampler.port"></stringProp>
             <stringProp name="HTTPSampler.mimetype"></stringProp>
             <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
-            <stringProp name="HTTPSampler.domain"></stringProp>
             <stringProp name="HTTPSampler.monitor">false</stringProp>
+            <stringProp name="HTTPSampler.domain"></stringProp>
             <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
             <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
           </HTTPSampler>
           <hashTree/>
           <HTTPSampler guiclass="HttpTestSampleGui" testclass="HTTPSampler" testname="History Page" enabled="true">
             <stringProp name="HTTPSampler.path">/log4j/docs/history.html</stringProp>
             <stringProp name="HTTPSampler.method">GET</stringProp>
             <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
             <stringProp name="HTTPSampler.protocol">http</stringProp>
             <boolProp name="HTTPSampler.image_parser">false</boolProp>
             <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
             <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
               <collectionProp name="Arguments.arguments"/>
             </elementProp>
             <stringProp name="HTTPSampler.port"></stringProp>
             <stringProp name="HTTPSampler.mimetype"></stringProp>
             <stringProp name="HTTPSampler.FILE_FIELD"></stringProp>
-            <stringProp name="HTTPSampler.domain"></stringProp>
             <stringProp name="HTTPSampler.monitor">false</stringProp>
+            <stringProp name="HTTPSampler.domain"></stringProp>
             <stringProp name="HTTPSampler.FILE_NAME"></stringProp>
             <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
           </HTTPSampler>
           <hashTree/>
         </hashTree>
         <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="File Reporter" enabled="true">
           <objProp>
             <value class="SampleSaveConfiguration">
               <time>true</time>
               <latency>true</latency>
               <timestamp>true</timestamp>
               <success>true</success>
               <label>true</label>
               <code>true</code>
               <message>true</message>
               <threadName>false</threadName>
               <dataType>true</dataType>
               <encoding>true</encoding>
               <assertions>false</assertions>
               <subresults>false</subresults>
               <responseData>false</responseData>
               <samplerData>false</samplerData>
               <xml>true</xml>
               <fieldNames>true</fieldNames>
               <responseHeaders>false</responseHeaders>
               <requestHeaders>false</requestHeaders>
               <responseDataOnError>false</responseDataOnError>
               <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
               <assertionsResultsToSave>0</assertionsResultsToSave>
             </value>
             <name>saveConfig</name>
           </objProp>
           <stringProp name="filename">simple-test.dat</stringProp>
           <boolProp name="ResultCollector.error_logging">false</boolProp>
         </ResultCollector>
         <hashTree/>
       </hashTree>
     </hashTree>
   </hashTree>
 </jmeterTestPlan>
diff --git a/bin/testfiles/proxy.jmx b/bin/testfiles/proxy.jmx
index 55ee2b775..89798645a 100644
--- a/bin/testfiles/proxy.jmx
+++ b/bin/testfiles/proxy.jmx
@@ -1,44 +1,45 @@
+<?xml version="1.0" encoding="UTF-8"?>
 <jmeterTestPlan version="1.2" properties="1.8">
   <hashTree>
     <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
+      <collectionProp name="TestPlan.thread_groups"/>
       <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
         <collectionProp name="Arguments.arguments"/>
       </elementProp>
-      <collectionProp name="TestPlan.thread_groups"/>
       <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
       <boolProp name="TestPlan.functional_mode">false</boolProp>
       <stringProp name="TestPlan.comments"></stringProp>
     </TestPlan>
     <hashTree>
       <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
         <longProp name="ThreadGroup.start_time">0</longProp>
         <stringProp name="ThreadGroup.delay"></stringProp>
         <stringProp name="ThreadGroup.duration"></stringProp>
         <stringProp name="ThreadGroup.num_threads">1</stringProp>
         <boolProp name="ThreadGroup.scheduler">false</boolProp>
         <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
           <intProp name="LoopController.loops">-1</intProp>
           <boolProp name="LoopController.continue_forever">false</boolProp>
         </elementProp>
         <longProp name="ThreadGroup.end_time">0</longProp>
         <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
         <stringProp name="ThreadGroup.ramp_time">0</stringProp>
       </ThreadGroup>
       <hashTree>
         <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
         <hashTree>
           <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
             <stringProp name="HTTPSampler.path"></stringProp>
             <stringProp name="HTTPSampler.domain">jakarta.apache.org</stringProp>
             <stringProp name="HTTPSampler.protocol"></stringProp>
-            <stringProp name="HTTPSampler.port"></stringProp>
             <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
               <collectionProp name="Arguments.arguments"/>
             </elementProp>
+            <stringProp name="HTTPSampler.port"></stringProp>
           </ConfigTestElement>
           <hashTree/>
         </hashTree>
       </hashTree>
     </hashTree>
   </hashTree>
 </jmeterTestPlan>
diff --git a/src/components/org/apache/jmeter/visualizers/BeanShellListener.java b/src/components/org/apache/jmeter/visualizers/BeanShellListener.java
index e3dbce9e3..aba625697 100644
--- a/src/components/org/apache/jmeter/visualizers/BeanShellListener.java
+++ b/src/components/org/apache/jmeter/visualizers/BeanShellListener.java
@@ -1,118 +1,148 @@
 /*
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  * 
  */
 
 package org.apache.jmeter.visualizers;
 
 import java.io.Serializable;
 
+import org.apache.jmeter.engine.event.LoopIterationEvent;
 import org.apache.jmeter.gui.UnsharedComponent;
 import org.apache.jmeter.samplers.SampleEvent;
 import org.apache.jmeter.samplers.SampleListener;
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.testbeans.TestBean;
 import org.apache.jmeter.testelement.AbstractTestElement;
+import org.apache.jmeter.testelement.TestListener;
 import org.apache.jmeter.threads.JMeterContext;
 import org.apache.jmeter.threads.JMeterContextService;
 import org.apache.jmeter.threads.JMeterVariables;
 import org.apache.jmeter.util.BeanShellInterpreter;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jorphan.logging.LoggingManager;
 import org.apache.jorphan.util.JMeterException;
 import org.apache.log.Logger;
 
 public class BeanShellListener extends AbstractTestElement 
-    implements SampleListener, Visualizer, Serializable, TestBean, UnsharedComponent  {
+    implements SampleListener, Visualizer, Serializable, TestBean, TestListener, UnsharedComponent  {
 	
     private static final Logger log = LoggingManager.getLoggerForClass();
     
     private static final long serialVersionUID = 2;
 
     transient private BeanShellInterpreter bshInterpreter = null;
 
     // can be specified in jmeter.properties
     private static final String INIT_FILE = "beanshell.listener.init"; //$NON-NLS-1$
 
 
     private String script = "";
     
     public BeanShellListener() {
     	init();
     }
 
 
 	private void init() {
 		try {
 			bshInterpreter = new BeanShellInterpreter(JMeterUtils.getProperty(INIT_FILE),log);
 		} catch (ClassNotFoundException e) {
 			log.error(e.getLocalizedMessage());
 		}
 	}
 
     private Object readResolve() {
     	init();
     	return this;
     }
     
 	public String getScript() {
 		return script;
 	}
 
 
 	public void setScript(String script) {
 		this.script = script;
 	}
 
 
 	public void sampleOccurred(SampleEvent se) {
         JMeterContext jmctx = JMeterContextService.getContext();
         JMeterVariables vars = jmctx.getVariables();
         SampleResult samp=se.getResult();
         try {
             // Add variables for access to context and variables
             bshInterpreter.set("ctx", jmctx);//$NON-NLS-1$
             bshInterpreter.set("vars", vars);//$NON-NLS-1$
             bshInterpreter.set("sampleEvent", se);//$NON-NLS-1$
             bshInterpreter.set("sampleResult", samp);//$NON-NLS-1$
             bshInterpreter.eval(script);
         } catch (JMeterException e) {
             log.warn("Problem in BeanShell script "+e);
         }
 		
 	}
 
 
 	public void sampleStarted(SampleEvent e) {
 	}
 
 	public void sampleStopped(SampleEvent e) {
 	}
 
 	public void add(SampleResult sample) {
 	}
 
 	public boolean isStats() {// Required by Visualiser
 		return false;
 	}
 
+
+	public void testEnded() {
+		testEnded("");
+	}
+
+
+	public void testEnded(String host) {
+		// TODO Auto-generated method stub
+		
+	}
+
+
+	public void testIterationStart(LoopIterationEvent event) {
+		// TODO Auto-generated method stub
+		
+	}
+
+
+	public void testStarted() {
+		testStarted("");
+	}
+
+
+	public void testStarted(String host) {
+		// TODO Auto-generated method stub
+		
+	}
+
 //	public Object clone() {
 //        BeanShellListener o = (BeanShellListener) super.clone();
 //        o.script = script;
 //		return o;
 //	}
     
 }
diff --git a/src/core/org/apache/jmeter/gui/action/Save.java b/src/core/org/apache/jmeter/gui/action/Save.java
index f58707c7d..04a29d8a8 100644
--- a/src/core/org/apache/jmeter/gui/action/Save.java
+++ b/src/core/org/apache/jmeter/gui/action/Save.java
@@ -1,157 +1,142 @@
 /*
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  * 
  */
 
 package org.apache.jmeter.gui.action;
 
 import java.awt.event.ActionEvent;
 import java.io.FileOutputStream;
-import java.io.FileWriter;
 import java.io.IOException;
-import java.io.Writer;
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.LinkedList;
 import java.util.Set;
 
 import javax.swing.JFileChooser;
 
 import org.apache.jmeter.exceptions.IllegalUserActionException;
 import org.apache.jmeter.gui.GuiPackage;
 import org.apache.jmeter.gui.tree.JMeterTreeNode;
 import org.apache.jmeter.gui.util.FileDialoger;
 import org.apache.jmeter.save.OldSaveService;
 import org.apache.jmeter.save.SaveService;
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jorphan.collections.HashTree;
 import org.apache.jorphan.logging.LoggingManager;
 import org.apache.log.Logger;
 
 /**
  * @author Michael Stover
  * @author <a href="mailto:klancast@swbell.net">Keith Lancaster</a>
  * @version $Revision$ updated on $Date$
  */
 public class Save implements Command {
 	private static final Logger log = LoggingManager.getLoggerForClass();
 
 	private static Set commands = new HashSet();
 	static {
 		commands.add(ActionNames.SAVE_AS);
 		commands.add(ActionNames.SAVE_ALL_AS);
 		commands.add(ActionNames.SAVE);
 	}
 
 	/**
 	 * Constructor for the Save object.
 	 */
 	public Save() {
 	}
 
 	/**
 	 * Gets the ActionNames attribute of the Save object.
 	 * 
 	 * @return the ActionNames value
 	 */
 	public Set getActionNames() {
 		return commands;
 	}
 
 	public void doAction(ActionEvent e) throws IllegalUserActionException {
 		HashTree subTree = null;
 		if (!commands.contains(e.getActionCommand())) {
 			throw new IllegalUserActionException("Invalid user command:" + e.getActionCommand());
 		}
 		if (e.getActionCommand().equals(ActionNames.SAVE_AS)) {
 			subTree = GuiPackage.getInstance().getCurrentSubTree();
 		} else {
 			subTree = GuiPackage.getInstance().getTreeModel().getTestPlan();
 		}
 
 		String updateFile = GuiPackage.getInstance().getTestPlanFile();
 		if (!ActionNames.SAVE.equals(e.getActionCommand()) || updateFile == null) {
 			JFileChooser chooser = FileDialoger.promptToSaveFile(GuiPackage.getInstance().getTreeListener()
 					.getCurrentNode().getName()
 					+ ".jmx");
 			if (chooser == null) {
 				return;
 			}
 			updateFile = chooser.getSelectedFile().getAbsolutePath();
 			if (!e.getActionCommand().equals(ActionNames.SAVE_AS)) {
 				GuiPackage.getInstance().setTestPlanFile(updateFile);
 			}
 		}
 		// TODO: doesn't putting this here mark the tree as
 		// saved even though a failure may occur later?
 
 		ActionRouter.getInstance().doActionNow(new ActionEvent(subTree, e.getID(), ActionNames.SUB_TREE_SAVED));
 		try {
 			convertSubTree(subTree);
 		} catch (Exception err) {
 		}
-		Writer writer = null;
 		FileOutputStream ostream = null;
 		try {
+			ostream = new FileOutputStream(updateFile);
 			if (SaveService.isSaveTestPlanFormat20()) {
-				ostream = new FileOutputStream(updateFile);
 				OldSaveService.saveSubTree(subTree, ostream);
 			} else {
-				writer = new FileWriter(updateFile);
-				SaveService.saveTree(subTree, writer);
+				SaveService.saveTree(subTree, ostream);
 			}
 		} catch (Throwable ex) {
 			GuiPackage.getInstance().setTestPlanFile(null);
 			log.error("", ex);
 			throw new IllegalUserActionException("Couldn't save test plan to file: " + updateFile);
 		} finally {
-			closeWriter(writer);
 			closeStream(ostream);
 		}
 	}
 
 	// package protected to all for separate test code
 	void convertSubTree(HashTree tree) {
 		Iterator iter = new LinkedList(tree.list()).iterator();
 		while (iter.hasNext()) {
 			JMeterTreeNode item = (JMeterTreeNode) iter.next();
 			convertSubTree(tree.getTree(item));
 			TestElement testElement = item.getTestElement();
 			tree.replace(item, testElement);
 		}
 	}
 
-	private void closeWriter(Writer writer) {
-		if (writer != null) {
-			try {
-				writer.close();
-			} catch (IOException ex) {
-				log.error("", ex);
-			}
-		}
-	}
-
 	private void closeStream(FileOutputStream fos) {
 		if (fos != null) {
 			try {
 				fos.close();
 			} catch (IOException ex) {
 				log.error("", ex);
 			}
 		}
 	}
 
 }
diff --git a/src/core/org/apache/jmeter/save/SaveService.java b/src/core/org/apache/jmeter/save/SaveService.java
index 735941017..15d98d39a 100644
--- a/src/core/org/apache/jmeter/save/SaveService.java
+++ b/src/core/org/apache/jmeter/save/SaveService.java
@@ -1,399 +1,522 @@
 /*
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  * 
  */
 
 package org.apache.jmeter.save;
 
 import java.io.BufferedInputStream;
 import java.io.FileInputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
+import java.io.OutputStreamWriter;
+import java.io.OutputStream;
 import java.io.Reader;
+import java.io.UnsupportedEncodingException;
 import java.io.Writer;
 import java.lang.reflect.InvocationTargetException;
 import java.util.Iterator;
 import java.util.Map;
 import java.util.Properties;
 
+import java.nio.charset.Charset;
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.save.converters.BooleanPropertyConverter;
 import org.apache.jmeter.save.converters.HashTreeConverter;
 import org.apache.jmeter.save.converters.IntegerPropertyConverter;
 import org.apache.jmeter.save.converters.LongPropertyConverter;
 import org.apache.jmeter.save.converters.MultiPropertyConverter;
 import org.apache.jmeter.save.converters.SampleResultConverter;
 import org.apache.jmeter.save.converters.SampleSaveConfigurationConverter;
 import org.apache.jmeter.save.converters.StringPropertyConverter;
 import org.apache.jmeter.save.converters.TestElementConverter;
 import org.apache.jmeter.save.converters.TestElementPropertyConverter;
 import org.apache.jmeter.save.converters.TestResultWrapperConverter;
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jorphan.collections.HashTree;
 import org.apache.jorphan.logging.LoggingManager;
 import org.apache.jorphan.util.JOrphanUtils;
 import org.apache.log.Logger;
 
 import com.thoughtworks.xstream.XStream;
 import com.thoughtworks.xstream.mapper.CannotResolveClassException;
 import com.thoughtworks.xstream.mapper.Mapper;
 import com.thoughtworks.xstream.converters.ConversionException;
 import com.thoughtworks.xstream.converters.Converter;
 import com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider;
 
 /**
  * author Mike Stover
  * author <a href="mailto:kcassell&#X0040;apache.org">Keith Cassell </a>
  */
 public class SaveService {
     private static final XStream saver = new XStream(new PureJavaReflectionProvider());
 
 	private static final Logger log = LoggingManager.getLoggerForClass();
+	// The XML header, with placeholder for encoding, since that is controlled by property
+	private static final String XML_HEADER = "<?xml version=\"1.0\" encoding=\"<ph>\"?>"; // $NON-NLS-1$
 
     // Default file name
     private static final String SAVESERVICE_PROPERTIES_FILE = "/bin/saveservice.properties"; // $NON-NLS-1$
 
     // Property name used to define file name
     private static final String SAVESERVICE_PROPERTIES = "saveservice_properties"; // $NON-NLS-1$
 
     // Define file format property names
     private static final String FILE_FORMAT = "file_format"; // $NON-NLS-1$
     private static final String FILE_FORMAT_TESTPLAN = "file_format.testplan"; // $NON-NLS-1$
     private static final String FILE_FORMAT_TESTLOG = "file_format.testlog"; // $NON-NLS-1$
 
     // Define file format versions
 	private static final String VERSION_2_0 = "2.0";  // $NON-NLS-1$
     //NOT USED private static final String VERSION_2_1 = "2.1";  // $NON-NLS-1$
     private static final String VERSION_2_2 = "2.2";  // $NON-NLS-1$
 
     // Default to overall format, and then to version 2.2
     public static final String TESTPLAN_FORMAT
         = JMeterUtils.getPropDefault(FILE_FORMAT_TESTPLAN
         , JMeterUtils.getPropDefault(FILE_FORMAT, VERSION_2_2));
     
     public static final String TESTLOG_FORMAT
         = JMeterUtils.getPropDefault(FILE_FORMAT_TESTLOG
         , JMeterUtils.getPropDefault(FILE_FORMAT, VERSION_2_2));
 
     private static final boolean IS_TESTPLAN_FORMAT_20
         = VERSION_2_0.equals(TESTPLAN_FORMAT);
     
     private static final boolean IS_TESTLOG_FORMAT_20
     = VERSION_2_0.equals(TESTLOG_FORMAT);
 
     private static final boolean IS_TESTPLAN_FORMAT_22
         = VERSION_2_2.equals(TESTPLAN_FORMAT);
 
     // Holds the mappings from the saveservice properties file
     private static final Properties aliasToClass = new Properties();
 
     // Holds the reverse mappings
     private static final Properties classToAlias = new Properties();
 	
     // Version information for test plan header
     // This is written to JMX files by ScriptWrapperConverter
     // Also to JTL files by ResultCollector
 	private static final String VERSION = "1.2"; // $NON-NLS-1$
 
     // This is written to JMX files by ScriptWrapperConverter
 	private static String propertiesVersion = "";// read from properties file; written to JMX files
     private static final String PROPVERSION = "1.8";// Expected version $NON-NLS-1$
 
     // Internal information only
     private static String fileVersion = ""; // read from properties file// $NON-NLS-1$
 	private static final String FILEVERSION = "505365";// Expected value $NON-NLS-1$
+	private static String fileEncoding = ""; // read from properties file// $NON-NLS-1$
 
     static {
         log.info("Testplan (JMX) version: "+TESTPLAN_FORMAT+". Testlog (JTL) version: "+TESTLOG_FORMAT);
         initProps();
         checkVersions();
     }
 
 	// Helper method to simplify alias creation from properties
 	private static void makeAlias(String alias, String clazz) {
 		try {
 			saver.alias(alias, Class.forName(clazz));
             aliasToClass.setProperty(alias,clazz);
             Object oldval=classToAlias.setProperty(clazz,alias);
             if (oldval != null) {
                 log.error("Duplicate alias detected for "+clazz+": "+alias+" & "+oldval);
             }
 		} catch (ClassNotFoundException e) {
 			log.warn("Could not set up alias " + alias + " " + e.toString());
 		} catch (NoClassDefFoundError e) {
 			log.warn("Could not set up alias " + alias + " " + e.toString());
 		} catch (Throwable e) {// (e.g. InternalError : may happen on headless boxes 
 			log.error("Could not set up alias " + alias,e);
 		}
 	}
 
     public static Properties loadProperties() throws IOException{
         Properties nameMap = new Properties();
         FileInputStream fis = null;
         try {
 			fis = new FileInputStream(JMeterUtils.getJMeterHome()
 			             + JMeterUtils.getPropDefault(SAVESERVICE_PROPERTIES, SAVESERVICE_PROPERTIES_FILE));
 			nameMap.load(fis);
 		} finally {
 			JOrphanUtils.closeQuietly(fis);
 		}
         return nameMap;
     }
 	private static void initProps() {
 		// Load the alias properties
 		try {
 			Properties nameMap = loadProperties();
             // now create the aliases
 			Iterator it = nameMap.entrySet().iterator();
 			while (it.hasNext()) {
 				Map.Entry me = (Map.Entry) it.next();
 				String key = (String) me.getKey();
 				String val = (String) me.getValue();
 				if (!key.startsWith("_")) {
 					makeAlias(key, val);
 				} else {
 					// process special keys
 					if (key.equalsIgnoreCase("_version")) { // $NON-NLS-1$
                         propertiesVersion = val;
 						log.info("Using SaveService properties version " + propertiesVersion);
                     } else if (key.equalsIgnoreCase("_file_version")) { // $NON-NLS-1$
                             fileVersion = extractVersion(val);
                             log.info("Using SaveService properties file version " + fileVersion);
-					} else {
+                    } else if (key.equalsIgnoreCase("_file_encoding")) { // $NON-NLS-1$
+                        fileEncoding = val;
+                        log.info("Using SaveService properties file encoding " + fileEncoding);
+                    } else {
 						key = key.substring(1);// Remove the leading "_"
 						try {
 							if (val.trim().equals("collection")) { // $NON-NLS-1$
 								saver.registerConverter((Converter) Class.forName(key).getConstructor(
 										new Class[] { Mapper.class }).newInstance(
 										new Object[] { saver.getMapper() }));
 							} else if (val.trim().equals("mapping")) { // $NON-NLS-1$
 								saver.registerConverter((Converter) Class.forName(key).getConstructor(
 										new Class[] { Mapper.class }).newInstance(
 										new Object[] { saver.getMapper() }));
 							} else {
 								saver.registerConverter((Converter) Class.forName(key).newInstance());
 							}
 						} catch (IllegalAccessException e1) {
 							log.warn("Can't register a converter: " + key, e1);
 						} catch (InstantiationException e1) {
 							log.warn("Can't register a converter: " + key, e1);
 						} catch (ClassNotFoundException e1) {
 							log.warn("Can't register a converter: " + key, e1);
 						} catch (IllegalArgumentException e1) {
 							log.warn("Can't register a converter: " + key, e1);
 						} catch (SecurityException e1) {
 							log.warn("Can't register a converter: " + key, e1);
 						} catch (InvocationTargetException e1) {
 							log.warn("Can't register a converter: " + key, e1);
 						} catch (NoSuchMethodException e1) {
 							log.warn("Can't register a converter: " + key, e1);
 						}
 					}
 				}
 			}
 		} catch (IOException e) {
 			log.error("Bad saveservice properties file", e);
 		}
 	}
 
     // For converters to use
     public static String aliasToClass(String s){
         String r = aliasToClass.getProperty(s);
         return r == null ? s : r;
     }
     
     // For converters to use
     public static String classToAlias(String s){
         String r = classToAlias.getProperty(s);
         return r == null ? s : r;
     }
     
+	public static void saveTree(HashTree tree, OutputStream out) throws Exception {
+		// Get the OutputWriter to use
+		OutputStreamWriter outputStreamWriter = getOutputStreamWriter(out);
+		writeXmlHeader(outputStreamWriter);
+		// Use deprecated method, to avoid duplicating code
+		saveTree(tree, outputStreamWriter);
+		outputStreamWriter.close();
+	}
+
+    /**
+     * @deprecated Use saveTree(HashTree tree, OutputStream out) instead, which
+     * takes the fileEncoding property of SaveService into consideration
+     */
 	public static void saveTree(HashTree tree, Writer writer) throws Exception {
 		ScriptWrapper wrapper = new ScriptWrapper();
 		wrapper.testPlan = tree;
 		saver.toXML(wrapper, writer);
 		writer.write('\n');// Ensure terminated properly
 	}
 
+	public static void saveElement(Object el, OutputStream out) throws Exception {
+		// Get the OutputWriter to use
+		OutputStreamWriter outputStreamWriter = getOutputStreamWriter(out);
+		writeXmlHeader(outputStreamWriter);
+		// Use deprecated method, to avoid duplicating code
+		saveElement(el, outputStreamWriter);
+		outputStreamWriter.close();
+	}
+
+	/**
+     * @deprecated Use saveElement(Object el, OutputStream out) instead, which
+     * takes the fileEncoding property of SaveService into consideration
+     */
 	public static void saveElement(Object el, Writer writer) throws Exception {
 		saver.toXML(el, writer);
 	}
 
 	public static Object loadElement(InputStream in) throws Exception {
-		return saver.fromXML(new InputStreamReader(in));
+		// Get the InputReader to use
+		InputStreamReader inputStreamReader = getInputStreamReader(in);
+		// Use deprecated method, to avoid duplicating code
+		Object element = loadElement(inputStreamReader);
+		inputStreamReader.close();
+		return element;
 	}
 
+	/**
+	 * @deprecated Use loadElement(InputStream in) instead, since that takes
+	 * the fileEncoding property of SaveService into consideration
+	 */
 	public static Object loadElement(Reader in) throws Exception {
 		return saver.fromXML(in);
 	}
 
+	public synchronized static void saveSampleResult(SampleResult res, OutputStream out) throws Exception {
+		// Get the OutputWriter to use
+		OutputStreamWriter outputStreamWriter = getOutputStreamWriter(out);
+		writeXmlHeader(outputStreamWriter);
+		// Use deprecated method, to avoid duplicating code
+		saveSampleResult(res, outputStreamWriter);
+		outputStreamWriter.close();
+	}
+
+    /**
+     * @deprecated Use saveSampleResult(SampleResult res, OutputStream out) instead, which
+     * takes the fileEncoding property of SaveService into consideration
+     */
 	public synchronized static void saveSampleResult(SampleResult res, Writer writer) throws Exception {
 		saver.toXML(res, writer);
 		writer.write('\n');
 	}
 
+	public synchronized static void saveTestElement(TestElement elem, OutputStream out) throws Exception {
+		// Get the OutputWriter to use
+		OutputStreamWriter outputStreamWriter = getOutputStreamWriter(out);
+		// Use deprecated method, to avoid duplicating code
+		saveTestElement(elem, outputStreamWriter);
+		outputStreamWriter.close();
+	}
+
+    /**
+     * @deprecated Use saveTestElement(TestElement elem, OutputStream out) instead, which
+     * takes the fileEncoding property of SaveService into consideration
+     */
 	public synchronized static void saveTestElement(TestElement elem, Writer writer) throws Exception {
 		saver.toXML(elem, writer);
 		writer.write('\n');
 	}
 
 	private static boolean versionsOK = true;
 
 	// Extract version digits from String of the form #Revision: n.mm #
 	// (where # is actually $ above)
 	private static final String REVPFX = "$Revision: ";
 	private static final String REVSFX = " $"; // $NON-NLS-1$
 
 	private static String extractVersion(String rev) {
 		if (rev.length() > REVPFX.length() + REVSFX.length()) {
 			return rev.substring(REVPFX.length(), rev.length() - REVSFX.length());
 		}
 		return rev;
 	}
 
 	private static void checkVersion(Class clazz, String expected) {
 
 		String actual = "*NONE*"; // $NON-NLS-1$
 		try {
 			actual = (String) clazz.getMethod("getVersion", null).invoke(null, null);
 			actual = extractVersion(actual);
 		} catch (Exception ignored) {
 			// Not needed
 		}
 		if (0 != actual.compareTo(expected)) {
 			versionsOK = false;
 			log.warn("Version mismatch: expected '" + expected + "' found '" + actual + "' in " + clazz.getName());
 		}
 	}
 
     // Routines for TestSaveService
     static boolean checkPropertyVersion(){
         return SaveService.PROPVERSION.equals(SaveService.propertiesVersion);
     }
     
     static boolean checkFileVersion(){
         return SaveService.FILEVERSION.equals(SaveService.fileVersion);
     }
 
     static boolean checkVersions() {
 		versionsOK = true;
 		checkVersion(BooleanPropertyConverter.class, "493779"); // $NON-NLS-1$
 		checkVersion(HashTreeConverter.class, "514283"); // $NON-NLS-1$
 		checkVersion(IntegerPropertyConverter.class, "493779"); // $NON-NLS-1$
 		checkVersion(LongPropertyConverter.class, "493779"); // $NON-NLS-1$
 		checkVersion(MultiPropertyConverter.class, "514283"); // $NON-NLS-1$
 		checkVersion(SampleResultConverter.class, "514283"); // $NON-NLS-1$
 
         // Not built until later, so need to use this method:
         try {
             checkVersion(
                     Class.forName("org.apache.jmeter.protocol.http.util.HTTPResultConverter"), // $NON-NLS-1$
                     "514283"); // $NON-NLS-1$
         } catch (ClassNotFoundException e) {
             versionsOK = false;
             log.warn(e.getLocalizedMessage());
         }
 		checkVersion(StringPropertyConverter.class, "493779"); // $NON-NLS-1$
 		checkVersion(TestElementConverter.class, "514283"); // $NON-NLS-1$
 		checkVersion(TestElementPropertyConverter.class, "514283"); // $NON-NLS-1$
 		checkVersion(ScriptWrapperConverter.class, "514283"); // $NON-NLS-1$
 		checkVersion(TestResultWrapperConverter.class, "514283"); // $NON-NLS-1$
         checkVersion(SampleSaveConfigurationConverter.class,"515417"); // $NON-NLS-1$
 
         if (!PROPVERSION.equalsIgnoreCase(propertiesVersion)) {
 			log.warn("Bad _version - expected " + PROPVERSION + ", found " + propertiesVersion + ".");
 		}
         if (!FILEVERSION.equalsIgnoreCase(fileVersion)) {
             log.warn("Bad _file_version - expected " + FILEVERSION + ", found " + fileVersion +".");
         }
 		if (versionsOK) {
 			log.info("All converter versions present and correct");
 		}
         return versionsOK;
 	}
 
 	public static TestResultWrapper loadTestResults(InputStream reader) throws Exception {
-		TestResultWrapper wrapper = (TestResultWrapper) saver.fromXML(new InputStreamReader(reader));
+		// Get the InputReader to use
+		InputStreamReader inputStreamReader = getInputStreamReader(reader);
+		TestResultWrapper wrapper = (TestResultWrapper) saver.fromXML(inputStreamReader);
+		inputStreamReader.close();
 		return wrapper;
 	}
 
 	public static HashTree loadTree(InputStream reader) throws Exception {
 		if (!reader.markSupported()) {
 			reader = new BufferedInputStream(reader);
 		}
 		reader.mark(Integer.MAX_VALUE);
 		ScriptWrapper wrapper = null;
 		try {
-			wrapper = (ScriptWrapper) saver.fromXML(new InputStreamReader(reader));
+			// Get the InputReader to use
+			InputStreamReader inputStreamReader = getInputStreamReader(reader);
+			wrapper = (ScriptWrapper) saver.fromXML(inputStreamReader);
+			inputStreamReader.close();
 			return wrapper.testPlan;
 		} catch (CannotResolveClassException e) {
 			log.warn("Problem loading new style: " + e.getLocalizedMessage());
 			reader.reset();
 			return OldSaveService.loadSubTree(reader);
 		} catch (NoClassDefFoundError e) {
 			log.warn("Missing class ", e);
 			return null;
 		}
 	}
+	
+	private static InputStreamReader getInputStreamReader(InputStream inStream) throws UnsupportedEncodingException {
+		// Check if we have a encoding to use from properties
+		Charset charset = getFileEncodingCharset();
+		if(charset != null) {
+			return new InputStreamReader(inStream, charset);
+		}
+		else {
+			// We use the default character set encoding of the JRE
+			return new InputStreamReader(inStream);
+		}
+	}
+
+	private static OutputStreamWriter getOutputStreamWriter(OutputStream outStream) throws UnsupportedEncodingException {
+		// Check if we have a encoding to use from properties
+		Charset charset = getFileEncodingCharset();
+		if(charset != null) {
+			return new OutputStreamWriter(outStream, charset);
+		}
+		else {
+			// We use the default character set encoding of the JRE
+			return new OutputStreamWriter(outStream);
+		}
+	}
+	
+	private static Charset getFileEncodingCharset() throws UnsupportedEncodingException {
+		// Check if we have a encoding to use from properties
+		if(fileEncoding != null && fileEncoding.length() > 0) {
+			return Charset.forName(fileEncoding);
+		}
+		else {
+			// We use the default character set encoding of the JRE
+			return null;
+		}
+	}
+	
+	private static void writeXmlHeader(OutputStreamWriter writer) throws IOException {
+		// Write XML header if we have the charset to use for encoding
+		Charset charset = getFileEncodingCharset();
+		if(charset != null) {
+			// We do not use getEncoding method of Writer, since that returns
+			// the historical name
+			String header = XML_HEADER.replaceAll("<ph>", charset.name());
+			writer.write(header);
+			writer.write('\n');
+		}
+	}
 
 	public static boolean isSaveTestPlanFormat20() {
 		return IS_TESTPLAN_FORMAT_20;
 	}
 
 	public static boolean isSaveTestLogFormat20() {
 		return IS_TESTLOG_FORMAT_20;
 	}
 
     // New test format - more compressed class names
     public static boolean isSaveTestPlanFormat22() {
         return IS_TESTPLAN_FORMAT_22;
     }
 
     
 //  Normal output
 //  ---- Debugging information ----
 //  required-type       : org.apache.jorphan.collections.ListedHashTree 
 //  cause-message       : WebServiceSampler : WebServiceSampler 
 //  class               : org.apache.jmeter.save.ScriptWrapper 
 //  message             : WebServiceSampler : WebServiceSampler 
 //  line number         : 929 
 //  path                : /jmeterTestPlan/hashTree/hashTree/hashTree[4]/hashTree[5]/WebServiceSampler 
 //  cause-exception     : com.thoughtworks.xstream.alias.CannotResolveClassException 
 //  -------------------------------
 
     /**
      * Simplify getMessage() output from XStream ConversionException
      * @param ce - ConversionException to analyse
      * @return string with details of error
      */
     public static String CEtoString(ConversionException ce){
         String msg = 
             "XStream ConversionException at line: " + ce.get("line number")
             + "\n" + ce.get("message")
             + "\nPerhaps a missing jar? See log file.";
         return msg;
     }
 
     public static String getPropertiesVersion() {
         return propertiesVersion;
     }
 
     public static String getVERSION() {
         return VERSION;
     }
 }
\ No newline at end of file
diff --git a/src/reports/org/apache/jmeter/report/gui/action/ReportSave.java b/src/reports/org/apache/jmeter/report/gui/action/ReportSave.java
index ffa03b616..3172d3e08 100644
--- a/src/reports/org/apache/jmeter/report/gui/action/ReportSave.java
+++ b/src/reports/org/apache/jmeter/report/gui/action/ReportSave.java
@@ -1,167 +1,152 @@
 //$Header$
 /*
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  * 
  */
 
 package org.apache.jmeter.report.gui.action;
 
 import java.awt.event.ActionEvent;
 import java.io.FileOutputStream;
-import java.io.FileWriter;
-import java.io.Writer;
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.LinkedList;
 import java.util.Set;
 
 import javax.swing.JFileChooser;
 
 import org.apache.jmeter.exceptions.IllegalUserActionException;
 import org.apache.jmeter.gui.ReportGuiPackage;
 import org.apache.jmeter.report.gui.action.ReportActionRouter;
 import org.apache.jmeter.gui.action.Command;
 import org.apache.jmeter.gui.util.ReportFileDialoger;
 import org.apache.jmeter.report.gui.tree.ReportTreeNode;
 import org.apache.jmeter.save.OldSaveService;
 import org.apache.jmeter.save.SaveService;
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jorphan.collections.HashTree;
 import org.apache.jorphan.logging.LoggingManager;
 import org.apache.log.Logger;
 
 /**
  * @author Peter Lin
  * @version $Revision$ updated on $Date$
  */
 public class ReportSave implements Command {
 	transient private static Logger log = LoggingManager.getLoggerForClass();
 
 	public final static String SAVE_ALL_AS = "save_all_as";
 
 	public final static String SAVE_AS = "save_as";
 
 	public final static String SAVE = "save";
 
 	// NOTUSED private String chosenFile;
 
 	private static Set commands = new HashSet();
 	static {
 		commands.add(SAVE_AS);
 		commands.add(SAVE_ALL_AS);
 		commands.add(SAVE);
 	}
 
 	/**
 	 * Constructor for the Save object.
 	 */
 	public ReportSave() {
 	}
 
 	/**
 	 * Gets the ActionNames attribute of the Save object.
 	 * 
 	 * @return the ActionNames value
 	 */
 	public Set getActionNames() {
 		return commands;
 	}
 
 	public void doAction(ActionEvent e) throws IllegalUserActionException {
 		HashTree subTree = null;
 		if (!commands.contains(e.getActionCommand())) {
 			throw new IllegalUserActionException("Invalid user command:" + e.getActionCommand());
 		}
 		if (e.getActionCommand().equals(SAVE_AS)) {
 			subTree = ReportGuiPackage.getInstance().getCurrentSubTree();
 		} else {
 			subTree = ReportGuiPackage.getInstance().getTreeModel().getReportPlan();
 		}
 
 		String updateFile = ReportGuiPackage.getInstance().getReportPlanFile();
 		if (!SAVE.equals(e.getActionCommand()) || updateFile == null) {
 			JFileChooser chooser = ReportFileDialoger.promptToSaveFile(ReportGuiPackage.getInstance().getTreeListener()
 					.getCurrentNode().getName()
 					+ ".jmr");
 			if (chooser == null) {
 				return;
 			}
 			updateFile = chooser.getSelectedFile().getAbsolutePath();
 			if (!e.getActionCommand().equals(SAVE_AS)) {
 				ReportGuiPackage.getInstance().setReportPlanFile(updateFile);
 			}
 		}
 		// TODO: doesn't putting this here mark the tree as
 		// saved even though a failure may occur later?
 
 		ReportActionRouter.getInstance().doActionNow(new ActionEvent(subTree, e.getID(), ReportCheckDirty.SUB_TREE_SAVED));
 		try {
 			convertSubTree(subTree);
 		} catch (Exception err) {
 		}
-		Writer writer = null;
 		FileOutputStream ostream = null;
 		try {
+			ostream = new FileOutputStream(updateFile);
 			if (SaveService.isSaveTestPlanFormat20()) {
-				ostream = new FileOutputStream(updateFile);
 				OldSaveService.saveSubTree(subTree, ostream);
                 log.info("saveSubTree");
 			} else {
-				writer = new FileWriter(updateFile);
-				SaveService.saveTree(subTree, writer);
+				SaveService.saveTree(subTree, ostream);
                 log.info("saveTree");
 			}
 		} catch (Throwable ex) {
 			ReportGuiPackage.getInstance().setReportPlanFile(null);
 			log.error("", ex);
 			throw new IllegalUserActionException("Couldn't save test plan to file: " + updateFile);
 		} finally {
-			closeWriter(writer);
 			closeStream(ostream);
 		}
 	}
 
 	private void convertSubTree(HashTree tree) {
 		Iterator iter = new LinkedList(tree.list()).iterator();
 		while (iter.hasNext()) {
 			ReportTreeNode item = (ReportTreeNode) iter.next();
 			convertSubTree(tree.getTree(item));
 			TestElement testElement = item.getTestElement();
 			tree.replace(item, testElement);
 		}
 	}
 
-	private void closeWriter(Writer writer) {
-		if (writer != null) {
-			try {
-				writer.close();
-			} catch (Exception ex) {
-				log.error("", ex);
-			}
-		}
-	}
-
 	private void closeStream(FileOutputStream fos) {
 		if (fos != null) {
 			try {
 				fos.close();
 			} catch (Exception ex) {
 				log.error("", ex);
 			}
 		}
 	}
 
 }
diff --git a/test/src/org/apache/jmeter/junit/JMeterTest.java b/test/src/org/apache/jmeter/junit/JMeterTest.java
index 8d5d348b2..0481e69d7 100644
--- a/test/src/org/apache/jmeter/junit/JMeterTest.java
+++ b/test/src/org/apache/jmeter/junit/JMeterTest.java
@@ -1,647 +1,648 @@
 /*
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  * 
  */
 
 package org.apache.jmeter.junit;
 
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 import java.io.ObjectInputStream;
 import java.io.ObjectOutputStream;
 import java.io.Serializable;
-import java.io.StringReader;
-import java.io.StringWriter;
 import java.rmi.RemoteException;
 import java.util.Collection;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
 import java.util.Properties;
 import java.util.Set;
 
 import javax.swing.JComponent;
 
 import junit.framework.Test;
 import junit.framework.TestSuite;
 
 import org.apache.jmeter.config.gui.ObsoleteGui;
 import org.apache.jmeter.engine.util.CompoundVariable;
 import org.apache.jmeter.functions.Function;
 import org.apache.jmeter.gui.GuiPackage;
 import org.apache.jmeter.gui.JMeterGUIComponent;
 import org.apache.jmeter.gui.UnsharedComponent;
 import org.apache.jmeter.gui.action.ActionRouter;
 import org.apache.jmeter.gui.tree.JMeterTreeListener;
 import org.apache.jmeter.gui.tree.JMeterTreeModel;
 import org.apache.jmeter.gui.tree.JMeterTreeNode;
 import org.apache.jmeter.save.SaveService;
 import org.apache.jmeter.testbeans.TestBean;
 import org.apache.jmeter.testbeans.gui.TestBeanGUI;
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.testelement.property.JMeterProperty;
 import org.apache.jmeter.testelement.property.PropertyIterator;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jorphan.logging.LoggingManager;
 import org.apache.jorphan.reflect.ClassFinder;
 import org.apache.jorphan.util.JOrphanUtils;
 import org.apache.log.Logger;
 import org.jdom.Document;
 import org.jdom.Element;
 import org.jdom.input.SAXBuilder;
 
 /**
  * @version $Revision$ Last update $Date$
  */
 public class JMeterTest extends JMeterTestCase {
 	private static Logger log = LoggingManager.getLoggerForClass();
 
 	private static Map guiTitles;
 
 	private static Map guiTags;
 
 	private static Map funcTitles;
 
     private static Properties nameMap;
     
 	public JMeterTest(String name) {
 		super(name);
 	}
 
 	/*
 	 * The suite() method creates separate test suites for each of the types of
 	 * test. The suitexxx() methods create a list of items to be tested, and
 	 * create a new test instance for each.
 	 * 
 	 * Each test type has its own constructor, which saves the item to be tested
 	 * 
 	 * Note that the suite() method must be static, and the methods to run the
 	 * tests must be instance methods so that they can pick up the item value
 	 * which was saved by the constructor.
 	 * 
 	 */
 	// Constructor for TestElement tests
 	private TestElement testItem;
 
 	public JMeterTest(String testName, TestElement te) {
 		super(testName);// Save the method name
 		testItem = te;
 	}
 
 	// Constructor for Serializable tests
 	private Serializable serObj;
 
 	public JMeterTest(String testName, Serializable ser) {
 		super(testName);// Save the method name
 		serObj = ser;
 	}
 
 	// Constructor for GUI tests
 	private JMeterGUIComponent guiItem;
 
 	public JMeterTest(String testName, JMeterGUIComponent gc) {
 		super(testName);// Save the method name
 		guiItem = gc;
 	}
 
 	// Constructor for Function tests
 	private Function funcItem;
 
 	private static boolean classPathShown = false;// Only show classpath once
 
 	public JMeterTest(String testName, Function fi) {
 		super(testName);// Save the method name
 		funcItem = fi;
 	}
 
 	/*
 	 * Use a suite to allow the tests to be generated at run-time
 	 */
 	public static Test suite() throws Exception {
 		// ensure the GuiPackage is initialized.
 		JMeterTreeModel treeModel = new JMeterTreeModel();
 		JMeterTreeListener treeLis = new JMeterTreeListener(treeModel);
 		treeLis.setActionHandler(ActionRouter.getInstance());
 		GuiPackage.getInstance(treeLis, treeModel);
 		try {
 			// The GuiPackage needs a MainFrame to work:
 			org.apache.jmeter.gui.MainFrame main = new org.apache.jmeter.gui.MainFrame(ActionRouter.getInstance(),
 					treeModel, treeLis);
 		} catch (RuntimeException e) {
 			System.out.println("Cannot create MainFrame: " + e);
 		}
 
 		TestSuite suite = new TestSuite("JMeterTest");
         suite.addTest(new JMeterTest("readAliases"));
 		suite.addTest(new JMeterTest("createTitleSet"));
 		suite.addTest(new JMeterTest("createTagSet"));
 		suite.addTest(suiteGUIComponents());
 		suite.addTest(suiteSerializableElements());
 		suite.addTest(suiteTestElements());
 		suite.addTest(suiteBeanComponents());
 		suite.addTest(new JMeterTest("createFunctionSet"));
 		suite.addTest(suiteFunctions());
 		suite.addTest(new JMeterTest("checkGuiSet"));
 		suite.addTest(new JMeterTest("checkFunctionSet"));
 		return suite;
 	}
 
 	/*
 	 * Extract titles from component_reference.xml
 	 */
 	public void createTitleSet() throws Exception {
 		guiTitles = new HashMap(90);
 
 		String compref = "../xdocs/usermanual/component_reference.xml";
 		SAXBuilder bldr = new SAXBuilder();
 		Document doc;
 		doc = bldr.build(compref);
 		Element root = doc.getRootElement();
 		Element body = root.getChild("body");
 		List sections = body.getChildren("section");
 		for (int i = 0; i < sections.size(); i++) {
 			List components = ((Element) sections.get(i)).getChildren("component");
 			for (int j = 0; j < components.size(); j++) {
 				Element comp = (Element) components.get(j);
                 String nm=comp.getAttributeValue("name");
                 if (!nm.equals("SSL Manager")){// Not a true GUI component
 				    guiTitles.put(nm.replace(' ','_'), Boolean.FALSE);
                 }
 			}
 		}
 		// Add titles that don't need to be documented
 		//guiTitles.put("Root", Boolean.FALSE);
 		guiTitles.put("Example Sampler", Boolean.FALSE);
 	}
 
 	/*
 	 * Extract titles from component_reference.xml
 	 */
 	public void createTagSet() throws Exception {
 		guiTags = new HashMap(90);
 
 		String compref = "../xdocs/usermanual/component_reference.xml";
 		SAXBuilder bldr = new SAXBuilder();
 		Document doc;
 		doc = bldr.build(compref);
 		Element root = doc.getRootElement();
 		Element body = root.getChild("body");
 		List sections = body.getChildren("section");
 		for (int i = 0; i < sections.size(); i++) {
 			List components = ((Element) sections.get(i)).getChildren("component");
 			for (int j = 0; j < components.size(); j++) {
 				Element comp = (Element) components.get(j);
 				guiTags.put(comp.getAttributeValue("tag"), Boolean.FALSE);
 			}
 		}
 	}
 
 	/*
 	 * Extract titles from functions.xml
 	 */
 	public void createFunctionSet() throws Exception {
 		funcTitles = new HashMap(20);
 
 		String compref = "../xdocs/usermanual/functions.xml";
 		SAXBuilder bldr = new SAXBuilder();
 		Document doc;
 		doc = bldr.build(compref);
 		Element root = doc.getRootElement();
 		Element body = root.getChild("body");
 		Element section = body.getChild("section");
 		List sections = section.getChildren("subsection");
 		for (int i = 0; i < sections.size(); i++) {
 			List components = ((Element) sections.get(i)).getChildren("component");
 			for (int j = 0; j < components.size(); j++) {
 				Element comp = (Element) components.get(j);
 				funcTitles.put(comp.getAttributeValue("name"), Boolean.FALSE);
 			}
 		}
 	}
 
 	private int scanprintMap(Map m, String t) {
 		Set s = m.keySet();
 		int unseen = 0;
 		if (s.size() == 0)
 			return 0;
 		Iterator i = s.iterator();
 		while (i.hasNext()) {
 			Object key = i.next();
 			if (!m.get(key).equals(Boolean.TRUE)) {
 				if (unseen == 0)// first time
 				{
 					System.out.println("\nNames remaining in " + t + " Map:");
 				}
 				unseen++;
 				System.out.println(key);
 			}
 		}
 		return unseen;
 	}
 
 	public void checkGuiSet() throws Exception {
 		guiTitles.remove("Example Sampler");// We don't mind if this is left over
 		guiTitles.remove("Sample_Result_Save_Configuration");// Ditto, not a sampler
 		assertEquals("Should not have any names left over", 0, scanprintMap(guiTitles, "GUI"));
 	}
 
 	public void checkFunctionSet() throws Exception {
 		assertEquals("Should not have any names left over", 0, scanprintMap(funcTitles, "Function"));
 	}
 
 	/*
 	 * Test GUI elements - create the suite of tests
 	 */
 	private static Test suiteGUIComponents() throws Exception {
 		TestSuite suite = new TestSuite("GuiComponents");
 		Iterator iter = getObjects(JMeterGUIComponent.class).iterator();
 		while (iter.hasNext()) {
 			JMeterGUIComponent item = (JMeterGUIComponent) iter.next();
 			if (item instanceof JMeterTreeNode) {
 				System.out.println("INFO: JMeterGUIComponent: skipping all tests  " + item.getClass().getName());
 				continue;
 			}
 			if (item instanceof ObsoleteGui){
 				continue;
 			}
 			TestSuite ts = new TestSuite(item.getClass().getName());
 			ts.addTest(new JMeterTest("GUIComponents1", item));
 			if (item instanceof TestBeanGUI) {
 				System.out.println("INFO: JMeterGUIComponent: skipping some tests " + item.getClass().getName());
 			} else {
 				ts.addTest(new JMeterTest("GUIComponents2", item));
 				ts.addTest(new JMeterTest("runGUITitle", item));
 			}
 			suite.addTest(ts);
 		}
 		return suite;
 	}
 
 	/*
 	 * Test Functions - create the suite of tests
 	 */
 	private static Test suiteFunctions() throws Exception {
 		TestSuite suite = new TestSuite("Functions");
 		Iterator iter = getObjects(Function.class).iterator();
 		while (iter.hasNext()) {
 			Object item = iter.next();
 			if (item.getClass().equals(CompoundVariable.class)) {
 				continue;
 			}
 			TestSuite ts = new TestSuite(item.getClass().getName());
 			ts.addTest(new JMeterTest("runFunction", (Function) item));
 			ts.addTest(new JMeterTest("runFunction2", (Function) item));
 			suite.addTest(ts);
 		}
 		return suite;
 	}
 
 	/*
 	 * Test GUI elements - create the suite of tests
 	 */
 	private static Test suiteBeanComponents() throws Exception {
 		TestSuite suite = new TestSuite("BeanComponents");
 		Iterator iter = getObjects(TestBean.class).iterator();
 		while (iter.hasNext()) {
 			Class c = iter.next().getClass();
 			try {
 				JMeterGUIComponent item = new TestBeanGUI(c);
 				// JMeterGUIComponent item = (JMeterGUIComponent) iter.next();
 				TestSuite ts = new TestSuite(item.getClass().getName());
 				ts.addTest(new JMeterTest("GUIComponents2", item));
 				ts.addTest(new JMeterTest("runGUITitle", item));
 				suite.addTest(ts);
 			} catch (IllegalArgumentException e) {
 				System.out.println("Cannot create test for " + c.getName() + " " + e);
 				e.printStackTrace(System.out);
 			}
 		}
 		return suite;
 	}
 
 	/*
 	 * Test GUI elements - run the test
 	 */
 	public void runGUITitle() throws Exception {
 		if (guiTitles.size() > 0) {
 			String title = guiItem.getDocAnchor();
 			boolean ct = guiTitles.containsKey(title);
 			if (ct) {
 				guiTitles.put(title, Boolean.TRUE);// So we can detect extra entries
             }
             String name = guiItem.getClass().getName();
 			if (// Is this a work in progress or an internal GUI component?
 			    (title != null && title.length() > 0) // Will be "" for internal components
 				&& (title.toUpperCase().indexOf("(ALPHA") == -1) 
                 && (title.toUpperCase().indexOf("(BETA") == -1)
 				&& (!title.equals("Example1")) // Skip the example samplers ...
 				&& (!title.equals("Example2"))
                 && (!name.startsWith("org.apache.jmeter.examples."))
                 )
             {// No, not a work in progress ...
                 String s = "component_reference.xml needs '" + title + "' anchor for " + name;
 				if (!ct) {
 					log.warn(s); // Record in log as well
                 }
 				assertTrue(s, ct);
 			}
 		}
 	}
 
 	/*
 	 * run the function test
 	 */
 	public void runFunction() throws Exception {
 		if (funcTitles.size() > 0) {
 			String title = funcItem.getReferenceKey();
 			boolean ct = funcTitles.containsKey(title);
 			if (ct)
 				funcTitles.put(title, Boolean.TRUE);// For detecting extra
 													// entries
 			if (// Is this a work in progress ?
 			title.indexOf("(ALPHA") == -1 && title.indexOf("(EXPERIMENTAL") == -1) {// No,
 																					// not
 																					// a
 																					// work
 																					// in
 																					// progress
 																					// ...
 				String s = "function.xml needs '" + title + "' entry for " + funcItem.getClass().getName();
 				if (!ct)
 					log.warn(s); // Record in log as well
 				assertTrue(s, ct);
 			}
 		}
 	}
 
 	/*
 	 * Check that function descriptions are OK
 	 */
 	public void runFunction2() throws Exception {
 		Iterator i = funcItem.getArgumentDesc().iterator();
 		while (i.hasNext()) {
 			Object o = i.next();
 			assertTrue("Description must be a String", o instanceof String);
 			assertFalse("Description must not start with [refkey", ((String) o).startsWith("[refkey"));
 		}
 	}
 
 	/*
 	 * Test GUI elements - run for all components
 	 */
 	public void GUIComponents1() throws Exception {
 		String name = guiItem.getClass().getName();
 
 		assertEquals("Name should be same as static label for " + name, guiItem.getStaticLabel(), guiItem.getName());
         if (name.startsWith("org.apache.jmeter.examples.")){
             return;
         }
 		if (!name.endsWith("TestBeanGUI")) {
 			try {
 				String label = guiItem.getLabelResource();
 				assertTrue(label.length() > 0);
 				if (!label.equals("unused")) { // TODO use constant
 					assertFalse("'" + label + "' should be in resource file for " + name, JMeterUtils.getResString(
 							label).startsWith(JMeterUtils.RES_KEY_PFX));
 				}
 			} catch (UnsupportedOperationException uoe) {
 				log.warn("Class has not yet implemented getLabelResource " + name);
 			}
 		}
         checkElementAlias(guiItem);
 	}
 
 	/*
 	 * Test GUI elements - not run for TestBeanGui items
 	 */
 	public void GUIComponents2() throws Exception {
 		String name = guiItem.getClass().getName();
 
 		// TODO these assertions should be separate tests
 
 		TestElement el = guiItem.createTestElement();
 		assertNotNull(name + ".createTestElement should be non-null ", el);
 		assertEquals("GUI-CLASS: Failed on " + name, name, el.getPropertyAsString(TestElement.GUI_CLASS));
 
 		assertEquals("NAME: Failed on " + name, guiItem.getName(), el.getPropertyAsString(TestElement.NAME));
 		assertEquals("TEST-CLASS: Failed on " + name, el.getClass().getName(), el
 				.getPropertyAsString(TestElement.TEST_CLASS));
 		TestElement el2 = guiItem.createTestElement();
 		el.setProperty(TestElement.NAME, "hey, new name!:");
 		el.setProperty("NOT", "Shouldn't be here");
 		if (!(guiItem instanceof UnsharedComponent)) {
 			assertEquals("SHARED: Failed on " + name, "", el2.getPropertyAsString("NOT"));
 		}
 		log.debug("Saving element: " + el.getClass());
-		StringWriter writer = new StringWriter();
-		SaveService.saveElement(el, writer);
-		el = (TestElement) SaveService.loadElement(new StringReader(writer.toString()));
+		ByteArrayOutputStream bos = new ByteArrayOutputStream();
+		SaveService.saveElement(el, bos);
+		ByteArrayInputStream bis = new ByteArrayInputStream(bos.toByteArray());
+		bos.close();
+		el = (TestElement) SaveService.loadElement(bis);
+		bis.close();
         assertNotNull("Load element failed on: "+name,el);
 		guiItem.configure(el);
 		assertEquals("CONFIGURE-TEST: Failed on " + name, el.getPropertyAsString(TestElement.NAME), guiItem.getName());
 		guiItem.modifyTestElement(el2);
 		assertEquals("Modify Test: Failed on " + name, "hey, new name!:", el2.getPropertyAsString(TestElement.NAME));
 	}
 
 	/*
 	 * Test serializable elements - create the suite of tests
 	 */
 	private static Test suiteSerializableElements() throws Exception {
 		TestSuite suite = new TestSuite("SerializableElements");
 		Iterator iter = getObjects(Serializable.class).iterator();
 		while (iter.hasNext()) {
 			Serializable serObj = (Serializable) iter.next();
 			if (serObj.getClass().getName().endsWith("_Stub")) {
 				continue;
 			}
 			TestSuite ts = new TestSuite(serObj.getClass().getName());
 			ts.addTest(new JMeterTest("runSerialTest", serObj));
 			suite.addTest(ts);
 		}
 		return suite;
 	}
 
 	/*
 	 * Test serializable elements - test the object
 	 */
 	public void runSerialTest() throws Exception {
 		if (!(serObj instanceof JComponent)) {
 			try {
 				ByteArrayOutputStream bytes = new ByteArrayOutputStream();
 				ObjectOutputStream out = new ObjectOutputStream(bytes);
 				out.writeObject(serObj);
 				out.close();
 				ObjectInputStream in = new ObjectInputStream(new ByteArrayInputStream(bytes.toByteArray()));
 				Object readObject = in.readObject();
 				in.close();
 				assertEquals("deserializing class: " + serObj.getClass().getName(), serObj.getClass(), readObject
 						.getClass());
 			} catch (Throwable e) {
 				fail("serialization of " + serObj.getClass().getName() + " failed: " + e);
 			}
 		}
 	}
 
 	/*
 	 * Test TestElements - create the suite
 	 */
 	private static Test suiteTestElements() throws Exception {
 		TestSuite suite = new TestSuite("TestElements");
 		Iterator iter = getObjects(TestElement.class).iterator();
 		while (iter.hasNext()) {
 			TestElement item = (TestElement) iter.next();
 			TestSuite ts = new TestSuite(item.getClass().getName());
 			ts.addTest(new JMeterTest("runTestElement", item));
 			suite.addTest(ts);
 		}
 		return suite;
 	}
 
 	/*
 	 * Test TestElements - implement the test case
 	 */
 	public void runTestElement() throws Exception {
 		checkElementCloning(testItem);
 		String name = testItem.getClass().getName();
         assertTrue(name + " must implement Serializable", testItem instanceof Serializable);
         if (name.startsWith("org.apache.jmeter.examples.")){
             return;
         }
         checkElementAlias(testItem);
 	}
 
     public void readAliases() throws Exception {
         nameMap = SaveService.loadProperties();        
         assertNotNull("SaveService nameMap should not be null",nameMap);
     }
     
 	private void checkElementAlias(Object item) {
         String name=item.getClass().getName();
         boolean contains = nameMap.values().contains(name);
         if (!contains){
             //System.out.println(name.substring(name.lastIndexOf('.')+1)+"="+name);
             fail("SaveService nameMap should contain "+name);
         }
     }
 
     private static Collection getObjects(Class extendsClass) throws Exception {
 		String exName = extendsClass.getName();
 		Object myThis = "";
 		Iterator classes = ClassFinder
 				.findClassesThatExtend(JMeterUtils.getSearchPaths(), new Class[] { extendsClass }).iterator();
 		List objects = new LinkedList();
 		String n = "";
 		boolean caughtError = true;
 		Throwable caught = null;
 		try {
 			while (classes.hasNext()) {
 				n = (String) classes.next();
 				// TODO - improve this check
 				if (n.endsWith("RemoteJMeterEngineImpl")) {
 					continue; // Don't try to instantiate remote server
 				}
 				Class c = null;
 				try {
 					c = Class.forName(n);
 					try {
 						// Try with a parameter-less constructor first
 						objects.add(c.newInstance());
 					} catch (InstantiationException e) {
 						caught = e;
 						// System.out.println(e.toString());
 						try {
 							// Events often have this constructor
 							objects.add(c.getConstructor(new Class[] { Object.class }).newInstance(
 									new Object[] { myThis }));
 						} catch (NoSuchMethodException f) {
 							// no luck. Ignore this class
 							System.out.println("WARN: " + exName + ": NoSuchMethodException  " + n);
 						}
 					}
 				} catch (NoClassDefFoundError e) {
 					// no luck. Ignore this class
 					System.out.println("WARN: " + exName + ": NoClassDefFoundError " + n);
 				} catch (IllegalAccessException e) {
 					caught = e;
 					System.out.println("WARN: " + exName + ": IllegalAccessException " + n);
 					// We won't test restricted-access classes.
 				}
 				// JDK1.4: catch (java.awt.HeadlessException e)
 				// JDK1.4: {
 				// JDK1.4: System.out.println("Error creating "+n+"
 				// "+e.toString());
 				// JDK1.4: }
 				catch (Exception e) {
 					caught = e;
 					if ((e instanceof RemoteException) || e.getClass().getName().equals("java.awt.HeadlessException")// for
 																														// JDK1.3
 					) {
 						System.out.println("WARN: " + "Error creating " + n + " " + e.toString());
 					} else {
 						throw new Exception("Error creating " + n + " " + e.toString());
 					}
 				}
 			}
 			caughtError = false;
 		} finally {
 			if (caughtError) {
 				System.out.println("Last class=" + n);
 				System.out.println("objects.size=" + objects.size());
 				System.out.println("Last error=" + caught);
 			}
 		}
 
 		if (objects.size() == 0) {
 			System.out.println("No classes found that extend " + exName + ". Check the following:");
 			System.out.println("Search paths are:");
 			String ss[] = JMeterUtils.getSearchPaths();
 			for (int i = 0; i < ss.length; i++) {
 				System.out.println(ss[i]);
 			}
 			if (!classPathShown) {// Only dump it once
 				System.out.println("Class path is:");
 				String cp = System.getProperty("java.class.path");
 				String cpe[] = JOrphanUtils.split(cp, java.io.File.pathSeparator);
 				for (int i = 0; i < cpe.length; i++) {
 					System.out.println(cpe[i]);
 				}
 				classPathShown = true;
 			}
 		}
 		return objects;
 	}
 
 	private static void cloneTesting(TestElement item, TestElement clonedItem) {
 		assertTrue(item != clonedItem);
 		assertEquals("CLONE-SAME-CLASS: testing " + item.getClass().getName(), item.getClass().getName(), clonedItem
 				.getClass().getName());
 	}
 
 	private static void checkElementCloning(TestElement item) {
 		TestElement clonedItem = (TestElement) item.clone();
 		cloneTesting(item, clonedItem);
 		PropertyIterator iter2 = item.propertyIterator();
 		while (iter2.hasNext()) {
 			JMeterProperty item2 = iter2.next();
 			// [sebb] assertEquals(item2,
 			// clonedItem.getProperty(item2.getName()));
 			assertEquals(item2.getStringValue(), clonedItem.getProperty(item2.getName()).getStringValue());
 			assertTrue(item2 != clonedItem.getProperty(item2.getName()));
 		}
 	}
 }
diff --git a/test/src/org/apache/jmeter/save/TestSaveService.java b/test/src/org/apache/jmeter/save/TestSaveService.java
index f049981ab..a8311eab4 100644
--- a/test/src/org/apache/jmeter/save/TestSaveService.java
+++ b/test/src/org/apache/jmeter/save/TestSaveService.java
@@ -1,120 +1,117 @@
 /*
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  * 
  */
 
 package org.apache.jmeter.save;
 
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileOutputStream;
 import java.io.InputStream;
-import java.io.OutputStreamWriter;
 
 import org.apache.jmeter.junit.JMeterTestCase;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jorphan.collections.HashTree;
 
 /**
  * @author mstover
  * 
  */
 public class TestSaveService extends JMeterTestCase {
 	private static final String[] FILES = new String[] { "AssertionTestPlan.jmx", "AuthManagerTestPlan.jmx",
 			"HeaderManagerTestPlan.jmx", "InterleaveTestPlan2.jmx", "InterleaveTestPlan.jmx", "LoopTestPlan.jmx",
 			"Modification Manager.jmx", "OnceOnlyTestPlan.jmx", "proxy.jmx", "ProxyServerTestPlan.jmx",
 			"SimpleTestPlan.jmx", "GuiTest.jmx", };
 
 	private static boolean saveOut = JMeterUtils.getPropDefault("testsaveservice.saveout", false);
 
 	public TestSaveService(String name) {
 		super(name);
 	}
     public void testPropfile() throws Exception {
         assertTrue("Property Version mismatch", SaveService.checkPropertyVersion());            
         assertTrue("Property File Version mismatch", SaveService.checkFileVersion());
     }
     
     public void testVersions() throws Exception {
         assertTrue("Unexpected version found", SaveService.checkVersions());
     }
 
 	public void testLoadAndSave() throws Exception {
 		byte[] original = new byte[1000000];
 
 		boolean failed = false; // Did a test fail?
 
 		for (int i = 0; i < FILES.length; i++) {
 			InputStream in = new FileInputStream(new File("testfiles/" + FILES[i]));
 			int len = in.read(original);
 
 			in.close();
 
 			in = new ByteArrayInputStream(original, 0, len);
 			HashTree tree = SaveService.loadTree(in);
 
 			in.close();
 
 			ByteArrayOutputStream out = new ByteArrayOutputStream(1000000);
 
-			OutputStreamWriter outs = new OutputStreamWriter(out);
-			SaveService.saveTree(tree, outs);
-			outs.close();// Make sure all the data is flushed out
-			out.close();
+			SaveService.saveTree(tree, out);
+			out.close(); // Make sure all the data is flushed out
 
 			// We only check the length of the result. Comparing the
 			// actual result (out.toByteArray==original) will usually
 			// fail, because the order of the properties within each
 			// test element may change. Comparing the lengths should be
 			// enough to detect most problem cases...
             int outsz=out.size();
             // Allow for input in CRLF and output in LF only
             int lines=0;
             byte ba[]=out.toByteArray();
             for(int j=0;j<ba.length;j++) {
                 if (ba[j] == '\n'){
                     lines++;
                 }
             }
 			if (len != outsz && len != outsz+lines) {
 				failed = true;
 				System.out.println();
 				System.out.println("Loading file testfiles/" + FILES[i] + " and "
 						+ "saving it back changes its size from " + len + " to " + outsz + ".");
                 System.out.println("Diff "+(len-outsz)+" lines "+lines);
 				if (saveOut) {
 					String outfile = "testfiles/" + FILES[i] + ".out";
 					System.out.println("Write " + outfile);
 					FileOutputStream outf = new FileOutputStream(new File(outfile));
 					outf.write(out.toByteArray());
 					outf.close();
 					System.out.println("Wrote " + outfile);
 				}
 			}
 
 			// Note this test will fail if a property is added or
 			// removed to any of the components used in the test
 			// files. The way to solve this is to appropriately change
 			// the test file.
 		}
 		if (failed) // TODO make these separate tests?
 		{
 			fail("One or more failures detected");
 		}
 	}
 }
diff --git a/xdocs/changes.xml b/xdocs/changes.xml
index deef785af..292b27e2d 100644
--- a/xdocs/changes.xml
+++ b/xdocs/changes.xml
@@ -1,863 +1,864 @@
 <?xml version="1.0"?> 
 <!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at
  
        http://www.apache.org/licenses/LICENSE-2.0
  
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
 -->
 <document>   
 <properties>     
 	<author email="jmeter-dev AT jakarta.apache.org">JMeter developers</author>     
 	<title>History of Changes</title>   
 </properties> 
 <body> 
 <section name="History of Changes"> 
 <p><b>Changes sections are chronologically ordered from top (most recent) to bottom 
 (least recent)</b></p>  
 
 <!--  ===================  -->
 
 <h3>Version 2.2.1</h3>
 <h4>Summary of changes (for more details, see below)</h4>
 <p>
 Some of the main enhancements are:
 </p>
 <ul>
 <li>Htmlparser 2.0 now used for parsing</li>
 <li>HTTP Authorisation now supports domain and realm</li>
 <li>HttpClient options can be specified via httpclient.parameters file</li>
 <li>HttpClient now behaves the same as Java Http for SSL certificates</li>
 <li>HTTP Mirror Server to allow local testing of HTTP samplers</li>
 <li>HTTP Proxy supports XML-RPC recording</li>
 <li>__V() function allows support of nested variable references</li>
 <li>LDAP Ext sampler optionally parses result sets and supports secure mode</li>
 </ul>
 <p>
 The main bug fixes are:
 </p>
 <ul>
 <li>HTTPS (SSL) handling now much improved</li>
 <li>Various Remote mode bugs fixed</li>
 <li>Control+C and Control+V now work in the test tree</li>
 <li>Latency and Encoding now available in CSV log output</li>
 </ul>
 <h4>Known problems:</h4>
 <p>Thread active counts are always zero in CSV and XML files when running remote tests.
 </p>
 <p>The property file_format.testlog=2.1 is treated the same as 2.2.
 However JMeter does honour the 3 testplan versions.</p>
 <p>
 Bug 22510 - JMeter always uses the first entry in the keystore.
 </p>
 <p>
 Remote mode does not work if JMeter is installed in a directory where the path name contains spaces.
 </p>
 <p>
 BeanShell test elements leak memory.
 This can be reduced by using a file instead of including the script in the test element.
 </p>
 <p>
 Variables and functions do not work in Listeners in client-server (remote) mode so cannot be used
 to name log files.
 </p>
 <h4>Incompatible changes (usage):</h4>
 <p>
 The LDAP Extended Sampler now uses the same panel for both Thread Bind and Single-Bind tests.
 This means that any tests using the Single-bind test will need to be updated to set the username and password.
 </p>
 <p>
 Bug 41104: JMeterThread behaviour was changed so that PostProcessors are run in forward order
 (as they appear in the test plan) rather than reverse order as previously.
 The original behaviour can be restored by setting the following JMeter property:
 <br/>
 jmeterthread.reversePostProcessors=true
 </p>
 <p>
 The HTTP Authorisation Manager now has extra columns for domain and realm, 
 so the temporary work-round of using '\' and '@' in the username to delimit the domain and realm
 has been removed.
 </p>
 <h4>Incompatible changes (development):</h4>
 <p>
 Calulator and SamplingStatCalculator classes no longer provide any formatting of their data.
 Formatting should now be done using the jorphan.gui Renderer classes.
 </p>
 <p>
 Removed deprecated method JMeterUtils.split() - use JOrphanUtils version instead.
 </p>
 
 <h4>New functionality:</h4>
 <ul>
 <li>Added httpclient.parameters.file to allow HttpClient parameters to be defined</li>
 <li>Added beanshell.init.file property to run a BeanShell script at startup</li>
 <li>Added timeout for WebService (SOAP) Sampler</li>
 <li>Bug 40804 - Change Counter default to max = Long.MAX_VALUE</li>
 <li>BeanShell Post-Processor no longer ignores samples with zero-length result data</li>
 <li>Use property jmeter.home (if present) to override user.dir when starting JMeter</li>
 <li>Bug 41457 - Add TCP Sampler option to not re-use connections</li>
 <li>Bug 41522 - Use JUnit sampler name in sample results</li>
 <li>HttpClient now behaves the same as the JDK http sampler for invalid certificates etc</li>
 <li>Add Domain and Realm support to HTTP Authorisation Manager</li>
 <li>Bug 33964 - send file as entire post body if name/type are omitted</li>
 <li>HTTP Mirror Server Workbench element</li>
 <li>Bug 41253 - extend XPathExtractor to work with non-NodeList XPath expressions</li>
 <li>Bug 39717 - use icons in the results tree</li>
 <li>Added __V variable function to resolve nested variable names</li>
 <li>Bug 41707 - HTTP Proxy XML-RPC support</li>
 <li>Bug 40381 - LDAP: more descriptive strings</li>
 <li>Bug 40369 (partial) Equals Response Assertion</li>
 <li>Bug 41705 - add content-encoding option to HTTP samplers for POST requests</li>
 <li>Bug 40933, 40945 - optional matching of embedded resource URLs</li>
 <li>Bug 41704 - Allow charset encoding to be specified for CSV DataSet</li>
 <li>Bug 40103 - various LDAP enhancements</li>
 <li>Bug 39864 - BeanShell init files now found from currrent or bin directory</li>
 <li>New -j option to easily change jmeter log file</li>
 <li>Bug 41259 - Comment field added to all test elements</li>
 <li>Add standard deviation to Summary Report</li>
 <li>Bug 41873 - Add name to AssertionResult and display AssertionResult in ViewResultsFullVisualizer</li>
 <li>Bug 41876 - Add more options to control what the HTTP Proxy generates</li>
 <li>Bug 39693 - View Result Table use icon instead of check box</li>
 <li>Bug 41880 - Add content-type filtering to HTTP Proxy Server</li>
 <li>Bug 40825 - Add JDBC prepared statement support</li>
 <li>Bug 27780 - (patch 19936) create multipart/form-data HTTP request without uploading file</li>
 <li>Bug 42098 - Use specified encoding for parameter values in HTTP GET</li>
 <li>Bug 42088 - Add XPath Assertion for booleans</li>
 <li>Bug 42158 - Improve support for multipart/form-data requests in HTTP Proxy server</li>
 <li>Bug 40369 - LDAP: Stable search results in sampler</li>
+<li>Bug 36755 - Save XML test files with UTF-8 encoding</li>
 </ul>
 
 <h4>Non-functional improvements:</h4>
 <ul>
 <li>Functor calls can now be unit tested</li>
 <li>Replace com.sun.net classes with javax.net</li>
 <li>Extract external jar definitions into build.properties file</li>
 <li>Use specific jar names in build classpaths so errors are detected sooner</li>
 <li>Tidied up ORO calls; now only one cache, size given by oro.patterncache.size, default 1000</li>
 </ul>
 
 <h4>External jar updates:</h4>
 <ul>
 <li>Htmlparser 2.0-20060923</li>
 <li>xstream 1.2.1/xpp3_min-1.1.3.4.O</li>
 <li>Batik 1.6</li>
 <li>BSF 2.4.0</li>
 <li>commons-collections 3.2</li>
 <li>commons-httpclient-3.1-rc1</li>
 <li>commons-jexl 1.1</li>
 <li>commons-lang-2.3 (added)</li>
 <li>velocity 1.5</li>
 <li></li>
 </ul>
 
 <h4>Bug fixes:</h4>
 <ul>
 <li>Bug 39773 - NTLM now needs local host name - fix other call</li>
 <li>Bug 40438 - setting "httpclient.localaddress" has no effect</li>
 <li>Bug 40419 - Chinese messages translation fix</li>
 <li>Bug 39861 - fix typo</li>
 <li>Bug 40562 - redirects no longer invoke RE post processors</li>
 <li>Bug 40451 - set label if not set by sampler</li>
 <li>Fix NPE in CounterConfig.java in Remote mode</li>
 <li>Bug 40791 - Calculator used by Summary Report</li>
 <li>Bug 40772 - correctly parse missing fields in CSV log files</li>
 <li>Bug 40773 - XML log file timestamp not parsed correctly</li>
 <li>Bug 41029 - JMeter -t fails to close input JMX file</li>
 <li>Bug 40954 - Statistical mode in distributed testing shows wrong results</li>
 <li>Fix ClassCast Exception when using sampler that returns null, e..g TestAction</li>
 <li>Bug 41277 - add Latency and Encoding to CSV output</li>
 <li>Bug 41414 - Mac OS X may add extra item to -jar classpath</li>
 <li>Fix NPE when saving thread counts in remote testing</li>
 <li>Bug 34261 - NPE in HtmlParser (allow for missing attributes)</li>
 <li>Bug 40100 - check FileServer type before calling close</li>
 <li>Bug 39887 - jmeter.util.SSLManager: Couldn't load keystore error message</li>
 <li>Bug 41543 - exception when webserver returns "500 Internal Server Error" and content-length is 0</li>
 <li>Bug 41416 - don't use chunked input for text-box input in SOAP-RPC sampler</li>
 <li>Bug 39827 - SOAP Sampler content length for files</li>
 <li>Fix Class cast exception in Clear.java</li>
 <li>Bug 40383 - don't set content-type if already set</li>
 <li>Mailer Visualiser test button now works if test plan has not yet been saved</li>
 <li>Bug 36959 - Shortcuts "ctrl c" and "ctrl v" don't work on the tree elements</li>
 <li>Bug 40696 - retrieve embedded resources from STYLE URL() attributes</li>
 <li>Bug 41568 - Problem when running tests remotely when using a 'Counter'</li>
 <li>Fixed various classes that assumed timestamps were always end time stamps:
 <ul>
 <li>SamplingStatCalculator</li>
 <li>JTLData</li>
 <li>RunningSample</li>
 </ul>
 </li>
 <li>Bug 40325 - allow specification of proxyuser and proxypassword for WebServiceSampler</li>
 <li>Change HttpClient proxy definition to use NTCredentials; added http.proxyDomain property for this</li>
 <li>Bug 40371 - response assertion "pattern to test" scrollbar problem</li>
 <li>Bug 40589 - Unescape XML entities in embedded URLs</li>
 <li>Bug 41902 - NPE in HTTPSampler when responseCode = -1</li>
 <li>Bug 41903 - ViewResultsFullVisualizer : status column looks bad when you do copy and paste</li>
 <li>Bug 41837 - Parameter value corruption in proxy</li>
 <li>Bug 41905 - Can't cut/paste/select Header Manager fields in Java 1.6</li>
 <li>Bug 41928 - Make all request headers sent by HTTP Request sampler appear in sample result</li>
 <li>Bug 41944 - Subresults not handled recursively by ResultSaver</li>
 <li>Bug 42022 - HTTPSampler does not allow multiple headers of same name</li>
 <li>Bug 42019 - Content type not stored in redirected HTTP request with subresults</li>
 <li>Bug 42057 - connection can be null if method is null</li>
 <li>Bug 41518 - JMeter changes the HTTP header Content Type for POST request</li>
 <li>Bug 42156 - HTTPRequest HTTPClient incorrectly urlencodes parameter value in POST</li>
 <li>Bug 42184 - Number of bytes for subsamples not added to sample when sub samples are added</li>
 <li>Bug 42185 - If a HTTP Sampler follows a redirect, and is set up to download images, then images are downloaded multiple times</li>
 </ul>
 
 <h3>Version 2.2</h3>
 
 <h4>Incompatible changes:</h4>
 <p>
 The time stamp is now set to the sampler start time (it was the end).
 To revert to the previous behaviour, change the property <b>sampleresult.timestamp.start</b> to false (or comment it)
 </p>
 <p>The JMX output format has been simplified and files are not backwards compatible</p>
 <p>
 The JMeter.BAT file no longer changes directory to JMeter home, but runs from the current working directory.
 The jmeter-n.bat and jmeter-t.bat files change to the directory containing the input file.
 </p>
 <p>
 Listeners are now started slightly later in order to allow variable names to be used.
 This may cause some problems; if so define the following in jmeter.properties:
 <br/>
 jmeterengine.startlistenerslater=false
 </p>
 
 <h4>Known problems:</h4>
 <ul>
 <li>Post-processors run in reverse order (see bug 41140)</li>
 <li>Module Controller does not work in non-GUI mode</li>
 <li>Aggregate Report and some other listeners use increasing amounts of memory as a test progresses</li>
 <li>Does not always handle non-default encoding properly</li>
 <li>Spaces in the installation path cause problems for client-server mode</li>
 <li>Change of Language does not propagate to all test elements</li>
 <li>SamplingStatCalculator keeps a List of all samples for calculation purposes; 
 this can cause memory exhaustion in long-running tests</li>
 <li>Does not properly handle server certificates if they are expired or not installed locally</li>
 </ul>
 
 <h4>New functionality:</h4>
 <ul>
 <li>Report function</li>
 <li>XPath Extractor Post-Processor. Handles single and multiple matches.</li>
 <li>Simpler JMX file format (2.2)</li>
 <li>BeanshellSampler code can update ResponseData directly</li>
 <li>Bug 37490 - Allow UDV as delay in Duration Assertion</li>
 <li>Slow connection emulation for HttpClient</li>
 <li>Enhanced JUnitSampler so that by default assert errors and exceptions are not appended to the error message. 
 Users must explicitly check append in the sampler</li>
 <li>Enhanced the documentation for webservice sampler to explain how it works with CSVDataSet</li>
 <li>Enhanced the documentation for javascript function to explain escaping comma</li>
 <li>Allow CSV Data Set file names to be absolute</li>
 <li>Report Tree compiler errors better</li>
 <li>Don't reset Regex Extractor variable if default is empty</li>
 <li>includecontroller.prefix property added</li>
 <li>Regular Expression Extractor sets group count</li>
 <li>Can now save entire screen as an image, not just the right-hand pane</li>
 <li>Bug 38901 - Add optional SOAPAction header to SOAP Sampler</li>
 <li>New BeanShell test elements: Timer, PreProcessor, PostProcessor, Listener</li>
 <li>__split() function now clears next variable, so it can be used with ForEach Controller</li>
 <li>Bug 38682 - add CallableStatement functionality to JDBC Sampler</li>
 <li>Make it easier to change the RMI/Server port</li>
 <li>Add property jmeter.save.saveservice.xml_pi to provide optional xml processing instruction in JTL files</li>
 <li>Add bytes and URL to items that can be saved in sample log files (XML and CSV)</li>
 <li>The Post-Processor "Save Responses to a File" now saves the generated file name with the
 sample, and the file name can be included in the sample log file.
 </li>
 <li>Change jmeter.bat DOS script so it works from any directory</li>
 <li>New -N option to define nonProxyHosts from command-line</li>
 <li>New -S option to define system properties from input file</li>
 <li>Bug 26136 - allow configuration of local address</li>
 <li>Expand tree by default when loading a test plan - can be disabled by setting property onload.expandtree=false</li>
 <li>Bug 11843 - URL Rewriter can now cache the session id</li>
 <li>Counter Pre-Processor now supports formatted numbers</li>
 <li>Add support for HEAD PUT OPTIONS TRACE and DELETE methods</li>
 <li>Allow default HTTP implementation to be changed</li>
 <li>Optionally save active thread counts (group and all) to result files</li>
 <li>Variables/functions can now be used in Listener file names</li>
 <li>New __time() function; define START.MS/START.YMD/START.HMS properties and variables</li>
 <li>Add Thread Name to Tree and Table Views</li>
 <li>Add debug functions: What class, debug on, debug off</li>
 <li>Non-caching Calculator - used by Table Visualiser to reduce memory footprint</li>
 <li>Summary Report - similar to Aggregate Report, but uses less memory</li>
 <li>Bug 39580 - recycle option for CSV Dataset</li>
 <li>Bug 37652 - support for Ajp Tomcat protocol</li>
 <li>Bug 39626 - Loading SOAP/XML-RPC requests from file</li>
 <li>Bug 39652 - Allow truncation of labels on AxisGraph</li>
 <li>Allow use of htmlparser 1.6</li>
 <li>Bug 39656 - always use SOAP action if it is provided</li>
 <li>Automatically include properties from user.properties file</li>
 <li>Add __jexl() function - evaluates Commons JEXL expressions</li>
 <li>Optionally load JMeter properties from user.properties and system properties from system.properties.</li>
 <li>Bug 39707 - allow Regex match against URL</li>
 <li>Add start time to Table Visualiser</li>
 <li>HTTP Samplers can now extract embedded resources for any required media types</li>
 </ul>
 
 <h4>Bug fixes:</h4>
 <ul>
 <li>Fix NPE when no module selected in Module Controller</li>
 <li>Fix NPE in XStream when no ResponseData present</li>
 <li>Remove ?xml prefix when running with Java 1.5 and no x-jars</li>
 <li>Bug 37117 - setProperty() function should return ""; added optional return of original setting</li>
 <li>Fix CSV output time format</li>
 <li>Bug 37140 - handle encoding better in RegexFunction</li>
 <li>Load all cookies, not just the first; fix class cast exception</li>
 <li>Fix default Cookie path name (remove page name)</li>
 <li>Fixed resultcode attribute name</li>
 <li>Bug 36898 - apply encoding to RegexExtractor</li>
 <li>Add properties for saving subresults, assertions, latency, samplerData, responseHeaders, requestHeaders &amp; encoding</li>
 <li>Bug 37705 - Synch Timer now works OK after run is stopped</li>
 <li>Bug 37716 - Proxy request now handles file Post correctly</li>
 <li>HttpClient Sampler now saves latency</li>
 <li>Fix NPE when using JavaScript function on Test Plan</li>
 <li>Fix Base Href parsing in htmlparser</li>
 <li>Bug 38256 - handle cookie with no path</li>
 <li>Bug 38391 - use long when accumulating timer delays</li>
 <li>Bug 38554 - Random function now uses long numbers</li>
 <li>Bug 35224 - allow duplicate attributes for LDAP sampler</li>
 <li>Bug 38693 - Webservice sampler can now use https protocol</li>
 <li>Bug 38646 - Regex Extractor now clears old variables on match failure</li>
 <li>Bug 38640 - fix WebService Sampler pooling</li>
 <li>Bug 38474 - HTML Link Parser doesn't follow frame links</li>
 <li>Bug 36430 - Counter now uses long rather than int to increase the range</li>
 <li>Bug 38302 - fix XPath function</li>
 <li>Bug 38748 - JDBC DataSourceElement fails with remote testing</li>
 <li>Bug 38902 - sometimes -1 seems to be returned unnecessarily for response code</li>
 <li>Bug 38840 - make XML Assertion thread-safe</li>
 <li>Bug 38681 - Include controller now works in non-GUI mode</li>
 <li>Add write(OS,IS) implementation to TCPClientImpl</li>
 <li>Sample Result converter saves response code as "rc". Previously it saved as "rs" but read with "rc"; it will now also read with "rc".
 The XSL stylesheets also now accept either "rc" or "rs"</li>
 <li>Fix counter function so each counter instance is independent (previously the per-user counters were shared between instances of the function)</li>
 <li>Fix TestBean Examples so that they work</li>
 <li>Fix JTidy parser so it does not skip body tags with background images</li>
 <li>Fix HtmlParser parser so it catches all background images</li>
 <li>Bug 39252 set SoapSampler sample result from XML data</li>
 <li>Bug 38694 - WebServiceSampler not setting data encoding correctly</li>
 <li>Result Collector now closes input files read by listeners</li>
 <li>Bug 25505 - First HTTP sampling fails with "HTTPS hostname wrong: should be 'localhost'"</li>
 <li>Bug 25236 - remove double scrollbar from Assertion Result Listener</li>
 <li>Bug 38234 - Graph Listener divide by zero problem</li>
 <li>Bug 38824 - clarify behaviour of Ignore Status</li>
 <li>Bug 38250 - jmeter.properties "language" now supports country suffix, for zh_CN and zh_TW etc</li>
 <li>jmeter.properties file is now closed after it has been read</li>
 <li>Bug 39533 - StatCalculator added wrong items</li>
 <li>Bug 39599 - ConcurrentModificationException</li>
 <li>HTTPSampler2 now handles Auto and Follow redirects correctly</li>
 <li>Bug 29481 - fix reloading sample results so subresults not counted twice</li>
 <li>Bug 30267 - handle AutoRedirects properly</li>
 <li>Bug 39677 - allow for space in JMETER_BIN variable</li>
 <li>Use Commons HttpClient cookie parsing and management. Fix various problems with cookie handling.</li>
 <li>Bug 39773 - NTCredentials needs host name</li>
 </ul>	
 	
 <h4>Other changes</h4>
 <ul>
 <li>Updated to HTTPClient 3.0 (from 2.0)</li>
 <li>Updated to Commons Collections 3.1</li>
 <li>Improved formatting of Request Data in Tree View</li>
 <li>Expanded user documentation</li>
 <li>Added MANIFEST, NOTICE and LICENSE to all jars</li>
 <li>Extract htmlparser interface into separate jarfile to make it possible to replace the parser</li>
 <li>Removed SQL Config GUI as no longer needed (or working!)</li>
 <li>HTTPSampler no longer logs a warning for Page not found (404)</li>
 <li>StringFromFile now callable as __StringFromFile (as well as _StringFromFile)</li>
 <li>Updated to Commons Logging 1.1</li>
 </ul>
 
 <!--  ===================  -->
 
 
 <hr/>
 <h3>Version 2.1.1</h3>
 <h4>New functionality:</h4>
 <ul>
 <li>New Include Controller allows a test plan to reference an external jmx file</li>
 <li>New JUnitSampler added for using JUnit Test classes</li>
 <li>New Aggregate Graph listener is capable of graphing aggregate statistics</li>
 <li>Can provide additional classpath entries using the property user.classpath and on the Test Plan element</li>
 </ul>
 <h4>Bug fixes:</h4>
 <ul>
 <li>AccessLog Sampler and JDBC test elements populated correctly from 2.0 test plans</li>
 <li>BSF Sampler now populates filename and parameters from saved test plan</li>
 <li>Bug 36500 - handle missing data more gracefully in WebServiceSampler</li>
 <li>Bug 35546 - add merge to right-click menu</li>
 <li>Bug 36642 - Summariser stopped working in 2.1</li>
 <li>Bug 36618 - CSV header line did not match saved data</li>
 <li>JMeter should now run under JVM 1.3 (but does not build with 1.3)</li>
 </ul>	
 	
 
 <!--  ===================  -->
 
 <h3>Version 2.1</h3>
 <h4>New functionality:</h4>
 <ul>
 <li>New Test Script file format - smaller, more compact, more readable</li>
 <li>New Sample Result file format - smaller, more compact</li>
 <li>XSchema Assertion</li>
 <li>XML Tree display</li>
 <li>CSV DataSet Config item</li>
 <li>New JDBC Connection Pool Config Element</li>
 <li>Synchronisation Timer</li>
 <li>setProperty function</li>
 <li>Save response data on error</li>
 <li>Ant JMeter XSLT now optionally shows failed responses and has internal links</li>
 <li>Allow JavaScript variable name to be omitted</li>
 <li>Changed following Samplers to set sample label from sampler name</li>
 <li>All Test elements can be saved as a graphics image to a file</li>
 <li>Bug 35026 - add RE pattern matching to Proxy</li>
 <li>Bug 34739 - Enhance constant Throughput timer</li>
 <li>Bug 25052 - use response encoding to create comparison string in Response Assertion</li>
 <li>New optional icons</li>
 <li>Allow icons to be defined via property files</li>
 <li>New stylesheets for 2.1 format XML test output</li>
 <li>Save samplers, config element and listeners as PNG</li>
 <li>Enhanced support for WSDL processing</li>
 <li>New JMS sampler for topic and queue messages</li>
 <li>How-to for JMS samplers</li>
 <li>Bug 35525 - Added Spanish localisation</li>
 <li>Bug 30379 - allow server.rmi.port to be overridden</li>
 <li>enhanced the monitor listener to save the calculated stats</li>
 <li>Functions and variables now work at top level of test plan</li>
 </ul>
 <h4>Bug fixes:</h4>
 <ul>
 <li>Bug 34586 - XPath always remained as /</li>
 <li>BeanShellInterpreter did not handle null objects properly</li>
 <li>Fix Chinese resource bundle names</li>
 <li>Save field names if required to CSV files</li>
 <li>Ensure XML file is closed</li>
 <li>Correct icons now displayed for TestBean components</li>
 <li>Allow for missing optional jar(s) in creating menus</li>
 <li>Changed Samplers to set sample label from sampler name as was the case for HTTP</li>
 <li>Fix various samplers to avoid NPEs when incomplete data is provided</li>
 <li>Fix Cookie Manager to use seconds; add debug</li>
 <li>Bug 35067 - set up filename when using -t option</li>
 <li>Don't substitute TestElement.* properties by UDVs in Proxy</li>
 <li>Bug 35065 - don't save old extensions in File Saver</li>
 <li>Bug 25413 - don't enable Restart button unnecessarily</li>
 <li>Bug 35059 - Runtime Controller stopped working</li>
 <li>Clear up any left-over connections created by LDAP Extended Sampler</li>
 <li>Bug 23248 - module controller didn't remember stuff between save and reload</li>
 <li>Fix Chinese locales</li>
 <li>Bug 29920 - change default locale if necessary to ensure default properties are picked up when English is selected.</li>
 <li>Bug fixes for Tomcat monitor captions</li> 
 <li>Fixed webservice sampler so it works with user defined variables</li>
 <li>Fixed screen borders for LDAP config GUI elements</li>
 <li>Bug 31184 - make sure encoding is specified in JDBC sampler</li>
 <li>TCP sampler - only share sockets with same host:port details; correct the manual</li>
 <li>Extract src attribute for embed tags in JTidy and Html Parsers</li>
 </ul>	
 
 <!--  ===================  -->
 
 <h3>Version 2.0.3</h3>
 <h4>New functionality:</h4>
 <ul>
 <li>XPath Assertion and XPath Function</li>
 <li>Switch Controller</li>
 <li>ForEach Controller can now loop through sets of groups</li>
 <li>Allow CSVRead delimiter to be changed (see jmeter.properties)</li>
 <li>Bug 33920 - allow additional property files</li>
 <li>Bug 33845 - allow direct override of Home dir</li>
 </ul>
 <h4>Bug fixes:</h4>
 <ul>
 <li>Regex Extractor nested constant not put in correct place (32395)</li>
 <li>Start time reset to now if necessary so that delay works OK.</li>
 <li>Missing start/end times in scheduler are assumed to be now, not 1970</li>
 <li>Bug 28661 - 304 responses not appearing in listeners</li>
 <li>DOS scripts now handle different disks better</li>
 <li>Bug 32345 - HTTP Rewriter does not work with HTTP Request default</li>
 <li>Catch Runtime Exceptions so an error in one Listener does not affect others</li>
 <li>Bug 33467 - __threadNum() extracted number wrongly </li>
 <li>Bug 29186,33299 - fix CLI parsing of "-" in second argument</li>
 <li>Fix CLI parse bug: -D arg1=arg2. Log more startup parameters.</li>
 <li>Fix JTidy and HTMLParser parsers to handle form src= and link rel=stylesheet</li>
 <li>JMeterThread now logs Errors to jmeter.log which were appearing on console</li>
 <li>Ensure WhileController condition is dynamically checked</li>
 <li>Bug 32790 ensure If Controller condition is re-evaluated each time</li>
 <li>Bug 30266 - document how to display proxy recording responses</li>
 <li>Bug 33921 - merge should not change file name</li>
 <li>Close file now gives chance to save changes</li>
 <li>Bug 33559 - fixes to Runtime Controller</li>
 </ul>
 <h4>Other changes:</h4>
 <ul>
 <li>To help with variable evaluation, JMeterThread sets "sampling started" a bit earlier (see jmeter.properties)</li>
 <li>Bug 33796 - delete cookies with null/empty values</li>
 <li>Better checking of parameter count in JavaScript function</li>
 <li>Thread Group now defaults to 1 loop instead of forever</li>
 <li>All Beanshell access is now via a single class; only need BSH jar at run-time</li>
 <li>Bug 32464 - document Direct Draw settings in jmeter.bat</li>
 <li>Bug 33919 - increase Counter field sizes</li>
 <li>Bug 32252 - ForEach was not initialising counters</li>
 </ul>
 
 <!--  ===================  -->
 
 <h3>Version 2.0.2</h3>
 <h4>New functionality:</h4>
 <ul>
 <li>While Controller</li>
 <li>BeanShell intilisation scripts</li>
 <li>Result Saver can optionally save failed results only</li>
 <li>Display as HTML has option not to download frames and images etc</li>
 <li>Multiple Tree elements can now be enabled/disabled/copied/pasted at once</li>
 <li>__split() function added</li>
 <li>(28699) allow Assertion to regard unsuccessful responses - e.g. 404 - as successful</li>
 <li>(29075) Regex Extractor can now extract data out of http response header as well as the body</li>
 <li>__log() functions can now write to stdout and stderr</li>
 <li>URL Modifier can now optionally ignore query parameters</li>
 </ul>
 <h4>Bug fixes:</h4>
 <ul>
 <li>If controller now works after the first false condition (31390)</li>
 <li>Regex GUI was losing track of Header/Body checkbox (29853)</li>
 <li>Display as HTML now handles frames and relative images</li>
 <li>Right-click open replaced by merge</li>
 <li>Fix some drag and drop problems</li>
 <li>Fixed foreach demo example so it works</li>
 <li>(30741) SSL password prompt now works again </li>
 <li>StringFromFile now closes files at end of test; start and end now optional as intended</li>
 <li>(31342) Fixed text of SOAP Sampler headers</li>
 <li>Proxy must now be stopped before it can be removed (25145)</li>
 <li>Link Parser now supports BASE href (25490)</li>
 <li>(30917) Classfinder ignores duplicate names</li>
 <li>(22820) Allow Counter value to be cleared</li>
 <li>(28230) Fix NPE in HTTP Sampler retrieving embedded resources</li>
 <li>Improve handling of StopTest; catch and log some more errors</li>
 <li>ForEach Controller no longer runs any samples if first variable is not defined</li>
 <li>(28663) NPE in remote JDBC execution</li>
 <li>(30110) Deadlock in stopTest processing</li>
 <li>(31696) Duration not working correctly when using Scheduler</li>
 <li>JMeterContext now uses ThreadLocal - should fix some potential NPE errors</li>
 </ul>
 <h3>Version 2.0.1</h3>
 <p>Bug fix release. TBA.</p>
 <h3>Version 2.0</h3>
 <ul>
 	<li>HTML parsing improved; now has choice of 3 parsers, and most embedded elements can now be detected and downloaded.</li>
 <li>Redirects can now be delegated to URLConnection by defining the JMeter property HTTPSamper.delegateRedirects=true (default is false) </li>
 <li>Stop Thread and Stop Test methods added for Samplers and Assertions etc. Samplers can call setStopThread(true) or setStopTest(true) if they detect an error that needs to stop the thread of the test after the sample has been processed </li>
 <li>Thread Group Gui now has an extra pane to specify what happens after a Sampler error: Continue (as now), Stop Thread or Stop Test. 
     This needs to be extended to a lower level at some stage. </li>
 <li>Added Shutdown to Run Menu. This is the same as Stop except that it lets the Threads finish normally (i.e. after the next sample has been completed) </li>
 <li>Remote samples can be cached until the end of a test by defining the property hold_samples=true when running the server.
 More work is needed to be able to control this from the GUI </li>
 <li>Proxy server has option to skip recording browser headers </li>
 <li>Proxy restart works better (stop waits for daemon to finish) </li>
 <li>Scheduler ignores start if it has already passed </li>
 <li>Scheduler now has delay function </li>
 <li>added Summariser test element (mainly for non-GUI) testing. This prints summary statistics to System.out and/or the log file every so oftem (3 minutes by default). Multiple summarisers can be used; samples are accumulated by summariser name. </li>
 <li>Extra Proxy Server options: 
 Create all samplers with keep-alive disabled 
 Add Separator markers between sets of samples 
 Add Response Assertion to first sampler in each set </li>
 <li>Test Plan has a comment field</li>
 	
 	<li>Help Page can now be pushed to background</li>
 	<li>Separate Function help page</li>
 	<li>New / amended functions</li>
 	<ul>
 	  <li>__property() and __P() functions</li>
 	  <li>__log() and __logn() - for writing to the log file</li>
       <li>_StringFromFile can now process a sequence of files, e.g. dir/file01.txt, dir/file02.txt etc </li>
       <li>_StringFromFile() funtion can now use a variable or function for the file name </li>
 	</ul>
 	<li>New / amended Assertions</li>
 	<ul>
         <li>Response Assertion now works for URLs, and it handles null data better </li>
         <li>Response Assertion can now match on Response Code and Response message as well </li>
 		<li>HTML Assertion using JTidy to check for well-formed HTML</li>
 	</ul>
 	<li>If Controller (not fully functional yet)</li>
 	<li>Transaction Controller (aggregates the times of its children)</li>
 	<li>New Samplers</li>
 		<ul>
 			<li>Basic BSF Sampler (optional)</li>
 			<li>BeanShell Sampler (optional, needs to be downloaded from www.beanshell.org</li>
 			<li>Basic TCP Sampler</li>
 		</ul>
      <li>Optionally start BeanShell server (allows remote access to JMeter variables and methods) </li>
 </ul>
 <h3>Version 1.9.1</h3>
 <p>TBA</p>
 <h3>Version 1.9</h3>
 <ul>
 <li>Sample result log files can now be in CSV or XML format</li>
 <li>New Event model for notification of iteration events during test plan run</li>
 <li>New Javascript function for executing arbitrary javascript statements</li>
 <li>Many GUI improvements</li>
 <li>New Pre-processors and Post-processors replace Modifiers and Response-Based Modifiers. </li>
 <li>Compatible with jdk1.3</li>
 <li>JMeter functions are now fully recursive and universal (can use functions as parameters to functions)</li>
 <li>Integrated help window now supports hypertext links</li>
 <li>New Random Function</li>
 <li>New XML Assertion</li>
 <li>New LDAP Sampler (alpha code)</li>
 <li>New Ant Task to run JMeter (in extras folder)</li>
 <li>New Java Sampler test implementation (to assist developers)</li>
 <li>More efficient use of memory, faster loading of .jmx files</li>
 <li>New SOAP Sampler (alpha code)</li>
 <li>New Median calculation in Graph Results visualizer</li>
 <li>Default config element added for developer benefit</li>
 <li>Various performance enhancements during test run</li>
 <li>New Simple File recorder for minimal GUI overhead during test run</li>
 <li>New Function: StringFromFile - grabs values from a file</li>
 <li>New Function: CSVRead - grabs multiple values from a file</li>
 <li>Functions now longer need to be encoded - special values should be escaped 
 with "\" if they are literal values</li>
 <li>New cut/copy/paste functionality</li>
 <li>SSL testing should work with less user-fudging, and in non-gui mode</li>
 <li>Mailer Model works in non-gui mode</li>
 <li>New Througput Controller</li>
 <li>New Module Controller</li>
 <li>Tests can now be scheduled to run from a certain time till a certain time</li>
 <li>Remote JMeter servers can be started from a non-gui client.  Also, in gui mode, all remote servers can be started with a single click</li>
 <li>ThreadGroups can now be run either serially or in parallel (default)</li>
 <li>New command line options to override properties</li>
 <li>New Size Assertion</li>
 
 </ul>
 
 <h3>Version 1.8.1</h3>
 <ul>
 <li>Bug Fix Release.  Many bugs were fixed.</li>
 <li>Removed redundant "Root" node from test tree.</li>
 <li>Re-introduced Icons in test tree.</li>
 <li>Some re-organization of code to improve build process.</li>
 <li>View Results Tree has added option to view results as web document (still buggy at this point).</li>
 <li>New Total line in Aggregate Listener (still buggy at this point).</li>
 <li>Improvements to ability to change JMeter's Locale settings.</li>
 <li>Improvements to SSL Manager.</li>
 </ul>
 
 <h3>Version 1.8</h3>
 <ul>
 <li>Improvement to Aggregate report's calculations.</li>
 <li>Simplified application logging.</li>
 <li>New Duration Assertion.</li>
 <li>Fixed and improved Mailer Visualizer.</li>
 <li>Improvements to HTTP Sampler's recovery of resources (sockets and file handles).</li>
 <li>Improving JMeter's internal handling of test start/stop.</li>
 <li>Fixing and adding options to behavior of Interleave and Random Controllers.</li>
 <li>New Counter config element.</li>
 <li>New User Parameters config element.</li>
 <li>Improved performance of file opener.</li>
 <li>Functions and other elements can access global variables.</li>
 <li>Help system available within JMeter's GUI.</li>
 <li>Test Elements can be disabled.</li>
 <li>Language/Locale can be changed while running JMeter (mostly).</li>
 <li>View Results Tree can be configured to record only errors.</li>
 <li>Various bug fixes.</li>
 </ul>
 
 <b>Changes: for more info, contact <a href="mailto:mstover1@apache.org">Michael Stover</a></b>
 <h3>Version 1.7.3</h3>
 <ul>
 <li>New Functions that provide more ability to change requests dynamically during test runs.</li>
 <li>New language translations in Japanese and German.</li>
 <li>Removed annoying Log4J error messages.</li>
 <li>Improved support for loading JMeter 1.7 version test plan files (.jmx files).</li>
 <li>JMeter now supports proxy servers that require username/password authentication.</li>
 <li>Dialog box indicating test stopping doesn't hang JMeter on problems with stopping test.</li>
 <li>GUI can run multiple remote JMeter servers (fixes GUI bug that prevented this).</li>
 <li>Dialog box to help created function calls in GUI.</li>
 <li>New Keep-alive switch in HTTP Requests to indicate JMeter should or should not use Keep-Alive for sockets.</li>
 <li>HTTP Post requests can have GET style arguments in Path field.  Proxy records them correctly now.</li>
 <li>New User-defined test-wide static variables.</li>
 <li>View Results Tree now displays more information, including name of request (matching the name
 in the test tree) and full request and POST data.</li>
 <li>Removed obsolete View Results Visualizer (use View Results Tree instead).</li>
 <li>Performance enhancements.</li>
 <li>Memory use enhancements.</li>
 <li>Graph visualizer GUI improvements.</li>
 <li>Updates and fixes to Mailer Visualizer.</li>
 </ul>
  
 <h3>Version 1.7.2</h3>
 <ul>
 <li>JMeter now notifies user when test has stopped running.</li>
 <li>HTTP Proxy server records HTTP Requests with re-direct turned off.</li>
 <li>HTTP Requests can be instructed to either follow redirects or ignore them.</li>
 <li>Various GUI improvements.</li>
 <li>New Random Controller.</li>
 <li>New SOAP/XML-RPC Sampler.</li>
 </ul>
 
 <h3>Version 1.7.1</h3>
 <ul>
 <li>JMeter's architecture revamped for a more complete separation between GUI code and
 test engine code.</li>
 <li>Use of Avalon code to save test plans to XML as Configuration Objects</li>
 <li>All listeners can save data to file and load same data at later date.</li>
 </ul>
 
 <h3>Version 1.7Beta</h3> 
 <ul> 
 	<li>Better XML support for special characters (Tushar Bhatia) </li> 
 	<li>Non-GUI functioning  &amp; Non-GUI test plan execution  (Tushar Bhatia)</li> 
 	<li>Removing Swing dependence from base JMeter classes</li> 
 	<li>Internationalization (Takashi Okamoto)</li> 
 	<li>AllTests bug fix (neth6@atozasia.com)</li> 
 	<li>ClassFinder bug fix (neth6@atozasia.com)</li> 
 	<li>New Loop Controller</li> 
 	<li>Proxy Server records HTTP samples from browser 
 		(and documented in the user manual)</li> <li>Multipart Form support</li> 
 	<li>HTTP Header class for Header customization</li> 
 	<li>Extracting HTTP Header information from responses (Jamie Davidson)</li> 
 	<li>Mailer Visualizer re-added to JMeter</li> 
 	<li>JMeter now url encodes parameter names and values</li> 
 	<li>listeners no longer give exceptions if their gui's haven't been initialized</li> 
 	<li>HTTPS and Authorization working together</li> 
 	<li>New Http sampling that automatically parses HTML response 
 		for images to download, and includes the downloading of these 
 		images in total time for request (Neth neth6@atozasia.com) </li> 
 	<li>HTTP responses from server can be parsed for links and forms, 
 		and dynamic data can be extracted and added to test samples 
 		at run-time (documented)</li>  
 	<li>New Ramp-up feature (Jonathan O'Keefe)</li> 
 	<li>New visualizers (Neth)</li> 
 	<li>New Assertions for functional testing</li> 
 </ul>  
 
 <h3>Version 1.6.1</h3> 
 <ul> 
 	<li>Fixed saving and loading of test scripts (no more extra lines)</li> 
 	<li>Can save and load special characters (such as &quot;&amp;&quot; and &quot;&lt;&quot;).</li> 
 	<li>Can save and load timers and listeners.</li> 
 	<li>Minor bug fix for cookies (if you cookie value 
 		contained an &quot;=&quot;, then it broke).</li> 
 	<li>URL's can sample ports other than 80, and can test HTTPS, 
 		provided you have the necessary jars (JSSE)</li> 
 </ul> 
 
 <h3>Version 1.6 Alpha</h3> 
 <ul> 
 	<li>New UI</li> 
 	<li>Separation of GUI and Logic code</li> 	
 	<li>New Plug-in framework for new modules</li> 
 	<li>Enhanced performance</li> 
 	<li>Layering of test logic for greater flexibility</li> 
 	<li>Added support for saving of test elements</li> 
 	<li>Added support for distributed testing using a single client</li> 
 
 </ul> 
 <h3>Version 1.5.1</h3> 
 <ul> 
 	<li>Fixed bug that caused cookies not to be read if header name case not as expected.</li> 
 	<li>Clone entries before sending to sampler - prevents relocations from messing up 
 		information across threads</li> 
 	<li>Minor bug fix to convenience dialog for adding paramters to test sample.  
 		Bug prevented entries in dialog from appearing in test sample.</li> 
 	<li>Added xerces.jar to distribution</li> 
 	<li>Added junit.jar to distribution and created a few tests.</li> 
 	<li>Started work on new framework.  New files in cvs, but do not effect program yet.</li> 
 	<li>Fixed bug that prevent HTTPJMeterThread from delaying according to chosen timer.</li> 
 </ul>  
 <p> 
 <h3>Version 1.5</h3> 
 <ul>   
 	<li>Abstracted out the concept of the Sampler, SamplerController, and TestSample.   
 		A Sampler represents code that understands a protocol (such as HTTP, 
 		or FTP, RMI,   SMTP, etc..).  It is the code that actually makes the 
 		connection to whatever is   being tested.   A SamplerController 
 		represents code that understands how to organize and run a group   
 		of test samples.  It is what binds together a Sampler and it's test 
 		samples and runs them.   A TestSample represents code that understands 
 		how to gather information from the   user about a particular test.  
 		For a website, it would represent a URL and any   information to be sent 
 		with the URL.</li>   
 	<li>The UI has been updated to make entering test samples more convenient.</li>   
 	<li>Thread groups have been added, allowing a user to setup multiple test to run   
 		concurrently, and to allow sharing of test samples between those tests.</li>   
 	<li>It is now possible to save and load test samples.</li>   
 	<li>....and many more minor changes/improvements...</li> 
 </ul> 
 </p> 
 <p> 
 <b>Apache JMeter 1.4.1-dev</b> (<a href="mailto:stefano@apache.org">Stefano Mazzocchi</a>)  
 <ul>
    <li>Cleaned up URLSampler code after tons of patches for better readability. (SM)</li>
    <li>Made JMeter send a special &quot;user-agent&quot; identifier. (SM)</li>
    <li>Fixed problems with redirection not sending cookies and authentication info and removed
      a warning with jikes compilation. Thanks to <a href="mailto:wtanaka@yahoo.com">Wesley
      Tanaka</a> for the patches (SM)</li>
    <li>Fixed a bug in the URLSampler that caused to skip one URL when testing lists of URLs and
      a problem with Cookie handling. Thanks to <a
      href="mailto:gjohnson@investlearning.com">Graham Johnson</a> for the patches (SM)</li>
    <li>Fixed a problem with POST actions. Thanks to <a href="mailto:sschaub@bju.edu">Stephen
      Schaub</a> for the patch (SM)</li>
  </ul>
  </p>
  <p>
  <b>Apache JMeter 1.4</b> - Jul 11 1999 (<a href="mailto:cimjpno@be.ibm.com">Jean-Pierre Norguet</a>,
  <a href="mailto:stefano@apache.org">Stefano Mazzocchi</a>)
   <ul>
    <li>Fixed a problem with POST actions. Thanks to <a href="mailto:bburns@labs.gte.com">Brendan
      Burns</a> for the patch (SM)</li>
    <li>Added close button to the About box for those window managers who don't provide it.
      Thanks to Jan-Henrik Haukeland for pointing it out. (SM)</li>
    <li>Added the simple Spline sample visualizer (JPN)</li> 
 </ul> </p>
   <p><b>Apache JMeter 1.3</b> - Apr 16 1999
   (<a href="mailto:stefano@apache.org">Stefano Mazzocchi</a>,
  <a href="mailto:luta.raphael@networks.vivendi.net">Raphaël Luta</a>)
 <ul>
    <li>Run the Garbage Collector and run finalization before starting to sampling to ensure
      same state every time (SM)</li>
    <li>Fixed some NullPointerExceptions here and there (SM)</li>
    <li>Added HTTP authentication capabilities (RL)</li>
    <li>Added windowed sample visualizer (SM)</li>
    <li>Fixed stupid bug for command line arguments. Thanks to <a
      href="mailto:jbracer@infoneers.com">Jorge Bracer</a> for pointing this out (SM)</li> 
 </ul> </p>
   <p><b>Apache JMeter 1.2</b> - Mar 17 1999 (<a href="mailto:sdowd@arcmail.com">Sean Dowd</a>, 
 <a href="mailto:stefano@apache.org">Stefano Mazzocchi</a>)  
 <ul>
    <li>Integrated cookie capabilities with JMeter (SM)</li>
    <li>Added the Cookie manager and Netscape file parser (SD)</li>
    <li>Fixed compilation error for JDK 1.1 (SD)</li> </ul> </p>  
 <p> <b>Apache JMeter 1.1</b> - Feb 24 1999 (<a href="mailto:sdowd@arcmail.com">Sean Dowd</a>, 
 <a href="mailto:stefano@apache.org">Stefano Mazzocchi</a>)  
 <ul>
    <li>Created the opportunity to create URL aliasing from the properties file as well as the
      ability to associate aliases to URL sequences instead of single URLs (SM) Thanks to <a
      href="mailto:chatfield@evergreen.com">Simon Chatfield</a> for the very nice suggestions
      and code examples.</li>
    <li>Removed the TextVisualizer and replaced it with the much more useful FileVisualizer (SM)</li>
    <li>Added the known bug list (SM)</li>
    <li>Removed the Java Apache logo (SM)</li>
    <li>Fixed a couple of typos (SM)</li>
    <li>Added UNIX makefile (SD)</li> </ul> </p> 
 <p> <b>Apache JMeter 1.0.1</b> - Jan 25 1999 (<a href="mailto:stefano@apache.org">Stefano Mazzocchi</a>)  
 <ul>
    <li>Removed pending issues doc issues (SM)</li>
    <li>Fixed the unix script (SM)</li>
    <li>Added the possibility of running the JAR directly using &quot;java -jar
      ApacheJMeter.jar&quot; with Java 2 (SM)</li>
    <li>Some small updates: fixed Swing location after Java 2(tm) release, license update and
      small cleanups (SM)</li> 
 </ul> </p> 
 <p> <b>Apache JMeter 1.0</b> - Dec 15 1998 (<a href="mailto:stefano@apache.org">Stefano Mazzocchi</a>) 
 <ul>
    <li>Initial version. (SM)</li> 
 </ul> </p> 
 </section> 
 </body> 
 </document>
