diff --git a/bin/saveservice.properties b/bin/saveservice.properties
index 895dc09a1..7ae36b24d 100644
--- a/bin/saveservice.properties
+++ b/bin/saveservice.properties
@@ -1,401 +1,407 @@
 #---------------------------------------------------------
 #         SAVESERVICE PROPERTIES - JMETER INTERNAL USE ONLY
 #---------------------------------------------------------
 
 ##   Licensed to the Apache Software Foundation (ASF) under one or more
 ##   contributor license agreements.  See the NOTICE file distributed with
 ##   this work for additional information regarding copyright ownership.
 ##   The ASF licenses this file to You under the Apache License, Version 2.0
 ##   (the "License"); you may not use this file except in compliance with
 ##   the License.  You may obtain a copy of the License at
 ## 
 ##       http://www.apache.org/licenses/LICENSE-2.0
 ## 
 ##   Unless required by applicable law or agreed to in writing, software
 ##   distributed under the License is distributed on an "AS IS" BASIS,
 ##   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 ##   See the License for the specific language governing permissions and
 ##   limitations under the License.
 
 # This file is used to define how XStream (de-)serializes classnames
 # in JMX test plan files.
 
 #      FOR JMETER INTERNAL USE ONLY
 
 #---------------------------------------------------------
 
 # N.B. To ensure backward compatibility, please do NOT change or delete any entries
 
 # New entries can be added as necessary.
 #
 # Note that keys starting with an underscore are special,
 # and are not used as aliases.
 #
 # Please keep the entries in alphabetical order within the sections
 # to reduce the likelihood of duplicates
 #
 # version number of this file is now computed by a sha1 sum, so no need for
 # an explicit _file_version property anymore.
 #
 # For this sha1 sum we ignore every newline character. It can be computed
 # by the following command:
 #
 # cat bin/saveservice.properties | perl -ne 'chomp; print' | sha1sum
 #
 # Be aware, that every change in this file will change the sha1 sum!
 #
 # Conversion version (for JMX output files)
 # Must be updated if the file has been changed since the previous release
 # Format is:
 # Save service version=JMeter version at which change occured
 # 1.7 = 2.1.1
 # 1.8 = 2.1.2
 # (Some version updates were missed here...)
 # 2.0 = 2.3.1
 # 2.1 = 2.3.2
 # (Some version updates were missed here...)
 # 2.2 = 2.6
 # 2.3 = 2.7
 # 2.4 = 2.9
 # 2.5 = 2.10
 # 2.6 = 2.11
 # 2.7 = 2.12
 # 2.8 = 2.13
 # 2.9 = 2.14
 # 3.1 = 3.1
-_version=3.1
+# 3.2 = 3.2
+_version=3.2
 #
 #
 # Character set encoding used to read and write JMeter XML files and CSV results
 #
 _file_encoding=UTF-8
 #
 #---------------------------------------------------------
 #
 # The following properties are used to create aliases
 # [Must all start with capital letter]
 #
 AccessLogSampler=org.apache.jmeter.protocol.http.sampler.AccessLogSampler
 AjpSampler=org.apache.jmeter.protocol.http.sampler.AjpSampler
 AjpSamplerGui=org.apache.jmeter.protocol.http.control.gui.AjpSamplerGui
 AnchorModifier=org.apache.jmeter.protocol.http.modifier.AnchorModifier
 AnchorModifierGui=org.apache.jmeter.protocol.http.modifier.gui.AnchorModifierGui
 Argument=org.apache.jmeter.config.Argument
 Arguments=org.apache.jmeter.config.Arguments
 ArgumentsPanel=org.apache.jmeter.config.gui.ArgumentsPanel
 AssertionGui=org.apache.jmeter.assertions.gui.AssertionGui
 AssertionVisualizer=org.apache.jmeter.visualizers.AssertionVisualizer
 AuthManager=org.apache.jmeter.protocol.http.control.AuthManager
 Authorization=org.apache.jmeter.protocol.http.control.Authorization
 AuthPanel=org.apache.jmeter.protocol.http.gui.AuthPanel
 BackendListener=org.apache.jmeter.visualizers.backend.BackendListener
 BackendListenerGui=org.apache.jmeter.visualizers.backend.BackendListenerGui
 BeanShellAssertion=org.apache.jmeter.assertions.BeanShellAssertion
 BeanShellAssertionGui=org.apache.jmeter.assertions.gui.BeanShellAssertionGui
 BeanShellListener=org.apache.jmeter.visualizers.BeanShellListener
 BeanShellPostProcessor=org.apache.jmeter.extractor.BeanShellPostProcessor
 BeanShellPreProcessor=org.apache.jmeter.modifiers.BeanShellPreProcessor
 BeanShellSampler=org.apache.jmeter.protocol.java.sampler.BeanShellSampler
 BeanShellSamplerGui=org.apache.jmeter.protocol.java.control.gui.BeanShellSamplerGui
 BeanShellTimer=org.apache.jmeter.timers.BeanShellTimer
 BSFAssertion=org.apache.jmeter.assertions.BSFAssertion
 BSFListener=org.apache.jmeter.visualizers.BSFListener
 BSFPreProcessor=org.apache.jmeter.modifiers.BSFPreProcessor
 BSFPostProcessor=org.apache.jmeter.extractor.BSFPostProcessor
 BSFSampler=org.apache.jmeter.protocol.java.sampler.BSFSampler
 BSFSamplerGui=org.apache.jmeter.protocol.java.control.gui.BSFSamplerGui
 BSFTimer=org.apache.jmeter.timers.BSFTimer
 CacheManager=org.apache.jmeter.protocol.http.control.CacheManager
 CacheManagerGui=org.apache.jmeter.protocol.http.gui.CacheManagerGui
 CompareAssertion=org.apache.jmeter.assertions.CompareAssertion
 ComparisonVisualizer=org.apache.jmeter.visualizers.ComparisonVisualizer
 ConfigTestElement=org.apache.jmeter.config.ConfigTestElement
 ConstantThroughputTimer=org.apache.jmeter.timers.ConstantThroughputTimer
 ConstantTimer=org.apache.jmeter.timers.ConstantTimer
 ConstantTimerGui=org.apache.jmeter.timers.gui.ConstantTimerGui
 Cookie=org.apache.jmeter.protocol.http.control.Cookie
 CookieManager=org.apache.jmeter.protocol.http.control.CookieManager
 CookiePanel=org.apache.jmeter.protocol.http.gui.CookiePanel
 CounterConfig=org.apache.jmeter.modifiers.CounterConfig
 CriticalSectionController=org.apache.jmeter.control.CriticalSectionController
 CriticalSectionControllerGui=org.apache.jmeter.control.gui.CriticalSectionControllerGui
 CounterConfigGui=org.apache.jmeter.modifiers.gui.CounterConfigGui
 CSVDataSet=org.apache.jmeter.config.CSVDataSet
 DebugPostProcessor=org.apache.jmeter.extractor.DebugPostProcessor
 DebugSampler=org.apache.jmeter.sampler.DebugSampler
 # removed in 3.1, class was deleted in r1763837
 DistributionGraphVisualizer=org.apache.jmeter.visualizers.DistributionGraphVisualizer
 DNSCacheManager=org.apache.jmeter.protocol.http.control.DNSCacheManager
 DNSCachePanel=org.apache.jmeter.protocol.http.gui.DNSCachePanel
 DurationAssertion=org.apache.jmeter.assertions.DurationAssertion
 DurationAssertionGui=org.apache.jmeter.assertions.gui.DurationAssertionGui
 # Should really have been defined as floatProp to agree with other properties
 # No point changing this now
 FloatProperty=org.apache.jmeter.testelement.property.FloatProperty
 ForeachController=org.apache.jmeter.control.ForeachController
 ForeachControlPanel=org.apache.jmeter.control.gui.ForeachControlPanel
 FtpConfigGui=org.apache.jmeter.protocol.ftp.config.gui.FtpConfigGui
 FTPSampler=org.apache.jmeter.protocol.ftp.sampler.FTPSampler
 FtpTestSamplerGui=org.apache.jmeter.protocol.ftp.control.gui.FtpTestSamplerGui
 GaussianRandomTimer=org.apache.jmeter.timers.GaussianRandomTimer
 GaussianRandomTimerGui=org.apache.jmeter.timers.gui.GaussianRandomTimerGui
 GenericController=org.apache.jmeter.control.GenericController
 GraphAccumVisualizer=org.apache.jmeter.visualizers.GraphAccumVisualizer
 GraphVisualizer=org.apache.jmeter.visualizers.GraphVisualizer
 Header=org.apache.jmeter.protocol.http.control.Header
 HeaderManager=org.apache.jmeter.protocol.http.control.HeaderManager
 HeaderPanel=org.apache.jmeter.protocol.http.gui.HeaderPanel
 HTMLAssertion=org.apache.jmeter.assertions.HTMLAssertion
 HTMLAssertionGui=org.apache.jmeter.assertions.gui.HTMLAssertionGui
 HTTPArgument=org.apache.jmeter.protocol.http.util.HTTPArgument
 HTTPArgumentsPanel=org.apache.jmeter.protocol.http.gui.HTTPArgumentsPanel
 HTTPFileArg=org.apache.jmeter.protocol.http.util.HTTPFileArg
 HTTPFileArgs=org.apache.jmeter.protocol.http.util.HTTPFileArgs
 HttpDefaultsGui=org.apache.jmeter.protocol.http.config.gui.HttpDefaultsGui
 HtmlExtractor=org.apache.jmeter.extractor.HtmlExtractor
 HtmlExtractorGui=org.apache.jmeter.extractor.gui.HtmlExtractorGui
 # removed in r1039684, probably not released. Not present in r322831 or since.
 #HttpGenericSampler=org.apache.jmeter.protocol.http.sampler.HttpGenericSampler
 # removed in r1039684, probably not released. Not present in r322831 or since.
 #HttpGenericSamplerGui=org.apache.jmeter.protocol.http.control.gui.HttpGenericSamplerGui
 HttpMirrorControl=org.apache.jmeter.protocol.http.control.HttpMirrorControl
 HttpMirrorControlGui=org.apache.jmeter.protocol.http.control.gui.HttpMirrorControlGui
 # r397955 - removed test class. Keep as commented entry for info only.
 #HTTPNullSampler=org.apache.jmeter.protocol.http.sampler.HTTPNullSampler
 # Merge previous 2 HTTP samplers into one
 HTTPSampler_=org.apache.jmeter.protocol.http.sampler.HTTPSampler
 HTTPSampler2_=org.apache.jmeter.protocol.http.sampler.HTTPSampler2
 HTTPSamplerProxy,HTTPSampler,HTTPSampler2=org.apache.jmeter.protocol.http.sampler.HTTPSamplerProxy
 # Merge GUIs
 HttpTestSampleGui,HttpTestSampleGui2=org.apache.jmeter.protocol.http.control.gui.HttpTestSampleGui
 #HttpTestSampleGui2=org.apache.jmeter.protocol.http.control.gui.HttpTestSampleGui2
 IfController=org.apache.jmeter.control.IfController
 IfControllerPanel=org.apache.jmeter.control.gui.IfControllerPanel
 IncludeController=org.apache.jmeter.control.IncludeController
 IncludeControllerGui=org.apache.jmeter.control.gui.IncludeControllerGui
 InterleaveControl=org.apache.jmeter.control.InterleaveControl
 InterleaveControlGui=org.apache.jmeter.control.gui.InterleaveControlGui
 JavaConfig=org.apache.jmeter.protocol.java.config.JavaConfig
 JavaConfigGui=org.apache.jmeter.protocol.java.config.gui.JavaConfigGui
 JavaSampler=org.apache.jmeter.protocol.java.sampler.JavaSampler
 JavaTest=org.apache.jmeter.protocol.java.test.JavaTest
 JavaTestSamplerGui=org.apache.jmeter.protocol.java.control.gui.JavaTestSamplerGui
 JDBCDataSource=org.apache.jmeter.protocol.jdbc.config.DataSourceElement
 JDBCPostProcessor=org.apache.jmeter.protocol.jdbc.processor.JDBCPostProcessor
 JDBCPreProcessor=org.apache.jmeter.protocol.jdbc.processor.JDBCPreProcessor
 JDBCSampler=org.apache.jmeter.protocol.jdbc.sampler.JDBCSampler
 # Renamed to JMSSamplerGui; keep original entry for backwards compatibility
 JMSConfigGui=org.apache.jmeter.protocol.jms.control.gui.JMSConfigGui
 JMSProperties=org.apache.jmeter.protocol.jms.sampler.JMSProperties
 JMSProperty=org.apache.jmeter.protocol.jms.sampler.JMSProperty
 JMSPublisherGui=org.apache.jmeter.protocol.jms.control.gui.JMSPublisherGui
 JMSSampler=org.apache.jmeter.protocol.jms.sampler.JMSSampler
 JMSSamplerGui=org.apache.jmeter.protocol.jms.control.gui.JMSSamplerGui
 JMSSubscriberGui=org.apache.jmeter.protocol.jms.control.gui.JMSSubscriberGui
 JSONPostProcessor=org.apache.jmeter.extractor.json.jsonpath.JSONPostProcessor
 JSONPostProcessorGui=org.apache.jmeter.extractor.json.jsonpath.gui.JSONPostProcessorGui
 # Removed in r545311 as Jndi no longer present; keep for compat.
 JndiDefaultsGui=org.apache.jmeter.protocol.jms.control.gui.JndiDefaultsGui
 JSR223Assertion=org.apache.jmeter.assertions.JSR223Assertion
 JSR223Listener=org.apache.jmeter.visualizers.JSR223Listener
 JSR223PostProcessor=org.apache.jmeter.extractor.JSR223PostProcessor
 JSR223PreProcessor=org.apache.jmeter.modifiers.JSR223PreProcessor
 JSR223Sampler=org.apache.jmeter.protocol.java.sampler.JSR223Sampler
 JSR223Timer=org.apache.jmeter.timers.JSR223Timer
 JUnitSampler=org.apache.jmeter.protocol.java.sampler.JUnitSampler
 JUnitTestSamplerGui=org.apache.jmeter.protocol.java.control.gui.JUnitTestSamplerGui
 KeystoreConfig=org.apache.jmeter.config.KeystoreConfig
 LDAPArgument=org.apache.jmeter.protocol.ldap.config.gui.LDAPArgument
 LDAPArguments=org.apache.jmeter.protocol.ldap.config.gui.LDAPArguments
 LDAPArgumentsPanel=org.apache.jmeter.protocol.ldap.config.gui.LDAPArgumentsPanel
 LdapConfigGui=org.apache.jmeter.protocol.ldap.config.gui.LdapConfigGui
 LdapExtConfigGui=org.apache.jmeter.protocol.ldap.config.gui.LdapExtConfigGui
 LDAPExtSampler=org.apache.jmeter.protocol.ldap.sampler.LDAPExtSampler
 LdapExtTestSamplerGui=org.apache.jmeter.protocol.ldap.control.gui.LdapExtTestSamplerGui
 LDAPSampler=org.apache.jmeter.protocol.ldap.sampler.LDAPSampler
 LdapTestSamplerGui=org.apache.jmeter.protocol.ldap.control.gui.LdapTestSamplerGui
 LogicControllerGui=org.apache.jmeter.control.gui.LogicControllerGui
 LoginConfig=org.apache.jmeter.config.LoginConfig
 LoginConfigGui=org.apache.jmeter.config.gui.LoginConfigGui
 LoopController=org.apache.jmeter.control.LoopController
 LoopControlPanel=org.apache.jmeter.control.gui.LoopControlPanel
 MailerModel=org.apache.jmeter.reporters.MailerModel
 MailerResultCollector=org.apache.jmeter.reporters.MailerResultCollector
 MailerVisualizer=org.apache.jmeter.visualizers.MailerVisualizer
 MailReaderSampler=org.apache.jmeter.protocol.mail.sampler.MailReaderSampler
 MailReaderSamplerGui=org.apache.jmeter.protocol.mail.sampler.gui.MailReaderSamplerGui
 MD5HexAssertion=org.apache.jmeter.assertions.MD5HexAssertion
 MD5HexAssertionGUI=org.apache.jmeter.assertions.gui.MD5HexAssertionGUI
 ModuleController=org.apache.jmeter.control.ModuleController
 ModuleControllerGui=org.apache.jmeter.control.gui.ModuleControllerGui
 MongoScriptSampler=org.apache.jmeter.protocol.mongodb.sampler.MongoScriptSampler
 MongoSourceElement=org.apache.jmeter.protocol.mongodb.config.MongoSourceElement
+
+# removed in 3.2, class was deleted in r
 MonitorHealthVisualizer=org.apache.jmeter.visualizers.MonitorHealthVisualizer
+
 NamePanel=org.apache.jmeter.gui.NamePanel
 ObsoleteGui=org.apache.jmeter.config.gui.ObsoleteGui
 OnceOnlyController=org.apache.jmeter.control.OnceOnlyController
 OnceOnlyControllerGui=org.apache.jmeter.control.gui.OnceOnlyControllerGui
 # removed in 3.0, class was deleted in r1722962
 ParamMask=org.apache.jmeter.protocol.http.modifier.ParamMask
 # removed in 3.0, class was deleted in r1722757
 ParamModifier=org.apache.jmeter.protocol.http.modifier.ParamModifier
 # removed in 3.0, class was deleted in r1722757
 ParamModifierGui=org.apache.jmeter.protocol.http.modifier.gui.ParamModifierGui
 PoissonRandomTimer=org.apache.jmeter.timers.PoissonRandomTimer
 PoissonRandomTimerGui=org.apache.jmeter.timers.gui.PoissonRandomTimerGui
 PropertyControlGui=org.apache.jmeter.visualizers.PropertyControlGui
 ProxyControl=org.apache.jmeter.protocol.http.proxy.ProxyControl
 ProxyControlGui=org.apache.jmeter.protocol.http.proxy.gui.ProxyControlGui
 PublisherSampler=org.apache.jmeter.protocol.jms.sampler.PublisherSampler
 RandomControlGui=org.apache.jmeter.control.gui.RandomControlGui
 RandomController=org.apache.jmeter.control.RandomController
 RandomOrderController=org.apache.jmeter.control.RandomOrderController
 RandomOrderControllerGui=org.apache.jmeter.control.gui.RandomOrderControllerGui
 RandomVariableConfig=org.apache.jmeter.config.RandomVariableConfig
 RecordController=org.apache.jmeter.protocol.http.control.gui.RecordController
 RecordingController=org.apache.jmeter.protocol.http.control.RecordingController
 # removed in r1039684, class was deleted in r580452
 ReflectionThreadGroup=org.apache.jmeter.threads.ReflectionThreadGroup
 RegexExtractor=org.apache.jmeter.extractor.RegexExtractor
 RegexExtractorGui=org.apache.jmeter.extractor.gui.RegexExtractorGui
 RegExUserParameters=org.apache.jmeter.protocol.http.modifier.RegExUserParameters
 RegExUserParametersGui=org.apache.jmeter.protocol.http.modifier.gui.RegExUserParametersGui
 RemoteListenerWrapper=org.apache.jmeter.samplers.RemoteListenerWrapper
 RemoteSampleListenerWrapper=org.apache.jmeter.samplers.RemoteSampleListenerWrapper
 RemoteTestListenerWrapper=org.apache.jmeter.samplers.RemoteTestListenerWrapper
 RemoteThreadsListenerWrapper=org.apache.jmeter.threads.RemoteThreadsListenerWrapper
 ResponseAssertion=org.apache.jmeter.assertions.ResponseAssertion
 RespTimeGraphVisualizer=org.apache.jmeter.visualizers.RespTimeGraphVisualizer
 ResultAction=org.apache.jmeter.reporters.ResultAction
 ResultActionGui=org.apache.jmeter.reporters.gui.ResultActionGui
 ResultCollector=org.apache.jmeter.reporters.ResultCollector
 ResultSaver=org.apache.jmeter.reporters.ResultSaver
 ResultSaverGui=org.apache.jmeter.reporters.gui.ResultSaverGui
 RunTime=org.apache.jmeter.control.RunTime
 RunTimeGui=org.apache.jmeter.control.gui.RunTimeGui
 SampleSaveConfiguration=org.apache.jmeter.samplers.SampleSaveConfiguration
 SampleTimeout=org.apache.jmeter.modifiers.SampleTimeout
 SampleTimeoutGui=org.apache.jmeter.modifiers.gui.SampleTimeoutGui
 SimpleConfigGui=org.apache.jmeter.config.gui.SimpleConfigGui
 SimpleDataWriter=org.apache.jmeter.visualizers.SimpleDataWriter
 SizeAssertion=org.apache.jmeter.assertions.SizeAssertion
 SizeAssertionGui=org.apache.jmeter.assertions.gui.SizeAssertionGui
 SMIMEAssertion=org.apache.jmeter.assertions.SMIMEAssertionTestElement
 SMIMEAssertionGui=org.apache.jmeter.assertions.gui.SMIMEAssertionGui
 SmtpSampler=org.apache.jmeter.protocol.smtp.sampler.SmtpSampler
 SmtpSamplerGui=org.apache.jmeter.protocol.smtp.sampler.gui.SmtpSamplerGui
 SoapSampler=org.apache.jmeter.protocol.http.sampler.SoapSampler
 SoapSamplerGui=org.apache.jmeter.protocol.http.control.gui.SoapSamplerGui
 # removed in 3.1, class was deleted in r1763837
 SplineVisualizer=org.apache.jmeter.visualizers.SplineVisualizer
 # Originally deleted in r397955 as class is obsolete; needed for compat.
 SqlConfigGui=org.apache.jmeter.protocol.jdbc.config.gui.SqlConfigGui
 StatGraphVisualizer=org.apache.jmeter.visualizers.StatGraphVisualizer
 StatVisualizer=org.apache.jmeter.visualizers.StatVisualizer
 SubscriberSampler=org.apache.jmeter.protocol.jms.sampler.SubscriberSampler
 SubstitutionElement=org.apache.jmeter.assertions.SubstitutionElement
 Summariser=org.apache.jmeter.reporters.Summariser
 SummariserGui=org.apache.jmeter.reporters.gui.SummariserGui
 SummaryReport=org.apache.jmeter.visualizers.SummaryReport
 SwitchController=org.apache.jmeter.control.SwitchController
 SwitchControllerGui=org.apache.jmeter.control.gui.SwitchControllerGui
 SyncTimer=org.apache.jmeter.timers.SyncTimer
 SystemSampler=org.apache.jmeter.protocol.system.SystemSampler
 SystemSamplerGui=org.apache.jmeter.protocol.system.gui.SystemSamplerGui
 TableVisualizer=org.apache.jmeter.visualizers.TableVisualizer
 TCPConfigGui=org.apache.jmeter.protocol.tcp.config.gui.TCPConfigGui
 TCPSampler=org.apache.jmeter.protocol.tcp.sampler.TCPSampler
 TCPSamplerGui=org.apache.jmeter.protocol.tcp.control.gui.TCPSamplerGui
 TestAction=org.apache.jmeter.sampler.TestAction
 TestActionGui=org.apache.jmeter.sampler.gui.TestActionGui
 TestBeanGUI=org.apache.jmeter.testbeans.gui.TestBeanGUI
 TestFragmentController=org.apache.jmeter.control.TestFragmentController
 TestFragmentControllerGui=org.apache.jmeter.control.gui.TestFragmentControllerGui
 TestPlan=org.apache.jmeter.testelement.TestPlan
 TestPlanGui=org.apache.jmeter.control.gui.TestPlanGui
 ThreadGroup=org.apache.jmeter.threads.ThreadGroup
 ThreadGroupGui=org.apache.jmeter.threads.gui.ThreadGroupGui
 PostThreadGroup=org.apache.jmeter.threads.PostThreadGroup
 PostThreadGroupGui=org.apache.jmeter.threads.gui.PostThreadGroupGui
 SetupThreadGroup=org.apache.jmeter.threads.SetupThreadGroup
 SetupThreadGroupGui=org.apache.jmeter.threads.gui.SetupThreadGroupGui
 ThroughputController=org.apache.jmeter.control.ThroughputController
 ThroughputControllerGui=org.apache.jmeter.control.gui.ThroughputControllerGui
 TransactionController=org.apache.jmeter.control.TransactionController
 TransactionControllerGui=org.apache.jmeter.control.gui.TransactionControllerGui
 TransactionSampler=org.apache.jmeter.control.TransactionSampler
 UniformRandomTimer=org.apache.jmeter.timers.UniformRandomTimer
 UniformRandomTimerGui=org.apache.jmeter.timers.gui.UniformRandomTimerGui
 URLRewritingModifier=org.apache.jmeter.protocol.http.modifier.URLRewritingModifier
 URLRewritingModifierGui=org.apache.jmeter.protocol.http.modifier.gui.URLRewritingModifierGui
 UserParameterModifier=org.apache.jmeter.protocol.http.modifier.UserParameterModifier
 UserParameterModifierGui=org.apache.jmeter.protocol.http.modifier.gui.UserParameterModifierGui
 UserParameters=org.apache.jmeter.modifiers.UserParameters
 UserParametersGui=org.apache.jmeter.modifiers.gui.UserParametersGui
 ViewResultsFullVisualizer=org.apache.jmeter.visualizers.ViewResultsFullVisualizer
 # removed in 3.0, class was deleted in r1722757
 WebServiceSampler=org.apache.jmeter.protocol.http.sampler.WebServiceSampler
 # removed in 3.0, class was deleted in r1722757
 WebServiceSamplerGui=org.apache.jmeter.protocol.http.control.gui.WebServiceSamplerGui
 WhileController=org.apache.jmeter.control.WhileController
 WhileControllerGui=org.apache.jmeter.control.gui.WhileControllerGui
 WorkBench=org.apache.jmeter.testelement.WorkBench
 WorkBenchGui=org.apache.jmeter.control.gui.WorkBenchGui
 XMLAssertion=org.apache.jmeter.assertions.XMLAssertion
 XMLAssertionGui=org.apache.jmeter.assertions.gui.XMLAssertionGui
 XMLSchemaAssertion=org.apache.jmeter.assertions.XMLSchemaAssertion
 XMLSchemaAssertionGUI=org.apache.jmeter.assertions.gui.XMLSchemaAssertionGUI
 XPathAssertion=org.apache.jmeter.assertions.XPathAssertion
 XPathAssertionGui=org.apache.jmeter.assertions.gui.XPathAssertionGui
 XPathExtractor=org.apache.jmeter.extractor.XPathExtractor
 XPathExtractorGui=org.apache.jmeter.extractor.gui.XPathExtractorGui
 #
 # Properties - all start with lower case letter and end with Prop
 #
 boolProp=org.apache.jmeter.testelement.property.BooleanProperty
 collectionProp=org.apache.jmeter.testelement.property.CollectionProperty
 doubleProp=org.apache.jmeter.testelement.property.DoubleProperty
 elementProp=org.apache.jmeter.testelement.property.TestElementProperty
 # see above - already defined as FloatProperty
 #floatProp=org.apache.jmeter.testelement.property.FloatProperty
 intProp=org.apache.jmeter.testelement.property.IntegerProperty
 longProp=org.apache.jmeter.testelement.property.LongProperty
 mapProp=org.apache.jmeter.testelement.property.MapProperty
 objProp=org.apache.jmeter.testelement.property.ObjectProperty
 stringProp=org.apache.jmeter.testelement.property.StringProperty
 #
 # Other - must start with a lower case letter (and not end with Prop)
 # (otherwise they could clash with the initial set of aliases)
 #
 hashTree=org.apache.jorphan.collections.ListedHashTree
 jmeterTestPlan=org.apache.jmeter.save.ScriptWrapper
 sample=org.apache.jmeter.samplers.SampleResult
 httpSample=org.apache.jmeter.protocol.http.sampler.HTTPSampleResult
 statSample=org.apache.jmeter.samplers.StatisticalSampleResult
 testResults=org.apache.jmeter.save.TestResultWrapper
 assertionResult=org.apache.jmeter.assertions.AssertionResult
+
+# removed in 3.2, class was deleted in r
 monitorStats=org.apache.jmeter.visualizers.MonitorStats
 sampleEvent=org.apache.jmeter.samplers.SampleEvent
 #
 # Converters to register.  Must start line with '_'
 # If the converter is a collection of subitems, set equal to "collection"
 # If the converter needs to know the class mappings but is not a collection of 
 #      subitems, set it equal to "mapping"
 _org.apache.jmeter.protocol.http.sampler.HTTPSamplerBaseConverter=collection
 _org.apache.jmeter.protocol.http.util.HTTPResultConverter=collection
 _org.apache.jmeter.save.converters.BooleanPropertyConverter=
 _org.apache.jmeter.save.converters.IntegerPropertyConverter=
 _org.apache.jmeter.save.converters.LongPropertyConverter=
 _org.apache.jmeter.save.converters.MultiPropertyConverter=collection
 _org.apache.jmeter.save.converters.SampleEventConverter=
 _org.apache.jmeter.save.converters.SampleResultConverter=collection
 _org.apache.jmeter.save.converters.SampleSaveConfigurationConverter=collection
 _org.apache.jmeter.save.converters.StringPropertyConverter=
 _org.apache.jmeter.save.converters.HashTreeConverter=collection
 _org.apache.jmeter.save.converters.TestElementConverter=collection
 _org.apache.jmeter.save.converters.TestElementPropertyConverter=collection
 _org.apache.jmeter.save.converters.TestResultWrapperConverter=collection
 _org.apache.jmeter.save.ScriptWrapperConverter=mapping
 #
 #	Remember to update the _version entry
 #
diff --git a/bin/upgrade.properties b/bin/upgrade.properties
index 6b1a0dfc0..7ce7baf32 100644
--- a/bin/upgrade.properties
+++ b/bin/upgrade.properties
@@ -1,114 +1,118 @@
 # Class, property and value upgrade equivalences.
 
 ##   Licensed to the Apache Software Foundation (ASF) under one or more
 ##   contributor license agreements.  See the NOTICE file distributed with
 ##   this work for additional information regarding copyright ownership.
 ##   The ASF licenses this file to You under the Apache License, Version 2.0
 ##   (the "License"); you may not use this file except in compliance with
 ##   the License.  You may obtain a copy of the License at
 ## 
 ##       http://www.apache.org/licenses/LICENSE-2.0
 ## 
 ##   Unless required by applicable law or agreed to in writing, software
 ##   distributed under the License is distributed on an "AS IS" BASIS,
 ##   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 ##   See the License for the specific language governing permissions and
 ##   limitations under the License.
 
 #
 # Format is as follows --
 # for renamed test element & GUI classes:
 # 		old.class.Name=new.class.Name
 # 		old.class.Name|guiClassName=new.class.Name
 #		(e.g. for ConfigTestElement)
 #
 # for renamed / deleted properties:
 #		class.Name/Old.propertyName=newPropertyName
 #		if newPropertyName is omitted, then property is deleted
 #
 # for renamed values:
 #		old.class.Name.old.propertyName/oldValue=newValue
 #
 
 org.apache.jmeter.protocol.http.config.gui.UrlConfigGui=org.apache.jmeter.protocol.http.config.gui.HttpDefaultsGui
 org.apache.jmeter.assertions.Assertion=org.apache.jmeter.assertions.ResponseAssertion
 org.apache.jmeter.protocol.http.sampler.HTTPSamplerFull=org.apache.jmeter.protocol.http.sampler.HTTPSampler
 org.apache.jmeter.control.gui.RecordController=org.apache.jmeter.protocol.http.control.gui.RecordController
 
 org.apache.jmeter.timers.gui.ConstantThroughputTimerGui=org.apache.jmeter.testbeans.gui.TestBeanGUI
 org.apache.jmeter.timers.ConstantThroughputTimer/ConstantThroughputTimer.throughput=throughput
 
 org.apache.jmeter.protocol.jdbc.control.gui.JdbcTestSampleGui=org.apache.jmeter.testbeans.gui.TestBeanGUI
 org.apache.jmeter.protocol.jdbc.sampler.JDBCSampler/JDBCSampler.query=query
 #org.apache.jmeter.protocol.jdbc.sampler.JDBCSampler.JDBCSampler.dataSource/NULL=
 
 # Convert DBconfig
 org.apache.jmeter.protocol.jdbc.config.gui.DbConfigGui=org.apache.jmeter.testbeans.gui.TestBeanGUI
 org.apache.jmeter.config.ConfigTestElement|org.apache.jmeter.protocol.jdbc.config.gui.DbConfigGui=org.apache.jmeter.protocol.jdbc.config.DataSourceElement
 org.apache.jmeter.protocol.jdbc.config.DataSourceElement/JDBCSampler.url=dbUrl
 org.apache.jmeter.protocol.jdbc.config.DataSourceElement/JDBCSampler.driver=driver
 org.apache.jmeter.protocol.jdbc.config.DataSourceElement/JDBCSampler.query=query
 org.apache.jmeter.protocol.jdbc.config.DataSourceElement/ConfigTestElement.username=username
 org.apache.jmeter.protocol.jdbc.config.DataSourceElement/ConfigTestElement.password=password
 
 # Convert PoolConfig
 org.apache.jmeter.protocol.jdbc.config.gui.PoolConfigGui=org.apache.jmeter.testbeans.gui.TestBeanGUI
 org.apache.jmeter.config.ConfigTestElement|org.apache.jmeter.protocol.jdbc.config.gui.PoolConfigGui=org.apache.jmeter.protocol.jdbc.config.DataSourceElement
 org.apache.jmeter.protocol.jdbc.config.DataSourceElement/JDBCSampler.connections=
 org.apache.jmeter.protocol.jdbc.config.DataSourceElement/JDBCSampler.connPoolClass=
 org.apache.jmeter.protocol.jdbc.config.DataSourceElement/JDBCSampler.maxuse=poolMax
 
 # SQL Config
 org.apache.jmeter.config.ConfigTestElement/JDBCSampler.query=query
 org.apache.jmeter.protocol.http.control.Header/TestElement.name=Header.name
 
 # Upgrade AccessLogSampler
 org.apache.jmeter.protocol.http.control.gui.AccessLogSamplerGui=org.apache.jmeter.testbeans.gui.TestBeanGUI
 org.apache.jmeter.protocol.http.sampler.AccessLogSampler/AccessLogSampler.log_file=logFile
 org.apache.jmeter.protocol.http.sampler.AccessLogSampler/HTTPSampler.port=portString
 #Is the following used now?
 #org.apache.jmeter.protocol.http.sampler.AccessLogSampler/AccessLogSampler.generator_class_name=
 #Looks to be a new field
 #filterClassName
 org.apache.jmeter.protocol.http.sampler.AccessLogSampler/HTTPSampler.domain=domain
 org.apache.jmeter.protocol.http.sampler.AccessLogSampler/AccessLogSampler.parser_class_name=parserClassName
 org.apache.jmeter.protocol.http.sampler.AccessLogSampler/HTTPSampler.image_parser=imageParsing
 
 # Renamed class
 org.apache.jmeter.protocol.jms.control.gui.JMSConfigGui=org.apache.jmeter.protocol.jms.control.gui.JMSSamplerGui
 
 # These classes have been deleted; there's no defined replacement
 org.apache.jmeter.protocol.jdbc.config.gui.SqlConfigGui=org.apache.jmeter.config.gui.ObsoleteGui
 org.apache.jmeter.protocol.jms.control.gui.JndiDefaultsGui=org.apache.jmeter.config.gui.ObsoleteGui
 # Should probably map to something other than ObsoleteGui...
 org.apache.jmeter.threads.ReflectionThreadGroup=org.apache.jmeter.config.gui.ObsoleteGui
 
 # Convert BSFSamplerGui
 org.apache.jmeter.protocol.java.control.gui.BSFSamplerGui=org.apache.jmeter.testbeans.gui.TestBeanGUI
 org.apache.jmeter.protocol.java.sampler.BSFSampler/BSFSampler.filename=filename
 org.apache.jmeter.protocol.java.sampler.BSFSampler/BSFSampler.language=scriptLanguage
 org.apache.jmeter.protocol.java.sampler.BSFSampler/BSFSampler.parameters=parameters
 org.apache.jmeter.protocol.java.sampler.BSFSampler/BSFSampler.query=script
 
 # Obsolete Http user Parameters modifier test element
 # Note: ConfigTestElement is the test element associated with ObsoleteGui
 org.apache.jmeter.protocol.http.modifier.UserParameterModifier=org.apache.jmeter.config.ConfigTestElement
 org.apache.jmeter.protocol.http.modifier.gui.UserParameterModifierGui=org.apache.jmeter.config.gui.ObsoleteGui
 
 # Obsolete Graph Full Results listener
 org.apache.jmeter.visualizers.GraphAccumVisualizer=org.apache.jmeter.config.gui.ObsoleteGui
 # removed in 3.0, class was deleted in r1722757
 org.apache.jmeter.protocol.http.sampler.WebServiceSampler=org.apache.jmeter.config.ConfigTestElement
 # removed in 3.0, class was deleted in r1722757
 org.apache.jmeter.protocol.http.control.gui.WebServiceSamplerGui=org.apache.jmeter.config.gui.ObsoleteGui
 # removed in 3.0, class was deleted in r1722757
 org.apache.jmeter.protocol.http.modifier.ParamModifier=org.apache.jmeter.config.ConfigTestElement
 # removed in 3.0, class was deleted in r1722962
 org.apache.jmeter.protocol.http.modifier.ParamMask=org.apache.jmeter.config.ConfigTestElement
 # removed in 3.0, class was deleted in r1722757
 org.apache.jmeter.protocol.http.modifier.gui.ParamModifierGui=org.apache.jmeter.config.gui.ObsoleteGui
 
 # removed in 3.1, class was deleted in r
 org.apache.jmeter.visualizers.SplineVisualizer=org.apache.jmeter.config.gui.ObsoleteGui
 # removed in 3.1 class was deleted in r
 org.apache.jmeter.visualizers.DistributionGraphVisualizer=org.apache.jmeter.config.gui.ObsoleteGui
+
+# removed in 3.2 class was deleted in r
+org.apache.jmeter.visualizers.MonitorStats=org.apache.jmeter.config.ConfigTestElement
+org.apache.jmeter.visualizers.MonitorHealthVisualizer=org.apache.jmeter.config.gui.ObsoleteGui
\ No newline at end of file
diff --git a/build.xml b/build.xml
index b36ba5f17..8eb9e453f 100644
--- a/build.xml
+++ b/build.xml
@@ -1,3383 +1,3371 @@
 <?xml version="1.0"?>
 <!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at
 
        http://www.apache.org/licenses/LICENSE-2.0
 
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
 -->
 <project name="JMeter" default="install" basedir="."
     xmlns:rat="antlib:org.apache.rat.anttasks"
     xmlns:jacoco="antlib:org.jacoco.ant"
     xmlns:if="ant:if"
     xmlns="antlib:org.apache.tools.ant" >
   <description>
 
   N.B. To build JMeter from a release you need both the binary and source archives,
   and these must be unpacked into the same directory structure.
 
   To download additional jars needed for building the code and documentation:
 
       ant download_jars
 
 
     To build JMeter from source:
       ant [install]
 
     To rebuild:
       ant clean install
 
     To update documentation
       ant docs-site [-Ddocs.force=true]
       ant docs-printable [-Ddocs.force=true]
     To build API documentation (Javadoc)
       ant docs-api
     To build all the docs
       ant docs-all [-Ddocs.force=true]
 
     To build all and package up the files for distribution
       ant distribution -Djmeter.version=vvvv [-Dsvn.revision=nnnnn]
 
     Add -Ddisable-svnCheck=true to disable svn check, if you build from src archive or offline
     Add -Ddisable-check-versions=true to disable matching current svn revision and JMeterVersion.java,
       if you want build your own custom JMeter package.
 
     To create a nightly build (separate bin/src/lib jars):
       ant nightly [-Dsvn.revision=nnnnn]
 
     To create tar and tgz of the web-site documentation (docs and api)
       ant site [ -Djmeter.version=vvvv ]
 
 
     For more info:
       ant -projecthelp
 
     To diagnose usage of deprecated APIs:
       ant -Ddeprecation=on clean compile
   </description>
 
   <!--
 
   Note
   ====
   As with most other Apache projects, Gump (http://gump.apache.org/) is used to
   perform automated builds and tests on JMeter.
 
   Gump uses its project/jmeter.xml file to determine which target to use.
   The current setting is: <ant target="dist">
 
   Any changes to the dependency list for dist may affect Gump.
 
   Now the dist target depends on "assume-libs-present", so if additional libraries are added to that,
   the Gump project file for JMeter must also be updated.
 
   Jars that are not required by the dist target do not need to be added to the Gump project file.
 
   -->
 
   <!-- Minimal version of Apache Ant requiere by this Ant script -->
   <property name="ant.version.required" value="1.9.1" />
 
   <!-- Are we running under Gump? -->
   <property name="gump.run" value="false"/>
 
   <!-- The version of this file -->
   <property name="version.build" value="$Revision$"/>
 
   <script language="javascript">
     project.setProperty('EPOCHSECONDS', new Date().getTime());
   </script>
 
   <property file="build-local.properties"/> <!-- allow local overrides -->
 
   <!-- Remove .gitignore from the Ant's default excludes -->
   <!-- to allow to have the .gitignore in the source archive -->
   <defaultexcludes remove="**/.gitignore"/>
 
    <!-- Findbugs task and target -->
    <!--
    Findbugs is licensed under the Lesser GNU Public License
    HomePage: http://www.cs.umd.edu/~pugh/java/bugs/
 
    To use the findbugs target, download and install the findbugs binary distribution
    Set the value of findbugs.homedir according to where you installed findbugs, for example:
    ant findbugs -Dfindbugs.homedir=/etc/findbugs -Dfindbugs.level=medium
   [The defaults are /findbugs and medium]
    -->
   <property name="findbugs.homedir" value="/findbugs" />
   <property name="findbugs.level" value="medium" />
   <property name="findbugs.xsldir" value="${findbugs.homedir}/src/xsl" />
   <property name="findbugs.xslname" value="fancy" />
   <property name="findbugs.outName" value="reports/jmeter-fb" />
   <property name="jacoco_params" value="-Djacoco_dummy=not_empty" />
   <property name="skip.batchtest" value="false" />
   <property name="skip.bug52310" value="false" />
   <property name="skip.test_https" value="false" />
 
   <target name="findbugs" description="Run the stand-alone Findbugs detector">
     <echoproperties prefix="findbugs"/>
     <mkdir dir="reports"/>
     <taskdef name="findbugs"
         classpath="${findbugs.homedir}/lib/findbugs-ant.jar"
         classname="edu.umd.cs.findbugs.anttask.FindBugsTask"/>
     <findbugs home="${findbugs.homedir}"
               output="xml:withMessages"
               reportlevel="${findbugs.level}"
               excludeFilter="fb-excludes.xml"
               jvmargs="-Xms512m -Xmx512m"
               outputFile="${findbugs.outName}.xml" >
       <sourcePath path="${src.core}" />
       <sourcePath path="${src.http}" />
       <sourcePath path="${src.ftp}" />
       <sourcePath path="${src.java}" />
       <sourcePath path="${src.junit}" />
       <sourcePath path="${src.jdbc}" />
       <sourcePath path="${src.ldap}" />
       <sourcePath path="${src.mail}" />
       <sourcePath path="${src.components}" />
       <sourcePath path="${src.functions}" />
       <class location="${lib.dir}/jorphan.jar" />
       <class location="${lib.dir}/ApacheJMeter_slf4j_logkit.jar"/>
       <class location="${dest.jar}/ApacheJMeter_components.jar"/>
       <class location="${dest.jar}/ApacheJMeter_components.jar"/>
       <class location="${dest.jar}/ApacheJMeter_core.jar"/>
       <class location="${dest.jar}/ApacheJMeter_ftp.jar"/>
       <class location="${dest.jar}/ApacheJMeter_functions.jar"/>
       <class location="${dest.jar}/ApacheJMeter_http.jar"/>
       <class location="${dest.jar}/ApacheJMeter_java.jar"/>
       <class location="${dest.jar}/ApacheJMeter_jdbc.jar"/>
       <class location="${dest.jar}/ApacheJMeter_jms.jar"/>
       <class location="${dest.jar}/ApacheJMeter_junit.jar"/>
       <class location="${dest.jar}/ApacheJMeter_ldap.jar"/>
       <class location="${dest.jar}/ApacheJMeter_mail.jar"/>
-      <class location="${dest.jar}/ApacheJMeter_monitors.jar"/>
       <class location="${dest.jar}/ApacheJMeter_native.jar"/>
       <class location="${dest.jar}/ApacheJMeter_mongodb.jar"/>
       <class location="${dest.jar}/ApacheJMeter_tcp.jar"/>
       <class location="${dest.jar.jmeter}/ApacheJMeter.jar" />
       <sourcePath path="${src.slf4j_logkit}" />
       <sourcePath path="${src.jorphan}" />
       <sourcePath path="${src.tcp}" />
       <sourcePath path="${src.jms}" />
       <sourcePath path="${src.native}" />
       <sourcePath path="${src.mongodb}" />
 
       <auxClasspath>
         <fileset dir="${lib.dir}">
           <include name="*.jar"/>
         </fileset>
       </auxClasspath>
 
       <auxClasspath>
         <fileset dir="${lib.opt}">
           <include name="*.jar"/>
         </fileset>
       </auxClasspath>
 
       <auxClasspath>
         <fileset dir="${lib.api}">
           <include name="*.jar"/>
         </fileset>
       </auxClasspath>
 
     </findbugs>
     <antcall target="findbugs-style"/>
     <antcall target="findbugs-xsl"/>
   </target>
 
   <!-- Convert findbugs XML output to CSV -->
   <target name="findbugs-style">
     <xslt style="fb-csv.xsl"
        force="true"
        in="${findbugs.outName}.xml"
        out="${findbugs.outName}.csv">
     </xslt>
   </target>
 
   <!-- Convert findbugs XML output to HTML -->
   <target name="findbugs-xsl">
     <xslt style="${findbugs.xsldir}/${findbugs.xslname}.xsl"
        force="true"
        in="${findbugs.outName}.xml"
        out="${findbugs.outName}_${findbugs.xslname}.html">
     </xslt>
   </target>
 
   <!-- Where the Sources live -->
   <property name="src.dir" value="src"/>
   <property name="src.core" value="src/core"/>
   <property name="src.http" value="src/protocol/http"/>
   <property name="src.ftp" value="src/protocol/ftp"/>
   <property name="src.test" value="test/src"/>
   <property name="src.jdbc" value="src/protocol/jdbc"/>
   <property name="src.java" value="src/protocol/java"/>
   <property name="src.junit" value="src/junit"/>
   <property name="src.components" value="src/components"/>
   <property name="src.functions" value="src/functions"/>
   <property name="src.jorphan" value="src/jorphan"/>
   <property name="src.ldap" value="src/protocol/ldap"/>
   <property name="src.tcp" value="src/protocol/tcp"/>
   <property name="src.examples" value="src/examples"/>
   <property name="src.mail" value="src/protocol/mail"/>
   <property name="src.monitor.components" value="src/monitor/components"/>
   <property name="src.monitor.model" value="src/monitor/model"/>
   <property name="src.jms" value="src/protocol/jms"/>
   <property name="src.native" value="src/protocol/native"/>
   <property name="src.mongodb" value="src/protocol/mongodb"/>
   <property name="src.slf4j_logkit" value="src/slf4j-logkit"/>
 
   <!-- Where the documentation sources live -->
   <property name="src.docs" value="xdocs"/>
   <property name="src.css" value="xdocs/css"/>
   <property name="src.images" value="xdocs/images"/>
   <property name="src.demos" value="xdocs/demos"/>
 
   <!-- Javadoc sources -->
   <path id="srcpaths">
     <pathelement location="${src.core}"/>
     <pathelement location="${src.components}"/>
     <pathelement location="${src.functions}"/>
     <pathelement location="${src.http}"/>
     <pathelement location="${src.ftp}"/>
     <pathelement location="${src.jdbc}"/>
     <pathelement location="${src.java}"/>
     <pathelement location="${src.junit}"/>
     <pathelement location="${src.jorphan}"/>
     <pathelement location="${src.ldap}"/>
     <pathelement location="${src.tcp}"/>
     <pathelement location="${src.examples}"/>
     <pathelement location="${src.mail}"/>
     <pathelement location="${src.monitor.components}"/>
     <pathelement location="${src.monitor.model}"/>
     <pathelement location="${src.jms}"/>
     <pathelement location="${src.native}"/>
     <pathelement location="${src.mongodb}"/>
     <pathelement location="${src.slf4j_logkit}"/>
   </path>
 
   <!-- Temporary build directories: where the .class live -->
   <property name="build.dir" value="build"/>
   <property name="build.core" value="build/core"/>
   <property name="build.http" value="build/protocol/http"/>
   <property name="build.ftp" value="build/protocol/ftp"/>
   <property name="build.jdbc" value="build/protocol/jdbc"/>
   <property name="build.java" value="build/protocol/java"/>
   <property name="build.junit" value="build/junit"/>
   <property name="build.components" value="build/components"/>
   <property name="build.functions" value="build/functions"/>
   <property name="build.jorphan" value="build/jorphan"/>
   <property name="build.ldap" value="build/protocol/ldap"/>
   <property name="build.mail" value="build/protocol/mail"/>
   <property name="build.tcp" value="build/protocol/tcp"/>
   <property name="build.examples" value="build/examples"/>
   <property name="build.monitor.components" value="build/monitor/components"/>
   <property name="build.monitor.model" value="build/monitor/model"/>
   <property name="build.jms" value="build/protocol/jms"/>
   <property name="build.native" value="build/protocol/native"/>
   <property name="build.mongodb" value="build/protocol/mongodb"/>
   <property name="build.slf4j_logkit" value="build/slf4j-logkit"/>
   <property name="build.test" value="build/test"/>
   <property name="build.res" value="build/res"/>
   <property name="build.test-res" value="test/resources"/>
 
   <!-- Path prefix to allow Anakia to find stylesheets if running under Eclipse -->
   <!--
   Anakia looks for stylesheets relative to the java launch directory.
   Use the External Tools properties page to define the variable
   as the relative path to the directory where this build file is found.
   For example:
                eclipse.anakia=workspace/jmeter
 
   An alternative is to define it as a command-line argument on the Main page;
   this allows one to use a macro name, so is more portable.
   For example:
                -Declipse.anakia=workspace/${project_name}
   WARNING: you must ensure that you have selected a file or directory in
   the Navigator pane before attempting to run the build, or Eclipse will
   complain that it cannot resolve the variable name, and it can mark the
   launch configuration as having failed.
   -->
   <property name="eclipse.anakia" value="."/>
 
   <!-- Where the build result .jars will be placed -->
   <property name="dest.jar" value="lib/ext"/>
   <property name="dest.jar.jmeter" value="bin"/>
 
   <!-- Where the API documentation lives -->
   <property name="dest.docs.api" value="docs/api"/>
 
   <!-- Where the doc results live -->
   <property name="dest.docs" value="docs"/>
   <property name="dest.printable_docs" value="printable_docs"/>
 
   <!-- Whether to force docs to be rebuilt -->
   <property name="docs.force" value="false"/>
 
   <!-- Default is for Anakia to only rebuild if the target file is older than the source -->
   <condition property="anakia.lastModifiedCheck" value="true" else="false">
     <!-- docs.force uses the opposite sense to the anakia check -->
     <isfalse value="${docs.force}"/>
   </condition>
 
   <!-- Directory where jars needed for creating documentation live -->
   <property name="lib.doc" value="lib/doc"/>
 
   <!-- Directory where these 3rd party libraries live -->
   <property name="lib.dir" value="lib"/>
 
   <!-- Directory where API spec libraries live -->
   <property name="lib.api" value="lib/api"/>
 
   <!-- Directory where Optional 3rd party libraries live -->
   <property name="lib.opt" value="lib/opt"/>
 
   <!-- Directory where Jacoco libraries live -->
   <!-- I'm to lazy to fix this now, so I tag along with rat & checkstyle,
     which already live there. But: none of these should apear on the classpath
     of Jmeter, neither runtime, nor compiletime. These are only required on the 
     Ant classpath, so judging from comments elsewhere, this is the wrong place.
   -->
   <property name="lib.coverage" location="lib/opt"/>
 
   <!-- Other stuff -->
   <property name="extras.dir" value="extras"/>
 
   <!-- Some resources to add to jars -->
   <property name="res.dir" value="res"/>
 
   <!-- Where the distribution packages will be created -->
   <property name="dist.dir" value="dist"/>
 
   <!-- Where the Maven artifacts will be created -->
   <property name="maven.dir" value="${dist.dir}/maven"/>
 
   <!-- Where the Maven template poms are located -->
   <property name="maven.poms" value="res/maven"/>
 
   <!-- Compilation parameters -->
   <property name="optimize" value="on"/>
   <property name="deprecation" value="off"/>
   <property name="target.java.version" value="1.8"/>
   <property name="src.java.version" value="1.8"/>
   <property name="encoding" value="UTF-8"/>
   <!-- Set test encoding to the same default, but allow override -->
   <property name="test.encoding" value="${encoding}"/>
   <!-- Set javadoc encoding to the same default, but allow override -->
   <property name="javadoc.encoding" value="${encoding}"/>
   <property name="includeAntRuntime" value="false"/>
 
   <!-- 3rd party libraries to be included in the binary distribution -->
   <property file="build.properties"/> <!-- defines the library version numbers -->
 
   <property name="resources.meta-inf"      value="${build.res}/META-INF"/>
 
   <patternset id="external.jars.notices">
     <include name="LICENSE"/>
     <include name="NOTICE"/>
     <include name="README.md"/>
   </patternset>
 
   <!-- Jars for binary release -->
   <patternset id="external.jars">
     <include name="${lib.dir}/${accessors-smart.jar}"/>
     <include name="${lib.dir}/${apache-bsf.jar}"/>
     <include name="${lib.dir}/${asm.jar}"/>
     <include name="${lib.dir}/${avalon-framework.jar}"/>
     <include name="${lib.dir}/${beanshell.jar}"/>
     <include name="${lib.dir}/${caffeine.jar}"/>
     <include name="${lib.dir}/${commons-codec.jar}"/>
     <include name="${lib.dir}/${commons-collections.jar}"/>
     <include name="${lib.dir}/${commons-dbcp2.jar}"/>
     <include name="${lib.dir}/${commons-httpclient.jar}"/>
     <include name="${lib.dir}/${commons-io.jar}"/>
     <include name="${lib.dir}/${commons-jexl2.jar}"/>
     <include name="${lib.dir}/${commons-jexl3.jar}"/>
     <include name="${lib.dir}/${commons-lang3.jar}"/>
     <include name="${lib.dir}/${commons-logging.jar}"/>
     <include name="${lib.dir}/${commons-math3.jar}"/>
     <include name="${lib.dir}/${commons-net.jar}"/>
     <include name="${lib.dir}/${commons-pool2.jar}"/>
     <include name="${lib.dir}/${dnsjava.jar}"/>
     <include name="${lib.dir}/${excalibur-logger.jar}"/>
     <include name="${lib.dir}/${freemarker.jar}"/>
     <include name="${lib.dir}/${groovy-all.jar}"/>
     <include name="${lib.dir}/${hamcrest-core.jar}"/>
     <include name="${lib.dir}/${httpclient.jar}"/>
     <include name="${lib.dir}/${httpcore.jar}"/>
     <include name="${lib.dir}/${httpmime.jar}"/>
     <include name="${lib.dir}/${jakarta-oro.jar}"/>
     <include name="${lib.dir}/${javamail.jar}"/>
     <include name="${lib.dir}/${jcharts.jar}"/>
     <include name="${lib.dir}/${jms.jar}"/>
     <include name="${lib.dir}/${rhino.jar}"/>
     <include name="${lib.dir}/${jodd-core.jar}"/>
     <include name="${lib.dir}/${jodd-lagarto.jar}"/>
     <include name="${lib.dir}/${jodd-log.jar}"/>
     <include name="${lib.dir}/${jodd-props.jar}"/>
     <include name="${lib.dir}/${json-path.jar}"/>
     <include name="${lib.dir}/${json-smart.jar}"/>
     <include name="${lib.dir}/${jsoup.jar}"/>
     <include name="${lib.dir}/${junit.jar}"/>
     <include name="${lib.dir}/${logkit.jar}"/>
     <include name="${lib.dir}/${mongo-java-driver.jar}"/>
     <include name="${lib.dir}/${ph-css.jar}"/>
     <include name="${lib.dir}/${ph-commons.jar}"/>
     <include name="${lib.dir}/${rsyntaxtextarea.jar}"/>
     <include name="${lib.dir}/${serializer.jar}"/>
     <include name="${lib.dir}/${slf4j-api.jar}"/>
     <include name="${lib.dir}/${jtidy.jar}"/>
     <include name="${lib.dir}/${tika-core.jar}"/>
     <include name="${lib.dir}/${tika-parsers.jar}"/>
     <include name="${lib.dir}/${xalan.jar}"/>
     <include name="${lib.dir}/${xerces.jar}"/>
     <include name="${lib.dir}/${xml-apis.jar}"/>
     <include name="${lib.dir}/${xmlgraphics-commons.jar}"/>
     <include name="${lib.dir}/${xmlpull.jar}"/>
     <include name="${lib.dir}/${xpp3.jar}"/>
     <include name="${lib.dir}/${xstream.jar}"/>
   </patternset>
 
   <!--
   Optional jars, not included in distribution.
   Any such jars need to be downloaded separately.
   These can be put into ${lib.dir} or ${lib.opt}
   - both of these are included in the build classpath
 
   Any jars put into ${lib.dir} will be included in
   the classpath used by JMeter to load classes.
   Jars in ${lib.opt} are NOT normally included by JMeter.
 
   Placing an optional jar in ${lib.opt} means that it
   will be included in the build classpath, but it will
   not be included in the runtime classpath. This is intended
   for testing JMeter without the optional Jar file(s).
   -->
 
   <!-- Build classpath (includes the optional jar directory) -->
   <path id="classpath">
     <!-- Externally produced jars -->
     <pathelement location="${lib.dir}/${accessors-smart.jar}"/>
     <pathelement location="${lib.dir}/${apache-bsf.jar}"/>
     <pathelement location="${lib.dir}/${asm.jar}"/>
     <pathelement location="${lib.dir}/${avalon-framework.jar}"/>
     <pathelement location="${lib.dir}/${beanshell.jar}"/>
     <pathelement location="${lib.dir}/${caffeine.jar}"/>
     <pathelement location="${lib.dir}/${commons-codec.jar}"/>
     <pathelement location="${lib.dir}/${commons-collections.jar}"/>
     <pathelement location="${lib.dir}/${commons-dbcp2.jar}"/>
     <pathelement location="${lib.dir}/${commons-httpclient.jar}"/>
     <pathelement location="${lib.dir}/${commons-io.jar}"/>
     <pathelement location="${lib.dir}/${commons-jexl2.jar}"/>
     <pathelement location="${lib.dir}/${commons-jexl3.jar}"/>
     <pathelement location="${lib.dir}/${commons-lang3.jar}"/>
     <pathelement location="${lib.dir}/${commons-logging.jar}"/>
     <pathelement location="${lib.dir}/${commons-math3.jar}"/>
     <pathelement location="${lib.dir}/${commons-net.jar}"/>
     <pathelement location="${lib.dir}/${commons-pool2.jar}"/>
     <pathelement location="${lib.dir}/${dnsjava.jar}"/>
     <pathelement location="${lib.dir}/${excalibur-logger.jar}"/>
     <pathelement location="${lib.dir}/${freemarker.jar}"/>
     <pathelement location="${lib.dir}/${groovy-all.jar}"/>
     <pathelement location="${lib.dir}/${hamcrest-core.jar}"/>
     <pathelement location="${lib.dir}/${httpclient.jar}"/>
     <pathelement location="${lib.dir}/${httpcore.jar}"/>
     <pathelement location="${lib.dir}/${httpmime.jar}"/>
     <pathelement location="${lib.dir}/${jakarta-oro.jar}"/>
     <pathelement location="${lib.dir}/${javamail.jar}"/>
     <pathelement location="${lib.dir}/${jcharts.jar}"/>
     <pathelement location="${lib.dir}/${jms.jar}"/>
     <pathelement location="${lib.dir}/${rhino.jar}"/>
     <pathelement location="${lib.dir}/${jodd-core.jar}"/>
     <pathelement location="${lib.dir}/${jodd-lagarto.jar}"/>
     <pathelement location="${lib.dir}/${jodd-log.jar}"/>
     <pathelement location="${lib.dir}/${jodd-props.jar}"/>
     <pathelement location="${lib.dir}/${json-path.jar}"/>
     <pathelement location="${lib.dir}/${json-smart.jar}"/>
     <pathelement location="${lib.dir}/${jsoup.jar}"/>
     <pathelement location="${lib.dir}/${junit.jar}"/>
     <pathelement location="${lib.dir}/${logkit.jar}"/>
     <pathelement location="${lib.dir}/${mongo-java-driver.jar}"/>
     <pathelement location="${lib.dir}/${ph-css.jar}"/>
     <pathelement location="${lib.dir}/${ph-commons.jar}"/>
     <pathelement location="${lib.dir}/${rsyntaxtextarea.jar}"/>
     <pathelement location="${lib.dir}/${serializer.jar}"/>
     <pathelement location="${lib.dir}/${slf4j-api.jar}"/>
     <pathelement location="${lib.dir}/${jtidy.jar}"/>
     <pathelement location="${lib.dir}/${tika-core.jar}"/>
     <pathelement location="${lib.dir}/${tika-parsers.jar}"/>
     <pathelement location="${lib.dir}/${xalan.jar}"/>
     <pathelement location="${lib.dir}/${xerces.jar}"/>
     <pathelement location="${lib.dir}/${xml-apis.jar}"/>
     <pathelement location="${lib.dir}/${xmlgraphics-commons.jar}"/>
     <pathelement location="${lib.dir}/${xmlpull.jar}"/>
     <pathelement location="${lib.dir}/${xpp3.jar}"/>
     <pathelement location="${lib.dir}/${xstream.jar}"/>
     <!-- Generated jars -->
     <fileset dir="${lib.dir}" includes="jorphan.jar"/>
-    <fileset dir="${lib.dir}" includes="ApacheJMeter_slf4j_logkit.jar"/>
+  	<fileset dir="${lib.dir}" includes="ApacheJMeter_slf4j_logkit.jar"/>
     <!-- API-only jars-->
     <fileset dir="${lib.api}" includes="*.jar"/>
     <!-- Optional jars -->
     <fileset dir="${lib.opt}" includes="*.jar"/>
   </path>
 
-
+	
   <path id="slf4j_logkit_classpath">
     <!-- Externally produced jars -->
     <pathelement location="${lib.dir}/${logkit.jar}"/>
     <pathelement location="${lib.dir}/${slf4j-api.jar}"/>
   </path>
-
+	
   <!-- Anakia classpath -->
   <path id="anakia.classpath">
     <pathelement location="${lib.doc}/${velocity.jar}"/>
     <pathelement location="${lib.doc}/${jdom.jar}"/>
     <pathelement location="${lib.dir}/${commons-collections.jar}"/>
     <pathelement location="${lib.doc}/${commons-lang.jar}"/>
     <pathelement location="${lib.dir}/${logkit.jar}"/>
   </path>
 
   <!-- Version info filter set -->
   <tstamp>
     <format property="year" pattern="yyyy" locale="en"/>
   </tstamp>
 
   <filterset id="year.filters">
     <filter token="YEAR" value="${year}"/>
   </filterset>
 
   <target name="init-version">
     <tstamp/>
     <!--
         JMeter version
         This is overridden for formal releases.
     -->
     <property name="jmeter.version" value="3.1-SNAPSHOT"/>
     <!-- Remember to change "docversion" below if necessary -->
     <condition property="implementation.version"
           value="${jmeter.version} r${svn.revision}" else="${jmeter.version}.${DSTAMP}">
       <isset property="svn.revision"/>
     </condition>
     <property name="display.version" value="${implementation.version}"/>
     <echo level="info">jmeter.version = ${jmeter.version}</echo>
     <echo level="info">display.version = ${display.version}</echo>
     <echo level="info">implementation.version = ${implementation.version}</echo>
     <filterset id="version.filters">
       <filter token="VERSION" value="${display.version}"/>
     </filterset>
   </target>
 
   <!-- Get version from SVN status -->
   <target name="init-svnVersion" depends="svnCheck">
     <fail message="Could not get SVN revision" unless="svn.revision"/>
     <property name="jmeter.version" value="r${svn.revision}"/>
     <!-- Copy the value to avoid duplication of revision in Manifests -->
     <property name="implementation.version" value="${jmeter.version}"/>
     <property name="display.version" value="${jmeter.version}"/>
     <echo level="info">svn.revision = ${svn.revision}</echo>
     <echo level="info">jmeter.version = ${jmeter.version}</echo>
     <echo level="info">display.version = ${display.version}</echo>
     <echo level="info">implementation.version = ${implementation.version}</echo>
   </target>
 
   <target name="ant-version" depends="_check_ant-version">
-    <echo level="info">ant.version = ${ant.version}</echo>
+	    <echo level="info">ant.version = ${ant.version}</echo>
   </target>
 
   <target name="_check_ant-version">
     <antversion property="version.running" />
     <fail message="FATAL ERROR:  The running Ant version, ${version.running}, is too old for this task.">
       <condition>
         <not>
           <antversion atleast="${ant.version.required}" />
         </not>
       </condition>
     </fail>
   </target>
-
+	
   <target name="init-docs" depends="report-anakia-missing">
     <echo level="info">eclipse.anakia = ${eclipse.anakia}</echo>
   </target>
 
   <!--
     - Check for anakia task
   -->
   <target name="check-anakia">
     <available classpathref="anakia.classpath" classname="org.apache.velocity.anakia.AnakiaTask" property="AnakiaTask.present"/>
     <!-- Check for Velocity version 1.5 -->
     <available classpathref="anakia.classpath" classname="org.apache.velocity.io.UnicodeInputStream" property="velocity.version.15"/>
     <antcall target="report-old-velocity"></antcall>
   </target>
 
   <target name="report-anakia-missing" depends="check-anakia" unless="AnakiaTask.present">
     <echo>
       AnakiaTask is not present, documentation will not be generated.
     </echo>
   </target>
 
   <target name="report-old-velocity" unless="velocity.version.15" if="AnakiaTask.present">
     <echo>
       Velocity version appears to be older than 1.5: the documentation may be generated with incorrect line endings.
     </echo>
   </target>
 
   <target name="compile-core" depends="compile-jorphan" description="Compile JMeter core classes.">
     <mkdir dir="${build.core}"/>
     <javac srcdir="${src.core}" destdir="${build.core}" optimize="${optimize}" source="${src.java.version}" debug="on" target="${target.java.version}"
            includeAntRuntime="${includeAntRuntime}" deprecation="${deprecation}" encoding="${encoding}">
       <include name="**/*.java"/>
       <classpath>
         <pathelement location="${build.jorphan}"/>
         <path refid="classpath"/>
       </classpath>
     </javac>
   </target>
 
   <target name="compile-components" depends="compile-jorphan,compile-core" description="Compile generic (protocol-independent) components.">
     <mkdir dir="${build.components}"/>
     <javac srcdir="${src.components}" destdir="${build.components}" source="${src.java.version}" optimize="${optimize}" debug="on" target="${target.java.version}"
            includeAntRuntime="${includeAntRuntime}" deprecation="${deprecation}" encoding="${encoding}">
       <include name="**/*.java"/>
       <classpath>
         <pathelement location="${build.jorphan}"/>
         <pathelement location="${build.core}"/>
         <path refid="classpath"/>
       </classpath>
     </javac>
   </target>
 
   <target name="compile-functions" depends="compile-jorphan,compile-core" description="Compile functions.">
     <mkdir dir="${build.functions}"/>
     <javac srcdir="${src.functions}" destdir="${build.functions}" source="${src.java.version}" optimize="${optimize}" debug="on" target="${target.java.version}"
            includeAntRuntime="${includeAntRuntime}" deprecation="${deprecation}" encoding="${encoding}">
       <include name="**/*.java"/>
       <classpath>
         <pathelement location="${build.jorphan}"/>
         <pathelement location="${build.core}"/>
         <path refid="classpath"/>
       </classpath>
     </javac>
   </target>
 
   <target name="compile-http" depends="compile-jorphan,compile-core,compile-components" description="Compile components specific to HTTP sampling.">
     <mkdir dir="${build.http}"/>
     <!-- Directory needs to exist, or jar will fail -->
     <javac srcdir="${src.http}" destdir="${build.http}" source="${src.java.version}" optimize="${optimize}" debug="on" target="${target.java.version}"
            includeAntRuntime="${includeAntRuntime}" deprecation="${deprecation}" encoding="${encoding}">
       <include name="**/*.java"/>
       <classpath>
         <pathelement location="${build.jorphan}"/>
         <pathelement location="${build.core}"/>
         <pathelement location="${build.components}"/>
         <path refid="classpath"/>
       </classpath>
     </javac>
   </target>
 
   <!-- Tests need main classes -->
   <target name="compile-tests" depends="compile" description="Compile test components">
     <mkdir dir="${build.test}"/>
     <javac srcdir="${src.test}" destdir="${build.test}" source="${src.java.version}" optimize="${optimize}" debug="on" target="${target.java.version}"
            includeAntRuntime="${includeAntRuntime}" deprecation="${deprecation}" encoding="${encoding}">
       <classpath>
         <pathelement location="${build.jorphan}"/>
         <pathelement location="${build.core}"/>
         <pathelement location="${build.components}"/>
         <pathelement location="${build.http}"/>
         <pathelement location="${build.ftp}"/>
         <pathelement location="${build.functions}"/>
         <pathelement location="${build.java}"/>
         <pathelement location="${build.jdbc}"/>
         <pathelement location="${build.ldap}"/>
         <pathelement location="${build.mail}"/>
         <pathelement location="${build.monitor.components}"/>
         <pathelement location="${build.monitor.model}"/>
         <pathelement location="${build.tcp}"/>
         <!-- Also include compiled jars to allow running tests without rebuilding source -->
         <fileset dir="${dest.jar}" includes="*.jar"/>
         <path refid="classpath"/>
       </classpath>
     </javac>
   </target>
 
   <target name="compile-ftp" depends="compile-jorphan,compile-core" description="Compile components specific to FTP sampling.">
     <mkdir dir="${build.ftp}"/>
     <javac srcdir="${src.ftp}" destdir="${build.ftp}" source="${src.java.version}" optimize="${optimize}" debug="on" target="${target.java.version}"
            includeAntRuntime="${includeAntRuntime}" deprecation="${deprecation}" encoding="${encoding}">
       <include name="**/*.java"/>
       <classpath>
         <pathelement location="${build.jorphan}"/>
         <pathelement location="${build.core}"/>
         <path refid="classpath"/>
       </classpath>
     </javac>
   </target>
 
   <target name="compile-jdbc" depends="compile-jorphan,compile-core" description="Compile components specific to JDBC sampling.">
     <mkdir dir="${build.jdbc}"/>
     <javac srcdir="${src.jdbc}" destdir="${build.jdbc}" source="${src.java.version}" optimize="${optimize}" debug="on" target="${target.java.version}"
            includeAntRuntime="${includeAntRuntime}" deprecation="${deprecation}" encoding="${encoding}">
       <include name="**/*.java"/>
       <classpath>
         <pathelement location="${build.jorphan}"/>
         <pathelement location="${build.core}"/>
         <path refid="classpath"/>
       </classpath>
     </javac>
   </target>
 
   <target name="compile-ldap" depends="compile-jorphan,compile-core"
     description="Compile components specific to LDAP sampling.">
     <mkdir dir="${build.ldap}"/>
     <javac srcdir="${src.ldap}" destdir="${build.ldap}" source="${src.java.version}" optimize="${optimize}" debug="on" target="${target.java.version}"
            includeAntRuntime="${includeAntRuntime}" deprecation="${deprecation}" encoding="${encoding}">
       <include name="**/*.java"/>
       <classpath>
         <pathelement location="${build.jorphan}"/>
         <pathelement location="${build.core}"/>
         <path refid="classpath"/>
       </classpath>
     </javac>
   </target>
 
   <target name="create-mail-dir">
     <mkdir dir="${build.mail}"/>
   </target>
 
   <target name="compile-mail" depends="compile-jorphan,compile-core,create-mail-dir"
     description="Compile components specific to IMAP and POP3 sampling.">
     <javac srcdir="${src.mail}" destdir="${build.mail}" source="${src.java.version}" optimize="${optimize}" debug="on" target="${target.java.version}"
            includeAntRuntime="${includeAntRuntime}" deprecation="${deprecation}" encoding="${encoding}">
       <include name="**/*.java"/>
       <classpath>
         <pathelement location="${build.jorphan}"/>
         <pathelement location="${build.core}"/>
         <path refid="classpath"/>
       </classpath>
     </javac>
   </target>
 
   <target name="compile-java" depends="compile-jorphan,compile-core" description="Compile components specific to Java sampling.">
     <mkdir dir="${build.java}"/>
     <javac srcdir="${src.java}" destdir="${build.java}" source="${src.java.version}" optimize="${optimize}" debug="on" target="${target.java.version}"
            includeAntRuntime="${includeAntRuntime}" deprecation="${deprecation}" encoding="${encoding}">
       <include name="**/*.java"/>
       <classpath>
         <pathelement location="${build.jorphan}"/>
         <pathelement location="${build.core}"/>
         <path refid="classpath"/>
       </classpath>
     </javac>
   </target>
 
   <target name="compile-junit" depends="compile-jorphan,compile-core" description="Compile components specific to JUnit sampling.">
     <mkdir dir="${build.junit}"/>
     <javac srcdir="${src.junit}" destdir="${build.junit}" source="${src.java.version}" optimize="${optimize}" debug="on" target="${target.java.version}"
            includeAntRuntime="${includeAntRuntime}" deprecation="${deprecation}" encoding="${encoding}">
       <include name="**/*.java"/>
       <classpath>
         <pathelement location="${build.jorphan}"/>
         <pathelement location="${build.core}"/>
         <path refid="classpath"/>
       </classpath>
     </javac>
   </target>
 
   <target name="compile-tcp" depends="compile-jorphan,compile-core" description="Compile components specific to TCP sampling.">
     <mkdir dir="${build.tcp}"/>
     <javac srcdir="${src.tcp}" destdir="${build.tcp}" source="${src.java.version}" optimize="${optimize}" debug="on" target="${target.java.version}"
            includeAntRuntime="${includeAntRuntime}" deprecation="${deprecation}" encoding="${encoding}">
       <include name="**/*.java"/>
       <classpath>
         <pathelement location="${build.jorphan}"/>
         <pathelement location="${build.core}"/>
         <path refid="classpath"/>
       </classpath>
     </javac>
   </target>
 
   <target name="compile-protocols" depends="compile-http,compile-ftp,compile-jdbc,compile-java,compile-ldap,compile-mail,compile-tcp" description="Compile all protocol-specific components."/>
 
   <target name="compile-examples" depends="compile-jorphan,compile-core" description="Compile example components.">
     <mkdir dir="${build.examples}"/>
     <javac srcdir="${src.examples}" destdir="${build.examples}" source="${src.java.version}" optimize="${optimize}" debug="on" target="${target.java.version}"
            includeAntRuntime="${includeAntRuntime}" deprecation="${deprecation}" encoding="${encoding}">
       <include name="**/*.java"/>
       <classpath>
         <pathelement location="${build.jorphan}"/>
         <pathelement location="${build.core}"/>
         <path refid="classpath"/>
       </classpath>
     </javac>
   </target>
 
   <target name="compile-monitor" depends="compile-monitor-model,compile-monitor-components"/>
 
   <target name="compile-monitor-components"
     depends="compile-jorphan,compile-core,compile-components,compile-monitor-model">
     <mkdir dir="${build.monitor.components}"/>
     <javac srcdir="${src.monitor.components}" source="${src.java.version}" destdir="${build.monitor.components}" optimize="${optimize}" debug="on" target="${target.java.version}"
            includeAntRuntime="${includeAntRuntime}" deprecation="${deprecation}" encoding="${encoding}">
       <include name="**/*.java"/>
       <classpath>
         <pathelement location="${build.monitor.model}"/>
         <pathelement location="${build.http}"/>
         <pathelement location="${build.jorphan}"/>
         <pathelement location="${build.core}"/>
         <pathelement location="${build.components}"/>
         <path refid="classpath"/>
       </classpath>
     </javac>
   </target>
 
   <target name="compile-monitor-model" depends="compile-jorphan,compile-core">
     <mkdir dir="${build.monitor.model}"/>
     <javac srcdir="${src.monitor.model}" destdir="${build.monitor.model}" source="${src.java.version}" optimize="${optimize}" debug="on" target="${target.java.version}"
            includeAntRuntime="${includeAntRuntime}" deprecation="${deprecation}" encoding="${encoding}">
       <include name="**/*.java"/>
       <classpath>
         <pathelement location="${build.jorphan}"/>
         <pathelement location="${build.core}"/>
         <path refid="classpath"/>
       </classpath>
     </javac>
   </target>
 
   <target name="compile-jorphan" depends="init-version" description="Compile JOrphan utility classes.">
     <mkdir dir="${build.jorphan}"/>
     <javac srcdir="${src.jorphan}" destdir="${build.jorphan}" source="${src.java.version}" optimize="${optimize}" debug="on" target="${target.java.version}"
            includeAntRuntime="${includeAntRuntime}" deprecation="${deprecation}" encoding="${encoding}">
       <include name="**/*.java"/>
       <classpath>
         <path refid="classpath"/>
       </classpath>
     </javac>
   </target>
-
+	
   <target name="compile-slf4j_logkit" description="Compile JMeter slf4j LogKit bootstrap classes.">
     <mkdir dir="${build.slf4j_logkit}"/>
     <javac srcdir="${src.slf4j_logkit}" destdir="${build.slf4j_logkit}" source="${src.java.version}" optimize="${optimize}" debug="on" target="${target.java.version}"
            includeAntRuntime="${includeAntRuntime}" deprecation="${deprecation}" encoding="${encoding}">
       <include name="**/*.java"/>
       <classpath>
-        <path refid="slf4j_logkit_classpath"/>
-      </classpath>
+	    <path refid="slf4j_logkit_classpath"/>
+	  </classpath>
     </javac>
   </target>
 
   <target name="compile-jms" depends="compile-jorphan,compile-core,compile-components"
         description="Compile components specific to JMS sampling.">
     <mkdir dir="${build.jms}"/>
     <javac srcdir="${src.jms}" destdir="${build.jms}" source="${src.java.version}" optimize="${optimize}" debug="on" target="${target.java.version}"
            includeAntRuntime="${includeAntRuntime}" deprecation="${deprecation}" encoding="${encoding}">
       <include name="**/*.java"/>
       <classpath>
         <pathelement location="${build.jorphan}"/>
         <pathelement location="${build.core}"/>
         <path refid="classpath"/>
       </classpath>
     </javac>
   </target>
 
   <target name="compile-native" depends="compile-jorphan,compile-core,compile-components"
         description="Compile components specific to Native sampling.">
     <mkdir dir="${build.native}"/>
     <javac srcdir="${src.native}" destdir="${build.native}" source="${src.java.version}" optimize="${optimize}" debug="on" target="${target.java.version}"
            includeAntRuntime="${includeAntRuntime}" deprecation="${deprecation}" encoding="${encoding}">
       <include name="**/*.java"/>
       <classpath>
         <pathelement location="${build.jorphan}"/>
         <pathelement location="${build.core}"/>
         <path refid="classpath"/>
       </classpath>
     </javac>
   </target>
 
   <target name="compile-mongodb" depends="compile-jorphan,compile-core,compile-components"
         description="Compile components specific to MongoDB sampling.">
     <mkdir dir="${build.mongodb}"/>
     <javac srcdir="${src.mongodb}" destdir="${build.mongodb}" source="${src.java.version}" optimize="${optimize}" debug="on" target="${target.java.version}"
            includeAntRuntime="${includeAntRuntime}" deprecation="${deprecation}" encoding="${encoding}">
       <include name="**/*.java"/>
       <classpath>
         <pathelement location="${build.jorphan}"/>
         <pathelement location="${build.core}"/>
         <path refid="classpath"/>
       </classpath>
     </javac>
   </target>
 
   <target name="compile"
   depends="_message_3rdParty,compile-slf4j_logkit,compile-core,compile-components,compile-functions,compile-protocols,compile-monitor,compile-junit,compile-jms,compile-native, compile-mongodb"
   description="Compile everything."/>
 
   <target name="run_gui" depends="package" description="Run the JMeter GUI off the jar files">
     <condition property="jacoco_params" value="${jacocoagent}run_gui:java(server) org.apache.jmeter.NewDriver">
       <isset property="jacocoagent"/>
     </condition>
     <java classname="org.apache.jmeter.NewDriver" fork="true">
       <classpath>
         <pathelement location="${dest.jar.jmeter}/ApacheJMeter.jar"/>
       </classpath>
       <jvmarg value="${jacoco_params}"/>
       <sysproperty key="jmeter.home" value="${basedir}"/>
     </java>
   </target>
 
   <target name="package" depends="compile, prepare-resources, package-only"
      description="Compile everything and create the jars"/>
 
   <target name="package-and-check" depends="clean, download_jars, package, checkstyle, rat"
      description="Compile, create jars and apply checkstyle before commiting code"/>
 
   <target name="prepare-resources"
      description="Prepare some resources files, update date">
     <mkdir dir="${build.res}" />
     <mkdir dir="${resources.meta-inf}" />
     <copy todir="${resources.meta-inf}" overwrite="yes" filtering="yes"
         encoding="${encoding}">
       <filterset refid="year.filters"/>
       <filterset refid="version.filters" />
       <fileset dir="${res.dir}/META-INF" >
         <include name="*.license" />
         <include name="*.notice" />
         <include name="jmeter_as_ascii_art.txt" />
       </fileset>
     </copy>
     <fixcrlf encoding="${encoding}" srcdir="${resources.meta-inf}" eol="crlf" includes="*.license *.notice"/>
   </target>
 
 <!--
 N.B. Eclipse (and perhaps other Java IDEs) copies all files to the build directory, unless
 told otherwise. This means that there might be copies of property and image files in the
 build directory. To avoid including the files twice in the jar file, we include only .class
 files in the list of files to be processed from the build tree.
 
 Eclipse has been fixed so that it no longer shows files in the build tree in the Open Resource dialogue,
 so having duplicates in the build tree no longer causes confusion.
 
 Note: if built from Eclipse, the build directory will include resources and images,
 and Eclipse will thus be able to run JMeter from the default path.
 
 If built using Ant, the build tree will not contain any resources, and thus Eclipse will not be able to
 run JMeter unless all the JMeter jars are added.
 
 -->
   <target name="package-only" description="Package already-compiled classes (shortcut for IDE users)">
     <manifest file="${build.dir}/MANIFEST_BIN.MF">
       <attribute name="Built-By" value="${user.name}"/>
       <attribute name="Extension-Name" value=" JMeter"/>
       <attribute name="Specification-Title" value=" Apache JMeter"/>
       <attribute name="Specification-Vendor" value=" Apache Software Foundation"/>
       <attribute name="Implementation-Vendor" value=" Apache Software Foundation"/>
       <attribute name="Implementation-Vendor-Id" value=" org.apache"/>
       <attribute name="Implementation-Version" value="${implementation.version}"/>
       <attribute name="X-Compile-Source-JDK" value="${src.java.version}"/>
       <attribute name="X-Compile-Target-JDK" value="${target.java.version}"/>
     </manifest>
 
     <manifest file="${build.dir}/MANIFEST_SRC.MF">
       <attribute name="Built-By" value="${user.name}"/>
       <attribute name="Extension-Name" value=" JMeter"/>
       <attribute name="Specification-Title" value=" Apache JMeter"/>
       <attribute name="Specification-Vendor" value=" Apache Software Foundation"/>
       <attribute name="Implementation-Vendor" value=" Apache Software Foundation"/>
       <attribute name="Implementation-Vendor-Id" value=" org.apache"/>
       <attribute name="Implementation-Version" value="${implementation.version}"/>
    </manifest>
 
     <mkdir dir="${dest.jar}"/>
 
     <!-- perhaps ought to include a basic jmeter.properties file in one of the jars,
     given that JMeterUtils looks for it if it cannot find the external one
     - otherwise, change utils to ignore it -->
 
     <!-- JMeter launch jar -->
     <jar jarfile="${dest.jar.jmeter}/ApacheJMeter.jar"
         includes="**/NewDriver*,**/DynamicClassLoader*,**/ShutdownClient.class"
         basedir="${build.core}"
         manifest="${build.dir}/MANIFEST_BIN.MF">
       <manifest>
         <attribute name="Main-Class" value="org.apache.jmeter.NewDriver"/>
       </manifest>
       <zipfileset file="${resources.meta-inf}/default.notice"
           fullpath="META-INF/NOTICE" />
       <zipfileset file="${resources.meta-inf}/default.license"
           fullpath="META-INF/LICENSE" />
       <zipfileset file="${resources.meta-inf}/jmeter_as_ascii_art.txt"
           fullpath="org/apache/jmeter/jmeter_as_ascii_art.txt" />
     </jar>
 
     <!-- core -->
     <jar jarfile="${dest.jar}/ApacheJMeter_core.jar"
         manifest="${build.dir}/MANIFEST_BIN.MF">
       <zipfileset file="${resources.meta-inf}/default.notice"
         fullpath="META-INF/NOTICE" />
       <zipfileset file="${resources.meta-inf}/default.license"
         fullpath="META-INF/LICENSE" />
       <!-- add license details for images -->
       <zipfileset file="licenses/src/openiconlibrary.txt"
         fullpath="META-INF/LICENSE-openiconlibrary.txt" />
       <!-- Only include class files from build tree - see above -->
       <fileset dir="${build.core}" includes="**/*.class"
         excludes="**/BeanShellClient*.class,**/NewDriver*,**/DynamicClassLoader*"/>
       <fileset dir="${src.core}" includes="org/apache/jmeter/images/**"
         excludes="**/*.properties,org/apache/jmeter/images/toolbar/icons-custom/**"/>
       <fileset dir="${src.core}" includes="**/*.properties">
         <exclude name="*eucJP*"/>
       </fileset>
       <!-- This file is used by the jmeter -h option -->
       <fileset dir="${src.core}" includes="org/apache/jmeter/help.txt"/>
     </jar>
 
     <!-- components -->
     <jar jarfile="${dest.jar}/ApacheJMeter_components.jar" manifest="${build.dir}/MANIFEST_BIN.MF">
       <zipfileset file="${resources.meta-inf}/default.notice"
         fullpath="META-INF/NOTICE" />
       <zipfileset file="${resources.meta-inf}/default.license"
         fullpath="META-INF/LICENSE" />
       <fileset dir="${build.components}" includes="**/*.class" />
       <fileset dir="${src.components}" includes="**/*.properties" />
     </jar>
 
     <!-- functions -->
     <jar jarfile="${dest.jar}/ApacheJMeter_functions.jar" manifest="${build.dir}/MANIFEST_BIN.MF">
       <zipfileset file="${resources.meta-inf}/default.notice"
         fullpath="META-INF/NOTICE" />
       <zipfileset file="${resources.meta-inf}/default.license"
         fullpath="META-INF/LICENSE" />
       <fileset dir="${build.functions}" includes="**/*.class" />
       <fileset dir="${src.functions}" includes="**/*.properties" />
     </jar>
 
     <!-- http -->
     <jar jarfile="${dest.jar}/ApacheJMeter_http.jar" manifest="${build.dir}/MANIFEST_BIN.MF">
       <zipfileset file="${resources.meta-inf}/default.notice"
         fullpath="META-INF/NOTICE" />
       <zipfileset file="${resources.meta-inf}/default.license"
         fullpath="META-INF/LICENSE" />
       <fileset dir="${build.http}" includes="**/*.class"/>
       <fileset dir="${src.http}" includes="**/*.properties" />
     </jar>
 
     <!-- ftp -->
     <jar jarfile="${dest.jar}/ApacheJMeter_ftp.jar" manifest="${build.dir}/MANIFEST_BIN.MF">
       <zipfileset file="${resources.meta-inf}/default.notice"
         fullpath="META-INF/NOTICE" />
       <zipfileset file="${resources.meta-inf}/default.license"
         fullpath="META-INF/LICENSE" />
       <fileset dir="${build.ftp}" includes="**/*.class" />
       <fileset dir="${src.ftp}" includes="**/*.properties" />
     </jar>
 
     <!-- jdbc -->
     <jar jarfile="${dest.jar}/ApacheJMeter_jdbc.jar" manifest="${build.dir}/MANIFEST_BIN.MF">
       <zipfileset file="${resources.meta-inf}/default.notice"
         fullpath="META-INF/NOTICE" />
       <zipfileset file="${resources.meta-inf}/default.license"
         fullpath="META-INF/LICENSE" />
       <fileset dir="${build.jdbc}" includes="**/*.class" />
       <fileset dir="${src.jdbc}" includes="**/*.properties" />
     </jar>
 
     <!-- java -->
     <jar jarfile="${dest.jar}/ApacheJMeter_java.jar" manifest="${build.dir}/MANIFEST_BIN.MF">
       <zipfileset file="${resources.meta-inf}/default.notice"
         fullpath="META-INF/NOTICE" />
       <zipfileset file="${resources.meta-inf}/default.license"
         fullpath="META-INF/LICENSE" />
       <fileset dir="${build.java}" includes="**/*.class" />
       <fileset dir="${src.java}" includes="**/*.properties" />
     </jar>
 
     <!-- BeanShell Client -->
     <jar jarfile="${lib.dir}/bshclient.jar" manifest="${build.dir}/MANIFEST_BIN.MF">
       <manifest>
          <attribute name="Main-Class" value="org.apache.jmeter.util.BeanShellClient"/>
       </manifest>
       <zipfileset file="${resources.meta-inf}/default.notice"
         fullpath="META-INF/NOTICE" />
       <zipfileset file="${resources.meta-inf}/default.license"
         fullpath="META-INF/LICENSE" />
       <fileset dir="${build.core}" includes="**/BeanShellClient*.class" />
     </jar>
 
     <!-- junit -->
     <jar jarfile="${dest.jar}/ApacheJMeter_junit.jar" manifest="${build.dir}/MANIFEST_BIN.MF">
       <zipfileset file="${resources.meta-inf}/default.notice"
         fullpath="META-INF/NOTICE" />
       <zipfileset file="${resources.meta-inf}/default.license"
         fullpath="META-INF/LICENSE" />
       <fileset dir="${build.junit}" includes="org/**/*.class" />
       <fileset dir="${src.junit}" includes="**/*.properties" />
     </jar>
 
     <!-- Build junit/test.jar sample -->
     <jar jarfile="${lib.dir}/junit/test.jar" manifest="${build.dir}/MANIFEST_BIN.MF">
       <zipfileset file="${resources.meta-inf}/default.notice"
         fullpath="META-INF/NOTICE" />
       <zipfileset file="${resources.meta-inf}/default.license"
         fullpath="META-INF/LICENSE" />
       <fileset dir="${build.junit}" excludes="org/**/*" />
       <fileset dir="${src.junit}"   excludes="org/**/*" />
     </jar>
 
     <!-- ldap -->
     <jar jarfile="${dest.jar}/ApacheJMeter_ldap.jar" manifest="${build.dir}/MANIFEST_BIN.MF">
       <zipfileset file="${resources.meta-inf}/default.notice"
         fullpath="META-INF/NOTICE" />
       <zipfileset file="${resources.meta-inf}/default.license"
         fullpath="META-INF/LICENSE" />
       <fileset dir="${build.ldap}" includes="**/*.class" />
       <fileset dir="${src.ldap}" includes="**/*.properties" />
     </jar>
 
     <!-- mail -->
     <jar jarfile="${dest.jar}/ApacheJMeter_mail.jar" manifest="${build.dir}/MANIFEST_BIN.MF">
       <zipfileset file="${resources.meta-inf}/default.notice"
         fullpath="META-INF/NOTICE" />
       <zipfileset file="${resources.meta-inf}/default.license"
         fullpath="META-INF/LICENSE" />
       <fileset dir="${build.mail}" includes="**/*.class"  />
       <fileset dir="${src.mail}" includes="**/*.properties" />
       <fileset dir="${src.mail}" includes="**/*.providers" />
     </jar>
 
     <!-- tcp -->
     <jar jarfile="${dest.jar}/ApacheJMeter_tcp.jar" manifest="${build.dir}/MANIFEST_BIN.MF">
       <zipfileset file="${resources.meta-inf}/default.notice"
         fullpath="META-INF/NOTICE" />
       <zipfileset file="${resources.meta-inf}/default.license"
         fullpath="META-INF/LICENSE" />
       <fileset dir="${build.tcp}" includes="**/*.class" />
       <fileset dir="${src.tcp}" includes="**/*.properties" />
     </jar>
 
-    <!-- monitor -->
-    <jar jarfile="${dest.jar}/ApacheJMeter_monitors.jar" manifest="${build.dir}/MANIFEST_BIN.MF">
-      <zipfileset file="${resources.meta-inf}/default.notice"
-        fullpath="META-INF/NOTICE" />
-      <zipfileset file="${resources.meta-inf}/default.license"
-        fullpath="META-INF/LICENSE" />
-      <fileset dir="${build.monitor.model}" includes="**/*.class" />
-      <fileset dir="${build.monitor.components}" includes="**/*.class" />
-    </jar>
-
     <!-- jms -->
     <!-- Ensure that build dir exists, even if JMS has not been built -->
     <mkdir dir="${build.jms}"/>
     <jar jarfile="${dest.jar}/ApacheJMeter_jms.jar" manifest="${build.dir}/MANIFEST_BIN.MF">
       <zipfileset file="${resources.meta-inf}/default.notice"
         fullpath="META-INF/NOTICE" />
       <zipfileset file="${resources.meta-inf}/default.license"
         fullpath="META-INF/LICENSE" />
       <fileset dir="${build.jms}" includes="**/*.class" />
       <fileset dir="${src.jms}" includes="**/*.properties" />
     </jar>
 
     <!-- native -->
     <!-- Ensure that build dir exists, even if Native has not been built -->
     <mkdir dir="${build.native}"/>
     <jar jarfile="${dest.jar}/ApacheJMeter_native.jar" manifest="${build.dir}/MANIFEST_BIN.MF">
       <zipfileset file="${resources.meta-inf}/default.notice"
         fullpath="META-INF/NOTICE" />
       <zipfileset file="${resources.meta-inf}/default.license"
         fullpath="META-INF/LICENSE" />
       <fileset dir="${build.native}" includes="**/*.class" />
       <fileset dir="${src.native}" includes="**/*.properties" />
     </jar>
 
     <!-- mongodb -->
     <!-- Ensure that build dir exists, even if MongoDB has not been built -->
     <mkdir dir="${build.mongodb}"/>
     <jar jarfile="${dest.jar}/ApacheJMeter_mongodb.jar" manifest="${build.dir}/MANIFEST_BIN.MF">
       <zipfileset file="${resources.meta-inf}/default.notice"
         fullpath="META-INF/NOTICE" />
       <zipfileset file="${resources.meta-inf}/default.license"
         fullpath="META-INF/LICENSE" />
       <fileset dir="${build.mongodb}" includes="**/*.class" />
       <fileset dir="${src.mongodb}" includes="**/*.properties" />
     </jar>
 
     <!-- slf4j-logkit -->
     <!-- Ensure that build dir exists, even if slf4j-logkit has not been built -->
     <mkdir dir="${build.slf4j_logkit}"/>
     <jar jarfile="${lib.dir}/ApacheJMeter_slf4j_logkit.jar" manifest="${build.dir}/MANIFEST_BIN.MF">
       <zipfileset file="${resources.meta-inf}/default.notice"
         fullpath="META-INF/NOTICE" />
       <zipfileset file="${resources.meta-inf}/default.license"
         fullpath="META-INF/LICENSE" />
       <fileset dir="${build.slf4j_logkit}" includes="**/*.class" />
       <fileset dir="${src.slf4j_logkit}" includes="**/*.properties" />
     </jar>
 
     <jar jarfile="${lib.dir}/jorphan.jar" manifest="${build.dir}/MANIFEST_BIN.MF">
       <zipfileset file="${resources.meta-inf}/default.notice"
           fullpath="META-INF/NOTICE" />
       <zipfileset file="${resources.meta-inf}/default.license"
           fullpath="META-INF/LICENSE" />
       <fileset dir="${build.jorphan}" includes="**/*.class"/>
       <fileset dir="${src.jorphan}" includes="**/*.properties"/>
     </jar>
   </target>
 
   <!-- Check the Ant version -->
   <available property="Ant-1.8.0-or-later" classname="org.apache.tools.ant.taskdefs.Local"/>
   <fail message="This build requires Ant 1.8.0 or later" unless="Ant-1.8.0-or-later"/>
 
   <!-- Check that the 3rd party libraries are present -->
   <target name="_check_3rdparty">
     <condition property="3rdparty.present">
       <and>
         <!-- No need to check all jars; just check a few -->
         <available classpathref="classpath" classname="org.apache.bsf.BSFEngine"/>
         <available classpathref="classpath" classname="com.thoughtworks.xstream.XStream"/>
       </and>
     </condition>
   </target>
 
   <target name="_message_3rdParty" depends="_check_3rdparty" unless="3rdparty.present">
     <echo>Cannot find all the required 3rd party libraries.</echo>
     <echo>If building from a release, you can get most of them from the binary archive.</echo>
     <echo>Use "ant download_jars" to download any missing jars.</echo>
     <fail message="Cannot find required classes"/>
   </target>
 
   <target name="setup-eclipse-project" description="Setup eclipse project to contribute to JMeter">
     <echo>Creating eclipse project</echo>
     <copy overwrite="false" file="eclipse.project" tofile=".project" />
     <copy overwrite="false" file="eclipse.classpath" tofile=".classpath"/>
     <input message="Next step will download dependencies for JMeter, do you agree with the download ?" addproperty="do.download" validargs="y,n"/>
     <condition property="do.abort">
       <equals arg1="n" arg2="${do.download}"/>
     </condition>
     <fail message="You didn't agree to download dependencies, ensure you call Ant target 'download_jars when importing project" if="do.abort"/>
     <echo>Downloading dependencies</echo>
     <antcall target="download_jars" />
     <echo>Project has been successfully created, you can now import it in Eclipse using Right click > Import > Existing projects into Workspace</echo>
   </target>
 
   <target name="install" depends="package,docs-printable" description="Install JMeter. (Compiles code and creates jars)">
     <fixcrlf encoding="${encoding}" srcdir="." eol="lf" includes="bin/*.sh bin/jmeter bin/jmeter-server bin/mirror-server"/>
     <chmod perm="+x" dir="." includes="${dist.executables}"/>
   </target>
 
   <target name="install-examples" depends="compile-examples" description="Build and installs the example components.">
     <jar jarfile="${dest.jar}/ApacheJMeter_examples.jar" manifest="${build.dir}/MANIFEST_BIN.MF">
       <zipfileset file="${resources.meta-inf}/default.notice"
         fullpath="META-INF/NOTICE" />
       <zipfileset file="${resources.meta-inf}/default.license"
         fullpath="META-INF/LICENSE" />
       <fileset dir="${build.examples}" includes="**/*.class" />
       <fileset dir="${src.examples}" includes="**/*.properties" />
     </jar>
   </target>
 
   <!-- lists of files needed for a binary distribution (excluding library files) -->
   <!-- Source files also needed at runtime -->
   <patternset id="dist.common.native">
     <include name="${dest.jar.jmeter}/BeanShell*.bshrc"/>
     <include name="${dest.jar.jmeter}/jaas.conf"/>
     <include name="${dest.jar.jmeter}/krb5.conf"/>
     <include name="${dest.jar.jmeter}/hc.parameters"/>
     <include name="${dest.jar.jmeter}/jmeter.properties"/>
     <include name="${dest.jar.jmeter}/log4j.conf"/>
     <include name="${dest.jar.jmeter}/logkit.xml"/>
     <include name="${dest.jar.jmeter}/reportgenerator.properties"/>
     <include name="${dest.jar.jmeter}/upgrade.properties"/>
     <include name="${dest.jar.jmeter}/saveservice.properties"/>
     <include name="${dest.jar.jmeter}/users.dtd"/>
     <include name="${dest.jar.jmeter}/users.xml"/>
     <!-- Sample override properties files -->
     <include name="${dest.jar.jmeter}/httpclient.parameters"/>
     <include name="${dest.jar.jmeter}/system.properties"/>
     <include name="${dest.jar.jmeter}/user.properties"/>
     <!-- Exclude any files that might be present from testing the release -->
     <exclude name="${dest.jar.jmeter}/*.log"/>
     <include name="${dest.jar.jmeter}/examples/**"/>
     <include name="${dest.jar.jmeter}/templates/*.dtd"/>
     <!-- report-templates files which need to have native eol -->
     <include name="${dest.jar.jmeter}/report-template/README.TXT"/>
     <include name="${dest.jar.jmeter}/report-template/**/*.fmkr"/>
     <include name="${dest.jar.jmeter}/report-template/content/**/*.css"/>
     <include name="${dest.jar.jmeter}/report-template/content/**/*.js"/>
     <!-- JMX files are in the non-native section -->
     <exclude name="${dest.jar.jmeter}/examples/*.jmx"/>
     <include name="${extras.dir}/**"/>
     <!-- Binary file types -->
     <exclude name="${extras.dir}/*.jar"/>
     <exclude name="${extras.dir}/*.jpg"/>
     <exclude name="${extras.dir}/*.png"/>
     <!-- File types that need to retain their EOL setting -->
     <exclude name="${extras.dir}/*.jmx"/>
     <exclude name="${extras.dir}/*.cmd"/>
     <exclude name="${extras.dir}/*.sh"/>
   </patternset>
 
   <patternset id="dist.binaries.native">
     <include name="LICENSE"/>
     <include name="licenses/**"/>
     <include name="NOTICE"/>
     <include name="README.md"/>
     <patternset refid="dist.common.native"/>
     <!-- Help documentation -->
     <include name="${dest.printable_docs}/**"/>
     <!-- Binary file types -->
     <exclude name="${dest.printable_docs}/**/*.pdf"/>
     <exclude name="${dest.printable_docs}/**/*.jmx"/>
     <!-- We also need the shared CSS for the printable docs -->
     <include name="${dest.docs}/css/**"/>
   </patternset>
 
   <!-- Source files also needed at runtime -->
   <patternset id="dist.common.non.native">
     <include name="${dest.jar.jmeter}/heapdump.*"/>
     <include name="${dest.jar.jmeter}/jmeter*"/>
     <exclude name="${dest.jar.jmeter}/jmeter.properties"/>
     <exclude name="${dest.jar.jmeter}/reportgenerator.properties"/>
     <include name="${dest.jar.jmeter}/mirror-server*"/>
     <include name="${dest.jar.jmeter}/shutdown.*"/>
     <include name="${dest.jar.jmeter}/stoptest.*"/>
     <!-- Fake SSL cert for JMeter proxy recorder in https -->
     <include name="${dest.jar.jmeter}/proxyserver.jks"/>
     <!-- Exclude any files that might be present from testing the release -->
     <exclude name="${dest.jar.jmeter}/*.log"/>
     <!-- report-template files non native -->
     <include name="${dest.jar.jmeter}/report-template/content/pages/*.png"/>
     <include name="${dest.jar.jmeter}/report-template/sbadmin2*/**"/>
     <include name="${dest.jar.jmeter}/templates/*.jmx"/>
     <include name="${dest.jar.jmeter}/templates/*.xml"/>
     <include name="${dest.jar.jmeter}/examples/*.jmx"/>
     <include name="${extras.dir}/*.jar"/>
     <include name="${extras.dir}/*.jpg"/>
     <include name="${extras.dir}/*.png"/>
     <!-- File types that need to retain their EOL setting -->
     <include name="${extras.dir}/*.jmx"/>
     <include name="${extras.dir}/*.cmd"/>
     <include name="${extras.dir}/*.sh"/>
   </patternset>
 
   <patternset id="dist.binaries.non.native">
     <patternset refid="dist.common.non.native"/>
     <include name="${dest.jar}/"/>
     <include name="${lib.dir}/bshclient.jar"/>
     <include name="${lib.dir}/jorphan.jar"/>
-    <include name="${lib.dir}/ApacheJMeter_slf4j_logkit.jar"/>
+  	<include name="${lib.dir}/ApacheJMeter_slf4j_logkit.jar"/>
     <include name="${lib.dir}/junit/test.jar"/>
     <include name="${dest.jar.jmeter}/ApacheJMeter.jar"/>
     <!-- Help documentation, binary files -->
     <include name="${dest.printable_docs}/**/*.pdf"/>
     <include name="${dest.printable_docs}/**/*.jmx"/>
     <!-- We also need the shared images for the printable docs -->
     <include name="${dest.docs}/images/**"/>
   </patternset>
 
   <!--
       List of Unix executable files in the binary distribution
       These need special handling to create the correct file mode
   -->
   <property name="dist.executables"
     value="${dest.jar.jmeter}/jmeter ${dest.jar.jmeter}/jmeter-server ${dest.jar.jmeter}/mirror-server ${dest.jar.jmeter}/*.sh ${extras.dir}/*.sh"/>
 
   <!-- List of files in source distribution that are eol=native -->
   <!--
   N.B. dist.sources[.non].native sets exclude source files present in dist.binaries[.non].native
   so that the nightly build src archive does not duplicate stuff in the binary archive
   (This may change, as the overlap does not waste much space)
   -->
   <patternset id="dist.sources.native">
     <include name="LICENSE"/>
     <!-- Include all the licenses; they are needed to build the distribution -->
     <include name="licenses/**"/>
     <include name="NOTICE"/>
     <include name="README.md"/>
     <include name="${src.dir}/**"/>
     <exclude name="**/messages.metaprops"/>
     <!-- Exclude binary types -->
     <exclude name="**/*.gif"/>
     <exclude name="**/*.jpg"/>
     <exclude name="**/*.png"/>
     <include name="${src.docs}/**"/>
     <!-- Include some resources -->
     <include name="${res.dir}/**"/>
     <!-- Exclude binary types (and JMX/JTL, which are not OS-dependent) -->
     <exclude name="${src.docs}/images/**"/>
     <exclude name="${src.docs}/**/*.jmx"/>
     <exclude name="${src.docs}/**/*.odt"/>
     <exclude name="${src.docs}/**/*.pdf"/>
     <exclude name="${src.docs}/**/*.sxi"/>
     <exclude name="${src.docs}/**/*.sxw"/>
     <include name="${src.test}/**"/>
     <include name="build.xml"/>
     <include name="build.properties"/>
     <include name="${dest.jar.jmeter}/testfiles/**"/>
     <exclude name="${dest.jar.jmeter}/testfiles/*.jmx"/>
     <exclude name="${dest.jar.jmeter}/testfiles/*.jtl"/>
     <!-- These are generated with EOL=LF -->
     <exclude name="${dest.jar.jmeter}/testfiles/*.xml"/>
     <!-- Ignore unit test output -->
     <exclude name="${dest.jar.jmeter}/testfiles/*.out"/>
     <exclude name="${dest.jar.jmeter}/testfiles/Sample_*.png"/>
     <include name="eclipse.classpath"/>
     <include name="eclipse.project"/>
     <include name="eclipse.md"/>
     <include name=".gitignore"/>
     <include name=".travis.yml"/>
     <include name="checkstyle.xml"/>
     <include name="checkstyle-suppressions.xml"/>
     <include name="rat-excludes.txt"/>
     <include name="${build.test-res}/**"/>
     <include name="${lib.dir}/aareadme.txt"/>
     <include name="${lib.dir}/**/readme.txt"/>
     <include name="fb-*.x*"/>
     <!-- Make sure that the lib/opt directory is included in the archives -->
     <include name="${lib.opt}/README.txt"/>
   </patternset>
 
   <!-- Non-native items -->
   <patternset id="dist.sources.non.native">
     <include name="${src.dir}/**/*.gif"/>
     <include name="${src.dir}/**/*.jpg"/>
     <include name="${src.dir}/**/*.png"/>
     <include name="${src.docs}/images/**"/>
     <include name="${src.docs}/**/*.jmx"/>
     <include name="${src.docs}/**/*.odt"/>
     <include name="${src.docs}/**/*.pdf"/>
     <include name="${src.docs}/**/*.sxi"/>
     <include name="${src.docs}/**/*.sxw"/>
     <include name="${dest.jar.jmeter}/testfiles/*.jmx"/>
     <include name="${dest.jar.jmeter}/testfiles/*.jtl"/>
     <!-- These are generated with EOL=LF -->
     <include name="${dest.jar.jmeter}/testfiles/*.xml"/>
     <!-- Include the image files used in parsing / embedded download tests -->
     <include name="${dest.jar.jmeter}/testfiles/**/*.gif"/>
     <include name="${dest.jar.jmeter}/testfiles/**/*.jpg"/>
     <include name="${dest.jar.jmeter}/testfiles/**/*.png"/>
   </patternset>
 
     <!-- Convert eol:native source files to appropriate format if required -->
     <target name="_filter" unless="native.${eoltype}">
       <property name="workdir" value="${dist.dir}/${eoltype}"/>
       <echo level="info">Converting work files to eol=${eoltype} in ${workdir}</echo>
       <mkdir dir="${workdir}"/>
       <copy includeemptydirs="false" todir="${workdir}" encoding="${encoding}">
         <fileset dir=".">
           <patternset refid="${fileset}"/>
         </fileset>
         <filterchain>
           <fixcrlf encoding="${encoding}" fixlast="false" eol="${eoltype}" srcdir="${workdir}"/>
         </filterchain>
       </copy>
     </target>
 
     <!-- Files to be included in full source download -->
     <patternset id="dist_src_files_native">
       <patternset refid="dist.sources.native"/>
       <patternset refid="dist.common.native"/>
     </patternset>
 
     <patternset id="dist_src_files_non_native">
       <patternset refid="dist.sources.non.native"/>
       <patternset refid="dist.common.non.native"/>
     </patternset>
 
     <!-- Files to be included in full binary download -->
     <patternset id="dist_bin_files_native">
       <patternset refid="dist.binaries.native"/>
       <patternset refid="external.jars.notices"/>
       <!-- We don't need the site docs, but we do want Javadoc (e.g. for BeanShell) -->
       <include name="${dest.docs.api}/**"/>
       <exclude name="${dest.docs.api}/resources/**"/>
     </patternset>
 
     <patternset id="dist_bin_files_non_native">
       <patternset refid="dist.binaries.non.native"/>
       <patternset refid="external.jars"/>
       <include name="${dest.docs.api}/resources/**"/>
     </patternset>
 
     <!-- NOTE: the site documents are not included in either archive -->
 
     <!-- Invoke with -Djmeter.version=m.n -Duser.name=xyz@apache.org [-Dsvn.revision=nnnnn] [-Ddisplay.version=xxxx]
     Creates clean build and all documentation
     Creates runtime and source distributions and site documentation
     -->
     <target name="distribution"
         depends="ant-version,svnCheck,check-versions,clean,install,docs-printable,docs-api,test,_distribution"
         description="Build JMeter for end-user distribution"/>
 
     <target name="check-versions" unless="disable-check-versions">
       <fail message="jmeter.version must be defined" unless="jmeter.version"/>
       <fail message="svn.revision must be defined" unless="svn.revision"/>
       <local         name="version.match"/>
       <condition property="version.match">
         <resourcecontains resource="${src.core}/org/apache/jmeter/util/JMeterVersion.java"
                 substring='VERSION = "${jmeter.version}";'/>
       </condition>
       <fail message="jmeter.version (${jmeter.version}) must be same as JMeterVersion.VERSION" unless="version.match"/>
     </target>
 
     <!--
     <target
         name="nightly"
         depends="init-svnVersion,package,docs-printable,pack-nightly"
         description="Build JMeter for nightly dir (package docs-printable pack-nightly)"/>
     -->
    <target
         name="nightly-setup"
         description="Disables some checks"
         depends="clean,clean-docs,clean-apidocs,clean-dist">
       <property name="disable-check-versions" value="true" />
       <property name="docs.force" value="true" />
     </target>
     <target
         name="nightly"
         depends="ant-version,nightly-setup,init-svnVersion,install,docs-printable,docs-api,test,_distribution"
         description="Build JMeter for nightly distribution (include docs)"/>
 
     <target name="_eolcheck">
       <!-- Determine if the native format is CRLF or LF (or neither) -->
       <condition property="native.lf">
         <os family="unix"/>
       </condition>
       <condition property="native.crlf">
         <os family="dos"/>
       </condition>
       <!-- Define native.dir.x as either the source or updated directory as appropriate -->
       <condition property="native.dir.lf" value="." else="${dist.dir}/lf">
         <isset property="native.lf"/>
       </condition>
       <condition property="native.dir.crlf" value="." else="${dist.dir}/crlf">
         <isset property="native.crlf"/>
       </condition>
       <echoproperties prefix="native"></echoproperties>
     </target>
 
     <!-- Internal target -->
     <target name="_distribution" depends="check-versions,_eolcheck,check_jars">
     <property name="dist.name" value="apache-jmeter-${jmeter.version}"/>
     <property name="pack.name" value="${dist.name}"/>
     <echo level="info">Creating JMeter distribution ${dist.name} ${svn.revision}</echo>
     <mkdir dir="${dist.dir}"/>
 
     <!-- Delete work directories just in case -->
     <delete dir="${dist.dir}/crlf" quiet="true"/>
     <delete dir="${dist.dir}/lf" quiet="true"/>
 
     <!-- Runtime archives -->
     <antcall target="_filter">
       <param name="eoltype" value="lf"/>
       <param name="fileset" value="dist_bin_files_native"/>
     </antcall>
 
     <tar destfile="${dist.dir}/${pack.name}.tar" longfile="gnu">
       <tarfileset dir="." prefix="${dist.name}" excludes="${dist.executables}" defaultexcludes="yes">
         <patternset refid="dist_bin_files_non_native"/>
       </tarfileset>
       <tarfileset mode="755" includes="${dist.executables}" dir="." prefix="${dist.name}" defaultexcludes="yes"/>
       <tarfileset dir="${native.dir.lf}" prefix="${dist.name}">
         <patternset refid="dist_bin_files_native"/>
       </tarfileset>
     </tar>
     <!-- Delete work directory (may not exist) -->
     <delete dir="${dist.dir}/lf" quiet="true"/>
 
     <gzip destfile="${dist.dir}/${pack.name}.tgz" src="${dist.dir}/${pack.name}.tar" />
     <!-- no longer needed -->
     <delete file="${dist.dir}/${pack.name}.tar"/>
     <antcall target="_hash">
       <param name="path" value="${dist.dir}/${dist.name}.tgz"/>
     </antcall>
 
     <antcall target="_filter">
       <param name="eoltype" value="crlf"/>
       <param name="fileset" value="dist_bin_files_native"/>
     </antcall>
     <zip  destfile="${dist.dir}/${pack.name}.zip">
       <zipfileset excludes="${dist.executables}" dir="." prefix="${dist.name}" defaultexcludes="yes">
         <patternset refid="dist_bin_files_non_native"/>
       </zipfileset>
       <zipfileset filemode="755" dir="." includes="${dist.executables}" prefix="${dist.name}" defaultexcludes="yes"/>
       <zipfileset dir="${native.dir.crlf}" prefix="${dist.name}">
         <patternset refid="dist_bin_files_native"/>
       </zipfileset>
     </zip>
     <antcall target="_hash">
       <param name="path" value="${dist.dir}/${dist.name}.zip"/>
     </antcall>
     <!-- Delete work directory (may not exist) -->
     <delete dir="${dist.dir}/crlf" quiet="true"/>
 
     <!-- Source archives -->
     <antcall target="_filter">
       <param name="eoltype" value="lf"/>
       <param name="fileset" value="dist_src_files_native"/>
     </antcall>
     <tar destfile="${dist.dir}/${pack.name}_src.tar" longfile="gnu">
       <tarfileset dir="${native.dir.lf}" prefix="${dist.name}">
         <patternset refid="dist_src_files_native"/>
       </tarfileset>
       <tarfileset excludes="${dist.executables}" dir="." prefix="${dist.name}" defaultexcludes="yes">
         <patternset refid="dist_src_files_non_native"/>
       </tarfileset>
       <tarfileset mode="755" includes="${dist.executables}" dir="." prefix="${dist.name}" defaultexcludes="yes"/>
     </tar>
     <!-- Delete work directory (may not exist) -->
     <delete dir="${dist.dir}/lf" quiet="true"/>
 
     <gzip destfile="${dist.dir}/${pack.name}_src.tgz" src="${dist.dir}/${pack.name}_src.tar" />
     <!-- no longer needed -->
     <delete file="${dist.dir}/${pack.name}_src.tar"/>
     <antcall target="_hash">
       <param name="path" value="${dist.dir}/${dist.name}_src.tgz"/>
     </antcall>
 
     <antcall target="_filter">
       <param name="eoltype" value="crlf"/>
       <param name="fileset" value="dist_src_files_native"/>
     </antcall>
 
     <zip  destfile="${dist.dir}/${pack.name}_src.zip">
       <zipfileset dir="${native.dir.crlf}" prefix="${dist.name}">
         <patternset refid="dist_src_files_native"/>
       </zipfileset>
       <zipfileset excludes="${dist.executables}" dir="." prefix="${dist.name}" defaultexcludes="yes">
         <patternset refid="dist_src_files_non_native"/>
       </zipfileset>
       <zipfileset filemode="755" includes="${dist.executables}" dir="." prefix="${dist.name}" defaultexcludes="yes"/>
     </zip>
     <antcall target="_hash">
       <param name="path" value="${dist.dir}/${dist.name}_src.zip"/>
     </antcall>
     <!-- Delete work directory (may not exist) -->
     <delete dir="${dist.dir}/crlf" quiet="true"/>
   </target>
 
   <!-- Set up files for distribution to Maven via Nexus -->
   <target name="_dist_maven" depends="init-version">
     <!-- Ensure there aren't any stale files left -->
     <delete dir="${maven.dir}" includes="*.pom" quiet="true"/>
     <echo>Updating POM files to version ${jmeter.version}</echo>
     <copy todir="${maven.dir}">
       <fileset dir="${maven.poms}" includes="*.pom"/>
       <filterset>
         <filter token="MAVEN.DEPLOY.VERSION" value="${jmeter.version}"/>
       </filterset>
     </copy>
     <delete dir="${maven.dir}" includes="*.jar" quiet="true"/>
     <echo>Copying jar files ready for signing</echo>
     <copy todir="${maven.dir}">
       <fileset dir="${dest.jar}" includes="ApacheJMeter*.jar"/>
       <fileset dir="${dest.jar.jmeter}" includes="ApacheJMeter.jar"/>
       <fileset dir="${lib.dir}" includes="jorphan.jar"/>
       <fileset dir="${lib.dir}" includes="ApacheJMeter_slf4j_logkit.jar"/>
     </copy>
     <copy tofile="${maven.dir}/ApacheJMeter_junit-test.jar" file="${lib.dir}/junit/test.jar"/>
     <!--
         Create the Maven jar needed to hold configuration data
         Cannot be added to any of the other jars as that would cause problems for stand-alone JMeter usage.
     -->
     <jar jarfile="${maven.dir}/ApacheJMeter_config.jar" manifest="${build.dir}/MANIFEST_SRC.MF">
       <zipfileset file="${resources.meta-inf}/default.notice"
           fullpath="META-INF/NOTICE" />
       <zipfileset file="${resources.meta-inf}/default.license"
           fullpath="META-INF/LICENSE" />
       <zipfileset dir="${dest.jar.jmeter}" prefix="bin" includes="*.bshrc"/>
       <zipfileset dir="${dest.jar.jmeter}" prefix="bin" includes="*.parameters"/>
       <zipfileset dir="${dest.jar.jmeter}" prefix="bin" includes="*.properties"/>
       <zipfileset dir="${dest.jar.jmeter}" prefix="bin" includes="jaas.conf"/>
       <zipfileset dir="${dest.jar.jmeter}" prefix="bin" includes="krb5.conf"/>
       <zipfileset dir="${dest.jar.jmeter}" prefix="bin" includes="log4j.conf"/>
       <zipfileset dir="${dest.jar.jmeter}" prefix="bin" includes="logkit.xml"/>
       <zipfileset dir="${dest.jar.jmeter}" prefix="bin" includes="proxyserver.jks"/>
       <zipfileset dir="${dest.jar.jmeter}" prefix="bin" includes="users.dtd"/>
       <zipfileset dir="${dest.jar.jmeter}" prefix="bin" includes="users.xml"/>
     </jar>
   </target>
 
   <!--
       Beanshell script to create the svnmucc scripts for upload, delete and publish.
 
       The generated script assumes svnmucc is invoked with a root URL of
       https://dist.apache.org/repos/dist/
       This means that the jmeter files are at:
       dev/jmeter/[binaries|source]
       and
       release/jmeter/[binaries|source]
   -->
   <scriptdef name="svnmuccScript" language="beanshell">
     <classpath>
       <pathelement location="${lib.dir}/${beanshell.jar}"/>
       <!-- Needed to work with Java 1.5 -->
       <pathelement location="${lib.dir}/${apache-bsf.jar}"/>
       <pathelement location="${lib.dir}/${commons-logging.jar}"/>
     </classpath>
     <!-- type of script to create: upload, publish or delete -->
     <attribute name="type"/>
     <!-- Name of file to create -->
     <attribute name="tempfile"/>
     <![CDATA[
     void upload(source) {
       self.log("Will upload " + source + " to " + RCdir);
       outstream.println("put");
       outstream.println(source); // source
       outstream.print("dev/jmeter/");
       outstream.print(RCdir);
       outstream.println(source); // dest
       outstream.println();
     }
     void publish(source, targetDir) {
       self.log("Will publish " + source + " to " + targetDir);
       outstream.println("mv");
       outstream.print("dev/jmeter/");
       outstream.print(RCdir);
       outstream.println(source); // source
       outstream.print("release/jmeter/");
       outstream.print(targetDir);
       outstream.println(source); // source
       outstream.println();
     }
     void delete(source, targetDir) {
       self.log("Will delete " + source + " from " + targetDir);
       outstream.println("rm");
       outstream.print("release/jmeter/");
       outstream.print(targetDir);
       outstream.println(source); // source
       outstream.println();
     }
     void processFiles(basename, targetDir) {
       // combine all the extensions in one list
       extensions = new String[]{".zip", ".zip.asc", ".zip.md5", ".zip.sha", ".tgz", ".tgz.asc", ".tgz.md5", ".tgz.sha"};
       for (i = 0; i < extensions.length; ++i) {
         extension = extensions[i];
         srcFile = basename + extension;
 
         if ("upload".equals(type)) {
             upload(srcFile);
         } else if ("publish".equals(type)) {
             publish(srcFile, targetDir);
         } else if ("delete".equals(type)) {
             delete(srcFile, targetDir);
         }
       }
     }
       type = attributes.get("type");
       if (type.equals("delete")) {
         version = project.getProperty("jmeter.old.version");
         RC="";
       } else {
         version = project.getProperty("jmeter.version");
         RC = project.getProperty("RC");
         RCdir = "v"+version+"_"+RC+"/";
       }
       tempfile = attributes.get("tempfile");
       self.log("Writing " + type + " script for version " + version + " " + RC + " into " + tempfile);
       distname = project.getProperty("dist.name");
       outstream = new PrintStream(new File(tempfile));
       if ("upload".equals(type)) { // make the initial directory
         outstream.println("mkdir");
         outstream.print("dev/jmeter/");
         outstream.println(RCdir);
         outstream.println();
       }
       processFiles(distname, "binaries/");
       processFiles(distname+"_src", "source/");
       // TODO could remove RCdir, but safer to do that manually after checking it is empty
       outstream.close();
     ]]>
   </scriptdef>
 
   <!--
       Run svnnmucc against the svnpubsub distribution area
   -->
   <target name="_svnmucc">
     <property name="repoType" value="test"/>
     <condition property="repo"
             value="https://dist.apache.org/repos/dist/"
             else="https://svn.apache.org/repos/asf/jmeter/test/" >
       <equals arg1="live" arg2="${repoType}"/>
     </condition>
     <echo level="info">Processing ${tempfile} using svnmucc on repo: ${repoType}</echo>
     <echo level="info">${repo}</echo>
     <echo level="info">${message}</echo>
     <!-- Only one of the following will execute -->
     <antcall target="_svnmucc_storedPass"/>
     <antcall target="_svnmucc_providedPass"/>
   </target>
 
   <!-- run svnmucc using stored credentials -->
   <target name="_svnmucc_storedPass" unless="asf.ldap.password">
     <echo level="info" message="Using stored credentials"/>
     <exec executable="svnmucc" dir="${dist.dir}" logerror="true" failonerror="true" failifexecutionfails="true">
       <arg value="--non-interactive"/> <!-- -n alias was removed in svnmucc 1.8.0 -->
       <!-- not strictly necessary, but does no harm and agrees with password version -->
       <arg value="--no-auth-cache"/>
       <arg value="--message"/> <!-- -m -->
       <arg value="${message}"/>
       <arg value="--root-url"/> <!-- -U -->
       <arg value="${repo}"/>
       <arg value="--extra-args"/> <!-- -X -->
       <arg value="${tempfile}"/>
     </exec>
   </target>
 
   <!-- run svnmucc using password provided as a property -->
   <target name="_svnmucc_providedPass" if="asf.ldap.password">
     <!-- provide default user name -->
     <property name="asf.ldap.username" value="${user.name}"/>
     <echo level="info" message="Using provided credentials for user ${asf.ldap.username}"/>
     <exec executable="svnmucc" dir="${dist.dir}" logerror="true" failonerror="true" failifexecutionfails="true">
       <arg value="--non-interactive"/>
       <!-- we don't want to cache the provided credentials -->
       <arg value="--no-auth-cache"/>
       <arg value="--message"/> <!-- -m -->
       <arg value="${message}"/>
       <arg value="--root-url"/> <!-- -U -->
       <arg value="${repo}"/>
       <arg value="--extra-args"/> <!-- -X -->
       <arg value="${tempfile}"/>
       <!-- Add credentials provided on command-line -->
       <arg value="--username"/> <!-- -u -->
       <arg value="${asf.ldap.username}"/>
       <arg value="--password"/> <!-- -p -->
       <arg value="${asf.ldap.password}"/>
     </exec>
   </target>
 
   <!--
         Targets for deploying release candidates via svnpubsub.
 
         By default, deploys the artifacts under the JMeter test repo:
         https://svn.apache.org/repos/asf/jmeter/test/
 
         The live repo is:
         https://dist.apache.org/repos/dist/
 
         The JMeter files are to be found under:
 
         dev/jmeter/[source|binaries]
         and
         release/jmeter/[source|binaries]
 
         Files that are expected to be present:
         apache-jmeter-<version>.[tgz|zip] + [.asc|.md5|.sha]
         apache-jmeter-<version>_src.[tgz|zip] + [.asc|.md5|.sha]
 
         Must have SVN installed, in particular the svnmucc command-line client.
 
 
         Pre-requisites:
         The distribution files must have been built and signed and placed in the dist/ directory.
         If any required files are missing, then upload will fail.
 
         Usage:
           ant RC_upload  [-DrepoType=test|live] [-Djmeter.version=2.9] -DRC=RCn [-Dasf.ldap.password=secret [-Dasf.ldap.usermame=user] ]
           ant RC_publish [-DrepoType=test|live] [-Djmeter.version=2.9] -DRC=RCn [-Dasf.ldap.password=secret [-Dasf.ldap.usermame=user] ]
           ant release_delete  [-DrepoType=test|live]  -Djmeter.old.version=2.8      [-Dasf.ldap.password=secret [-Dasf.ldap.usermame=user] ]
           (the old version must be specified and different from the current version!)
 
         If the ldap password is not provided, svnmucc is invoked without the username (-u) and password (-p) parameters.
         In this case, svnmucc will use whatever stored credentials are present for the svn host.
 
         If not using stored credentials, provide at least the ldap password.
         The ldap username defaults to the login name (i.e. the Java user.name property) but can also be provided.
 
         Note: svnmucc can only move or copy files where the target does not exist.
         This is perfect for deploying an RC or new release as these use unique names.
         However, any existing files such as HEADER.html will need to be handled separately.
   -->
 
 
   <target name="RC_upload"
     description="Upload release candidate to svnpubsub area. Params: [-DrepoType=test|live] [-Djmeter.version=m.n] -DRC=RCn [-Dasf.ldap.password=secret -Dasf.ldap.usermame=user]"
     depends="init-version">
     <fail message="RC property must be defined!" unless="RC"/>
     <echo>Version = ${jmeter.version} ${RC}</echo>
     <property name="dist.name" value="apache-jmeter-${jmeter.version}"/>
     <property name="tempfile" value="svnmucc_upload.tmp"/>
     <svnmuccScript type="upload" tempfile="${dist.dir}/${tempfile}"/>
     <antcall target="_svnmucc">
       <param name="message" value="Uploading release candidate ${dist.name} to dev area"/>
     </antcall>
   </target>
 
   <target name="RC_publish"
     description="Publish release candidate from svnpubsub area. Params: [-DrepoType=test|live] [-Djmeter.version=m.n] -DRC=RCn [-Dasf.ldap.password=secret -Dasf.ldap.usermame=user]"
     depends="init-version">
     <fail message="RC property must be defined!" unless="RC"/>
     <echo>Version = ${jmeter.version} ${RC}</echo>
     <property name="dist.name" value="apache-jmeter-${jmeter.version}"/>
     <property name="tempfile" value="svnmucc_publish.tmp"/>
     <svnmuccScript type="publish" tempfile="${dist.dir}/${tempfile}"/>
     <antcall target="_svnmucc">
       <param name="message" value="Publishing ${dist.name} ${RC}"/>
     </antcall>
   </target>
 
   <target name="release_delete"
     description="Delete old release candidate from svnpubsub area. : [-DrepoType=test|live] -Djmeter.old.version=m.n [-Dasf.ldap.user=name -Dasf.ldap.password=secret]"
     depends="init-version">
     <fail message="jmeter.old.version property must be defined!" unless="jmeter.old.version"/>
     <condition property="same">
       <equals arg1="${jmeter.old.version}" arg2="${jmeter.version}"/>
     </condition>
     <echo>Old Version = ${jmeter.old.version}</echo>
     <fail message="jmeter.old.version must be different from current jmeter.version!" if="same"/>
     <property name="dist.name" value="apache-jmeter-${jmeter.old.version}"/>
     <property name="tempfile" value="svnmucc_delete.tmp"/>
     <svnmuccScript type="delete" tempfile="${dist.dir}/${tempfile}"/>
     <antcall target="_svnmucc">
       <param name="message" value="Deleting old release ${dist.name}"/>
     </antcall>
   </target>
 
   <!--
         Upload jars/poms/sigs to local (/target), snapshots or releases repos; default is local.
         By default, deploys the artifacts to target/deploy under JMeter home.
 
         Must have Maven 2.2.1 or Maven 3.0.x installed.
         The environment variable M2_HOME must point to a suitable Maven installation (2.2.1+)
 
         For remote deployment, username/password will need to be set up in the appropriate
         "server" entries in the Maven settings.xml file, i.e. under:
 
         apache.snapshots.https
         apache.releases.https
 
         Pre-requisite:
         The jars and poms need to be made available. If this has not already been done as part of
         creating the distribution (e.g. a snapshot release is desired), then invoke the following:
 
               ant _dist_maven -Djmeter.version=2.9-SNAPSHOT
 
         For non-SNAPSHOT releases, the jars and poms need to be signed (TODO document how!!)
 
         Usage:
               ant maven_upload [-DrepoType=snapshots|releases]
   -->
   <target name="maven_upload" description="Upload Maven jars and poms (and sigs if present) to Nexus.">
 
     <property environment="env"/>
     <!-- According to http://maven.apache.org/download.html#Installation M2_HOME applies to Maven 2.2.1 and 3.0.x -->
     <condition property="maven.present">
       <or>
         <isset property="env.M2_HOME"/>
         <isset property="maven.home"/> <!-- Allow override on command-line -->
       </or>
     </condition>
     <fail unless="${maven.present}"
       message="The environment variable M2_HOME (or property maven.home) must point to a Maven installation"/>
 
     <property name="maven.home" value="${env.M2_HOME}"/>
 
     <!-- file repo url -->
     <property name="file.url" value="file:${basedir}/target/deploy"/>
 
     <!-- Apache Nexus snapshots repo url -->
     <property name="snapshots.url" value="https://repository.apache.org/content/repositories/snapshots"/>
     <!-- Apache Nexus snapshots repo name for servers section of settings.xml -->
     <property name="snapshots.repositoryId" value="apache.snapshots.https"/>
 
     <!-- Apache Nexus releases repo url -->
     <property name="releases.url" value="https://repository.apache.org/service/local/staging/deploy/maven2"/>
     <!-- Apache Nexus releases repo name for servers section of settings.xml -->
     <property name="releases.repositoryId" value="apache.releases.https"/>
 
     <property name="repoType" value="file"/>
 
     <!-- Hack to skip defining files/types/classifiers -->
     <condition property="XX" value="" else="XX">
       <and>
         <available file="${maven.dir}/jorphan.jar.asc"/>
         <available file="${maven.dir}/jorphan.pom.asc"/>
         <!-- Don't upload sigs to snapshots repo (might mislead users) -->
         <not>
           <equals arg1="snapshots" arg2="@repoType"/>
         </not>
       </and>
     </condition>
 
     <!-- Derived from:
          http://maven.apache.org/ant-tasks/examples/mvn.html#Using_the_Java_Task
     -->
     <macrodef name="deployfile">
       <attribute name="stem" />
       <attribute name="packaging" default="jar"/>
       <attribute name="type" default="${repoType}"/>
       <attribute name="url" default="${@{type}.url}"/>
       <attribute name="repositoryId" default="${@{type}.repositoryId}"/>
       <sequential>
         <java classname="org.codehaus.classworlds.Launcher"
               fork="true"
               dir="${basedir}"
               failonerror="true">
           <jvmarg value="-Xmx512m"/>
           <classpath>
             <fileset dir="${maven.home}/boot">
               <include name="*.jar" />
             </fileset>
             <fileset dir="${maven.home}/lib">
               <include name="*.jar" />
             </fileset>
           </classpath>
           <sysproperty key="classworlds.conf" value="${maven.home}/bin/m2.conf" />
           <sysproperty key="maven.home" value="${maven.home}" />
           <!-- The following property must be defined for Maven 3.3.[123] at least -->
           <sysproperty key="maven.multiModuleProjectDirectory" value="${maven.home}"/>
           <arg value="--batch-mode"/>
           <!--arg value="-X"/-->
           <arg value="-DgeneratePom=false"/>
           <arg value="-Durl=@{url}"/>
           <arg value="-DrepositoryId=@{repositoryId}"/>
           <arg value="-DpomFile=${maven.dir}/@{stem}.pom"/>
           <arg value="-Dpackaging=@{packaging}"/>
           <arg value="-Dfile=${maven.dir}/@{stem}.${packaging}"/>
           <!--
                The XX property is a hack to avoid creating conditional code.
                It will be empty if the sigs exist; if not it will be XX which will be ignored by Maven
           -->
           <!-- If packaging == pom, this will just upload the pom twice. Simpler than trying to conditionalise. -->
           <arg value="-D${XX}files=${maven.dir}/@{stem}.${packaging}.asc,${maven.dir}/@{stem}.pom.asc"/>
           <arg value="-D${XX}types=${packaging}.asc,pom.asc"/>
           <arg value="-D${XX}classifiers=,"/>
           <!-- Need at least version 2.7 of the plugin to upload additional files-->
           <arg value="org.apache.maven.plugins:maven-deploy-plugin:2.8.2:deploy-file"/>
         </java>
       </sequential>
     </macrodef>
 
 
     <deployfile stem="ApacheJMeter_parent" packaging="pom"/>
     <deployfile stem="jorphan"/>
     <deployfile stem="ApacheJMeter_slf4j_logkit"/>
     <deployfile stem="ApacheJMeter"/>
     <deployfile stem="ApacheJMeter_components"/>
     <deployfile stem="ApacheJMeter_config"/>
     <deployfile stem="ApacheJMeter_core"/>
     <deployfile stem="ApacheJMeter_ftp"/>
     <deployfile stem="ApacheJMeter_functions"/>
     <deployfile stem="ApacheJMeter_http"/>
     <deployfile stem="ApacheJMeter_java"/>
     <deployfile stem="ApacheJMeter_jdbc"/>
     <deployfile stem="ApacheJMeter_jms"/>
     <deployfile stem="ApacheJMeter_junit"/>
     <deployfile stem="ApacheJMeter_junit-test"/>
     <deployfile stem="ApacheJMeter_ldap"/>
     <deployfile stem="ApacheJMeter_mail"/>
     <deployfile stem="ApacheJMeter_mongodb"/>
-    <deployfile stem="ApacheJMeter_monitors"/>
     <deployfile stem="ApacheJMeter_native"/>
     <deployfile stem="ApacheJMeter_tcp"/>
   </target>
 
   <!--
   Gump targets.
   There are separate build and test projects for the jmeter module.
   -->
   <!-- Used by project jmeter-cvs -->
   <target name="gump-build"
       depends="_gump_properties,clean,install"
       description="Build JMeter">
     <property name="dist.name" value="apache-jmeter-${jmeter.version}"/>
     <available file="${velocity.jar}" property="velocity.present"/>
     <!-- No need to create the archives for Gump
     <antcall target="_pack-binaries"/>
     <antcall target="_pack-libraries"/>
     <antcall target="_pack-source"/>
     -->
   </target>
 
   <!-- Used by project jmeter-test -->
   <target name="gump-test"
       depends="_gump_properties,compile-tests,_test"
       description="Test JMeter in Gump">
     <!-- Show the log file
     <concat>
       <filelist dir="bin" files="jmeter-test.log" />
     </concat>
      -->
   </target>
 
   <target name="_gump_properties">
     <echo level="info">
  Gump properties for this run
   jmeter.version      = ${jmeter.version}
   gump.run            = ${gump.run}
   date.projectfile    = ${date.projectfile}
   version.projectfile = ${version.projectfile}
  Build file:
   version.build       = ${version.build}
  Java properties:
   target.java.version = ${target.java.version}
   src.java.version    = ${src.java.version}
   optimize            = ${optimize}
   deprecation         = ${deprecation}
   encoding            = ${encoding}
     </echo>
     <echoproperties prefix="ant"/>
     <echoproperties prefix="gump"/>
     <echoproperties prefix="os"/>
     <echoproperties prefix="java"/>
 
   </target>
 
   <target name="pack-src" depends="init-version">
     <property name="dist.name" value="apache-jmeter-${jmeter.version}"/>
     <antcall target="_pack-source"/>
   </target>
 
   <target name="pack-dist" depends="init-version">
     <property name="dist.name" value="apache-jmeter-${jmeter.version}"/>
     <antcall target="_pack-binaries"/>
     <antcall target="_pack-libraries"/>
     <antcall target="_pack-javadoc"/>
     <antcall target="_pack-source"/>
   </target>
 
   <!-- As pack-dist but without javadoc -->
   <target name="pack-nightly" depends="init-version">
     <property name="dist.name" value="apache-jmeter-${jmeter.version}"/>
     <antcall target="_pack-binaries"/>
     <antcall target="_pack-libraries"/>
     <antcall target="_pack-source"/>
   </target>
 
   <target name="_pack-binaries">
     <property name="pack.name" value="${dist.name}_bin"/>
     <mkdir dir="${dist.dir}"/>
     <tar destfile="${dist.dir}/${pack.name}.tar" longfile="gnu">
       <tarfileset dir="." prefix="${dist.name}" excludes="${dist.executables}" defaultexcludes="yes">
         <patternset refid="dist.binaries.native"/>
       </tarfileset>
       <tarfileset dir="." prefix="${dist.name}" excludes="${dist.executables}" defaultexcludes="yes">
         <patternset refid="dist.binaries.non.native"/>
       </tarfileset>
       <tarfileset mode="755" includes="${dist.executables}" dir="." prefix="${dist.name}" defaultexcludes="yes"/>
     </tar>
     <gzip destfile="${dist.dir}/${pack.name}.tgz" src="${dist.dir}/${pack.name}.tar" />
     <!-- no longer needed -->
     <delete file="${dist.dir}/${pack.name}.tar"/>
     <zip  destfile="${dist.dir}/${pack.name}.zip">
       <zipfileset dir="." prefix="${dist.name}" defaultexcludes="yes">
         <patternset refid="dist.binaries.native"/>
       </zipfileset>
       <zipfileset dir="." prefix="${dist.name}" defaultexcludes="yes">
         <patternset refid="dist.binaries.non.native"/>
       </zipfileset>
     </zip>
   </target>
 
   <target name="_pack-libraries">
     <property name="pack.name" value="${dist.name}_lib"/>
     <mkdir dir="${dist.dir}"/>
     <tar destfile="${dist.dir}/${pack.name}.tar" longfile="gnu">
       <tarfileset dir="." prefix="${dist.name}" defaultexcludes="yes">
         <patternset refid="external.jars.notices"/>
       </tarfileset>
       <tarfileset dir="." prefix="${dist.name}" defaultexcludes="yes">
         <patternset refid="external.jars"/>
       </tarfileset>
     </tar>
     <gzip destfile="${dist.dir}/${pack.name}.tgz" src="${dist.dir}/${pack.name}.tar" />
     <!-- no longer needed -->
     <delete file="${dist.dir}/${pack.name}.tar"/>
     <zip  destfile="${dist.dir}/${pack.name}.zip">
       <zipfileset dir="." prefix="${dist.name}" defaultexcludes="yes">
         <patternset refid="external.jars.notices"/>
       </zipfileset>
       <zipfileset dir="." prefix="${dist.name}" defaultexcludes="yes">
         <patternset refid="external.jars"/>
       </zipfileset>
     </zip>
   </target>
 
   <target name="_pack-javadoc">
     <property name="pack.name" value="${dist.name}_api"/>
     <mkdir dir="${dist.dir}"/>
     <tar destfile="${dist.dir}/${pack.name}.tar" longfile="gnu">
       <tarfileset includes="${dest.docs.api}" dir="." prefix="${dist.name}" defaultexcludes="yes"/>
     </tar>
     <gzip destfile="${dist.dir}/${pack.name}.tgz" src="${dist.dir}/${pack.name}.tar" />
     <!-- no longer needed -->
     <delete file="${dist.dir}/${pack.name}.tar"/>
     <zip  destfile="${dist.dir}/${pack.name}.zip">
        <zipfileset includes="${dest.docs.api}" dir="." prefix="${dist.name}" defaultexcludes="yes"/>
     </zip>
   </target>
 
   <target name="_pack-source">
     <property name="pack.name" value="${dist.name}_src"/>
     <mkdir dir="${dist.dir}"/>
     <tar destfile="${dist.dir}/${pack.name}.tar" longfile="gnu">
       <tarfileset dir="." prefix="${dist.name}" defaultexcludes="yes">
         <patternset refid="dist.sources.native"/>
       </tarfileset>
       <tarfileset dir="." prefix="${dist.name}" defaultexcludes="yes">
         <patternset refid="dist.sources.non.native"/>
       </tarfileset>
     </tar>
     <gzip destfile="${dist.dir}/${pack.name}.tgz" src="${dist.dir}/${pack.name}.tar" />
     <!-- no longer needed -->
     <delete file="${dist.dir}/${pack.name}.tar"/>
     <zip  destfile="${dist.dir}/${pack.name}.zip">
       <zipfileset dir="." prefix="${dist.name}" defaultexcludes="yes">
         <patternset refid="dist.sources.native"/>
       </zipfileset>
       <zipfileset dir="." prefix="${dist.name}" defaultexcludes="yes">
         <patternset refid="dist.sources.non.native"/>
       </zipfileset>
     </zip>
   </target>
 
   <!-- Create a zip of all resource files for translators -->
   <target name="pack-resources">
     <mkdir dir="${dist.dir}"/>
     <zip  destfile="${dist.dir}/resources.zip">
       <zipfileset dir="." defaultexcludes="yes">
         <patternset excludes="${src.dir}/examples/**" />
         <patternset includes="${src.dir}/**/*Resources.properties" />
         <patternset includes="${src.dir}/**/messages.properties" />
         <patternset includes="${src.dir}/**/i18nedit.properties" />
       </zipfileset>
     </zip>
   </target>
 
 <!--
     Utility target to create MD5 checksums in standard format (with *filename)
     Usage:
     <antcall target="_hash">
         <param name="path" value="archive.jar|zip|gz"/>
     </antcall>
 -->
 
   <target name="_hash" unless="hash.skip">
     <echo message="Creating MD5 for ${path}"/>
     <basename property="_base" file="${path}"/>
     <checksum algorithm="MD5" file="${path}" property="md5"/>
     <echo message="${md5} *${_base}" file="${path}.md5"/>
     <echo message="Creating SHA for ${path}"/>
     <checksum algorithm="SHA" file="${path}" property="sha"/>
     <echo message="${sha} *${_base}" file="${path}.sha"/>
   </target>
 
   <!--
   Clean-docs and clean-apidocs can be used to empty the docs or docs/api directories.
   This should be done before regenerating the documents for a release so that any obsolete files are detected.
   -->
   <target name="clean-docs">
     <delete>
       <fileset dir="${dest.docs}" excludes=".svn/** api/**"/>
     </delete>
   </target>
 
   <!-- Use this before running docs-print to ensure image files are synchronised -->
   <target name="clean-docs-images">
     <delete failonerror="false">
       <fileset dir="${dest.docs}/images" excludes=".svn/**"/>
     </delete>
   </target>
 
   <target name="clean-apidocs">
     <delete failonerror="false">
       <fileset dir="${dest.docs.api}" excludes=".svn/**" />
     </delete>
   </target>
 
   <target name="clean" description="Clean up to force a build from source.">
     <!-- Unfortunately Ant reports failure if a directory does not exist -->
     <delete quiet="false" failonerror="false">
       <fileset dir="${dest.jar.jmeter}" includes="ApacheJMeter.jar"/>
       <fileset dir="${lib.dir}" includes="jorphan.jar"/>
       <fileset dir="${lib.dir}" includes="ApacheJMeter_slf4j_logkit.jar"/>
       <fileset dir="${lib.dir}" includes="bshclient.jar"/>
       <fileset dir="${dest.jar}" includes="*.jar"/>
       <fileset dir="${build.dir}"/>
       <fileset dir="${dest.printable_docs}"/>
       <fileset dir="${dist.dir}"/>
     </delete>
   </target>
 
   <target name="clean-dist" description="Clean up dist directory.">
     <delete quiet="true">
       <fileset dir="${dist.dir}"/>
     </delete>
   </target>
 
   <target name="docs-api" description="Generate the API documentation.">
     <available property="jdk1.7+" classname="java.lang.AutoCloseable"/>
     <fail unless="jdk1.7+"
           message="Must use Java 7 or later for creating the Javadocs"/>
     <tstamp>
       <!-- Used to ensure end-year is up to date -->
       <format property="THISYEAR" pattern="yyyy"/>
     </tstamp>
 
     <!-- JMeter Javadoc version (own variable is used so can be overriden independently) -->
     <property name="docversion" value="${jmeter.version}"/>
 
     <mkdir dir="${dest.docs.api}"/>
     <delete quiet="true">
       <fileset dir="${dest.docs.api}" includes="**/*.html"/>
     </delete>
     <echo level="info">Updating overview to ${docversion}</echo>
     <replaceregexp match="version [^\s]+"
                  encoding="${encoding}"
                  replace="version ${docversion}"
                  flags="g" byline="true">
       <fileset dir="${src.docs}" includes="overview.html" />
     </replaceregexp>
     <javadoc
       sourcepathref="srcpaths"
       overview="${src.docs}/overview.html"
       additionalparam="-breakiterator -notimestamp"
       destdir="${dest.docs.api}"
       encoding="${javadoc.encoding}"
       verbose="false"
       protected="yes"
       version="yes"
       doctitle="Apache JMeter API"
       windowtitle="Apache JMeter API"
       header="&lt;b&gt;Apache JMeter&lt;/b&gt;"
       bottom="Copyright &amp;#xA9; 1998-${THISYEAR} Apache Software Foundation. All Rights Reserved."
       packagenames="org.apache.jmeter.*,org.apache.jorphan.*"
       excludepackagenames="org.apache.jorphan.timer">
       <classpath refid="classpath"/>
       <link href="http://docs.oracle.com/javase/7/docs/api/"/>
     </javadoc>
     <!-- No need for Javadoc patch (CVE-2013-1571) now we are using Java 7 minimum -->
   </target>
 
   <!--
     Run Doccheck: See http://java.sun.com/j2se/javadoc/doccheck/docs/DocCheck.html
     and http://java.sun.com/j2se/javadoc/doccheck/
     Download the doclet, and put the jar in lib/opt.
     Output is in reports/ directory
   -->
   <target name="docs-check">
     <javadoc sourcepathref="srcpaths"
              destdir="reports"
              docletpath="${lib.opt}/doccheck.jar"
              packagenames="org.apache.jmeter.*,org.apache.jorphan.*"
              excludepackagenames="org.apache.jmeter.util.keystore,org.apache.jorphan.timer">
       <classpath refid="classpath"/>
       <doclet name="com.sun.tools.doclets.doccheck.DocCheck">
         <!--
             -execDepth: 1=org.* 2=org.apache.* 3+=org.apache.jmeter.*
             -evident does not seem to work
          -->
         <param name="-execDepth" value="3"/>
         <param name="-evident" value="4"/>
       </doclet>
     </javadoc>
   </target>
 
   <target name="docs-site" depends="init-docs" description="Generate browsable HTML documentation in web-site format.">
     <mkdir dir="${dest.docs}" />
     <!-- The extending pages are rather out of date (and not linked from elsewhere) -->
     <xslt style="xdocs/stylesheets/website-style.xsl" basedir="${src.docs}" destdir="${dest.docs}"
       force="${docs.force}" excludes="extending.xml" includes="*.xml">
       <param name="relative-path" expression="." />
       <param name="subdir" expression="" />
       <param name="year" expression="${year}" />
     </xslt>
     <xslt style="xdocs/stylesheets/website-style.xsl" basedir="${src.docs}/usermanual" destdir="${dest.docs}/usermanual"
       force="${docs.force}" includes="*.xml">
       <param name="relative-path" expression=".." />
       <param name="subdir" expression="usermanual" />
       <param name="year" expression="${year}" />
     </xslt>
     <xslt style="xdocs/stylesheets/website-style.xsl" basedir="${src.docs}/localising" destdir="${dest.docs}/localising"
       force="${docs.force}" includes="*.xml">
       <param name="relative-path" expression=".." />
       <param name="subdir" expression="usermanual" />
       <param name="year" expression="${year}" />
     </xslt>
     <copy todir="${dest.docs}/images" overwrite="${docs.force}">
       <fileset dir="${src.images}" />
     </copy>
     <copy todir="${dest.docs}/css" overwrite="${docs.force}">
       <fileset dir="${src.css}"/>
     </copy>
     <!--
     Note: it's vital that the Javadoc files are excluded from any fixes applied here.
     Any fixes to Javadoc files need to be done in the docs-api target only.
     Otherwise the output from the build will depend on which is done first.
     -->
     <echo level="info">Fixing EOL</echo>
     <fixcrlf encoding="utf-8" srcdir="${dest.docs}/" includes="**/*.html" excludes="api/**" fixlast="false"/>
     <echo level="info">Removing unnecessary &lt;/br> tags</echo>
     <replace encoding="utf-8" dir="${dest.docs}/" includes="**/*.html" excludes="api/**" token="&lt;/br>" value=""/>
     <copy todir="${dest.docs}/demos">
       <fileset dir="${src.demos}"/>
     </copy>
     <copy todir="${dest.docs}/usermanual">
       <fileset file="${src.docs}/usermanual/*.pdf"/>
     </copy>
     <copy todir="${dest.docs}/extending">
       <fileset file="${src.docs}/extending/jmeter_tutorial.pdf"/>
     </copy>
     <copy todir="${dest.docs}/">
       <fileset file="${src.docs}/download_jmeter.cgi"/>
     </copy>
   </target>
 
   <target name="docs-printable" depends="init-docs" if="AnakiaTask.present" description="Generate printable HTML documentation.">
     <taskdef name="anakia" classpathref="anakia.classpath" classname="org.apache.velocity.anakia.AnakiaTask"/>
     <!-- The extending pages are rather out of date (and not linked from elsewhere) -->
     <anakia basedir="${src.docs}" destdir="${dest.printable_docs}/" extension=".html" style="${eclipse.anakia}/xdocs/stylesheets/site_printable.vsl" projectFile="./stylesheets/printable_project.xml"
         excludes="**/stylesheets/** extending.xml extending/*.xml"
         includes="**/*.xml" lastModifiedCheck="${anakia.lastModifiedCheck}" velocityPropertiesFile="${src.docs}/velocity.properties"/>
     <echo level="info">Fixing EOL</echo>
     <fixcrlf encoding="utf-8" srcdir="${dest.printable_docs}/" includes="**/*.html" fixlast="false"/>
     <echo level="info">Removing unnecessary &lt;/br> tags</echo>
     <replace encoding="utf-8" dir="${dest.printable_docs}/" includes="**/*.html" token="&lt;/br>" value=""/>
     <!--
     Share images with non-printable version
     Means printable version won't work on web-site
     -->
     <echo level="info">Copying files</echo>
     <copy todir="${dest.docs}/css">
       <fileset dir="${src.css}"/>
     </copy>
     <copy todir="${dest.docs}/images">
       <fileset dir="${src.images}" />
     </copy>
     <copy todir="${dest.printable_docs}/demos">
       <fileset dir="${src.demos}"/>
     </copy>
     <copy todir="${dest.printable_docs}/usermanual">
         <fileset file="${src.docs}/usermanual/*.pdf"/>
     </copy>
     <copy todir="${dest.printable_docs}/extending">
       <fileset file="${src.docs}/extending/jmeter_tutorial.pdf"/>
     </copy>
   </target>
 
   <target name="test" depends="compile-tests,_test,_allbatchtests"
     description="Run tests (use -Djava.awt.headless=true on systems without graphic displays)"/>
 
   <target name="test-both" depends="test-headless,test-headed"/>
 
   <target name="test-headless" depends="compile-tests">
     <antcall target="_test">
       <param name="test.headless" value="true"/>
     </antcall>
   </target>
 
   <target name="test-headed" depends="compile-tests">
     <antcall target="_test">
       <param name="test.headless" value="false"/>
     </antcall>
   </target>
 
   <target name="batchtestserver" description="Run the batch test using client-server mode">
     <property name="batchtestserver.out" location="${basedir}/bin"/>
     <property name="batchtestserver.log" value="BatchTestServer.log"/>
     <condition property="rmi_hostname_option" value="-Ddummy=true">
       <not><isset property="rmi_force_localhost"/></not>
     </condition>
     <condition property="rmi_hostname_option" value="-Djava.rmi.server.hostname=localhost">
       <isset property="rmi_force_localhost"/>
     </condition>
     <condition property="jacoco_params" value="${jacocoagent}batchtest:daemon:java(server) -Djava.awt.headless=true org.apache.jmeter.NewDriver -j ${batchtestserver.out}/${batchtestserver.log} -Dserver_port=${rmi_port}">
       <isset property="jacocoagent"/>
     </condition>
     <tstamp>
       <!-- Use variable port to help avoid clashes on CI servers -->
       <format property="rmi_port" pattern="1mmss"/>
     </tstamp>
     <parallel>
       <daemons>
         <java taskname="server" classname="org.apache.jmeter.NewDriver" fork="yes" dir="${batchtestserver.out}">
           <classpath>
             <fileset dir="${dest.jar.jmeter}" includes="*.jar"/>
             <fileset dir="${dest.jar}" includes="*.jar"/>
             <path refid="classpath"/>
           </classpath>
           <jvmarg value="${jacoco_params}"/>
           <sysproperty key="java.awt.headless" value="true"/>
           <!-- Bug 59723 -->
           <!-- quieten the logging; this has to be done first -->
           <arg value="-ptestfiles/jmeter-batch.properties"/>
           <!-- pick up default properties -->
           <arg value="-qjmeter.properties"/>
           <!-- reset the logging and other parameters -->
           <arg value="-qtestfiles/jmeter-batch.properties"/>
           <arg value="-j"/>
           <arg value="${batchtestserver.out}/${batchtestserver.log}"/>
           <arg value="-Dserver_port=${rmi_port}"/>
           <arg value="-s"/>
           <arg value="-Jserver.exitaftertest=true"/>
           <arg value="${rmi_hostname_option}"/>
         </java>
       </daemons>
       <sequential>
         <sleep seconds="1"/>
         <antcall target="batchtest">
           <param name="remote" value="-Rlocalhost:${rmi_port}"/>
           <param name="taskname" value="client"/>
           <!-- Default the test name so we can override with a parameter -->
         </antcall>
       </sequential>
     </parallel>
     <!-- Show the log file -->
     <concat>
       <filelist dir="${batchtestserver.out}" files="${batchtestserver.log}" />
     </concat>
 
     <local         name="BatchTestLocalServer.len"/>
     <condition property="BatchTestLocalServer.len">
       <length file="${batchtestserver.out}/${batchtestserver.log}" when="equal" length="0" />
     </condition>
     <fail unless="BatchTestLocalServer.len">
         Error detected in server log file. See above.
     </fail>
 
     <delete>
       <fileset dir="${batchtestserver.out}">
         <include name="${batchtestserver.log}"/>
       </fileset>
      </delete>
   </target>
 
   <target name="batchtest" description="Run the batch test and compare output files" unless="${skip.batchtest}">
 
     <!-- will be overwritten by antcall paramaters -->
     <property name="taskname" value="jmeter"/>
     <property name="remote" value="-X"/>
     <property name="batchtest.inp" location="${basedir}/bin/testfiles"/>
     <property name="batchtest.out" location="${basedir}/bin"/>
     <property name="batchtest.name" value="BatchTestLocal"/>
     <!--
          Allow variable to be set on the command line
          Cannot omit value because that causes a warning message
      -->
     <property name="batchtest.variable" value="dummy"/>
     <property name="batchtest.value" value="dummy"/>
 
     <!-- Fix the EOL in case the file was derived from the "wrong" archive type -->
     <fixcrlf encoding="${encoding}" srcdir="${batchtest.inp}" includes="${batchtest.name}.csv"/>
 
     <echo level="info" message="Starting ${batchtest.name} using ${remote}"/>
 
     <macrodef name="deleteworkfiles">
       <sequential>
         <delete>
           <fileset dir="${batchtest.out}">
             <include name="${batchtest.name}.csv"/>
             <include name="${batchtest.name}.xml"/>
             <include name="${batchtest.name}.log"/>
             <include name="${batchtest.name}.jtl"/>
             <!-- Allow for optional error files -->
             <include name="${batchtest.name}.err"/>
           </fileset>
         </delete>
       </sequential>
     </macrodef>
 
     <macrodef name="checkfile">
       <attribute name="type" default=""/>
       <attribute name="file"/>
       <sequential>
         <local name="found"/>
         <!--echo>Looking for @{file}</echo-->
         <available property="found" file="@{file}"/>
         <fail message="Cannot find @{type} file @{file}" unless="found"/>
       </sequential>
     </macrodef>
 
     <checkfile type="input" file="${batchtest.inp}${file.separator}${batchtest.name}.csv"/>
     <checkfile type="input" file="${batchtest.inp}${file.separator}${batchtest.name}.xml"/>
 
     <deleteworkfiles/>
 
     <condition property="jacoco_params" value="${jacocoagent}batchtest:java(${taskname}) -Djava.awt.headless=false org.apache.jmeter.NewDriver -ttestfiles/${batchtest.name}.jmx ${remote}">
       <isset property="jacocoagent"/>
     </condition>
 
     <java taskname="${taskname}" classname="org.apache.jmeter.NewDriver" fork="yes" dir="${basedir}/bin">
       <classpath>
         <fileset dir="${dest.jar.jmeter}" includes="*.jar"/>
         <fileset dir="${dest.jar}" includes="*.jar"/>
         <path refid="classpath"/>
       </classpath>
       <jvmarg value="${jacoco_params}"/>
       <!-- Detect if non-GUI runs OK headless by forcing it to try using non-headless mode -->
       <sysproperty key="user.language" value="en"/>
       <sysproperty key="user.region" value="US"/>
       <sysproperty key="java.awt.headless" value="false"/>
       <!-- Bug 59723 -->
       <!-- quieten the logging; this has to be done first -->
       <arg value="-ptestfiles/jmeter-batch.properties"/>
       <!-- pick up default properties -->
       <arg value="-qjmeter.properties"/>
       <!-- reset the logging and other parameters -->
       <arg value="-qtestfiles/jmeter-batch.properties"/>
       <arg value="-n"/>
       <arg value="-ttestfiles/${batchtest.name}.jmx"/>
       <arg value="-j"/>
       <arg value="${batchtest.name}.log"/>
       <arg value="-l"/>
       <arg value="${batchtest.name}.jtl"/>
       <arg value="${remote}"/>
       <!-- Check properties can be passed to local/remote tests -->
       <arg value="-Jmodule=Module"/>
       <arg value="-Gmodule=Module"/>
       <!-- Check property can be used for filenames in local/remote tests (no need to defined as -G) -->
       <arg value="-JCSVFILE=${batchtest.name}.csv"/>
       <arg value="-J${batchtest.variable}=${batchtest.value}"/>
     </java>
 
     <!-- Show the log file -->
     <concat>
       <filelist dir="${batchtest.out}" files="${batchtest.name}.log" />
     </concat>
 
     <checkfile type="output" file="${batchtest.out}${file.separator}${batchtest.name}.csv"/>
     <checkfile type="output" file="${batchtest.out}${file.separator}${batchtest.name}.xml"/>
     <checkfile type="output" file="${batchtest.out}${file.separator}${batchtest.name}.jtl"/>
 
     <local         name="BatchTestLocal.csv.OK"/>
     <local         name="file1.csv"/>
     <local         name="file2.csv"/>
 
     <loadfile property="file1.csv" srcFile="${batchtest.inp}/${batchtest.name}.csv"/>
     <loadfile property="file2.csv" srcFile="${batchtest.out}/${batchtest.name}.csv"/>
     <condition property="BatchTestLocal.csv.OK">
       <filesmatch file1="${batchtest.inp}/${batchtest.name}.csv" file2="${batchtest.out}/${batchtest.name}.csv"/>
     </condition>
     <fail unless="BatchTestLocal.csv.OK">
         CSV Files are not identical.
         ${batchtest.inp}${file.separator}${batchtest.name}.csv
         ${file1.csv}
         ${batchtest.out}${file.separator}${batchtest.name}.csv
         ${file2.csv}
     </fail>
 
     <local         name="BatchTestLocal.xml.OK"/>
     <local         name="file1.xml"/>
     <local         name="file2.xml"/>
     <loadfile property="file1.xml" srcFile="${batchtest.inp}/${batchtest.name}.xml"/>
     <loadfile property="file2.xml" srcFile="${batchtest.out}/${batchtest.name}.xml"/>
     <condition property="BatchTestLocal.xml.OK">
      <filesmatch file1="${batchtest.inp}/${batchtest.name}.xml" file2="${batchtest.out}/${batchtest.name}.xml"/>
     </condition>
     <fail unless="BatchTestLocal.xml.OK">
         XML Files are not identical.
         ${batchtest.inp}${file.separator}${batchtest.name}.xml
         ${file1.xml}
         ${batchtest.out}${file.separator}${batchtest.name}.xml
         ${file2.xml}
     </fail>
 
     <echo level="info">${batchtest.name} output files compared OK</echo>
 
     <local         name="BatchTestLocal.len"/>
     <condition property="BatchTestLocal.len">
       <length file="${batchtest.out}/${batchtest.name}.log" when="equal" length="0" />
     </condition>
     <fail unless="BatchTestLocal.len">
         Error detected in log file. See above.
     </fail>
 
     <deleteworkfiles/>
 
   </target>
 
   <!-- Additional test scripts -->
   <target name="batch_scripts">
     <antcall target="batchtest">
       <param name="batchtest.name" value="HTMLParserTestFile_2"/>
     </antcall>
-    <!-- Disable Test which seems wrong -->
-    <!--
+  	<!-- Disable Test which seems wrong -->
+  	<!--
     <antcall target="batchtest">
       Using the same module controller name in command line mode causes NPE
       <param name="batchtest.name" value="Bug47165"/>
     </antcall>
-    -->
+  	-->
     <antcall target="batchtest">
       <!--  variable in IPSource failed HTTP request if "Concurrent Pool Size" is enabled -->
       <!-- N.B. requires access to jmeter.apache.org -->
       <param name="batchtest.name" value="Bug52310"/>
       <param name="skip.batchtest" value="${skip.bug52310}" />
     </antcall>
     <antcall target="batchtest">
       <!-- Option Start Next Loop in Thread Group does not mark parent Transaction Sampler in error when an error occurs -->
       <param name="batchtest.name" value="Bug52968"/>
     </antcall>
 
     <antcall target="batchtest">
       <!-- IncludeController : NullPointerException loading script in non-GUI mode if Includers use same element name -->
       <param name="batchtest.name" value="Bug50898"/>
     </antcall>
 
     <antcall target="batchtest">
       <!-- Foreach works incorrectly with indexes on subsequent iterations -->
       <param name="batchtest.name" value="Bug56243"/>
     </antcall>
 
     <antcall target="batchtest">
       <!-- ArrayIndexOutOfBoundsException if "sample_variable" is set in client but not server -->
       <!-- This is unaffected by the bug; it just checks the script works OK in local mode -->
       <param name="batchtest.name" value="Bug54685"/>
       <param name="batchtest.variable" value="sample_variables"/>
       <param name="batchtest.value" value="REFERENCE,JSESSIONID"/>
     </antcall>
 
     <antcall target="batchtest">
       <!--   StackOverflowError with ModuleController in Non-GUI mode if its name is the same as the target node -->
       <param name="batchtest.name" value="Bug55375"/>
     </antcall>
 
     <antcall target="batchtestserver">
       <!-- ArrayIndexOutOfBoundsException if "sample_variable" is set in client but not server -->
       <!-- This is the actual test -->
       <param name="batchtest.name" value="Bug54685"/>
       <param name="batchtest.variable" value="sample_variables"/>
       <param name="batchtest.value" value="REFERENCE,JSESSIONID"/>
     </antcall>
 
     <antcall target="batchtest">
       <param name="batchtest.name" value="Bug56811"/>
     </antcall>
 
     <antcall target="batchtest">
       <param name="batchtest.name" value="TEST_HTTPS"/>
       <param name="skip.batchtest" value="${skip.test_https}" />
     </antcall>
   </target>
 
   <!-- Run all batch tests; used by test target -->
   <target name="_allbatchtests" depends="batchtest,batchtestserver,batch_scripts">
   </target>
 
    <!-- Generic test target, not intended to be called directly -->
    <target name="_test" depends="package">
    <!--
    The property java.awt.headless is not automatically passed on,
    because the tests are run in a separate JVM from the build.
 
    It is assumed that Gump sets java.awt.headless if required.
 
    Set test.headless from the java.awt property, if that
    is defined, otherwise it us set to "".
    N.B. if test.headless is already set, it will not be changed
    This allows the property to be over-ridden by test-headless etc.
    -->
     <condition property="test.headless" value="${java.awt.headless}">
       <isset property="java.awt.headless"/>
     </condition>
      <!-- make sure test.headless is set to something -->
      <condition property="test.headless" value="">
       <not><isset property="java.awt.headless"/></not>
      </condition>
 
    <!-- set build.test.gump to build.test if not already set -->
     <condition property="build.test.gump" value="${build.test}">
       <not><isset property="build.test.gump"/></not>
     </condition>
     <echo level="info">
    gump.run = ${gump.run}
    java.awt.headless = ${java.awt.headless}
    test.headless = ${test.headless}
    user.dir = ${user.dir}
    basedir = ${basedir}
    test dir = ${build.test}
    test dir gump = ${build.test.gump}
    testsaveservice.saveout = ${testsaveservice.saveout}
    test.encoding = ${test.encoding}
     </echo>
     <delete quiet="true">
       <fileset dir="${basedir}/bin/testfiles" includes="*.jmx.out"/>
     </delete>
     <condition property="jacoco_params" value="${jacocoagent}_test:java -Djava.awt.headless=${test.headless} org.apache.jorphan.test.AllTests">
       <isset property="jacocoagent"/>
     </condition>
     <!-- fork="yes" is required or dir attribute is ignored -->
     <java classname="org.apache.jorphan.test.AllTests" fork="yes" failonerror="true" dir="${basedir}/bin">
       <classpath>
         <fileset dir="${dest.jar.jmeter}" includes="ApacheJMeter.jar"/>
         <fileset dir="${dest.jar}" includes="*.jar"/>
         <pathelement location="${build.test}"/>
         <pathelement location="${build.test-res}"/>
         <path refid="classpath"/>
       </classpath>
       <jvmarg value="-server"/>
       <jvmarg value="${jacoco_params}"/>
       <jvmarg value="-Dfile.encoding=${test.encoding}"/>
       <sysproperty key="java.awt.headless" value="${test.headless}"/>
       <sysproperty key="testsaveservice.saveout" value="${testsaveservice.saveout}" />
       <sysproperty key="gump.run" value="${gump.run}" />
       <arg value="${build.test}"/>
       <arg value="${basedir}/bin/jmeter.properties"/>
       <arg value="org.apache.jmeter.util.JMeterUtils"/>
     </java>
   </target>
 
   <!--
     In order to run JUnit, both junit.jar and optional.jar need to be on the Ant classpath
     optional.jar is normally found in ANT_HOME/lib
   -->
   <target name="junit"  depends="compile-tests"
     description="Run individual JUnit test (-Dtest.case=org.apache.jorphan.test.AllTests) (-Dtest.format=plain) (-Dtest.showoutput=true)">
     <mkdir dir="reports"/>
     <property name="test.format" value="plain"/>
     <property name="test.case" value="org.apache.jorphan.test.AllTests"/>
     <property name="test.showoutput" value="false"/>
     <condition property="jacoco_params" value="${jacocoagent}run_gui:junit -Djava.awt.headless=${java.awt.headless} org.apache.jmeter.NewDriver">
       <isset property="jacocoagent"/>
     </condition>
     <junit fork="true"
            dir="${basedir}/bin"
            showoutput="${test.showoutput}"
            printsummary="on">
       <formatter type="${test.format}" usefile="yes"/>
       <formatter type="xml"/>
       <jvmarg value="${jacoco_params}"/>
       <jvmarg value="-Dfile.encoding=${test.encoding}"/>
       <!-- Allow headless to be passed in -->
       <jvmarg value="-Djava.awt.headless=${java.awt.headless}"/>
       <classpath>
         <fileset dir="${dest.jar}" includes="*.jar"/>
         <pathelement location="${build.test}"/>
         <path refid="classpath"/>
       </classpath>
       <test name="${test.case}" todir="reports"/>
     </junit>
   </target>
 
   <!-- Utility target to collate reports -->
   <target name="junitreport">
     <mkdir dir="reports"/>
     <junitreport todir="reports">
       <fileset dir="reports">
         <include name="TEST-*.xml"/>
       </fileset>
       <report format="frames" todir="reports"/>
     </junitreport>
   </target>
 
   <target name="generator_jar" depends="compile-tests" description="Create the test tree generator jar">
     <jar jarfile="${dest.jar}/ApacheJMeter_generator.jar"
          manifest="${build.dir}/MANIFEST_BIN.MF">
       <zipfileset file="${resources.meta-inf}/default.notice"
          fullpath="META-INF/NOTICE" />
       <zipfileset file="${resources.meta-inf}/default.license"
          fullpath="META-INF/LICENSE" />
       <fileset dir="${build.test}" includes="**/GenerateTreeGui*.class"/>
     </jar>
   </target>
 
   <target name="svnCheck" description="Use SVN to get the current revision" unless="disable-svnCheck">
     <exec executable="svn" logerror="true" outputproperty="svn.exec.result" failonerror="true" failifexecutionfails="true">
       <arg line="info"/>
     </exec>
     <loadresource property="svn.revision">
       <string value="${svn.exec.result}"/>
       <filterchain>
         <linecontains>
           <contains value="Last Changed Rev: "/>
         </linecontains>
         <tokenfilter>
             <!-- Remove all but the revision number -->
             <replaceregex pattern=".*: " replace=""/>
         </tokenfilter>
         <striplinebreaks/>
       </filterchain>
     </loadresource>
     <echo level="info" message="svn.revision=${svn.revision}"/>
   </target>
 
   <!-- Macro is needed to be able to perform indirect evaluation of property names -->
   <macrodef name="process_jarfile">
     <attribute name="jarname"/>
     <attribute name="dest.dir" default="${lib.dir}"/>
     <sequential>
       <!-- Call all possible targets; these are only executed if the appropriate property is set -->
       <antcall target="_check_exists">
         <param name="file" value="@{dest.dir}/${@{jarname}.jar}"/>
         <param name="loc" value="${@{jarname}.loc}"/>
         <param name="jar" value="${@{jarname}.jar}"/>
         <param name="path" value="@{dest.dir}"/>
         <param name="md5"  value="${@{jarname}.md5}"/>
         <param name="_checkMD5" value="true"/>
       </antcall>
       <antcall target="_check_jarfile">
         <param name="loc" value="${@{jarname}.loc}"/>
         <param name="jar" value="${@{jarname}.jar}"/>
         <param name="path" value="@{dest.dir}"/>
         <param name="md5"  value="${@{jarname}.md5}"/>
         <param name="_checkMD5" value="true"/>
         <param name="zip" value="${@{jarname}.zip}"/>
         <param name="ent" value="${@{jarname}.ent}"/>
         <param name="zipprop" value="@{jarname}.zip"/>
       </antcall>
     </sequential>
   </macrodef>
 
   <!-- Check if jarfile exists, and set properties for calling zip or jar download -->
   <target name="_check_jarfile" if="_get_file">
     <!-- Check if file exists -->
     <fail message="Error in build file or calling sequence" if="file.exists"/>
     <echo level="info">Checking ${jar}</echo>
     <available file="${path}/${jar}" property="file.exists"/>
     <condition property="_get_zipfile">
       <isset property="${zipprop}"/>
     </condition>
     <condition property="_get_jarfile">
       <not>
         <isset property="${zipprop}"/>
       </not>
     </condition>
     <!-- Delete all but the desired version of the file -->
     <loadresource property="wildCard">
       <propertyresource name="jar"/>
       <filterchain>
         <tokenfilter>
           <filetokenizer/>
           <replaceregex pattern="-\d+\.\d+.*(\.jar|\.zip)" replace="-*\1"/>
         </tokenfilter>
       </filterchain>
     </loadresource>
     <echo level="info" message="Deleting ${wildCard} (excluding ${jar})"/>
     <delete verbose="true">
       <!-- Unfortunately commons-jexl jars don't have unique prefixes -->
       <fileset dir="${path}" includes="${wildCard}" excludes="${jar} commons-jexl-*"/>
     </delete>
     <!-- Emulate conditional execution; targets use if/unless to suppress execution -->
     <antcall target="_get_jarfile"/>
     <antcall target="_get_zipfile"/>
   </target>
 
   <!-- Get a zip file and unpack it -->
   <target name="_get_zipfile" if="_get_zipfile" unless="file.exists">
     <get src="${loc}/${zip}"
          dest="${build.dir}/${zip}"
          usetimestamp="true" ignoreerrors="false"/>
     <unzip dest="${build.dir}" src="${build.dir}/${zip}">
       <patternset>
         <include name="**/${ent}"/>
       </patternset>
       <!-- This requires Ant 1.7.0 or later -->
       <mapper type="flatten"/>
     </unzip>
     <antcall target="_checkMD5">
       <param name="file" value="${ent}"/>
       <param name="path" value="${build.dir}"/>
       <param name="md5"  value="${md5}"/>
     </antcall>
     <move preservelastmodified="true" overwrite="true"
           file="${build.dir}/${ent}" tofile="${path}/${jar}" verbose="true"/>
   </target>
 
   <!-- Download a jar file and check its hash; if correct, move to correct directory -->
   <target name="_get_jarfile" if="_get_jarfile" unless="file.exists">
     <echo message="Fetching: ${path}/${jar}" level="info"/>
     <get src="${loc}/${jar}"
          dest="${build.dir}/${jar}"
          usetimestamp="false" ignoreerrors="false"/>
     <antcall target="_checkMD5">
       <param name="file" value="${jar}"/>
       <param name="path" value="${build.dir}"/>
       <param name="md5"  value="${md5}"/>
     </antcall>
     <move preservelastmodified="true" overwrite="true"
           file="${build.dir}/${jar}" tofile="${path}/${jar}" verbose="true"/>
   </target>
 
   <!-- Ant subroutine, required to localise MD5OK property -->
   <target name="_checkMD5" if="_checkMD5">
     <!--
     @param path - location of file
     @param file - file name
     -->
     <checksum algorithm="MD5" file="${path}/${file}" property="MD5"/>
     <condition property="MD5OK">
       <equals arg1="${MD5}" arg2="${md5}" casesensitive="false"/>
     </condition>
     <fail unless="MD5OK">Bad Checksum: for ${file}
         expected ${md5}
         actual   ${MD5}</fail>
     <echo level="info" message="Checksum OK: ${file}"/>
   </target>
 
   <!--
     Generic target to process all external jars.
     The "process_jarfile" macro resolves the properties that begin with the jarname
     and calls all the possible targets. The targets use "if" and "unless" to provide
     conditional execution (it would be a lot easier if antcall supported if/unless).
   -->
   <target name="_process_all_jars">
     <process_jarfile jarname="accessors-smart"/>
     <process_jarfile jarname="apache-bsf"/>
     <process_jarfile jarname="asm"/>
     <process_jarfile jarname="avalon-framework"/>
     <process_jarfile jarname="bcmail" dest.dir="${lib.api}"/>
     <process_jarfile jarname="bcprov" dest.dir="${lib.api}"/>
     <process_jarfile jarname="bcpkix" dest.dir="${lib.api}"/>
     <process_jarfile jarname="beanshell"/>
     <process_jarfile jarname="caffeine"/>
     <process_jarfile jarname="commons-codec"/>
     <process_jarfile jarname="commons-collections"/>
     <process_jarfile jarname="commons-dbcp2"/>
     <process_jarfile jarname="commons-httpclient"/>
     <process_jarfile jarname="commons-io"/>
     <process_jarfile jarname="commons-jexl2"/>
     <process_jarfile jarname="commons-jexl3"/>
     <process_jarfile jarname="commons-lang3"/>
     <process_jarfile jarname="commons-logging"/>
     <process_jarfile jarname="commons-math3"/>
     <process_jarfile jarname="commons-net"/>
     <process_jarfile jarname="commons-pool2"/>
     <process_jarfile jarname="dnsjava"/>
     <process_jarfile jarname="excalibur-logger"/>
     <process_jarfile jarname="freemarker"/>
     <process_jarfile jarname="groovy-all"/>
     <process_jarfile jarname="hamcrest-core"/>
     <process_jarfile jarname="httpclient"/>
     <process_jarfile jarname="httpcore"/>
     <process_jarfile jarname="httpmime"/>
     <process_jarfile jarname="jakarta-oro"/>
     <process_jarfile jarname="javamail"/>
     <process_jarfile jarname="jcharts"/>
     <process_jarfile jarname="jdom" dest.dir="${lib.doc}"/>
     <process_jarfile jarname="jms"/>
     <process_jarfile jarname="rhino"/>
     <process_jarfile jarname="jodd-core"/>
     <process_jarfile jarname="jodd-lagarto"/>
     <process_jarfile jarname="jodd-log"/>
     <process_jarfile jarname="jodd-props"/>
     <process_jarfile jarname="json-path"/>
     <process_jarfile jarname="json-smart"/>
     <process_jarfile jarname="jsoup"/>
     <process_jarfile jarname="junit"/>
     <process_jarfile jarname="logkit"/>
     <process_jarfile jarname="mongo-java-driver"/>
     <process_jarfile jarname="ph-css" />
     <process_jarfile jarname="ph-commons" />
     <process_jarfile jarname="rsyntaxtextarea"/>
     <process_jarfile jarname="serializer"/>
     <process_jarfile jarname="slf4j-api"/>
     <process_jarfile jarname="jtidy"/>
     <process_jarfile jarname="tika-core"/>
     <process_jarfile jarname="tika-parsers"/>
     <process_jarfile jarname="velocity"   dest.dir="${lib.doc}"/>
     <process_jarfile jarname="commons-lang" dest.dir="${lib.doc}"/>
     <process_jarfile jarname="xalan"/>
     <process_jarfile jarname="xerces"/>
     <process_jarfile jarname="xml-apis"/>
     <process_jarfile jarname="xmlgraphics-commons"/>
     <process_jarfile jarname="xmlpull"/>
     <process_jarfile jarname="xpp3"/>
     <process_jarfile jarname="xstream"/>
     <process_jarfile jarname="jacocoant" dest.dir="${lib.coverage}" />
   </target>
 
   <target name="_process_doc_jars">
     <process_jarfile jarname="commons-collections"/>
     <process_jarfile jarname="commons-lang"   dest.dir="${lib.doc}"/>
     <process_jarfile jarname="jdom"           dest.dir="${lib.doc}"/>
     <process_jarfile jarname="velocity"   dest.dir="${lib.doc}"/>
   </target>
 
   <target name="_process_checkstyle_jars">
     <process_jarfile jarname="checkstyle-all"    dest.dir="${lib.opt}"/>
   </target>
 
   <target name="_process_rat_jars">
     <process_jarfile jarname="rat"        dest.dir="${lib.opt}"/>
     <process_jarfile jarname="rat-tasks"  dest.dir="${lib.opt}"/>
   </target>
 
   <!-- Update a jar (clean, download, package in one shot.-->
   <target name="update_jar" depends="clean, download_jars, package">
   </target>
 
 
   <!-- Download all missing jars.-->
   <target name="download_jars" description="Download any missing jar files">
     <!-- build.dir may be needed as a temporary work area -->
     <mkdir dir="${build.dir}" />
     <!-- The directories must exist otherwise the build fails when deleting previous versions -->
     <mkdir dir="${lib.api}" />
     <mkdir dir="${lib.doc}" />
     <delete verbose="true">
       <!-- bcprov jars no longer have the same prefix so the wildcard delete does not work; drop any old ones -->
       <fileset dir="${lib.api}" includes="bcmail-jdk15-*.jar bcprov-jdk15-*.jar"/>
       <!-- tidy up unused Excalibur jars -->
       <fileset dir="${lib.dir}" includes="htmllexer-2.1.jar htmlparser-2.1.jar excalibur-datasource-2.1.jar excalibur-instrument-1.0.jar excalibur-pool-api-2.1.jar excalibur-pool-impl-2.1.jar excalibur-pool-instrumented-2.1.jar"/>
       <!-- jdom jar has moved; drop the old one -->
       <fileset dir="${lib.dir}" includes="jdom-1.1.3.jar"/>
       <!-- Drop slf4j-nop implementation -->
       <fileset dir="${lib.dir}" includes="slf4j-nop-1.7.13.jar"/>
     </delete>
     <antcall target="_process_all_jars">
         <param name="_get_file" value="true"/>
     </antcall>
   </target>
 
   <target name="download_doc_jars">
     <!-- build.dir may be needed as a temporary work area -->
     <mkdir dir="${build.dir}" />
     <antcall target="_process_doc_jars">
       <param name="_get_file" value="true"/>
     </antcall>
   </target>
 
   <target name="download_checkstyle">
     <!-- build.dir may be needed as a temporary work area -->
    <mkdir dir="${build.dir}" />
     <antcall target="_process_checkstyle_jars">
       <param name="_get_file" value="true"/>
     </antcall>
   </target>
 
   <target name="download_rat">
     <!-- build.dir may be needed as a temporary work area -->
    <mkdir dir="${build.dir}" />
     <antcall target="_process_rat_jars">
       <param name="_get_file" value="true"/>
     </antcall>
   </target>
 
   <target name="_coverage.prepare" >
      <available property="jacocoant.jar.available" file="${lib.coverage}/${jacocoant.jar}"/>
      <fail message="This task requires JaCoCo library, please run download_jars target to download it" unless="jacocoant.jar.available"/>
      <taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
         <classpath path="${lib.coverage}/${jacocoant.jar}"/>
      </taskdef>
      <jacoco:agent property="jacocoagent" 
                    destfile="${build.dir}/jacoco.exec"
                    includes="org.apache.jmeter.*:org.apache.jorphan.*:org.apache.commons.cli.avalon.*:org.sl4j.impl.StaticLoggerBinder"
                    sessionid="" 
      />
   </target>
 
   <target name="_coverage.report" depends="_coverage.prepare, init-svnVersion, init-version">
     <jacoco:report>
         <executiondata>
             <file file="${build.dir}/jacoco.exec"/>
         </executiondata>
         <structure name="JMeter ${jmeter.version} ${implementation.version}">
             <classfiles>
                 <fileset dir="${build.components}"/>
                 <fileset dir="${build.core}"/>
                 <fileset dir="${build.functions}"/>
                 <fileset dir="${build.jorphan}"/>
                 <fileset dir="${build.junit}"/>
                 <fileset dir="${build.monitor.components}"/>
                 <fileset dir="${build.monitor.model}"/>
                 <fileset dir="${build.ftp}"/>
                 <fileset dir="${build.http}"/>
                 <fileset dir="${build.java}"/>
                 <fileset dir="${build.jdbc}"/>
                 <fileset dir="${build.jms}"/>
                 <fileset dir="${build.ldap}"/>
                 <fileset dir="${build.mail}"/>
                 <fileset dir="${build.mongodb}"/>
                 <fileset dir="${build.native}"/>
                 <fileset dir="${build.tcp}"/>
                 <fileset dir="${build.slf4j_logkit}"/>
                 <fileset dir="${build.test}"/>
             </classfiles>
             <sourcefiles encoding="${encoding}">
                 <fileset dir="${src.components}"/>
                 <fileset dir="${src.core}"/>
                 <fileset dir="${src.functions}"/>
                 <fileset dir="${src.jorphan}"/>
                 <fileset dir="${src.junit}"/>
                 <fileset dir="${src.monitor.components}"/>
                 <fileset dir="${src.monitor.model}"/>
                 <fileset dir="${src.ftp}"/>
                 <fileset dir="${src.http}"/>
                 <fileset dir="${src.java}"/>
                 <fileset dir="${src.jdbc}"/>
                 <fileset dir="${src.jms}"/>
                 <fileset dir="${src.ldap}"/>
                 <fileset dir="${src.mail}"/>
                 <fileset dir="${src.mongodb}"/>
                 <fileset dir="${src.native}"/>
                 <fileset dir="${src.tcp}"/>
                 <fileset dir="${src.slf4j_logkit}"/>
                 <fileset dir="${src.test}"/>
             </sourcefiles>
         </structure>
         <html destdir="reports/coverage"/>
         <xml destfile="reports/coverage/jmeter-coverage.xml"/>
         <csv destfile="reports/coverage/jmeter-coverage.csv"/>
     </jacoco:report>
   </target>
 
   <target name="coverage"  depends="ant-version,_coverage.prepare, test-both, _allbatchtests, _coverage.report"/>
 
   <target name="_check_exists" if="_check_exists">
     <fail message="Invalid call sequence - file.exists should not be defined" if="file.exists"/>
     <available file="${file}" property="file.exists"/>
     <fail message="Could not find file ${file}" unless="file.exists"/>
     <antcall target="_checkMD5">
       <param name="file" value="${jar}"/>
       <param name="path" value="${path}"/>
       <param name="md5"  value="${md5}"/>
     </antcall>
     <!--echo level="info" message="Found ${file}"/-->
   </target>
 
   <target name="check_jars" description="Check that all required jar files are present" unless="no_check_jars">
     <antcall target="_process_all_jars">
       <param name="_check_exists" value="true"/>
     </antcall>
   </target>
 
   <!-- Special: process to get RSyntaxTextArea-->
   <!-- Useless since rsyntaxtextarea artifacts are published to Maven Repo since 9th july 2014 (JMeter 2.12) -->
   <!--
   <target name="_process_rsyntaxtextarea">
       <available file="./lib/${rsyntaxtextarea.jar}" property="rsyntaxtextarea.exists"/>
       <antcall target="_get_rsyntaxtextarea"/>
   </target>
   -->
   <!-- Get RSyntaxTextArea binary zip file, unpack it, pick up jar file and remove the zip -->
   <!-- Useless since rsyntaxtextarea artifacts are published to Maven Repo since 9th july 2014 (JMeter 2.12) -->
   <!--
   <target name="_get_rsyntaxtextarea" unless="rsyntaxtextarea.exists">
     <property name="loc" value="${rsyntaxtextarea.loc}"/>
     <property name="zip" value="${rsyntaxtextarea.name}_${rsyntaxtextarea.version}.zip"/>
     <property name="jar" value="${rsyntaxtextarea.name}.jar"/>
     <property name="md5" value="${rsyntaxtextarea.md5}"/>
     <property name="path" value="./lib"/>
     <get src="${loc}/${zip}"
          dest="${build.dir}/${zip}"
          usetimestamp="true" ignoreerrors="false"/>
     <unzip dest="${build.dir}" src="${build.dir}/${zip}">
       <patternset>
         <include name="**/${jar}"/>
       </patternset>
       <mapper type="flatten"/>
     </unzip>
     <antcall target="_checkMD5">
       <param name="file" value="${build.dir}/${jar}"/>
       <param name="path" value="${build.dir}"/>
       <param name="md5"  value="${md5}"/>
     </antcall>
     <delete>
       <fileset dir="${path}" includes="${rsyntaxtextarea.name}-*.jar"/>
     </delete>
     <move preservelastmodified="true" overwrite="true"
         file="${build.dir}/${jar}" tofile="${path}/${rsyntaxtextarea.jar}" verbose="true"/>
     <delete file="${build.dir}/${zip}"/>
   </target>
   -->
 
   <!-- Need to define config_loc for use by Eclipse -->
   <property name="config_loc" value="."/>
   <target name="checkstyle">
     <available property="checkstyle.jar.available" file="${lib.opt}/${checkstyle-all.jar}"/>
     <fail message="This task requires checkstlye, please run download_checkstyle target to download checkstyle" unless="checkstyle.jar.available"/>
 
     <antcall target="_process_checkstyle_jars"></antcall>
     <taskdef resource="com/puppycrawl/tools/checkstyle/ant/checkstyle-ant-task.properties"
              classpath="${lib.opt}/${checkstyle-all.jar}"/>
     <checkstyle config="checkstyle.xml">
       <fileset dir="src" includes="**/*.java"/>
       <formatter type="plain"/>
       <formatter type="xml" toFile="build/checkstyle_errors.xml"/>
     </checkstyle>
 
   </target>
 
   <target name="rat">
     <available property="rat.jar.available" file="${lib.opt}/${rat.jar}"/>
     <fail message="This task requires Apache Creadur RAT, please run download_rat target to download it" unless="rat.jar.available"/>
     <taskdef
       uri="antlib:org.apache.rat.anttasks"
       resource="org/apache/rat/anttasks/antlib.xml">
       <classpath>
         <pathelement location="${lib.opt}/${rat.jar}"/>
         <pathelement location="${lib.opt}/${rat-tasks.jar}"/>
       </classpath>
     </taskdef>
-    <mkdir dir="${basedir}/reports/" />
+	<mkdir dir="${basedir}/reports/" />
     <rat:report reportfile="reports/rat-report.txt">
         <fileset dir="." excludesfile="rat-excludes.txt"/>
     </rat:report>
     <loadfile property="rat-errors" srcFile="reports/rat-report.txt">
       <filterchain>
         <linecontains>
           <contains value="Unknown"/>
         </linecontains>
       </filterchain>
     </loadfile>
     <echo message="reports/rat-report.txt:"/>
     <echo message="${rat-errors}"/>
   </target>
 
   <target name="sign_dist"
     description="Sign release artifacts in dist and dist/maven.  Usage: ant sign_dist -Dgpg.keyname=key-id [-Dgpg.secretKeyring=path-to-keyring]      ">
     <scriptdef name="gpg" language="beanshell">
       <classpath>
         <pathelement location="${lib.dir}/${beanshell.jar}"/>
       </classpath>
       <element name="fileset" type="fileset"/>
       <![CDATA[
       int execcode( String command ) // helper
       {
           StringTokenizer st = new StringTokenizer(command);
           String[] cmdarray = new String[st.countTokens()];
           for (int i = 0; st.hasMoreTokens(); i++) {
               cmdarray[i] = st.nextToken();
           }
           // Merge stderr with stdout so only have to fetch one stream
           proc = new ProcessBuilder(cmdarray).redirectErrorStream(true).start();
           din = new DataInputStream( proc.getInputStream() );
           while( (line=din.readLine()) != null ) {
               print(line);
           }
           return this.proc.waitFor();
       }
         keyname = project.getProperty("gpg.keyname");
         // Java 1.6 returns void, Java 1.5 returns null
         if (keyname == void || keyname == null) {
           self.fail("Please provide the gpg.keyname property");
         }
         keyring = project.getProperty("gpg.secretKeyring");
         if (keyring == void || keyring == null) {
           keyring = "secring.gpg"; // the default
         }
         sep=java.io.File.separator;
         cmd="gpg2 --batch --yes -ba -u " + keyname + " --secret-keyring " + keyring;
         self.log("Command: "+cmd);
         filesets = elements.get("fileset");
         for (i = 0; i < filesets.size(); ++i) {
           fileset = filesets.get(i);
           basedir = fileset.getDir();
           self.log("Processing "+basedir);
           ds = fileset.getDirectoryScanner();
           srcFiles = ds.getIncludedFiles();
           for (j=0; j < srcFiles.length; j++) {
             srcFile=srcFiles[j];
             file=basedir + sep + srcFile;
             self.log("Signing "+srcFile);
             ret=execcode(cmd+ " " + file);
             if (ret != 0) {
                self.fail("Command failed: "+ret);
             }
           }
         }
       ]]>
     </scriptdef>
     <gpg>
       <fileset dir="${dist.dir}"  includes="*.*" excludes="*.asc *.md5 *.sha1 *.sha"/>
       <fileset dir="${maven.dir}" includes="*.*" excludes="*.asc *.md5 *.sha1 *.sha"/>
     </gpg>
   </target>
 </project>
diff --git a/res/maven/ApacheJMeter_monitors.pom b/res/maven/ApacheJMeter_monitors.pom
deleted file mode 100644
index 4f94bc7e2..000000000
--- a/res/maven/ApacheJMeter_monitors.pom
+++ /dev/null
@@ -1,54 +0,0 @@
-<!--
-Licensed to the Apache Software Foundation (ASF) under one
-or more contributor license agreements.  See the NOTICE file
-distributed with this work for additional information
-regarding copyright ownership.  The ASF licenses this file
-to you under the Apache License, Version 2.0 (the
-"License"); you may not use this file except in compliance
-with the License.  You may obtain a copy of the License at
-
-  http://www.apache.org/licenses/LICENSE-2.0
-
-Unless required by applicable law or agreed to in writing,
-software distributed under the License is distributed on an
-"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
-KIND, either express or implied.  See the License for the
-specific language governing permissions and limitations
-under the License.
--->
-
-<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
-    <modelVersion>4.0.0</modelVersion>
-    <parent>
-      <groupId>org.apache.jmeter</groupId>
-      <artifactId>ApacheJMeter_parent</artifactId>
-      <version>@MAVEN.DEPLOY.VERSION@</version>
-      <relativePath>.</relativePath>
-    </parent>
-    <artifactId>ApacheJMeter_monitors</artifactId>
-    <name>Apache JMeter Monitor</name>
-
-    <dependencies>
-        <dependency>
-            <groupId>org.apache.jmeter</groupId>
-            <artifactId>jorphan</artifactId>
-            <version>@MAVEN.DEPLOY.VERSION@</version>
-        </dependency>
-        <dependency>
-            <groupId>org.apache.jmeter</groupId>
-            <artifactId>ApacheJMeter_core</artifactId>
-            <version>@MAVEN.DEPLOY.VERSION@</version>
-        </dependency>
-        <dependency>
-            <groupId>org.apache.jmeter</groupId>
-            <artifactId>ApacheJMeter_components</artifactId>
-            <version>@MAVEN.DEPLOY.VERSION@</version>
-        </dependency>
-        <dependency>
-            <groupId>org.apache.jmeter</groupId>
-            <artifactId>ApacheJMeter_http</artifactId>
-            <version>@MAVEN.DEPLOY.VERSION@</version>
-        </dependency>
-    </dependencies>
-
-</project>
\ No newline at end of file
diff --git a/src/core/org/apache/jmeter/images/monitor-active.gif b/src/core/org/apache/jmeter/images/monitor-active.gif
deleted file mode 100644
index 1a355f281..000000000
Binary files a/src/core/org/apache/jmeter/images/monitor-active.gif and /dev/null differ
diff --git a/src/core/org/apache/jmeter/images/monitor-blue-legend.gif b/src/core/org/apache/jmeter/images/monitor-blue-legend.gif
deleted file mode 100644
index f5f3efdee..000000000
Binary files a/src/core/org/apache/jmeter/images/monitor-blue-legend.gif and /dev/null differ
diff --git a/src/core/org/apache/jmeter/images/monitor-dead.gif b/src/core/org/apache/jmeter/images/monitor-dead.gif
deleted file mode 100644
index de6915ed5..000000000
Binary files a/src/core/org/apache/jmeter/images/monitor-dead.gif and /dev/null differ
diff --git a/src/core/org/apache/jmeter/images/monitor-green-legend.gif b/src/core/org/apache/jmeter/images/monitor-green-legend.gif
deleted file mode 100644
index e401e5b4a..000000000
Binary files a/src/core/org/apache/jmeter/images/monitor-green-legend.gif and /dev/null differ
diff --git a/src/core/org/apache/jmeter/images/monitor-healthy.gif b/src/core/org/apache/jmeter/images/monitor-healthy.gif
deleted file mode 100644
index c2e527a9a..000000000
Binary files a/src/core/org/apache/jmeter/images/monitor-healthy.gif and /dev/null differ
diff --git a/src/core/org/apache/jmeter/images/monitor-legend.gif b/src/core/org/apache/jmeter/images/monitor-legend.gif
deleted file mode 100644
index 57ff83bd0..000000000
Binary files a/src/core/org/apache/jmeter/images/monitor-legend.gif and /dev/null differ
diff --git a/src/core/org/apache/jmeter/images/monitor-load-0.gif b/src/core/org/apache/jmeter/images/monitor-load-0.gif
deleted file mode 100644
index 21b5985e6..000000000
Binary files a/src/core/org/apache/jmeter/images/monitor-load-0.gif and /dev/null differ
diff --git a/src/core/org/apache/jmeter/images/monitor-load-1.gif b/src/core/org/apache/jmeter/images/monitor-load-1.gif
deleted file mode 100644
index 358b6a356..000000000
Binary files a/src/core/org/apache/jmeter/images/monitor-load-1.gif and /dev/null differ
diff --git a/src/core/org/apache/jmeter/images/monitor-load-10.gif b/src/core/org/apache/jmeter/images/monitor-load-10.gif
deleted file mode 100644
index c62928da8..000000000
Binary files a/src/core/org/apache/jmeter/images/monitor-load-10.gif and /dev/null differ
diff --git a/src/core/org/apache/jmeter/images/monitor-load-2.gif b/src/core/org/apache/jmeter/images/monitor-load-2.gif
deleted file mode 100644
index 8422b7673..000000000
Binary files a/src/core/org/apache/jmeter/images/monitor-load-2.gif and /dev/null differ
diff --git a/src/core/org/apache/jmeter/images/monitor-load-3.gif b/src/core/org/apache/jmeter/images/monitor-load-3.gif
deleted file mode 100644
index c193e9b45..000000000
Binary files a/src/core/org/apache/jmeter/images/monitor-load-3.gif and /dev/null differ
diff --git a/src/core/org/apache/jmeter/images/monitor-load-4.gif b/src/core/org/apache/jmeter/images/monitor-load-4.gif
deleted file mode 100644
index 3df4bc86e..000000000
Binary files a/src/core/org/apache/jmeter/images/monitor-load-4.gif and /dev/null differ
diff --git a/src/core/org/apache/jmeter/images/monitor-load-5.gif b/src/core/org/apache/jmeter/images/monitor-load-5.gif
deleted file mode 100644
index 5005f3158..000000000
Binary files a/src/core/org/apache/jmeter/images/monitor-load-5.gif and /dev/null differ
diff --git a/src/core/org/apache/jmeter/images/monitor-load-6.gif b/src/core/org/apache/jmeter/images/monitor-load-6.gif
deleted file mode 100644
index 242290c03..000000000
Binary files a/src/core/org/apache/jmeter/images/monitor-load-6.gif and /dev/null differ
diff --git a/src/core/org/apache/jmeter/images/monitor-load-7.gif b/src/core/org/apache/jmeter/images/monitor-load-7.gif
deleted file mode 100644
index 40037e712..000000000
Binary files a/src/core/org/apache/jmeter/images/monitor-load-7.gif and /dev/null differ
diff --git a/src/core/org/apache/jmeter/images/monitor-load-8.gif b/src/core/org/apache/jmeter/images/monitor-load-8.gif
deleted file mode 100644
index 49698cc51..000000000
Binary files a/src/core/org/apache/jmeter/images/monitor-load-8.gif and /dev/null differ
diff --git a/src/core/org/apache/jmeter/images/monitor-load-9.gif b/src/core/org/apache/jmeter/images/monitor-load-9.gif
deleted file mode 100644
index 3ef80d1f2..000000000
Binary files a/src/core/org/apache/jmeter/images/monitor-load-9.gif and /dev/null differ
diff --git a/src/core/org/apache/jmeter/images/monitor-orange-legend.gif b/src/core/org/apache/jmeter/images/monitor-orange-legend.gif
deleted file mode 100644
index 8a45f2182..000000000
Binary files a/src/core/org/apache/jmeter/images/monitor-orange-legend.gif and /dev/null differ
diff --git a/src/core/org/apache/jmeter/images/monitor-red-legend.gif b/src/core/org/apache/jmeter/images/monitor-red-legend.gif
deleted file mode 100644
index 6bfc21f7e..000000000
Binary files a/src/core/org/apache/jmeter/images/monitor-red-legend.gif and /dev/null differ
diff --git a/src/core/org/apache/jmeter/images/monitor-warning.gif b/src/core/org/apache/jmeter/images/monitor-warning.gif
deleted file mode 100644
index 0912de127..000000000
Binary files a/src/core/org/apache/jmeter/images/monitor-warning.gif and /dev/null differ
diff --git a/src/core/org/apache/jmeter/resources/messages.properties b/src/core/org/apache/jmeter/resources/messages.properties
index 48d88c4d4..fe1682696 100644
--- a/src/core/org/apache/jmeter/resources/messages.properties
+++ b/src/core/org/apache/jmeter/resources/messages.properties
@@ -1,1369 +1,1344 @@
 #   Licensed to the Apache Software Foundation (ASF) under one or more
 #   contributor license agreements.  See the NOTICE file distributed with
 #   this work for additional information regarding copyright ownership.
 #   The ASF licenses this file to You under the Apache License, Version 2.0
 #   (the "License"); you may not use this file except in compliance with
 #   the License.  You may obtain a copy of the License at
 # 
 #       http://www.apache.org/licenses/LICENSE-2.0
 # 
 #   Unless required by applicable law or agreed to in writing, software
 #   distributed under the License is distributed on an "AS IS" BASIS,
 #   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 #   See the License for the specific language governing permissions and
 #   limitations under the License.
 
 # Warning: JMeterUtils.getResString() replaces space with '_'
 # and converts keys to lowercase before lookup
 # => All keys in this file must also be lower case or they won't match
 #
 
 # Please add new entries in alphabetical order
 
 about=About Apache JMeter
 active_threads_tooltip=Running threads
 add=Add
 add_as_child=Add as Child
 add_from_clipboard=Add from Clipboard
 add_from_suggested_excludes=Add suggested Excludes
 add_parameter=Add Variable
 add_pattern=Add Pattern\:
 add_test=Add Test
 add_user=Add User
 add_value=Add Value
 addtest=Add test
 aggregate_graph=Statistical Graphs
 aggregate_graph_choose_color=Choose color
 aggregate_graph_choose_foreground_color=Foreground color
 aggregate_graph_color_bar=Color\:
 aggregate_graph_column=Column\:
 aggregate_graph_column_selection=Column label selection\:
 aggregate_graph_column_settings=Column settings
 aggregate_graph_columns_to_display=Columns to display\:
 aggregate_graph_dimension=Graph size
 aggregate_graph_display=Display Graph
 aggregate_graph_draw_outlines=Draw outlines bar?
 aggregate_graph_dynamic_size=Dynamic graph size
 aggregate_graph_font=Font\:
 aggregate_graph_height=Height\:
 aggregate_graph_increment_scale=Increment scale\:
 aggregate_graph_legend=Legend
 aggregate_graph_legend.placement.bottom=Bottom
 aggregate_graph_legend.placement.left=Left
 aggregate_graph_legend.placement.right=Right
 aggregate_graph_legend.placement.top=Top
 aggregate_graph_legend_placement=Placement\:
 aggregate_graph_max_length_xaxis_label=Max length of x-axis label\:
 aggregate_graph_ms=Milliseconds
 aggregate_graph_no_values_to_graph=No values to graph
 aggregate_graph_number_grouping=Show number grouping?
 aggregate_graph_response_time=Response Time
 aggregate_graph_save=Save Graph
 aggregate_graph_save_table=Save Table Data
 aggregate_graph_save_table_header=Save Table Header
 aggregate_graph_size=Size\:
 aggregate_graph_style=Style\:
 aggregate_graph_sync_with_name=Synchronize with name
 aggregate_graph_tab_graph=Graph
 aggregate_graph_tab_settings=Settings
 aggregate_graph_title=Aggregate Graph
 aggregate_graph_title_group=Title
 aggregate_graph_use_group_name=Include group name in label?
 aggregate_graph_user_title=Graph title\:
 aggregate_graph_value_font=Value font\:
 aggregate_graph_value_labels_vertical=Value labels vertical?
 aggregate_graph_width=Width\:
 aggregate_graph_xaxis_group=X Axis
 aggregate_graph_yaxis_group=Y Axis (milli-seconds)
 aggregate_graph_yaxis_max_value=Scale maximum value\:
 aggregate_report=Aggregate Report
 aggregate_report_xx_pct1_line={0}% Line
 aggregate_report_xx_pct2_line={0}% Line
 aggregate_report_xx_pct3_line={0}% Line
 aggregate_report_90=90%
 aggregate_report_bandwidth=Received KB/sec
 aggregate_report_sent_bytes_per_sec=Sent KB/sec
 aggregate_report_count=# Samples
 aggregate_report_error=Error
 aggregate_report_error%=Error %
 aggregate_report_max=Max
 aggregate_report_median=Median
 aggregate_report_min=Min
 aggregate_report_rate=Throughput
 aggregate_report_stddev=Std. Dev.
 aggregate_report_total_label=TOTAL
 ajp_sampler_title=AJP/1.3 Sampler
 als_message=Note\: The Access Log Parser is generic in design and allows you to plugin
 als_message2=your own parser. To do so, implement the LogParser, add the jar to the
 als_message3=/lib directory and enter the class in the sampler.
 analyze=Analyze Data File...
 anchor_modifier_title=HTML Link Parser
 appearance=Look and Feel
 argument_must_not_be_negative=The Argument must not be negative\!
 arguments_panel_title=Command parameters
 assertion_assume_success=Ignore Status
 assertion_body_resp=Response Body
 assertion_code_resp=Response Code
 assertion_contains=Contains
 assertion_equals=Equals
 assertion_headers=Response Headers
 assertion_matches=Matches
 assertion_message_resp=Response Message
 assertion_network_size=Full Response
 assertion_not=Not
 assertion_pattern_match_rules=Pattern Matching Rules
 assertion_patterns_to_test=Patterns to Test
 assertion_regex_empty_default_value=Use empty default value
 assertion_resp_field=Response Field to Test
 assertion_resp_size_field=Response Size Field to Test
 assertion_substring=Substring
 assertion_text_document=Document (text)
 assertion_text_resp=Text Response
 assertion_textarea_label=Assertions\:
 assertion_title=Response Assertion
 assertion_url_samp=URL Sampled
 assertion_visualizer_title=Assertion Results
 attribute=Attribute
 attribute_field=Attribute\:
 attrs=Attributes
 auth_base_url=Base URL
 auth_manager_clear_per_iter=Clear auth on each iteration?
 auth_manager_options=Options
 auth_manager_title=HTTP Authorization Manager
 auths_stored=Authorizations Stored in the Authorization Manager
 average=Average
 average_bytes=Avg. Bytes
 backend_listener=Backend Listener
 backend_listener_classname=Backend Listener implementation
 backend_listener_paramtable=Parameters
 backend_listener_queue_size=Async Queue size
 bind=Thread Bind
 bouncy_castle_unavailable_message=The jars for bouncy castle are unavailable, please add them to your classpath.
 browse=Browse...
 bsf_sampler_title=BSF Sampler
 bsf_script=Script to run (variables: ctx vars props SampleResult sampler log Label FileName Parameters args[] OUT)
 bsf_script_file=Script file to run
 bsf_script_language=Scripting language\:
 bsf_script_parameters=Parameters to pass to script/file\:
 bsh_assertion_script=Script (see below for variables that are defined)
 bsh_assertion_script_variables=The following variables are defined for the script:\nRead/Write: Failure, FailureMessage, SampleResult, vars, props, log.\nReadOnly: Response[Data|Code|Message|Headers], RequestHeaders, SampleLabel, SamplerData, ctx
 bsh_assertion_title=BeanShell Assertion
 bsh_function_expression=Expression to evaluate
 bsh_sampler_title=BeanShell Sampler
 bsh_script=Script (see below for variables that are defined)
 bsh_script_file=Script file
 bsh_script_parameters=Parameters (-> String Parameters and String []bsh.args)
 bsh_script_reset_interpreter=Reset bsh.Interpreter before each call
 bsh_script_variables=The following variables are defined for the script\:\nSampleResult, ResponseCode, ResponseMessage, IsSuccess, Label, FileName, ctx, vars, props, log
 busy_testing=I'm busy testing, please stop the test before changing settings
 cache_manager_size=Max Number of elements in cache
 cache_manager_title=HTTP Cache Manager
 cache_session_id=Cache Session Id?
 cancel=Cancel
 cancel_exit_to_save=There are test items that have not been saved.  Do you wish to save before exiting?
 cancel_new_from_template=There are test items that have not been saved.  Do you wish to save before creating a test plan from selected template?
 cancel_new_to_save=There are test items that have not been saved.  Do you wish to save before clearing the test plan?
 cancel_revert_project=There are test items that have not been saved.  Do you wish to revert to the previously saved test plan?
 change_parent=Change Controller
 char_value=Unicode character number (decimal or 0xhex)
 check_return_code_title=Check Return Code
 choose_function=Choose a function
 choose_language=Choose Language
 clear=Clear
 clear_all=Clear All
 clear_cache_each_iteration=Clear cache each iteration
 clear_cache_per_iter=Clear cache each iteration?
 clear_cookies_per_iter=Clear cookies each iteration?
 clipboard_node_read_error=An error occurred while copying node
 close=Close
 closeconnection=Close connection
 collapse_tooltip=Click to open / collapse
 column_delete_disallowed=Deleting this column is not permitted
 column_number=Column number of CSV file | next | *alias
 command_config_box_title=Command to Execute
 command_config_std_streams_title=Standard streams (files)
 command_field_title=Command:
 compare=Compare
 comparefilt=Compare filter
 comparison_differ_content=Responses differ in content
 comparison_differ_time=Responses differ in response time by more than 
 comparison_invalid_node=Invalid Node 
 comparison_regex_string=Regex String
 comparison_regex_substitution=Substitution
 comparison_response_time=Response Time: 
 comparison_unit=\ ms
 comparison_visualizer_title=Comparison Assertion Visualizer
 config_element=Config Element
 config_save_settings=Configure
 confirm=Confirm
 constant_throughput_timer_memo=Add a delay between sampling to attain constant throughput
 constant_timer_delay=Thread Delay (in milliseconds)\:
 constant_timer_memo=Add a constant delay between sampling
 constant_timer_title=Constant Timer
 content_encoding=Content encoding\:
 controller=Controller
 cookie_implementation_choose=Implementation:
 cookie_manager_policy=Cookie Policy:
 cookie_manager_title=HTTP Cookie Manager
 cookie_options=Options
 cookies_stored=User-Defined Cookies
 copy=Copy
 counter_config_title=Counter
 counter_per_user=Track counter independently for each user
 counter_reset_per_tg_iteration=Reset counter on each Thread Group Iteration
 countlim=Size limit
 critical_section_controller_label=Lock name
 critical_section_controller_title=Critical Section Controller
 cssjquery_attribute=Attribute\:
 cssjquery_empty_default_value=Use empty default value
 cssjquery_tester_error=An error occured evaluating expression:{0}, error:{1}
 cssjquery_impl=CSS/JQuery implementation\:
 cssjquery_render_no_text=Data response result isn't text.
 cssjquery_tester_button_test=Test
 cssjquery_tester_field=Selector\:
 cssjquery_tester_title=CSS/JQuery Tester
 csvread_file_file_name=CSV file to get values from | *alias
 cut=Cut
 cut_paste_function=Copy and paste function string
 database_conn_pool_max_usage=Max Usage For Each Connection\:
 database_conn_pool_props=Database Connection Pool
 database_conn_pool_size=Number of Connections in Pool\:
 database_conn_pool_title=JDBC Database Connection Pool Defaults
 database_driver_class=Driver Class\:
 database_login_title=JDBC Database Login Defaults
 database_sql_query_string=SQL Query String\:
 database_sql_query_title=JDBC SQL Query Defaults
 database_testing_title=JDBC Request
 database_url=JDBC URL\:
 database_url_jdbc_props=Database URL and JDBC Driver
 ddn=DN
 de=German
 debug_off=Disable debug
 debug_on=Enable debug
 default_parameters=Default Parameters
 default_value_field=Default Value\:
 delay=Startup delay (seconds)
 delayed_start=Delay Thread creation until needed
 delete=Delete
 delete_parameter=Delete Variable
 delete_test=Delete Test
 delete_user=Delete User
 deltest=Deletion test
 deref=Dereference aliases
 description=Description
 detail=Detail
 directory_field_title=Working directory:
 disable=Disable
 distribution_graph_title=Distribution Graph (DEPRECATED)
 distribution_note1=The graph will update every 10 samples
 dn=DN
 dns_cache_manager_title=DNS Cache Manager
 dns_hostname_or_ip=Hostname or IP address
 dns_servers=DNS Servers
 domain=Domain
 done=Done
 down=Down
 duplicate=Duplicate
 duration=Duration (seconds)
 duration_assertion_duration_test=Duration to Assert
 duration_assertion_failure=The operation lasted too long\: It took {0} milliseconds, but should not have lasted longer than {1} milliseconds.
 duration_assertion_input_error=Please enter a valid positive integer.
 duration_assertion_label=Duration in milliseconds\:
 duration_assertion_title=Duration Assertion
 duration_tooltip=Elapsed time of current running Test
 edit=Edit
 email_results_title=Email Results
 en=English
 enable=Enable
 encode=URL Encode
 encode?=Encode?
 encoded_value=URL Encoded Value
 endtime=End Time  
 entry_dn=Entry DN
 entrydn=Entry DN
 environment_panel_title=Environment Variables
 eolbyte=End of line(EOL) byte value: 
 error_indicator_tooltip=Show the number of errors in log, click to open Log Viewer panel
 error_loading_help=Error loading help page
 error_occurred=Error Occurred
 error_title=Error
 es=Spanish
 escape_html_string=String to escape
 eval_name_param=Text containing variable and function references
 evalvar_name_param=Name of variable
 example_data=Sample Data
 example_title=Example Sampler
 exit=Exit
 find_target_element=Find target element
 expected_return_code_title=Expected Return Code: 
 expiration=Expiration
 expression_field=CSS/JQuery expression\:
 field_name=Field name
 file=File
 file_already_in_use=That file is already in use
 file_visualizer_append=Append to Existing Data File
 file_visualizer_auto_flush=Automatically Flush After Each Data Sample
 file_visualizer_browse=Browse...
 file_visualizer_close=Close
 file_visualizer_file_options=File Options
 file_visualizer_filename=Filename
 file_visualizer_flush=Flush
 file_visualizer_missing_filename=No output filename specified.
 file_visualizer_open=Open
 file_visualizer_output_file=Write results to file / Read from file
 file_visualizer_submit_data=Include Submitted Data
 file_visualizer_title=File Reporter
 file_visualizer_verbose=Verbose Output
 filename=File Name
 follow_redirects=Follow Redirects
 follow_redirects_auto=Redirect Automatically
 font.sansserif=Sans Serif
 font.serif=Serif
 fontstyle.bold=Bold
 fontstyle.italic=Italic
 fontstyle.normal=Normal
 foreach_controller_title=ForEach Controller
 foreach_end_index=End index for loop (inclusive)
 foreach_input=Input variable prefix
 foreach_output=Output variable name
 foreach_start_index=Start index for loop (exclusive)
 foreach_use_separator=Add "_" before number ?
 format=Number format
 fr=French
 ftp_binary_mode=Use Binary mode ?
 ftp_get=get(RETR)
 ftp_local_file=Local File:
 ftp_local_file_contents=Local File Contents:
 ftp_put=put(STOR)
 ftp_remote_file=Remote File:
 ftp_sample_title=FTP Request Defaults
 ftp_save_response_data=Save File in Response ?
 ftp_testing_title=FTP Request
 function_dialog_menu_item=Function Helper Dialog
 function_helper_title=Function Helper
 function_name_param=Name of variable in which to store the result (required)
 function_name_paropt=Name of variable in which to store the result (optional)
 function_params=Function Parameters
 functional_mode=Functional Test Mode (i.e. save Response Data and Sampler Data)
 functional_mode_explanation=Selecting Functional Test Mode may adversely affect performance.
 gaussian_timer_delay=Constant Delay Offset (in milliseconds)\:
 gaussian_timer_memo=Adds a random delay with a gaussian distribution
 gaussian_timer_range=Deviation (in milliseconds)\:
 gaussian_timer_title=Gaussian Random Timer
 generate=Generate
 generator=Name of Generator class
 generator_cnf_msg=Could not find the generator class. Please make sure you place your jar file in the /lib directory.
 generator_illegal_msg=Could not access the generator class due to IllegalAccessException.
 generator_instantiate_msg=Could not create an instance of the generator parser. Please make sure the generator implements Generator interface.
 graph_apply_filter=Apply filter
 graph_choose_graphs=Graphs to Display
 graph_full_results_title=Graph Full Results
 graph_pointshape_circle=Circle
 graph_pointshape_diamond=Diamond
 graph_pointshape_none=None
 graph_pointshape_square=Square
 graph_pointshape_triangle=Triangle
 graph_resp_time_interval_label=Interval (ms):
 graph_resp_time_interval_reload=Apply interval
 graph_resp_time_not_enough_data=Unable to graph, not enough data
 graph_resp_time_series_selection=Sampler label selection:
 graph_resp_time_settings_line=Line settings
 graph_resp_time_settings_pane=Graph settings
 graph_resp_time_shape_label=Shape point:
 graph_resp_time_stroke_width=Stroke width:
 graph_resp_time_title=Response Time Graph
 graph_resp_time_title_label=Graph title:
 graph_resp_time_xaxis_time_format=Time format (SimpleDateFormat):
 graph_results_average=Average
 graph_results_data=Data
 graph_results_deviation=Deviation
 graph_results_latest_sample=Latest Sample
 graph_results_median=Median
 graph_results_ms=ms
 graph_results_no_samples=No of Samples
 graph_results_throughput=Throughput
 graph_results_title=Graph Results
 groovy_function_expression=Expression to evaluate
 grouping_add_separators=Add separators between groups
 grouping_in_controllers=Put each group in a new controller
 grouping_in_transaction_controllers=Put each group in a new transaction controller
 grouping_mode=Grouping\:
 grouping_no_groups=Do not group samplers
 grouping_store_first_only=Store 1st sampler of each group only
 header_manager_title=HTTP Header Manager
 headers_stored=Headers Stored in the Header Manager
 heap_dump=Create a heap dump
 help=Help
 help_node=What's this node?
 html_assertion_file=Write JTidy report to file
 html_assertion_label=HTML Assertion
 html_assertion_title=HTML Assertion
 html_extractor_title=CSS/JQuery Extractor
 html_extractor_type=CSS/JQuery Extractor Implementation
 http_implementation=Implementation:
 http_response_code=HTTP response code
 http_url_rewriting_modifier_title=HTTP URL Re-writing Modifier
 http_user_parameter_modifier=HTTP User Parameter Modifier
 httpmirror_max_pool_size=Max number of Threads:
 httpmirror_max_queue_size=Max queue size:
 httpmirror_settings=Settings
 httpmirror_title=HTTP Mirror Server
 id_prefix=ID Prefix
 id_suffix=ID Suffix
 if_controller_evaluate_all=Evaluate for all children?
 if_controller_expression=Interpret Condition as Variable Expression?
 if_controller_label=Condition (default Javascript)
 if_controller_title=If Controller
 ignore_subcontrollers=Ignore sub-controller blocks
 include_controller=Include Controller
 include_equals=Include Equals?
 include_path=Include Test Plan
 increment=Increment
 infinite=Forever
 initial_context_factory=Initial Context Factory
 insert_after=Insert After
 insert_before=Insert Before
 insert_parent=Insert Parent
 interleave_control_title=Interleave Controller
 interleave_accross_threads=Interleave accross threads
 intsum_param_1=First int to add.
 intsum_param_2=Second int to add - further ints can be summed by adding further arguments.
 invalid_data=Invalid data
 invalid_mail=Error occurred sending the e-mail
 invalid_mail_address=One or more invalid e-mail addresses detected
 invalid_mail_server=Problem contacting the e-mail server (see JMeter log file)
 invalid_variables=Invalid variables
 iteration_counter_arg_1=TRUE, for each user to have own counter, FALSE for a global counter
 iterator_num=Loop Count\:
 ja=Japanese
 jar_file=Jar Files
 java_request=Java Request
 java_request_defaults=Java Request Defaults
 javascript_expression=JavaScript expression to evaluate
 jexl_expression=JEXL expression to evaluate
 jms_auth_required=Required
 jms_bytes_message=Bytes Message
 jms_client_caption=Receiver client uses MessageConsumer.receive() to listen for message.
 jms_client_caption2=MessageListener uses onMessage(Message) interface to listen for new messages.
 jms_client_id=Client ID
 jms_client_type=Client
 jms_communication_style=Communication style
 jms_concrete_connection_factory=Concrete Connection Factory
 jms_config=Message source
 jms_config_title=JMS Configuration
 jms_connection_factory=Connection Factory
 jms_correlation_title=Use alternate fields for message correlation
 jms_dest_setup=Setup
 jms_dest_setup_dynamic=Each sample
 jms_dest_setup_static=At startup
 jms_durable_subscription_id=Durable Subscription ID
 jms_expiration=Expiration (ms)
 jms_file=File
 jms_initial_context_factory=Initial Context Factory
 jms_itertions=Number of samples to aggregate
 jms_jndi_defaults_title=JNDI Default Configuration
 jms_jndi_props=JNDI Properties
 jms_map_message=Map Message
 jms_message_title=Message properties
 jms_message_type=Message Type
 jms_msg_content=Content
 jms_object_message=Object Message
 jms_point_to_point=JMS Point-to-Point
 jms_priority=Priority (0-9)
 jms_properties=JMS Properties
 jms_properties_name=Name
 jms_properties_title=JMS Properties
 jms_properties_type=Class of value
 jms_properties_value=Value
 jms_props=JMS Properties
 jms_provider_url=Provider URL
 jms_publisher=JMS Publisher
 jms_pwd=Password
 jms_queue=Queue
 jms_queue_connection_factory=QueueConnection Factory
 jms_queueing=JMS Resources
 jms_random_file=Path of folder containing random files suffixed with .dat for bytes messages, .txt or .obj for text and Object messages
 jms_receive_queue=JNDI name Receive queue
 jms_request=Request Only
 jms_requestreply=Request Response
 jms_sample_title=JMS Default Request
 jms_selector=JMS Selector
 jms_send_queue=JNDI name Request queue
 jms_separator=Separator
 jms_stop_between_samples=Stop between samples?
 jms_store_response=Store Response
 jms_subscriber_on_message=Use MessageListener.onMessage()
 jms_subscriber_receive=Use MessageConsumer.receive()
 jms_subscriber_title=JMS Subscriber
 jms_testing_title=Messaging Request
 jms_text_area=Text Message or Object Message serialized to XML by XStream
 jms_text_message=Text Message
 jms_timeout=Timeout (ms)
 jms_topic=Destination
 jms_use_auth=Use Authorization?
 jms_use_file=From file
 jms_use_non_persistent_delivery=Use non-persistent delivery mode?
 jms_use_properties_file=Use jndi.properties file
 jms_use_random_file=Random File from folder specified below
 jms_use_req_msgid_as_correlid=Use Request Message Id
 jms_use_res_msgid_as_correlid=Use Response Message Id
 jms_use_text=Textarea
 jms_user=User
 jndi_config_title=JNDI Configuration
 jndi_lookup_name=Remote Interface
 jndi_lookup_title=JNDI Lookup Configuration
 jndi_method_button_invoke=Invoke
 jndi_method_button_reflect=Reflect
 jndi_method_home_name=Home Method Name
 jndi_method_home_parms=Home Method Parameters
 jndi_method_name=Method Configuration
 jndi_method_remote_interface_list=Remote Interfaces
 jndi_method_remote_name=Remote Method Name
 jndi_method_remote_parms=Remote Method Parameters
 jndi_method_title=Remote Method Configuration
 jndi_testing_title=JNDI Request
 jndi_url_jndi_props=JNDI Properties
 jsonpath_renderer=JSON Path Tester
 jsonpath_tester_title=JSON Path Tester
 jsonpath_tester_field=JSON Path Expression
 jsonpath_tester_button_test=Test
 jsonpath_render_no_text=No Text
 json_post_processor_title=JSON Extractor
 jsonpp_variable_names=Variable names
 jsonpp_json_path_expressions=JSON Path expressions
 jsonpp_default_values=Default Values
 jsonpp_match_numbers=Match Numbers
 jsonpp_compute_concat=Compute concatenation var (suffix _ALL)
 jsonpp_error_number_arguments_mismatch_error=Mismatch between number of variables, json expressions and default values
 junit_append_error=Append assertion errors
 junit_append_exception=Append runtime exceptions
 junit_constructor_error=Unable to create an instance of the class
 junit_constructor_string=Constructor String Label
 junit_create_instance_per_sample=Create a new instance per sample
 junit_do_setup_teardown=Do not call setUp and tearDown
 junit_error_code=Error Code
 junit_error_default_code=9999
 junit_error_default_msg=An unexpected error occured
 junit_error_msg=Error Message
 junit_failure_code=Failure Code
 junit_failure_default_code=0001
 junit_failure_default_msg=Test failed
 junit_failure_msg=Failure Message
 junit_junit4=Search for JUnit 4 annotations (instead of JUnit 3)
 junit_pkg_filter=Package Filter
 junit_request=JUnit Request
 junit_request_defaults=JUnit Request Defaults
 junit_success_code=Success Code
 junit_success_default_code=1000
 junit_success_default_msg=Test successful
 junit_success_msg=Success Message
 junit_test_config=JUnit Test Parameters
 junit_test_method=Test Method
 action_check_message=A Test is currently running, stop or shutdown test to execute this command
 action_check_title=Test Running
 ldap_argument_list=LDAPArgument List
 ldap_connto=Connection timeout (in milliseconds)
 ldap_parse_results=Parse the search results ?
 ldap_sample_title=LDAP Request Defaults
 ldap_search_baseobject=Perform baseobject search
 ldap_search_onelevel=Perform onelevel search
 ldap_search_subtree=Perform subtree search
 ldap_secure=Use Secure LDAP Protocol ?
 ldap_testing_title=LDAP Request
 ldapext_sample_title=LDAP Extended Request Defaults
 ldapext_testing_title=LDAP Extended Request
 library=Library
 load=Load
 log_errors_only=Errors
 log_file=Location of log File
 log_function_comment=Additional comment (optional)
 log_function_level=Log level (default INFO) or OUT or ERR
 log_function_string=String to be logged
 log_function_string_ret=String to be logged (and returned)
 log_function_throwable=Throwable text (optional)
 log_only=Log/Display Only:
 log_parser=Name of Log Parser class
 log_parser_cnf_msg=Could not find the class. Please make sure you place your jar file in the /lib directory.
 log_parser_illegal_msg=Could not access the class due to IllegalAccessException.
 log_parser_instantiate_msg=Could not create an instance of the log parser. Please make sure the parser implements LogParser interface.
 log_sampler=Tomcat Access Log Sampler
 log_success_only=Successes
 logic_controller_title=Simple Controller
 login_config=Login Configuration
 login_config_element=Login Config Element
 longsum_param_1=First long to add
 longsum_param_2=Second long to add - further longs can be summed by adding further arguments.
 loop_controller_title=Loop Controller
 looping_control=Looping Control
 lower_bound=Lower Bound
 mail_reader_account=Username:
 mail_reader_all_messages=All
 mail_reader_delete=Delete messages from the server
 mail_reader_folder=Folder:
 mail_reader_header_only=Fetch headers only
 mail_reader_num_messages=Number of messages to retrieve:
 mail_reader_password=Password:
 mail_reader_port=Server Port (optional):
 mail_reader_server=Server Host:
 mail_reader_server_type=Protocol (e.g. pop3, imaps):
 mail_reader_storemime=Store the message using MIME (raw)
 mail_reader_title=Mail Reader Sampler
 mail_sent=Mail sent successfully
 mailer_addressees=Addressee(s): 
 mailer_attributes_panel=Mailing attributes
 mailer_connection_security=Connection security: 
 mailer_error=Couldn't send mail. Please correct any misentries.
 mailer_failure_limit=Failure Limit: 
 mailer_failure_subject=Failure Subject: 
 mailer_failures=Failures: 
 mailer_from=From: 
 mailer_host=Host: 
 mailer_login=Login: 
 mailer_msg_title_error=Error
 mailer_msg_title_information=Information
 mailer_password=Password: 
 mailer_port=Port: 
 mailer_string=E-Mail Notification
 mailer_success_limit=Success Limit: 
 mailer_success_subject=Success Subject: 
 mailer_test_mail=Test Mail
 mailer_title_message=Message
 mailer_title_settings=Mailer settings
 mailer_title_smtpserver=SMTP server
 mailer_visualizer_title=Mailer Visualizer
 match_num_field=Match No. (0 for Random)\: 
 max=Maximum
 maximum_param=The maximum value allowed for a range of values
 md5hex_assertion_failure=Error asserting MD5 sum : got {0} but should have been {1}
 md5hex_assertion_label=MD5Hex
 md5hex_assertion_md5hex_test=MD5Hex to Assert
 md5hex_assertion_title=MD5Hex Assertion
 mechanism=Mechanism
 menu_assertions=Assertions
 menu_close=Close
 menu_collapse_all=Collapse All
 menu_config_element=Config Element
 menu_edit=Edit
 menu_expand_all=Expand All
 menu_fragments=Test Fragment
 menu_generative_controller=Sampler
 menu_listener=Listener
 menu_logger_panel=Log Viewer 
 menu_logic_controller=Logic Controller
 menu_merge=Merge
 menu_modifiers=Modifiers
 menu_non_test_elements=Non-Test Elements
 menu_open=Open
 menu_post_processors=Post Processors
 menu_pre_processors=Pre Processors
 menu_response_based_modifiers=Response Based Modifiers
 menu_search=Search
 menu_search_reset=Reset Search
 menu_tables=Table
 menu_threads=Threads (Users)
 menu_timer=Timer
 menu_toolbar=Toolbar
 metadata=MetaData
 method=Method\:
 mimetype=Mimetype
 minimum_param=The minimum value allowed for a range of values
 minute=minute
 modddn=Old entry name
 modification_controller_title=Modification Controller
 modification_manager_title=Modification Manager
 modify_test=Modify Test
 modtest=Modification test
 module_controller_module_to_run=Module To Run 
 module_controller_title=Module Controller
 module_controller_warning=Could not find module: 
-monitor_equation_active=Active:  (busy/max) > 25%
-monitor_equation_dead=Dead:  no response
-monitor_equation_healthy=Healthy:  (busy/max) < 25%
-monitor_equation_load=Load:  ( (busy / max) * 50) + ( (used memory / max memory) * 50)
-monitor_equation_warning=Warning:  (busy/max) > 67%
-monitor_health_tab_title=Health
-monitor_health_title=Monitor Results (DEPRECATED)
-monitor_is_title=Use as Monitor (DEPRECATED)
-monitor_label_left_bottom=0 %
-monitor_label_left_middle=50 %
-monitor_label_left_top=100 %
-monitor_label_prefix=Connection Prefix
-monitor_label_right_active=Active
-monitor_label_right_dead=Dead
-monitor_label_right_healthy=Healthy
-monitor_label_right_warning=Warning
-monitor_legend_health=Health
-monitor_legend_load=Load
-monitor_legend_memory_per=Memory % (used/total)
-monitor_legend_thread_per=Thread % (busy/max)
-monitor_load_factor_mem=50
-monitor_load_factor_thread=50
-monitor_performance_servers=Servers
-monitor_performance_tab_title=Performance
-monitor_performance_title=Performance Graph
 name=Name\:
 new=New
 newdn=New distinguished name
 next=Next
 no=Norwegian
 notify_child_listeners_fr=Notify Child Listeners of filtered samplers
 number_of_threads=Number of Threads (users)\:
 obsolete_test_element=This test element is obsolete
 once_only_controller_title=Once Only Controller
 opcode=opCode
 open=Open...
 option=Options
 optional_tasks=Optional Tasks
 paramtable=Send Parameters With the Request\:
 password=Password
 paste=Paste
 paste_insert=Paste As Insert
 path=Path\:
 path_extension_choice=Path Extension (use ";" as separator)
 path_extension_dont_use_equals=Do not use equals in path extension (Intershop Enfinity compatibility)
 path_extension_dont_use_questionmark=Do not use questionmark in path extension (Intershop Enfinity compatibility)
 patterns_to_exclude=URL Patterns to Exclude
 patterns_to_include=URL Patterns to Include
 pkcs12_desc=PKCS 12 Key (*.p12)
 pl=Polish
 poisson_timer_delay=Constant Delay Offset (in milliseconds)\:
 poisson_timer_memo=Adds a random delay with a poisson distribution
 poisson_timer_range=Lambda (in milliseconds)\:
 poisson_timer_title=Poisson Random Timer
 port=Port\:
 post_as_parameters=Parameters
 post_body=Body Data
 post_body_raw=Body Data
 post_files_upload=Files Upload
 post_thread_group_title=tearDown Thread Group
 previous=Previous
 property_as_field_label={0}\:
 property_default_param=Default value
 property_edit=Edit
 property_editor.value_is_invalid_message=The text you just entered is not a valid value for this property.\nThe property will be reverted to its previous value.
 property_editor.value_is_invalid_title=Invalid input
 property_name_param=Name of property
 property_returnvalue_param=Return Original Value of property (default false) ?
 property_tool_tip=<html>{0}</html>
 property_undefined=Undefined
 property_value_param=Value of property
 property_visualiser_title=Property Display
 protocol=Protocol [http]\:
 protocol_java_border=Java class
 protocol_java_classname=Classname\:
 protocol_java_config_tile=Configure Java Sample
 protocol_java_test_title=Java Testing
 provider_url=Provider URL
 proxy_assertions=Add Assertions
 proxy_cl_error=If specifying a proxy server, host and port must be given
 proxy_cl_wrong_target_cl=Target Controller is configured to "Use Recording Controller" but no such controller exists, \nensure you add a Recording Controller as child of Thread Group node to start recording correctly
 proxy_content_type_exclude=Exclude\:
 proxy_content_type_filter=Content-type filter
 proxy_content_type_include=Include\:
 proxy_daemon_bind_error=Could not create script recorder - port in use. Choose another port.
 proxy_daemon_error=Could not create script recorder - see log for details
 proxy_daemon_error_from_clipboard=from clipboard
 proxy_daemon_error_not_retrieve=Could not add retrieve
 proxy_daemon_error_read_args=Could not add read arguments from clipboard\:
 proxy_daemon_msg_check_details=Please check the details below when installing the certificate in the browser
 proxy_daemon_msg_created_in_bin=created in JMeter bin directory
 proxy_daemon_msg_install_as_in_doc=You can install it following instructions in Component Reference documentation (see Installing the JMeter CA certificate for HTTPS recording paragraph)
 proxy_daemon_msg_rootca_cert=Root CA certificate\:
 proxy_domains=HTTPS Domains \:
 proxy_domains_dynamic_mode_tooltip=List of domain names for HTTPS url, ex. jmeter.apache.org or wildcard domain like *.apache.org. Use comma as separator. 
 proxy_domains_dynamic_mode_tooltip_java6=To activate this field, use a Java 7+ runtime environment
 proxy_general_settings=Global Settings
 proxy_headers=Capture HTTP Headers
 proxy_prefix_http_sampler_name=Prefix\:
 proxy_regex=Regex matching
 proxy_sampler_settings=HTTP Sampler settings
 proxy_sampler_type=Type\:
 proxy_separators=Add Separators
 proxy_settings_port_error_digits=Only digits allowed
 proxy_settings_port_error_invalid_data=Invalid data
 proxy_target=Target Controller\:
 proxy_test_plan_content=Test plan content
 proxy_title=HTTP(S) Test Script Recorder
 pt_br=Portugese (Brazilian)
 ramp_up=Ramp-Up Period (in seconds)\:
 random_control_title=Random Controller
 random_order_control_title=Random Order Controller
 random_multi_result_source_variable=Source Variable(s) (use | as separator)
 random_multi_result_target_variable=Target Variable
 random_string_chars_to_use=Chars to use for random string generation
 random_string_length=Random string length
 realm=Realm
 record_controller_clear_samples=Clear all the recorded samples
 record_controller_title=Recording Controller
 redo=Redo
 ref_name_field=Reference Name\:
 regex_extractor_title=Regular Expression Extractor
 regex_field=Regular Expression\:
 regex_params_names_field=Parameter names regexp group number
 regex_params_ref_name_field=Regular Expression Reference Name
 regex_params_title=RegEx User Parameters
 regex_params_values_field=Parameter values regex group number
 regex_source=Field to check
 regex_src_body=Body
 regex_src_body_as_document=Body as a Document
 regex_src_body_unescaped=Body (unescaped)
 regex_src_hdrs=Response Headers
 regex_src_hdrs_req=Request Headers
 regex_src_url=URL
 regexfunc_param_1=Regular expression used to search previous sample - or variable.
 regexfunc_param_2=Template for the replacement string, using groups from the regular expression.  Format is $[group]$.  Example $1$.
 regexfunc_param_3=Which match to use.  An integer 1 or greater, RAND to indicate JMeter should randomly choose, A float, or ALL indicating all matches should be used ([1])
 regexfunc_param_4=Between text.  If ALL is selected, the between text will be used to generate the results ([""])
 regexfunc_param_5=Default text.  Used instead of the template if the regular expression finds no matches ([""])
 regexfunc_param_7=Input variable name containing the text to be parsed ([previous sample])
 regexp_render_no_text=Data response result isn't text.
 regexp_tester_button_test=Test
 regexp_tester_field=Regular expression\:
 regexp_tester_title=RegExp Tester
 remote_error_init=Error initialising remote server
 remote_error_starting=Error starting remote server
 remote_exit=Remote Exit
 remote_exit_all=Remote Exit All
 remote_shut=Remote Shutdown
 remote_shut_all=Remote Shutdown All
 remote_start=Remote Start
 remote_start_all=Remote Start All
 remote_stop=Remote Stop
 remote_stop_all=Remote Stop All
 remove=Remove
 remove_confirm_msg=Are you sure you want remove the selected element(s)?
 remove_confirm_title=Confirm remove?
 rename=Rename entry
 report=Report
 report_bar_chart=Bar Chart
 report_bar_graph_url=URL
 report_base_directory=Base Directory
 report_chart_caption=Chart Caption
 report_chart_x_axis=X Axis
 report_chart_x_axis_label=Label for X Axis
 report_chart_y_axis=Y Axis
 report_chart_y_axis_label=Label for Y Axis
 report_line_graph=Line Graph
 report_line_graph_urls=Include URLs
 report_output_directory=Output Directory for Report
 report_page=Report Page
 report_page_element=Page Element
 report_page_footer=Page Footer
 report_page_header=Page Header
 report_page_index=Create Page Index
 report_page_intro=Page Introduction
 report_page_style_url=Stylesheet url
 report_page_title=Page Title
 report_pie_chart=Pie Chart
 report_plan=Report Plan
 report_select=Select
 report_summary=Report Summary
 report_table=Report Table
 report_writer=Report Writer
 report_writer_html=HTML Report Writer
 reportgenerator_top5_error_count=#Errors
 reportgenerator_top5_error_label=Error
 reportgenerator_top5_label=Sample
 reportgenerator_top5_sample_count=#Samples
 reportgenerator_top5_total=Total
 reportgenerator_summary_apdex_apdex=Apdex
 reportgenerator_summary_apdex_samplers=Label
 reportgenerator_summary_apdex_satisfied=T (Toleration threshold)  
 reportgenerator_summary_apdex_tolerated=F (Frustration threshold)
 reportgenerator_summary_errors_count=Number of errors
 reportgenerator_summary_errors_rate_all=% in all samples
 reportgenerator_summary_errors_rate_error=% in errors
 reportgenerator_summary_errors_type=Type of error
 reportgenerator_summary_statistics_count=#Samples
 reportgenerator_summary_statistics_error_count=KO
 reportgenerator_summary_statistics_error_percent=Error %
 reportgenerator_summary_statistics_kbytes=Received KB/sec
 reportgenerator_summary_statistics_sent_kbytes=Sent KB/sec
 reportgenerator_summary_statistics_label=Label
 reportgenerator_summary_statistics_max=Max
 reportgenerator_summary_statistics_mean=Average response time
 reportgenerator_summary_statistics_min=Min
 reportgenerator_summary_statistics_percentile_fmt=%dth pct
 reportgenerator_summary_statistics_throughput=Throughput
 reportgenerator_summary_total=Total
 request_data=Request Data
 reset=Reset
 reset_gui=Reset Gui
 response_save_as_md5=Save response as MD5 hash?
 response_time_distribution_satisfied_label=Requests having \\nresponse time <= {0}ms
 response_time_distribution_tolerated_label= Requests having \\nresponse time > {0}ms and <= {1}ms
 response_time_distribution_untolerated_label=Requests having \\nresponse time > {0}ms
 response_time_distribution_failed_label=Requests in error
 restart=Restart
 resultaction_title=Result Status Action Handler
 resultsaver_addtimestamp=Add timestamp
 resultsaver_errors=Save Failed Responses only
 resultsaver_numberpadlen=Minimum Length of sequence number
 resultsaver_prefix=Filename prefix\:
 resultsaver_skipautonumber=Don't add number to prefix
 resultsaver_skipsuffix=Don't add suffix
 resultsaver_success=Save Successful Responses only
 resultsaver_title=Save Responses to a file
 resultsaver_variable=Variable Name:
 retobj=Return object
 return_code_config_box_title=Return Code Configuration
 reuseconnection=Re-use connection
 revert_project=Revert
 revert_project?=Revert project?
 root=Root
 root_title=Root
 run=Run
 run_threadgroup=Start
 run_threadgroup_no_timers=Start no pauses
 running_test=Running test
 runtime_controller_title=Runtime Controller
 runtime_seconds=Runtime (seconds)
 sample_result_save_configuration=Sample Result Save Configuration
 sample_scope=Apply to:
 sample_scope_all=Main sample and sub-samples
 sample_scope_children=Sub-samples only
 sample_scope_parent=Main sample only
 sample_scope_variable=JMeter Variable
 sampler_label=Label
 sampler_on_error_action=Action to be taken after a Sampler error
 sampler_on_error_continue=Continue
 sampler_on_error_start_next_loop=Start Next Thread Loop
 sampler_on_error_stop_test=Stop Test
 sampler_on_error_stop_test_now=Stop Test Now
 sampler_on_error_stop_thread=Stop Thread
 sample_timeout_memo=Interrupt the sampler if it times out
 sample_timeout_timeout=Sample timeout (in milliseconds)\:
 sample_timeout_title=Sample Timeout
 save=Save
 save?=Save?
 save_all_as=Save Test Plan as
 save_as=Save Selection As...
 save_as_error=More than one item selected!
 save_as_image=Save Node As Image
 save_as_image_all=Save Screen As Image
 save_as_test_fragment=Save as Test Fragment
 save_as_test_fragment_error=One of the selected nodes cannot be put inside a Test Fragment
 save_assertionresultsfailuremessage=Save Assertion Failure Message
 save_assertions=Save Assertion Results (XML)
 save_asxml=Save As XML
 save_bytes=Save received byte count
 save_code=Save Response Code
 save_datatype=Save Data Type
 save_encoding=Save Encoding
 save_fieldnames=Save Field Names (CSV)
 save_filename=Save Response Filename
 save_graphics=Save Graph
 save_hostname=Save Hostname
 save_idletime=Save Idle Time
 save_label=Save Label
 save_latency=Save Latency
 save_connecttime=Save Connect Time
 save_message=Save Response Message
 save_overwrite_existing_file=The selected file already exists, do you want to overwrite it?
 save_requestheaders=Save Request Headers (XML)
 save_responsedata=Save Response Data (XML)
 save_responseheaders=Save Response Headers (XML)
 save_samplecount=Save Sample and Error Counts
 save_samplerdata=Save Sampler Data (XML)
 save_sentbytes=Save sent byte count
 save_subresults=Save Sub Results (XML)
 save_success=Save Success
 save_threadcounts=Save Active Thread Counts
 save_threadname=Save Thread Name
 save_time=Save Elapsed Time
 save_timestamp=Save Time Stamp
 save_url=Save URL
 save_workbench=Save WorkBench
 sbind=Single bind/unbind
 scheduler=Scheduler
 scheduler_configuration=Scheduler Configuration
 scope=Scope
 search=Search
 search_base=Search base
 search_expand=Search & Expand
 search_filter=Search Filter
 search_test=Search Test
 search_text_button_close=Close
 search_text_button_find=Find
 search_text_button_next=Find next
 search_text_chkbox_case=Case sensitive
 search_text_chkbox_regexp=Regular exp.
 search_text_field=Search: 
 search_text_msg_not_found=Text not found
 search_text_title_not_found=Not found
 search_tree_title=Search Tree
 searchbase=Search base
 searchfilter=Search Filter
 searchtest=Search test
 second=second
 secure=Secure
 send_file=Send Files With the Request\:
 send_file_browse=Browse...
 send_file_filename_label=File Path
 send_file_mime_label=MIME Type
 send_file_param_name_label=Parameter Name
 server=Server Name or IP\:
 servername=Servername \:
 session_argument_name=Session Argument Name
 setup_thread_group_title=setUp Thread Group
 should_save=You should save your test plan before running it.  \nIf you are using supporting data files (ie, for CSV Data Set or _StringFromFile), \nthen it is particularly important to first save your test script. \nDo you want to save your test plan first?
 shutdown=Shutdown
 simple_config_element=Simple Config Element
 simple_data_writer_title=Simple Data Writer
 size_assertion_comparator_error_equal=been equal to
 size_assertion_comparator_error_greater=been greater than
 size_assertion_comparator_error_greaterequal=been greater or equal to
 size_assertion_comparator_error_less=been less than
 size_assertion_comparator_error_lessequal=been less than or equal to
 size_assertion_comparator_error_notequal=not been equal to
 size_assertion_comparator_label=Type of Comparison
 size_assertion_failure=The result was the wrong size\: It was {0} bytes, but should have {1} {2} bytes.
 size_assertion_input_error=Please enter a valid positive integer.
 size_assertion_label=Size in bytes\:
 size_assertion_size_test=Size to Assert
 size_assertion_title=Size Assertion
 smime_assertion_issuer_dn=Issuer distinguished name
 smime_assertion_message_position=Execute assertion on message at position
 smime_assertion_not_signed=Message not signed
 smime_assertion_signature=Signature
 smime_assertion_signer=Signer certificate
 smime_assertion_signer_by_file=Certificate file
 smime_assertion_signer_constraints=Check values
 smime_assertion_signer_dn=Signer distinguished name
 smime_assertion_signer_email=Signer email address
 smime_assertion_signer_no_check=No check
 smime_assertion_signer_serial=Serial Number
 smime_assertion_title=SMIME Assertion
 smime_assertion_verify_signature=Verify signature
 smtp_additional_settings=Additional Settings
 smtp_attach_file=Attach file(s):
 smtp_attach_file_tooltip=Separate multiple files with ";"
 smtp_auth_settings=Auth settings
 smtp_bcc=Address To BCC:
 smtp_cc=Address To CC:
 smtp_default_port=(Defaults: SMTP:25, SSL:465, StartTLS:587)
 smtp_eml=Send .eml:
 smtp_enabledebug=Enable debug logging?
 smtp_enforcestarttls=Enforce StartTLS
 smtp_enforcestarttls_tooltip=<html><b>Enforces</b> the server to use StartTLS.<br />If not selected and the SMTP-Server doesn't support StartTLS, <br />a normal SMTP-Connection will be used as fallback instead. <br /><i>Please note</i> that this checkbox creates a file in "/tmp/", <br />so this will cause problems under windows.</html>
 smtp_from=Address From:
 smtp_header_add=Add Header
 smtp_header_name=Header Name
 smtp_header_remove=Remove
 smtp_header_value=Header Value
 smtp_mail_settings=Mail settings
 smtp_message=Message:
 smtp_message_settings=Message settings
 smtp_messagesize=Calculate message size
 smtp_password=Password:
 smtp_plainbody=Send plain body (i.e. not multipart/mixed)
 smtp_replyto=Address Reply-To:
 smtp_sampler_title=SMTP Sampler
 smtp_security_settings=Security settings
 smtp_server=Server:
 smtp_server_connection_timeout=Connection timeout:
 smtp_server_port=Port:
 smtp_server_settings=Server settings
 smtp_server_timeout=Read timeout:
 smtp_server_timeouts_settings=Timeouts (milliseconds)
 smtp_subject=Subject:
 smtp_suppresssubj=Suppress Subject Header
 smtp_timestamp=Include timestamp in subject
 smtp_to=Address To:
 smtp_trustall=Trust all certificates
 smtp_trustall_tooltip=<html><b>Enforces</b> JMeter to trust all certificates, whatever CA it comes from.</html>
 smtp_truststore=Local truststore:
 smtp_truststore_tooltip=<html>The pathname of the truststore.<br />Relative paths are resolved against the current directory.<br />Failing that, against the directory containing the test script (JMX file)</html>
 smtp_useauth=Use Auth
 smtp_usenone=Use no security features
 smtp_username=Username:
 smtp_usessl=Use SSL
 smtp_usestarttls=Use StartTLS
 smtp_usetruststore=Use local truststore
 smtp_usetruststore_tooltip=<html>Allows JMeter to use a local truststore.</html>
 soap_action=Soap Action
 soap_data_title=Soap/XML-RPC Data
 soap_sampler_file_invalid=Filename references a missing or unreadable file\:
 soap_sampler_title=SOAP/XML-RPC Request
 soap_send_action=Send SOAPAction: 
 solinger=SO_LINGER:
 split_function_separator=String to split on. Default is , (comma).
 split_function_string=String to split
 ssl_alias_prompt=Please type your preferred alias
 ssl_alias_select=Select your alias for the test
 ssl_alias_title=Client Alias
 ssl_error_title=Key Store Problem
 ssl_pass_prompt=Please type your password
 ssl_pass_title=KeyStore Password
 ssl_port=SSL Port
 sslmanager=SSL Manager
 start=Start
 start_no_timers=Start no pauses
 starttime=Start Time
 stop=Stop
 stopping_test=Shutting down all test threads. You can see number of active threads in the upper right corner of GUI. Please be patient. 
 stopping_test_failed=One or more test threads won't exit; see log file.
 stopping_test_host=Host
 stopping_test_title=Stopping Test
 string_from_file_encoding=File encoding if not the platform default (opt)
 string_from_file_file_name=Enter path (absolute or relative) to file
 string_from_file_seq_final=Final file sequence number (opt)
 string_from_file_seq_start=Start file sequence number (opt)
 summariser_title=Generate Summary Results
 summary_report=Summary Report
 switch_controller_label=Switch Value
 switch_controller_title=Switch Controller
 system_sampler_stderr=Standard error (stderr):
 system_sampler_stdin=Standard input (stdin):
 system_sampler_stdout=Standard output (stdout):
 system_sampler_title=OS Process Sampler
 table_visualizer_bytes=Bytes
 table_visualizer_latency=Latency
 table_visualizer_connect=Connect Time(ms)
 table_visualizer_sample_num=Sample #
 table_visualizer_sample_time=Sample Time(ms)
 table_visualizer_sent_bytes=Sent Bytes
 table_visualizer_start_time=Start Time
 table_visualizer_status=Status
 table_visualizer_success=Success
 table_visualizer_thread_name=Thread Name
 table_visualizer_warning=Warning
 target_server=Target Server
 tcp_classname=TCPClient classname\:
 tcp_config_title=TCP Sampler Config
 tcp_nodelay=Set NoDelay
 tcp_port=Port Number\:
 tcp_request_data=Text to send
 tcp_sample_title=TCP Sampler
 tcp_timeout=Timeout (milliseconds)\:
 teardown_on_shutdown=Run tearDown Thread Groups after shutdown of main threads
 template_choose=Select Template
 template_create_from=Create
 template_field=Template\:
 template_load?=Load template ?
 template_menu=Templates...
 template_merge_from=Merge
 template_reload=Reload templates
 template_title=Templates
 test=Test
 test_action_action=Action
 test_action_duration=Duration (milliseconds)
 test_action_pause=Pause
 test_action_restart_next_loop=Go to next loop iteration
 test_action_stop=Stop
 test_action_stop_now=Stop Now
 test_action_target=Target
 test_action_target_test=All Threads
 test_action_target_thread=Current Thread
 test_action_title=Test Action
 test_configuration=Test Configuration
 test_fragment_title=Test Fragment
 test_plan=Test Plan
 test_plan_classpath_browse=Add directory or jar to classpath
 testconfiguration=Test Configuration
 testplan.serialized=Run Thread Groups consecutively (i.e. run groups one at a time)
 testplan_comments=Comments\:
 testt=Test
 textbox_cancel=Cancel
 textbox_close=Close
 textbox_save_close=Save & Close
 textbox_title_edit=Edit text
 textbox_title_view=View text
 textbox_tooltip_cell=Double click to view/edit
 thread_delay_properties=Thread Delay Properties
 thread_group_title=Thread Group
 thread_properties=Thread Properties
 threadgroup=Thread Group
 throughput_control_bynumber_label=Total Executions
 throughput_control_bypercent_label=Percent Executions
 throughput_control_perthread_label=Per User
 throughput_control_title=Throughput Controller
 throughput_control_tplabel=Throughput
 time_format=Format string for SimpleDateFormat (optional)
 timelim=Time limit
 timeout_config_box_title=Timeout configuration
 timeout_title=Timeout (ms)
 toggle=Toggle
 toolbar_icon_set_not_found=The file description of toolbar icon set is not found. See logs.
 total_threads_tooltip=Total number of threads to run
 tr=Turkish
 transaction_controller_include_timers=Include duration of timer and pre-post processors in generated sample
 transaction_controller_parent=Generate parent sample
 transaction_controller_title=Transaction Controller
 transform_into_variable=Replace values with variables
 unbind=Thread Unbind
 undo=Undo
 unescape_html_string=String to unescape
 unescape_string=String containing Java escapes
 uniform_timer_delay=Constant Delay Offset (in milliseconds)\:
 uniform_timer_memo=Adds a random delay with a uniform distribution
 uniform_timer_range=Random Delay Maximum (in milliseconds)\:
 uniform_timer_title=Uniform Random Timer
 up=Up
 update=Update
 update_per_iter=Update Once Per Iteration
 upload=File Upload
 upper_bound=Upper Bound
 url=URL
 url_config_get=GET
 url_config_http=HTTP
 url_config_https=HTTPS
 url_config_post=POST
 url_config_protocol=Protocol\:
 url_config_title=HTTP Request Defaults
 url_full_config_title=UrlFull Sample
 url_multipart_config_title=HTTP Multipart Request Defaults
 urldecode_string=String with URL encoded chars to decode
 urlencode_string=String to encode in URL encoded chars
 use_custom_dns_resolver=Use custom DNS resolver
 use_expires=Use Cache-Control/Expires header when processing GET requests
 use_keepalive=Use KeepAlive
 use_multipart_for_http_post=Use multipart/form-data for POST
 use_multipart_mode_browser=Browser-compatible headers
 use_recording_controller=Use Recording Controller
 use_system_dns_resolver=Use system DNS resolver
 user=User
 user_defined_test=User Defined Test
 user_defined_variables=User Defined Variables
 user_param_mod_help_note=(Do not change this.  Instead, modify the file of that name in JMeter's /bin directory)
 user_parameters_table=Parameters
 user_parameters_title=User Parameters
 userdn=Username
 username=Username
 userpw=Password
 validate_threadgroup=Validate
 value=Value
 value_to_quote_meta=Value to escape from ORO Regexp meta chars
 var_name=Reference Name
 variable_name_param=Name of variable (may include variable and function references)
 view_graph_tree_title=View Graph Tree
 view_results_assertion_error=Assertion error: 
 view_results_assertion_failure=Assertion failure: 
 view_results_assertion_failure_message=Assertion failure message: 
 view_results_autoscroll=Scroll automatically?
 view_results_childsamples=Child samples?
 view_results_datatype=Data type ("text"|"bin"|""): 
 view_results_desc=Shows the text results of sampling in tree form
 view_results_error_count=Error Count: 
 view_results_fields=fields:
 view_results_in_table=View Results in Table
 view_results_latency=Latency: 
 view_results_connect_time=Connect Time: 
 view_results_load_time=Load time: 
 view_results_render=Render:
 view_results_render_browser=Browser
 view_results_render_document=Document
 view_results_render_html=HTML
 view_results_render_html_embedded=HTML (download resources)
 view_results_render_html_formatted=HTML Source Formatted
 view_results_render_json=JSON
 view_results_render_text=Text
 view_results_render_xml=XML
 view_results_request_headers=Request Headers:
 view_results_response_code=Response code: 
 view_results_response_headers=Response headers:
 view_results_response_message=Response message: 
 view_results_response_missing_tika=Missing tika-app.jar in classpath. Unable to convert to plain text this kind of document.\nDownload the tika-app-x.x.jar file from http://tika.apache.org/download.html\nAnd put the file in <JMeter>/lib directory.
 view_results_response_partial_message=Start of message:
 view_results_response_too_large_message=Response too large to be displayed. Size: 
 view_results_sample_count=Sample Count: 
 view_results_sample_start=Sample Start: 
 view_results_search_pane=Search pane
 view_results_sent_bytes=Sent bytes:
 view_results_size_body_in_bytes=Body size in bytes: 
 view_results_size_headers_in_bytes=Headers size in bytes: 
 view_results_size_in_bytes=Size in bytes: 
 view_results_tab_assertion=Assertion result
 view_results_tab_request=Request
 view_results_tab_response=Response data
 view_results_tab_sampler=Sampler result
 view_results_table_fields_key=Additional field
 view_results_table_fields_value=Value
 view_results_table_headers_key=Response header
 view_results_table_headers_value=Value
 view_results_table_request_headers_key=Request header
 view_results_table_request_headers_value=Value
 view_results_table_request_http_cookie=Cookie
 view_results_table_request_http_host=Host
 view_results_table_request_http_method=Method
 view_results_table_request_http_nohttp=No HTTP Sample
 view_results_table_request_http_path=Path
 view_results_table_request_http_port=Port
 view_results_table_request_http_protocol=Protocol
 view_results_table_request_params_key=Parameter name
 view_results_table_request_params_value=Value
 view_results_table_request_raw_nodata=No data to display
 view_results_table_request_tab_http=HTTP
 view_results_table_request_tab_raw=Raw
 view_results_table_result_tab_parsed=Parsed
 view_results_table_result_tab_raw=Raw
 view_results_thread_name=Thread Name: 
 view_results_title=View Results
 view_results_tree_title=View Results Tree
 warning=Warning!
 web_cannot_convert_parameters_to_raw=Cannot convert parameters to Body Data \nbecause one of the parameters has a name
 web_cannot_switch_tab=You cannot switch because data cannot be converted\n to target Tab data, empty data to switch
 web_parameters_lost_message=Switching to Body Data will convert the parameters.\nParameter table will be cleared when you select\nanother node or save the test plan.\nOK to proceeed?
 web_proxy_server_title=Proxy Server
 web_request=HTTP Request
 web_server=Web Server
 web_server_client=Client implementation:
 web_server_domain=Server Name or IP\:
 web_server_port=Port Number\:
 web_server_timeout_connect=Connect:
 web_server_timeout_response=Response:
 web_server_timeout_title=Timeouts (milliseconds)
 web_testing2_title=HTTP Request HTTPClient
 web_testing_basic=Basic
 web_testing_advanced=Advanced
 web_testing_concurrent_download=Parallel downloads. Number:
 web_testing_embedded_url_pattern=URLs must match\:
 web_testing_retrieve_images=Retrieve All Embedded Resources
 web_testing_retrieve_title=Embedded Resources from HTML Files
 web_testing_source_ip=Source address
 web_testing_source_ip_device=Device
 web_testing_source_ip_device_ipv4=Device IPv4
 web_testing_source_ip_device_ipv6=Device IPv6
 web_testing_source_ip_hostname=IP/Hostname
 web_testing_title=HTTP Request
 while_controller_label=Condition (function or variable)
 while_controller_title=While Controller
 workbench_title=WorkBench
 xml_assertion_title=XML Assertion
 xml_download_dtds=Fetch external DTDs
 xml_namespace_button=Use Namespaces
 xml_tolerant_button=Use Tidy (tolerant parser)
 xml_validate_button=Validate XML
 xml_whitespace_button=Ignore Whitespace
 xmlschema_assertion_label=File Name:
 xmlschema_assertion_title=XML Schema Assertion
 xpath_assertion_button=Validate
 xpath_assertion_check=Check XPath Expression
 xpath_assertion_error=Error with XPath
 xpath_assertion_failed=Invalid XPath Expression
 xpath_assertion_label=XPath
 xpath_assertion_negate=True if nothing matches
 xpath_assertion_option=XML Parsing Options
 xpath_assertion_test=XPath Assertion 
 xpath_assertion_tidy=Try and tidy up the input
 xpath_assertion_title=XPath Assertion
 xpath_assertion_valid=Valid XPath Expression
 xpath_assertion_validation=Validate the XML against the DTD
 xpath_assertion_whitespace=Ignore whitespace
 xpath_expression=XPath expression to match against
 xpath_extractor_fragment=Return entire XPath fragment instead of text content?
 xpath_extractor_query=XPath query:
 xpath_extractor_title=XPath Extractor
 xpath_file_file_name=XML file to get values from 
 xpath_tester=XPath Tester
 xpath_tester_button_test=Test
 xpath_tester_field=XPath expression
 xpath_tester_fragment=Return entire XPath fragment instead of text content?
 xpath_tester_no_text=Data response result isn't text.
 xpath_tester_title=XPath Tester
 xpath_tidy_quiet=Quiet
 xpath_tidy_report_errors=Report errors
 xpath_tidy_show_warnings=Show warnings
 you_must_enter_a_valid_number=You must enter a valid number
 zh_cn=Chinese (Simplified)
 zh_tw=Chinese (Traditional)
diff --git a/src/core/org/apache/jmeter/resources/messages_de.properties b/src/core/org/apache/jmeter/resources/messages_de.properties
index d8531ebb3..757344cfc 100644
--- a/src/core/org/apache/jmeter/resources/messages_de.properties
+++ b/src/core/org/apache/jmeter/resources/messages_de.properties
@@ -1,560 +1,542 @@
 #   Licensed to the Apache Software Foundation (ASF) under one or more
 #   contributor license agreements.  See the NOTICE file distributed with
 #   this work for additional information regarding copyright ownership.
 #   The ASF licenses this file to You under the Apache License, Version 2.0
 #   (the "License"); you may not use this file except in compliance with
 #   the License.  You may obtain a copy of the License at
 # 
 #       http://www.apache.org/licenses/LICENSE-2.0
 # 
 #   Unless required by applicable law or agreed to in writing, software
 #   distributed under the License is distributed on an "AS IS" BASIS,
 #   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 #   See the License for the specific language governing permissions and
 #   limitations under the License.
 
 about=\u00DCber Apache JMeter
 add=Hinzuf\u00FCgen
 add_as_child=Als ein Kind hinzuf\u00FCgen
 add_parameter=Variable hinzuf\u00FCgen
 add_pattern=Muster hinzuf\u00FCgen\:
 add_test=Test hinzuf\u00FCgen
 add_user=Benutzer hinzuf\u00FCgen
 add_value=Wert hinzuf\u00FCgen
 addtest=Test hinzuf\u00FCgen
 aggregate_graph=Statistischer Graph
 aggregate_graph_column=Spalte
 aggregate_graph_display=Graphen anzeigen
 aggregate_graph_height=H\u00F6he
 aggregate_graph_max_length_xaxis_label=Maximale L\u00E4nge des x-Achsen Bezeichners
 aggregate_graph_ms=Millisekunden
 aggregate_graph_response_time=Reaktionszeit
 aggregate_graph_save=Graphen speichern
 aggregate_graph_save_table=Tabellen Daten speichern
 aggregate_graph_save_table_header=Tabellen Kopf speichern
 aggregate_graph_title=Graph
 aggregate_graph_user_title=Titel f\u00FCr den Graphen
 aggregate_graph_width=Breite
 aggregate_report=Report
 aggregate_report_bandwidth=KB/sek
 aggregate_report_count=Anz. der Proben
 aggregate_report_error=Fehler
 aggregate_report_error%=% Fehler
 aggregate_report_median=Mittel
 aggregate_report_rate=Durchsatz
 aggregate_report_total_label=Gesamt
 als_message=Hinweis\: Der Zugriff-Log Parser ist allgmein gehalten. Es ist m\u00F6glich ein Plugin zu erstellen.
 als_message2=Eigener Parser. Implementieren sie hierzu "LogParser" und f\u00FCgen sie es als .jar hinzu
 analyze=Analysiere Daten Datei...
 appearance=Aussehen (Look & Feel)
 argument_must_not_be_negative=Der Wert darf nicht negativ sein\!
 assertion_assume_success=Status ignorieren
 assertion_code_resp=Antwort-Code (Response-Code)
 assertion_contains=Enth\u00E4lt
 assertion_equals=Gleicht
 assertion_headers=Antwort-Header (Response-Header)
 assertion_matches=Entsprechungen
 assertion_message_resp=Antwort-Message
 assertion_not=Nicht
 assertion_pattern_match_rules=Regeln f\u00FCr passende Muster
 assertion_patterns_to_test=Zu testende(s) Muster
 assertion_resp_field=Zu testendes Antwort-Feld (Response-Feld)
 assertion_substring=Teilzeichenkette (Substring)
 assertion_text_resp=Text-Antwort (Text-Response)
 assertion_textarea_label=Behauptungen\:
 assertion_title=Versicherte Anwort
 assertion_url_samp=URL gesampled
 assertion_visualizer_title=Versicherungs Erebnis
 attribute=Attribut
 attrs=Attribute
 auth_manager_title=HTTP Authorisierungs Manager
 auths_stored=Im Authorization Manager gespeicherte Authorisierungen
 average=Durchschnitt
 average_bytes=Durchschnittliche Bytes
 browse=Datei laden...
 bsf_script=Auszuf\u00FChrendes Script (Variablen\: ctx vars props SampleResult sampler log Label FileName Parameters args[] OUT)
 bsf_script_file=Auszuf\u00FChrendes Script
 bsf_script_language=Scriptsprache
 bsf_script_parameters=An das Script bzw. die Script-Datei zu \u00FCbergebende Parameter
 bsh_assertion_script=Script (untenstehende Variablen sind definiert)
 bsh_assertion_title=BeanShell Behauptung
 bsh_function_expression=Auszuwertender Ausdruck
 bsh_script=Script (untenstehende Variablen sind definiert)
 bsh_script_file=Script-Datei
 bsh_script_variables=Folgende Variablen wurden f\u00FCr das Script definiert\:\nSampleResult, ResponseCode, ResponseMessage, IsSuccess, Label, FileName, ctx, vars, props, log
 busy_testing=Ich bin mit dem Testen besch\u00E4ftigt, bitte stoppen sie den Test bevor sie die Einstellungen \u00E4ndern.
 cache_session_id=Session ID zwischenspeichern?
 cancel=Abbrechen
 cancel_exit_to_save=Es gibt Tests die noch nicht gespeichert wurden. M\u00F6chten sie diese vor dem Beenden speichern?
 cancel_new_to_save=Es gibt Tests die noch nicht gespeichert wurden. M\u00F6chten sie diese vor dem Bereinigen speichern?
 cancel_revert_project=Es gibt Tests die noch nicht gespeichert wurden. M\u00F6chten sie zum zuletzt gespeicherten Testplan zur\u00FCck gehen?
 choose_function=W\u00E4hlen Sie eine Funktion
 choose_language=W\u00E4hlen sie eine Sprache
 clear=L\u00F6schen
 clear_all=Alle L\u00F6schen
 clear_cookies_per_iter=Cookies bei jedem Durchgang l\u00F6schen?
 column_delete_disallowed=Das l\u00F6schen dieser Spalte ist nicht erlaubt
 column_number=Spaltennummer der CSV Datei file | next | *alias
 compare=Vergleichen
 comparefilt=Vergleichsfilter
 config_element=Konfigurations Element
 config_save_settings=Konfigurieren
 constant_throughput_timer_memo=Geben sie eine Pause zwischen den Proben an um einen konstanten Durchsatz zu gew\u00E4hrleisten
 constant_timer_delay=Thread-Pause (in Millisekunden)
 constant_timer_memo=Geben sie eine Pause zwischen den Proben an
 constant_timer_title=Konstanter Timer
 content_encoding=Content Kodierung\:
 cookie_manager_policy=Cookie Richtlinie
 cookies_stored=Anzahl der gespeicherten Cookies im Cookie Manager
 copy=Kopieren
 counter_config_title=Z\u00E4hler (Counter)
 counter_per_user=Z\u00E4hler (Counter) f\u00FCr jeden Benutzer einzeln f\u00FChren
 countlim=Gr\u00F6\u00DFen-Beschr\u00E4nkung
 csvread_file_file_name=CVS Datei aus der die Werte gelesen werden | *alias
 cut=Ausschneiden
 cut_paste_function=Kopieren und Einf\u00FCgen des Funktions Strings
 database_conn_pool_max_usage=Maximale Auslastung jeder Verbindung\:
 database_conn_pool_props=Datenbank Verbindungs-Pool\:
 database_conn_pool_size=Anzahl der Verbindungen im Pool\:
 database_conn_pool_title=Vorgaben zum JDBC Datenbank Verbindungs Pool
 database_driver_class=Treiber-Klasse\:
 database_login_title=JDBC Datenbank Login Vorgabe
 database_sql_query_string=SQL Abfrage\:
 database_sql_query_title=Vorgaben zur JDBC SQL Abfrage
 database_testing_title=JDBC Anfrage
 database_url_jdbc_props=Database URL und JDBC Treiber
 de=Deutsch
 debug_off=Debugging deaktivieren
 debug_on=Debugging aktivieren
 default_parameters=Standard Parameter
 default_value_field=Vorgabe-Wert\:
 delay=Pause zu Beginn (Sekunden)
 delete=L\u00F6schen
 delete_parameter=L\u00F6sche Variable
 delete_test=Test L\u00F6schen
 delete_user=Benutzer L\u00F6schen
 deltest=L\u00F6sch-Test
 deref=Dereferenzierungs Aliasse
 disable=Deaktivieren
 distribution_graph_title=Verteilungs-Graph (Alpha)
 distribution_note1=Der Graph wird mit jeder 10. Probe aktualisiert
 done=Fertig
 duration=Dauer (Sekunden)
 duration_assertion_duration_test=Dauer der Aufrechterhaltung
 duration_assertion_failure=Die Operation dauerte zu lang\: es wurden {0} Millisekunden ben\u00F6tigt, h\u00E4tte aber maximal {1} Millisekunden dauern d\u00FCrfen.
 duration_assertion_input_error=Geben Sie bitte einen g\u00FCltigen, positive Ganzzahl-Wert ein.
 duration_assertion_label=Dauer in Millisekunden
 duration_assertion_title=Aufrechterhaltungs-Dauer
 edit=Bearbeiten
 email_results_title=Ergebnisse per eMail verschicken
 en=Englisch
 enable=Aktivieren
 encode?=Encodieren?
 encoded_value=URL-Encodierter Wert
 endtime=End-Zeitpunkt
 entry_dn=Ausgangs DN
 entrydn=Ausgangs DN
 error_loading_help=Fehler beim laden der Hilfe-Seite
 error_occurred=Es ist ein Fehler aufgetreten
 error_title=Fehler
 es=Spanisch
 eval_name_param=Ein Ausdruck der eine Variable und Funktions-Referenz enth\u00E4lt
 evalvar_name_param=Variablenname
 example_data=Beispieldaten
 example_title=Beispiel Proben
 exit=Beenden
 expiration=Verfall
 field_name=Feldname
 file=Datei
 file_already_in_use=Die Datei ist bereits ge\u00F6ffnet
 file_visualizer_append=An eine existierende Daten-Datei anh\u00E4ngen 
 file_visualizer_auto_flush=Nach jeder Daten-Probe bereinigen (Flush)
 file_visualizer_browse=Datei laden...
 file_visualizer_close=Schliessen
 file_visualizer_file_options=Datei Optionen
 file_visualizer_filename=Dateinamen eingeben, oder eine existierende Datei ausw\u00E4hlen.
 file_visualizer_flush=Bereinigen
 file_visualizer_missing_filename=Kein Ausgabe Dateiname angegeben.
 file_visualizer_open=\u00D6ffnen
 file_visualizer_output_file=Schreibe alle Daten in eine Datei
 file_visualizer_submit_data=Einschliesslich \u00FCbermittelter Daten
 file_visualizer_title=Datei Reporter
 file_visualizer_verbose=Umfangreiche Ausgabe (Verbose)
 filename=Dateiname
 follow_redirects=Folge Redirects
 follow_redirects_auto=Automatisch Redirects folgen
 foreach_input=Prefix der Eingabe-Variable
 foreach_output=Name der Ausgabe-Variable
 foreach_use_separator=Trennzeichen "_" vor jeder Nummer einf\u00FCgen?
 format=Zahlenformat
 fr=Franz\u00F6sisch
 ftp_binary_mode=Bin\u00E4r-Modus verwenden?
 ftp_local_file=Lokale Datei\:
 ftp_remote_file=Entfernte Datei
 ftp_sample_title=Vorgaben zum FTP Request
 ftp_save_response_data=Datei in Antwort speichern?
 ftp_testing_title=FTP Anfrage
 function_dialog_menu_item=Funktions Hilfe-Dialog
 function_helper_title=Funktions Hilfe
 function_name_param=Name der Variablen, in der die Ergebnisse abgelegt werden sollen (ben\u00F6tigt)
 function_name_paropt=Name der Variablen, in der die Ergebnisse abgelegt werden sollen (optional)
 function_params=Funktions Parameter
 functional_mode=Funktionaler Test Mode
 functional_mode_explanation=Diese Funktion f\u00FChrt zu betr\u00E4chtlichen Performanceverlusten.
 gaussian_timer_delay=Konstante Pause (in Millisekunden)
 gaussian_timer_memo=Zus\u00E4tzliche Pause zur Gauss'schen Verteilung
 gaussian_timer_range=Abweichung (in Millisekunden)
 gaussian_timer_title=Gauss'scher Zufalls-Zeitgeber
 generate=Generiere
 generator=Name der Erzeuger-Klasse
 generator_cnf_msg=Kann die Erzeuger-Klasse (Generator) nicht finden. Vergewissern sie sich, dass die das .jar Archiv in das /lib Verzeichnis gelegt haben.
 generator_illegal_msg=Konnte wegen einer "IllegalAcessException" nicht auf die Erzeuger-Klasse (Generator) zugreifen.
 generator_instantiate_msg=Konnte keine Instanz der Erzeuger-Klasse ertsllen. Stellen sie sicher, dass der Erzeuger das "Generator"-Interface implementiert\!
 graph_choose_graphs=Anzuzeigende Graphen
 graph_full_results_title=Vollst\u00E4ndige Ergebnisse
 graph_results_average=Durchschnitt
 graph_results_data=Daten
 graph_results_deviation=Abweichung
 graph_results_latest_sample=Letzte Probe
 graph_results_median=Mittel
 graph_results_ms=Millisekunden (ms)
 graph_results_no_samples=Anzahl der Proben
 graph_results_throughput=Durchsatz
 graph_results_title=Ergebnisse
 grouping_add_separators=Zwischen den Gruppen Trennzeichen einf\u00FCgen
 grouping_in_controllers=Jede Gruppe in einen neuen Controller legen
 grouping_mode=Gruppierung
 grouping_no_groups=Sampler nicht gruppieren
 grouping_store_first_only=Nur den ersten Sampler jeder Gruppe speichern
 headers_stored=Gespeicherte Header im Header Manager
 help=Hilfe
 help_node=Wof\u00FCr ist das?
 html_assertion_file=Schreibe JTidy Bericht in eine Datei
 html_assertion_label=HTML Bericht
 html_assertion_title=Titel des HTML Bericht
 http_url_rewriting_modifier_title=HTTP URL Re-writing Bezeichner
 http_user_parameter_modifier=HTTP User Parameter Bezeichner
 httpmirror_title=HTTP Spiegel
 if_controller_evaluate_all=F\u00FCr alle Unterelemente auswerten?
 if_controller_label=Bedingung (Javascript)
 if_controller_title=If-Controller
 ignore_subcontrollers=Ignoriere Sub-Controller Bl\u00F6cke
 include_controller=Controller einschlie\u00DFen
 include_equals=Gleichheitszeichen mit einbeziehen?
 include_path=Test-Plan mit einbeziehen?
 increment=Zunahme
 infinite=endlos Wiederholen
 insert_after=Dahinter einf\u00FCgen
 insert_before=Davor einf\u00FCgen
 insert_parent=Dar\u00FCber Einf\u00FCgen
 interleave_control_title=Controller \u00FCberlagern
 intsum_param_1=Erster Ganzzahl Wert (int)
 intsum_param_2=Zweiter Ganzzahl Wert (int). Weitere Werte k\u00F6nnen durch Angabe weiterer Argumente addiert werden.
 invalid_data=Ung\u00FCltige Daten
 invalid_mail=Fehler beim senden der E-Mail
 invalid_mail_address=Eine oder mehrere fehlerhafte E-Mail Adressen gefunden
 invalid_mail_server=Probleme beim Verbinden mit dem Mail-Server (siehe JMeter Log-Datei)
 invalid_variables=Ung\u00FCltige Variablen
 iteration_counter_arg_1="TRUE" damit jeder Benutzer einen eingenen Z\u00E4hler hat. "FALSE" f\u00FCr einen globalen Z\u00E4hler.
 iterator_num=Anzahl der Wiederholungen\:
 jar_file=.jar Dateien
 java_request=Java Anfrage (Request)
 java_request_defaults=Java Anfrage (Request) Vorgabe
 javascript_expression=Zu evaluierender JavaScript Ausdruck
 jexl_expression=Auszuwertender JEXL Ausdruck
 jms_auth_required=Ben\u00F6tigt
 jndi_config_title=JNDI Konfiguration
 jndi_url_jndi_props=JNDI Eigenschaften
 load=Laden
 log_errors_only=Fehler
 log_file=Ort der Log-Datei
 log_function_comment=Zus\u00E4tzliche Kommentare (optional)
 log_function_level=Log-Level "INFO" (Vorgabe), "OUT" oder "ERR"
 log_function_string=Zu loggende Zeichenkette
 log_function_string_ret=Zu loggende (und zur\u00FCckzugebende) Zeichenkette
 log_function_throwable="Throwable" Test (optional)
 log_only=Nur Loggen/Anzeigen\:
 log_parser=Name der Log-Parser Klasse
 log_parser_cnf_msg=Kann die Klasse nicht finden. Vergewissern sie sich, dass die das .jar Archiv in das /lib Verzeichnis gelegt haben.
 log_parser_illegal_msg=Konnte aufgrund einer "IllegalAcessException" nicht auf die Klasse zugreifen.
 log_parser_instantiate_msg=Konnte keine Instanz der Log-Parsers erstellen. Stellen sie sicher, dass der Erzeuger das "LogParser"-Interface implementiert\!
 log_sampler=Tomcat Zugriffs-Log Sampler
 log_success_only=Erfolge
 logic_controller_title=Einfacher Controller
 login_config=Login Konfiguration
 login_config_element=Login Konfigurations Element
 longsum_param_1=Erster long-Wert
 longsum_param_2=Zweiter long-Wert. Durch weitere Parameter k\u00F6nnen zus\u00E4tzliche long-Werte hinzugef\u00FCgt werden
 loop_controller_title=Schleifen-Controller (Loop Controller)
 looping_control=Wiederholungs-Control
 lower_bound=Untere Grenze
 mail_reader_account=Benutzername\:
 mail_reader_all_messages=Alle
 mail_reader_delete=Nachrichten vom Server l\u00F6schen
 mail_reader_folder=Verzeichnis\:
 mail_reader_num_messages=Anzahl der zu ladenen Nachrichten\:
 mail_reader_password=Passwort\:
 mail_reader_server_type=Server-Typ\:
 mail_sent=Mail erfolgreich gesendet
 mailer_attributes_panel=Mail Eigenschaften
 mailer_error=Konnte die Mail nicht senden. Bitte korrigieren Sie jede fehlerhafte Eingabe.
 mailer_visualizer_title=Mailer-Visualisierung
 maximum_param=Der maximale Wert welcher f\u00FCr einen Wertebereich erlaubt ist
 md5hex_assertion_failure=Fehler beim \u00FCberpr\u00FCfen der MD5 Summe\: {0} erhalten, sollte {1} sein
 md5hex_assertion_md5hex_test=Zu pr\u00FCfender MD5 Hex String
 md5hex_assertion_title=MD5 Hex \u00DCberpr\u00FCfung
 mechanism=Mechanismus
 menu_assertions=\u00DCberpr\u00FCfung
 menu_close=Schlie\u00DFen
 menu_collapse_all=Alle schlie\u00DFen
 menu_config_element=Konfigurations Element
 menu_edit=Editieren
 menu_expand_all=Alle \u00F6ffnen
 menu_logic_controller=Logik-Controller
 menu_merge=Zusammenf\u00FCgen
 menu_modifiers=Modifizierer
 menu_non_test_elements=Nicht-Test Elemente
 menu_open=\u00D6ffnen
 menu_post_processors=Post-Processors
 menu_pre_processors=Pre-Processors
 menu_response_based_modifiers=Antwort-Basierter Modifizierer
 menu_timer=Zeitgeber (Timer)
 method=Methode\:
 minimum_param=Der minimale Wert welcher f\u00FCr einen Wertebereich erlaubt ist
 minute=Minute
 modddn=Alter Name
 modification_controller_title=Modifikations-Controller
 modification_manager_title=Modifikations-Manager
 modify_test=Test \u00E4ndern
 modtest=\u00C4nderungs-Test
 module_controller_module_to_run=Auszurufendes Modul
 module_controller_title=Modul-Controller
 module_controller_warning=Konnte Modul nicht finden\:
-monitor_equation_active=Aktiv\: (aktiv/maximum) > 25%
-monitor_equation_dead=Abgestoben\: keine Antwort
-monitor_equation_healthy=Gut\: (aktiv/maximum) < 25%
-monitor_equation_load=Last\: ((aktiv/mamimum)*50) + ((genutzer Speicher/maximaler Speicher)*50)
-monitor_equation_warning=Warnung\: (aktiv/maximum) > 67%
-monitor_health_tab_title=Gut
-monitor_health_title=Ergebnisse \u00DCberwachen
-monitor_is_title=Als \u00DCberwacher (Monitor) benutzen
-monitor_label_right_active=Aktiv
-monitor_label_right_dead=Abgestorben
-monitor_label_right_healthy=Gut
-monitor_label_right_warning=Warnung
-monitor_legend_health=Gut
-monitor_legend_load=Last
-monitor_legend_memory_per=Speicher % (genutzt/gesamt)
-monitor_legend_thread_per=Thread % (aktiv/maimum)
-monitor_performance_servers=Server
-monitor_performance_title=Performance-Graph
 new=Neu
 newdn=Neuer DN (distinguished name)
 no=Norwegisch
 number_of_threads=Anzahl von Threads\:
 obsolete_test_element=Dieser Test-Abschnitt ist hinf\u00E4lig
 once_only_controller_title=Einmal-Controller
 opcode=OPcode
 open=\u00D6ffnen
 option=Optionen
 optional_tasks=Optionale Aufgaben
 paramtable=Parameter die mit dem Request gesendet werden\:
 password=Passwort
 paste=Einf\u00FCgen
 paste_insert=Als Eintrag einf\u00FCgen
 path=Pfad\:
 path_extension_choice=Pfad-Erweiterung (benutze ";" als Trennzeichen)
 path_extension_dont_use_equals=Keine Gleichheitszeichen in Pfad-Erweiterung benutzen (Intershop Enfinity compatibility)
 path_extension_dont_use_questionmark=Keine Fragezeichen in Pfad-Erweiterung benutzen (Intershop Enfinity compatibility)
 patterns_to_exclude=Auszuschlie\u00DFende URL-Muster
 patterns_to_include=Einzuschlie\u00DFende URL-Muster
 property_default_param=Vorgabe-Wert
 property_edit=Bearbeiten
 property_editor.value_is_invalid_message=Der eingegebene Text ist f\u00FCr diese Eigenschaft ung\u00FCltig.\nDer Wert wird auf seinen vorherigen Wert zur\u00FCck gesetzt.
 property_editor.value_is_invalid_title=Ung\u00FCltige Eingabe
 property_name_param=Name der Eigenschaft
 property_returnvalue_param=Urspr\u00FCnglichen Wert der Eigenschaft zur\u00FCckgeben? Vorgabe\: false
 property_undefined=undefiniert
 property_value_param=Wert der Eigeschaft
 property_visualiser_title=Eigenschaften
 protocol=Protokoll [http]\:
 protocol_java_border=Java-Klasse
 protocol_java_classname=Klassenname (classname)\:
 protocol_java_config_tile=Java Sample Konfigurieren
 protocol_java_test_title=Java Tests
 proxy_assertions=Versicherungen hinzuf\u00FCgen
 proxy_cl_error=Wenn Sie einen Proxy Server spezifizieren, m\u00FCssen Sie den Host und Port angeben
 proxy_content_type_exclude=Ausschlie\u00DFen\:
 proxy_content_type_filter=Content-Type Filter
 proxy_content_type_include=Einschlie\u00DFen\:
 proxy_headers=HTTP-Header \u00FCberwachen
 proxy_regex=RegEx Muster
 proxy_sampler_settings=HTTP Sampler Einstellungen
 proxy_sampler_type=Typ\:
 proxy_separators=F\u00FCgen sie Trennzeichen hinzu
 proxy_target=Ziel-Controller (Target-Controller)\:
 proxy_test_plan_content=Test-Plan Inhalt\:
 random_control_title=Zufalls-Controller
 random_order_control_title=Zufalls-Reihenfolgen-Controller
 realm=Bereich
 regexfunc_param_1=Regul\u00E4re Ausdr\u00FCcke zum Suchen in den Results der vorherigen Requests
 regexfunc_param_2=Beispiel f\u00FCr Ersetzungs Strings, benuzte Gruppen von den regul\u00E4ren Ausdr\u00FCcken
 regexfunc_param_3=Which match to use.  Einen Integer 1 oder gr\u00F6sser, RAND damit JMeter eine zuf\u00E4llige Auswahl trifft, eine Fliesskommazahl, oder ALL wenn alle Treffer benutzt werden
 regexfunc_param_4=Zwischen Text.  Wenn ALL ausgew\u00E4hlt ist, wird der zwischen Test benutzt um das Ergebnis zu generieren
 regexfunc_param_5=Standard Text.  Wird benutzt anstatt der Vorlage, falls der Regul\u00E4re Ausdruck keine Treffer findet
 remove=Entfernen
 report_bar_chart=Balken-Diagramm
 report_base_directory=Basis-Verzeichnis
 report_chart_caption=Diagramm-Titel
 report_chart_x_axis=X-Achse
 report_chart_x_axis_label=Bezeichner f\u00FCr die X-Achse
 report_chart_y_axis=Y-Achse
 report_chart_y_axis_label=Bezeichner f\u00FCr die Y-Achse
 report_line_graph=Linien-Diagramm
 report_line_graph_urls=URLs einbeziehen
 report_output_directory=Ausgabe-Verzeichnis f\u00FCr den Bericht
 report_page=Bericht-Seite
 report_page_element=Seitenelement
 report_page_footer=Seitenfu\u00DF
 report_page_header=Seitenkopf
 report_page_index=Seiten-Index erstellen
 report_page_intro=Seiteneinleitung
 report_page_style_url=Stylesheet URL
 report_page_title=Seitentitel
 report_pie_chart=Torten-Diagramm
 report_select=Ausw\u00E4hlen
 report_summary=Bericht-Zusammenfassung
 report_writer=Bericht-Schreiber
 report_writer_html=HTML Bericht-Schreiber
 request_data=Request Daten
 reset_gui=GUI zur\u00FCcksetzen
 restart=Neu starten
 revert_project=Zur\u00FCcksetzen
 revert_project?=Projekt zur\u00FCck setzten?
 root=Wurzel
 root_title=Wurzel
 run=Start
 running_test=Test starten
 sampler_on_error_action=Aktion die bei einem Sampler-Fehler ausgef\u00FChrt werden soll
 sampler_on_error_continue=Fortfahren
 sampler_on_error_stop_test=Test Anhalten
 sampler_on_error_stop_thread=Thread Anhalten
 save=Speichern
 save?=Speichern?
 save_all_as=Test-Plan speichern unter
 save_as=Speichern unter
 save_as_error=Mehr als ein Element ausgew\u00E4hlt\!
 save_as_image=Als Bild speichern
 save_as_image_all=Bildschirm als Bild speichern
 save_assertionresultsfailuremessage=Speichere Meldungen der Versicherungs-Fehler
 save_assertions=Speichere Versicherungs-Ergebnisse (XML)
 save_asxml=Speichere als XML
 save_bytes=Speichere anzahl der Bytes
 save_code=Speichere Response-Code
 save_datatype=Speichere Daten-Typ
 save_encoding=Speichere Kodierung
 save_fieldnames=Speichere Feld-Namen (CSV)
 save_filename=Speichere Response-Dateiname
 save_graphics=Speichere Graphen
 save_hostname=Speichere Hostenamen
 save_label=Speichere Bezeichner
 save_latency=Speichere Latenz
 save_message=Speichere Response-Nachricht
 save_overwrite_existing_file=Die ausgew\u00E4hlte Datei existiert bereits, m\u00F6chten sie sie \u00FCberschreiben?
 save_requestheaders=Speichere Request-Header (XML)
 save_responsedata=Speichere Response-Daten (XML)
 save_responseheaders=Speichere Response-Header (XML)
 save_samplecount=Speichere Proben und Fehler Anzahl
 save_samplerdata=Speichere Sampler-Daten (XML)
 save_subresults=Speichere Unter-Ergebnisse (XML)
 save_success=Speichere Erfolge
 save_threadcounts=Speichere aktive Thread Anzahl
 save_threadname=Speichere Thread-Name
 save_time=Speichere ben\u00F6tigte Zeit
 save_timestamp=Speichere Zeitstempel
 save_url=Speichere URL
 scheduler_configuration=Scheduler Konfiguration
 scope=G\u00FCltigkeitsbereich (Scope)
 second=Sekunde
 secure=Sicher
 send_file=Datei mit dem Request senden\:
 send_file_browse=Datei ausw\u00E4hlen...
 send_file_filename_label=Dateiname\:
 send_file_param_name_label=Wert des "name"-Attributes\:
 server=Server Name oder IP\:
 should_save=Wenn sie supportete Daten Dateien (z.B. CSV) benutzen ist es wichtig zuerst das Test-Script zu speichern.\nM\u00F6chten sie den Test-Plan speichern?
 shutdown=Beenden
 size_assertion_comparator_error_equal=gleich
 size_assertion_comparator_error_greater=gr\u00F6\u00DFer als
 size_assertion_comparator_error_greaterequal=gr\u00F6\u00DFer oder gleich
 size_assertion_comparator_error_less=kleiner als
 size_assertion_comparator_error_lessequal=kleiner oder gleich
 size_assertion_comparator_error_notequal=nicht gleich
 size_assertion_comparator_label=Art des Vergleichs
 size_assertion_failure=Das Ergebnis hatte die falsche Gr\u00F6\u00DFe ({0} Byte). Es h\u00E4tte {1} {2} Byte sein m\u00FCssen.
 size_assertion_input_error=Bitte geben sie einen g\u00FCltigen Ganzzahl-Wert ein.
 size_assertion_label=Gr\u00F6\u00DFe in Byte\:
 size_assertion_size_test=Gr\u00F6\u00DFe versichern
 size_assertion_title=Gr\u00F6\u00DFen Versicherung
 soap_action=SOAP Aktion
 soap_data_title=SOAP/XML-RPC Daten
 soap_sampler_title=SOAP/XML-RPC Anfrage
 soap_send_action=Sende SOAP Aktion\:
 ssl_alias_prompt=Bitte geben Sie Ihren bevorzugten Alias ein
 ssl_alias_select=W\u00E4hlen Sie Ihren Alias f\u00FCr den Test
 ssl_error_title=Problem beim Schl\u00FCssel Speichern
 ssl_pass_prompt=Bitte geben Sie Ihr Passwort ein
 ssl_pass_title=Schl\u00FCssel Speicher Passwort
 starttime=Startzeit
 stopping_test=Stoppe alle Tests. Bitte warten ...
 stopping_test_title=Stoppe den Test
 string_from_file_file_name=Geben sie den vollst\u00E4ndingen Datei-Pfad ein
 string_from_file_seq_final=Letzte Datei-Sequenznummer (optional)
 string_from_file_seq_start=Erste Datei-Sequenznummer (optional)
 table_visualizer_sample_num=Proben Anzahl
 table_visualizer_sample_time=Proben-Zeit (ms)
 table_visualizer_start_time=Startzeit
 table_visualizer_success=Erfolgreich
 table_visualizer_thread_name=Thread-Name
 table_visualizer_warning=Warnung
 tcp_config_title=TCP Sampler Konfiguration
 tcp_nodelay=Setzte "NoDelay"
 tcp_port=Port-Nummer\:
 tcp_request_data=Text senden
 tcp_timeout=Timeout (Millisekunden)\:
 test_action_duration=Dauer (Millisekunden)
 test_action_target=Ziel
 test_action_target_test=Alle Threads
 test_action_target_thread=Aktueller Thread
 test_action_title=Test-Aktion
 test_configuration=Test-Konfiguration
 test_plan=Testplan
 test_plan_classpath_browse=F\u00FCgen sie das Verzeichnis oder .jar zum classpath hinzu
 testconfiguration=Konfiguration Testen
 testplan.serialized=Thread-Gruppen nacheinander starten
 testplan_comments=Kommentare\:
 thread_delay_properties=Thread-Pause Eigenschaften
 thread_group_title=Thread Gruppe
 thread_properties=Thread-Eigenschaften
 threadgroup=Thread-Gruppe
 throughput_control_bynumber_label=Ausf\u00FChrungen (Gesamt)
 throughput_control_bypercent_label=Ausf\u00FChrungen (Prozent)
 throughput_control_perthread_label=pro Benutzer
 throughput_control_title=Durchsatz-Controller
 throughput_control_tplabel=Durchsatz
 time_format=Format-Zeichenkette des "SimpleDateFormat" (optional)
 timelim=Zeit-Limit
 tr=T\u00FCrkisch
 upload=Datei hochladen
 upper_bound=obere Grenze
 url_config_title=HTTP Request Default Einstellungen
 use_keepalive=Benutze KeepAlive
 user_defined_variables=Benutzer definierte Variablen
 user_param_mod_help_note=(\u00C4ndern Sie dies nicht. Stattdessen, bitte die Datei mit dem Namen in JMeter's /bin Ordner \u00E4ndern.)
 username=Benutzername
 value=Wert
 view_results_in_table=Zeige Ergebnisse in der Tabelle
 warning=Warnung\!
 web_server_domain=Server Name oder IP\:
 web_testing_retrieve_images=Hole alle Bilder und Java Applets (nur HTML Dateien)
 you_must_enter_a_valid_number=Sie m\u00FCssen ein g\u00FCltige Nummer eingeben
diff --git a/src/core/org/apache/jmeter/resources/messages_es.properties b/src/core/org/apache/jmeter/resources/messages_es.properties
index 846719b55..cdd85d403 100644
--- a/src/core/org/apache/jmeter/resources/messages_es.properties
+++ b/src/core/org/apache/jmeter/resources/messages_es.properties
@@ -1,1033 +1,1008 @@
 #   Licensed to the Apache Software Foundation (ASF) under one or more
 #   contributor license agreements.  See the NOTICE file distributed with
 #   this work for additional information regarding copyright ownership.
 #   The ASF licenses this file to You under the Apache License, Version 2.0
 #   (the "License"); you may not use this file except in compliance with
 #   the License.  You may obtain a copy of the License at
 # 
 #       http://www.apache.org/licenses/LICENSE-2.0
 # 
 #   Unless required by applicable law or agreed to in writing, software
 #   distributed under the License is distributed on an "AS IS" BASIS,
 #   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 #   See the License for the specific language governing permissions and
 #   limitations under the License.
 
 #Stored by I18NEdit, may be edited!
 about=Acerca de Apache JMeter
 add=A\u00F1adir
 add_as_child=A\u00F1adir como hijo
 add_parameter=A\u00F1adir Variable
 add_pattern=A\u00F1adir Patr\u00F3n\:
 add_test=A\u00F1adir Test
 add_user=A\u00F1adir Usuario
 add_value=A\u00F1adir Valor
 addtest=A\u00F1adir test
 aggregate_graph=Gr\u00E1ficos estad\u00EDsticos
 aggregate_graph_column=Columna
 aggregate_graph_display=Mostrar gr\u00E1fico
 aggregate_graph_height=Altura
 aggregate_graph_max_length_xaxis_label=Longitud m\u00E1xima de la etiqueta del eje x
 aggregate_graph_ms=Milisegundos
 aggregate_graph_response_time=Tiempo de respuesta
 aggregate_graph_save=Guardar gr\u00E1fico
 aggregate_graph_save_table=Guardar la tabla de datos
 aggregate_graph_save_table_header=Guardar la cabecera de la tabla
 aggregate_graph_title=Gr\u00E1fico
 aggregate_graph_use_group_name=\u00BFIncluir el nombre del grupo en la etiqueta?
 aggregate_graph_user_title=T\u00EDtulo del gr\u00E1fico
 aggregate_graph_width=Anchura
 aggregate_report=Informe Agregado
 aggregate_report_bandwidth=Kb/sec
 aggregate_report_count=\# Muestras
 aggregate_report_error=Error
 aggregate_report_error%=% Error
 aggregate_report_max=M\u00E1x
 aggregate_report_median=Mediana
 aggregate_report_min=M\u00EDn
 aggregate_report_rate=Rendimiento
 aggregate_report_stddev=Desv. Est\u00E1ndar
 aggregate_report_total_label=Total
 ajp_sampler_title=AJP/1.3 Muestreador
 als_message=Nota\: El Parser de Access Log tiene un dise\u00F1o gen\u00E9rico y le permite incorporar
 als_message2=su propio parser. Para hacer esto, implemente "LogParser", y a\u00F1ada el jar al
 als_message3=directorio /lib e introduzca la clases en el muestreador.
 analyze=Analizar Archivo de Datos...
 anchor_modifier_title=Parseador de Enlaces HTML
 appearance=Apariencia
 argument_must_not_be_negative=\u00A1El Argumento no puede ser negativo\!
 assertion_assume_success=Ignorar el Estado
 assertion_code_resp=C\u00F3digo de Respuesta
 assertion_contains=Contiene
 assertion_equals=igual
 assertion_headers=Cabeceras de la respuesta
 assertion_matches=Coincide
 assertion_message_resp=Mensaje de Respuesta
 assertion_not=No
 assertion_pattern_match_rules=Reglas de Coincidencia de Patrones
 assertion_patterns_to_test=Patr\u00F3n a Probar
 assertion_resp_field=Campo de Respuesta a Probar
 assertion_substring=Substring
 assertion_text_resp=Respuesta Textual
 assertion_textarea_label=Aserciones\:
 assertion_title=Aserci\u00F3n de Respuesta
 assertion_url_samp=URL Muestreada
 assertion_visualizer_title=Resultados de la Aserci\u00F3n
 attribute=Atributo
 attrs=Atributos
 auth_base_url=URL Base
 auth_manager_title=Gestor de Autorizaci\u00F3n HTTP
 auths_stored=Autorizaciones Almacenadas en el Gestor de Autorizaci\u00F3n
 average=Media
 average_bytes=Media de Bytes
 bind=Enlace a Hilo
 bouncy_castle_unavailable_message=Los jars para bouncy castle no est\u00E1n disponibles, por favor a\u00F1adalos a su classpath.
 browse=Navegar...
 bsf_sampler_title=Muestreador BSF
 bsf_script=Script a lanzar (variables\: log, Label, FileName, Parameters, args[], SampleResult (aka prev), sampler, ctx, vars, props, OUT)
 bsf_script_file=Archivo de Script a lanzar
 bsf_script_language=Lenguaje de Script\:
 bsf_script_parameters=Par\u00E1metros a pasar al script/archivo\:
 bsh_assertion_script=Script (ver abajo para las variables que est\u00E1n definidas)
 bsh_assertion_script_variables=Lectura/Escritura\: Failure, FailureMessage, SampleResult, log.\nS\u00F3lo Lectura\: Response[Data|Code|Message|Headers], RequestHeaders, SampleLabel, SamplerData
 bsh_assertion_title=Aserci\u00F3n BeanShell
 bsh_function_expression=Expresi\u00F3n a evaluar
 bsh_sampler_title=Muestreador BeanShell
 bsh_script=Script (ver abajo para las variables que est\u00E1n definidas)
 bsh_script_file=Archivo de script
 bsh_script_parameters=Par\u00E1metros (-> Par\u00E1metros String y String[]bsh.args)
 bsh_script_reset_interpreter=Resetear el int\u00E9rprete bsh antes de cada llamada
 bsh_script_variables=Las siguientes variables est\u00E1n definidas para el script\:\nSampleResult, ResponseCode, ResponseMessage, IsSuccess, Label, FileName, ctx, vars, props, log
 busy_testing=Estoy ocupado probando, por favor pare el test antes de cambiar la configuraci\u00F3n
 cache_manager_title=Gestionador de la Cach\u00E9 HTTP
 cache_session_id=\u00BFIdentificador de la sesi\u00F3n de cach\u00E9?
 cancel=Cancelar
 cancel_exit_to_save=\u00BFHay elementos de prueba que no han sido salvados. \u00BFQuiere salvar antes de salir?
 cancel_new_to_save=\u00BFHay elementos del test que no han sido salvados. \u00BFQuiere salvar antes de limpiar el plan de pruebas?
 cancel_revert_project=Hay elementos del test que no han sido guardados. \u00BFDesea revertir a una versi\u00F3n guardada previamente del plan de test?
 char_value=N\u00FAmero del car\u00E1cter Unicode (decimal or 0xhex)
 choose_function=Elija una funci\u00F3n
 choose_language=Elija lenguaje
 clear=Limpiar
 clear_all=Limpiar Todo
 clear_cache_per_iter=\u00BFLimpiar la cach\u00E9 en cada iteraci\u00F3n?
 clear_cookies_per_iter=\u00BFLimpiar las cookies en cada iteraci\u00F3n?
 column_delete_disallowed=Borrar esta columna no est\u00E1 permitido
 column_number=N\u00FAmero de columna del archivo CSV | siguiente | *alias
 compare=Comparar
 comparefilt=Filtro de Comparaci\u00F3n
 comparison_differ_content=Las respuestas difieren en el contenido
 comparison_differ_time=Las respuestas difieren en el tiempo de respuesta en m\u00E1s de 
 comparison_invalid_node=Nodo inv\u00E1lido
 comparison_regex_string=Expresi\u00F3n regular
 comparison_regex_substitution=Sustituci\u00F3n
 comparison_response_time=Tiempo de respuesta\:
 comparison_unit=ms
 comparison_visualizer_title=Visualizador de la aserci\u00F3n de comparaci\u00F3n
 config_element=Elemento de Configuraci\u00F3n
 config_save_settings=Configurar
 constant_throughput_timer_memo=A\u00F1ade un retardo entre muestras para obtener un rendimiento constante
 constant_timer_delay=Retardo de Hilo (en milisegundos)\:
 constant_timer_memo=A\u00F1ade un retardo constante entre muestras
 constant_timer_title=Temporizador Constante
 content_encoding=Codificac\u00EDon del contenido\:
 controller=Controlador
 cookie_manager_policy=Pol\u00EDtica de Cookies
 cookie_manager_title=Gestor de Cookies HTTP
 cookies_stored=Cookies almacenadas en el Gestor de Cookies
 copy=Copiar
 counter_config_title=Contador
 counter_per_user=Contador independiente para cada usuario
 countlim=L\u00EDmite de tama\u00F1o
 csvread_file_file_name=Archivo CSV del que obtener valores | *alias
 cut=Cortar
 cut_paste_function=Funci\u00F3n de cadena para copiar y pegar
 database_conn_pool_max_usage=Uso m\u00E1ximo para cada Conexi\u00F3n
 database_conn_pool_props=Pool de Conexiones a Base de Datos
 database_conn_pool_size=N\u00FAmero de Conexiones en el Pool
 database_conn_pool_title=Valores por defecto del Pool de Conexiones JDBC
 database_driver_class=Clase del Driver\:
 database_login_title=Valores por defecto para el Login a JDBC
 database_sql_query_string=Query String de SQL\:
 database_sql_query_title=Valores por defecto de Query SQL JDBC
 database_testing_title=Petici\u00F3n JDBC
 database_url=URL JDBC\:
 database_url_jdbc_props=Driver JDBC y URL a Base de Datos
 ddn=DN 
 de=Alem\u00E1n
 debug_off=Deshabilitar depuraci\u00F3n
 debug_on=Habilitar depuraci\u00F3n
 default_parameters=Valores por defecto
 default_value_field=Valor por defecto\:
 delay=Retardo de arranque (segundos)
 delayed_start=Retrasar la creaci\u00F3n de Hilos hasta que se necesiten
 delete=Borrar
 delete_parameter=Borrar Variable
 delete_test=Borrar Test
 delete_user=Borrar Usuario
 deltest=Test de borrado
 deref=Alias para desreferenciar
 disable=Deshabilitar
 distribution_graph_title=Gr\u00E1fico de Distribuci\u00F3n (alfa)
 distribution_note1=El gr\u00E1fico se actualiza cada 10 muestras
 dn=DN
 domain=Dominio
 done=Hecho
 duration=Duraci\u00F3n (segundos)
 duration_assertion_duration_test=Duraci\u00F3n a asegurar
 duration_assertion_failure=La operaci\u00F3n dur\u00F3 demasiado\: tard\u00F3 {0} milisegundos, cuando no deber\u00EDa haber tardado m\u00E1s de {1} milisegundos.
 duration_assertion_input_error=Por favor, introduzca un entero positivo v\u00E1lido.
 duration_assertion_label=Duraci\u00F3n en milisegundos\:
 duration_assertion_title=Aserci\u00F3n de Duraci\u00F3n
 edit=Editar
 email_results_title=Resultados del Email
 en=Ingl\u00E9s
 enable=Habilitar
 encode?=\u00BFCodificar?
 encoded_value=Valor de URL Codificada
 endtime=Tiempo de Finalizaci\u00F3n
 entry_dn=Introduzca DN
 entrydn=Introduzca DN
 error_loading_help=Error cargando p\u00E1gina de ayuda
 error_occurred=Error
 error_title=Error
 es=Espa\u00F1ol
 escape_html_string=Texto de escapado
 eval_name_param=Texto que contien variables y referencias de funci\u00F3n
 evalvar_name_param=Nombre de la variable
 example_data=Dato de muestra
 example_title=Muestreador de ejemplo
 exit=Salir
 expiration=Expiraci\u00F3n
 field_name=Nombre de campo
 file=Archivo
 file_already_in_use=Ese archivo est\u00E1 en uso
 file_visualizer_append=A\u00F1adir a archivo de datos existente
 file_visualizer_auto_flush=Limpiar autom\u00E1ticamente despu\u00E9s de cada muestra de datos
 file_visualizer_browse=Navegar...
 file_visualizer_close=Cerrar
 file_visualizer_file_options=Opciones de Archivo
 file_visualizer_filename=Nombre de archivo
 file_visualizer_flush=Limpiar
 file_visualizer_missing_filename=No se ha especificado nombre de archivo de salida.
 file_visualizer_open=Abrir
 file_visualizer_output_file=Escribir todos los datos a Archivo
 file_visualizer_submit_data=Incluir Datos Enviados
 file_visualizer_title=Informe de Archivo
 file_visualizer_verbose=Salida Verbosa
 filename=Nombre de Archivo
 follow_redirects=Seguir Redirecciones
 follow_redirects_auto=Redirigir Autom\u00E1ticamente
 foreach_controller_title=Controlador ForEach
 foreach_input=Prefijo de variable de entrada
 foreach_output=Nombre de variable de salida
 foreach_use_separator=\u00BFA\u00F1adir "_" antes de n\u00FAmero?
 format=Formato del n\u00FAmero
 fr=Franc\u00E9s
 ftp_binary_mode=\u00BFUsar modo binario?
 ftp_get=get(RETR)
 ftp_local_file=Fichero local\:
 ftp_local_file_contents=Contenidos del fichero local\:
 ftp_put=put(STOR)
 ftp_remote_file=Fichero remoto\:
 ftp_sample_title=Valores por defecto para petici\u00F3n FTP
 ftp_save_response_data=\u00BFGuardar fichero en la respuesta?
 ftp_testing_title=Petici\u00F3n FTP
 function_dialog_menu_item=Di\u00E1logo de Ayuda de Funci\u00F3n
 function_helper_title=Ayuda de Funci\u00F3n
 function_name_param=Nombre de funci\u00F3n. Usado para almacenar valores a utilizar en cualquier sitio del plan de prueba.
 function_name_paropt=Nombre de variable donde almacenar el resultado (opcional)
 function_params=Par\u00E1metros de Funci\u00F3n
 functional_mode=Modo de Prueba Funcional
 functional_mode_explanation=Seleccione modo de prueba funcional solo si necesita archivar los datos recibidos del servidor para cada petici\u00F3n.\nSeleccionar esta opci\u00F3n impacta en el rendimiento considerablemente. 
 gaussian_timer_delay=Desplazamiento para Retardo Constante (en milisegundos)\:
 gaussian_timer_memo=A\u00F1ade un retardo aleatorio con distribuci\u00F3n gaussiana.
 gaussian_timer_range=Desviaci\u00F3n (en milisegundos)\:
 gaussian_timer_title=Temporizador Aleatorio Gaussiano
 generate=Generar
 generator=Nombre de la clase Generadora
 generator_cnf_msg=No pude encontrar la clase generadora. Por favor aseg\u00FArese de que puso el archivo jar en el directorio /lib
 generator_illegal_msg=No pude acceder a la clase generadora debido a una "IllegalAcessException".
 generator_instantiate_msg=No pude crear una instancia del parser generador. Por favor aseg\u00FArese de que el generador implementa la interfaz Generator.
 graph_choose_graphs=Gr\u00E1ficos a Mostrar
 graph_full_results_title=Resultados de Gr\u00E1fico Completo
 graph_results_average=Media
 graph_results_data=Datos
 graph_results_deviation=Desviaci\u00F3n
 graph_results_latest_sample=\u00DAltima Muestra
 graph_results_median=Mediana
 graph_results_ms=ms
 graph_results_no_samples=No. de Muestras
 graph_results_throughput=Rendimiento
 graph_results_title=Gr\u00E1fico de Resultados
 grouping_add_separators=A\u00F1adir separadores entre grupos
 grouping_in_controllers=Poner cada grupo en un nuevo controlador
 grouping_in_transaction_controllers=Poner cada grupo en un nuevo controlador de transacciones
 grouping_mode=Agrupaci\u00F3n\:
 grouping_no_groups=No agrupar muestreadores
 grouping_store_first_only=Almacenar el primer muestreador de cada grupo solamente
 header_manager_title=Gestor de Cabecera HTTP
 headers_stored=Cabeceras Almacenadas en el Gestor de Cabeceras
 help=Ayuda
 help_node=\u00BFQu\u00E9 es este nodo?
 html_assertion_file=Escribir el reporte JTidy en fichero
 html_assertion_label=Aserci\u00F3n HTML
 html_assertion_title=Aserci\u00F3n HTML
 http_implementation=Implementaci\u00F3n HTTP\:
 http_response_code=c\u00F3digo de respuesta HTTP
 http_url_rewriting_modifier_title=Modificador de re-escritura HTTP URL
 http_user_parameter_modifier=Modificador de Par\u00E1metro de Usuario HTTP
 httpmirror_title=Servidor espejo HTTP
 id_prefix=Prefijo ID
 id_suffix=Sufijo ID
 if_controller_evaluate_all=\u00BFEvaluar para todos los hijos?
 if_controller_expression=\u00BFInterpretar la condici\u00F3n como una variable de expresi\u00F3n?
 if_controller_label=Condici\u00F3n
 if_controller_title=Controlador If
 ignore_subcontrollers=Ignorar bloques sub-controladores
 include_controller=Incluir Controlador
 include_equals=\u00BFIncluir Equals?
 include_path=Incluir Plan de Pruebas
 increment=Incrementar
 infinite=Sin f\u00EDn
 initial_context_factory=Factor\u00EDa Initial Context
 insert_after=Insertar Despu\u00E9s
 insert_before=Insertar Antes
 insert_parent=Insertar Padre
 interleave_control_title=Controlador Interleave
 intsum_param_1=Primer int a a\u00F1adir.
 intsum_param_2=Segundo int a a\u00F1adir - m\u00E1s ints pueden ser insertados a\u00F1adiendo m\u00E1s argumentos
 invalid_data=Dato inv\u00E1lido
 invalid_mail=Error al enviar el e-mail
 invalid_mail_address=Una o m\u00E1s direcciones de e-mail inv\u00E1lidas
 invalid_mail_server=Problema contactantdo el servidor de e-mail (mire los logs de JMeter)
 invalid_variables=Variables inv\u00E1lidas
 iteration_counter_arg_1=TRUE, para que cada usuario su propio contador, FALSE para tener un contador global
 iterator_num=Contador del bucle\:
 ja=Japon\u00E9s
 jar_file=Ficheros .jar
 java_request=Petici\u00F3n Java
 java_request_defaults=Valores por defecto para Petici\u00F3n Java
 javascript_expression=Expresi\u00F3n JavaScript a evaluar
 jexl_expression=Expresi\u00F3n JEXL a evaluar
 jms_auth_required=Requerido
 jms_client_caption=El cliente Receive utiliza TopicSubscriber.receive() para escuchar un mensaje.
 jms_client_caption2=MessageListener utiliza la interfaz onMessage(Message) para escuchar nuevos mensajes
 jms_client_type=Cliente
 jms_communication_style=Estilo de Comunicaci\u00F3n
 jms_concrete_connection_factory=Factor\u00EDa de Connection Concreto
 jms_config=Fuente del mensaje
 jms_config_title=Configuraci\u00F3n JMS
 jms_connection_factory=Factor\u00EDa de Connection
 jms_correlation_title=Usar campos alternativos para la correlaci\u00F3n de mensajes
 jms_dest_setup=Configuraci\u00F3n
 jms_dest_setup_dynamic=En cada muestra
 jms_dest_setup_static=Al arranque
 jms_file=Archivo
 jms_initial_context_factory=Factor\u00EDa de Initial Context
 jms_itertions=N\u00FAmero de muestras a agregar
 jms_jndi_defaults_title=Configuraci\u00F3n por defecto de JNDI
 jms_jndi_props=Propiedades JNDI
 jms_map_message=Mensaje Map
 jms_message_title=Propiedades de Mensaje
 jms_message_type=Tipo de Mensaje
 jms_msg_content=Contenido
 jms_object_message=Mensaje Object
 jms_point_to_point=JMS Punto-a-Punto
 jms_props=Propiedades JMS
 jms_provider_url=URL Proveedor
 jms_publisher=Publicador JMS
 jms_pwd=Contrase\u00F1a
 jms_queue=Cola
 jms_queue_connection_factory=Factor\u00EDa de QueueConnection
 jms_queueing=Recursos JMS
 jms_random_file=Archivo Aleatorio
 jms_receive_queue=Nombre JNDI cola Recepci\u00F3n
 jms_request=S\u00F3lo Petici\u00F3n
 jms_requestreply=Respuesta a Petici\u00F3n
 jms_sample_title=Petici\u00F3n JMS por defecto
 jms_send_queue=Nombre JNDI Cola Petici\u00F3n
 jms_stop_between_samples=\u00BFParar entre muestras?
 jms_store_response=Guarde la respuesta
 jms_subscriber_on_message=Utilizar MessageListener.onMessage()
 jms_subscriber_receive=Utilizar TopicSubscriber.receive()
 jms_subscriber_title=Suscriptor JMS
 jms_testing_title=Petici\u00F3n Mensajer\u00EDa
 jms_text_message=Mensaje Texto
 jms_timeout=Timeout (milisegundos)
 jms_topic=T\u00F3pico
 jms_use_auth=\u00BFUsar Autorizaci\u00F3n?
 jms_use_file=Desde archivo
 jms_use_non_persistent_delivery=\u00BFUsar modo de entrega no persistente?
 jms_use_properties_file=Utilizar archivo jndi.properties
 jms_use_random_file=Archivo Aleatorio
 jms_use_req_msgid_as_correlid=Usar el identificador del mensaje Request
 jms_use_res_msgid_as_correlid=Usar el identificador del mensaje Response
 jms_use_text=\u00C1rea de Texto
 jms_user=Usuario
 jndi_config_title=Configuraci\u00F3n JNDI
 jndi_lookup_name=Interfaz Remota
 jndi_lookup_title=Configuraci\u00F3n del Lookup JNDI
 jndi_method_button_invoke=Invocar
 jndi_method_button_reflect=Reflejar
 jndi_method_home_name=Nombre de M\u00E9todo Home
 jndi_method_home_parms=Par\u00E1metros de M\u00E9todo Home
 jndi_method_name=Configuraci\u00F3n de M\u00E9todo
 jndi_method_remote_interface_list=Interfaces Remotas
 jndi_method_remote_name=Nombre de M\u00E9todo Remoto
 jndi_method_remote_parms=Par\u00E1metros de M\u00E9todo Remoto
 jndi_method_title=Configuraci\u00F3n de M\u00E9todo Remoto
 jndi_testing_title=Petici\u00F3n JNDI
 jndi_url_jndi_props=Propiedades JNDI
 junit_append_error=A\u00F1adir errores de aserci\u00F3n
 junit_append_exception=A\u00F1adir excepciones de ejecuci\u00F3n
 junit_constructor_error=Imposible crear una instancia de la clase
 junit_constructor_string=Etiqueta del constructor de String
 junit_do_setup_teardown=No llamar a setUp y tearDown
 junit_error_code=C\u00F3digo de error
 junit_error_default_code=9999
 junit_error_default_msg=Ocurri\u00F3 un error no esperado
 junit_error_msg=Mensaje de error
 junit_failure_code=Codigo de fallo
 junit_failure_default_code=0001
 junit_failure_default_msg=Test fall\u00F3
 junit_failure_msg=Mensaje de fallo
 junit_junit4=Buscar anotaciones JUnit 4 (en el caso de JUnit 3)
 junit_pkg_filter=Filtro de paquetes
 junit_request=Petici\u00F3n JUnit
 junit_request_defaults=Valores por defecto de la petici\u00F3n JUnit
 junit_success_code=C\u00F3digo de \u00E9xito
 junit_success_default_code=1000
 junit_success_default_msg=Test satisfactorio
 junit_success_msg=Mensaje de \u00E9xito
 junit_test_config=Par\u00E1metros del test JUnit
 junit_test_method=M\u00E9todo de Test
 ldap_argument_list=Lista de LDAPArgument
 ldap_connto=Timeout de conexi\u00F3n (en milisegundos)
 ldap_parse_results=\u00BFParsear los resultados de la b\u00FAsqueda?
 ldap_sample_title=Valores por defecto Petici\u00F3n LDAP
 ldap_search_baseobject=Realizar la b\u00FAsqueda 'baseobject'
 ldap_search_onelevel=Realizar la b\u00FAsqueda 'onelevel'
 ldap_search_subtree=Realizar la b\u00FAsqueda 'subtree'
 ldap_secure=\u00BFUsar el Protocolo LDAP Seguro?
 ldap_testing_title=Petici\u00F3n LDAP
 ldapext_sample_title=Valores por defecto Petici\u00F3n Extendidad LDAP
 ldapext_testing_title=Petici\u00F3n Extendida LDAP
 library=Librer\u00EDa
 load=Cargar
 log_errors_only=Escribir en Log S\u00F3lo Errores
 log_file=Ubicaci\u00F3n del archivo de logs
 log_function_comment=Comentario adicional (opcional)
 log_function_level=Nivel de Log (por defecto INFO) o OUT o ERR
 log_function_string=Texto a escribir en log
 log_function_string_ret=Texto a ser escrito en log  (y retornado)
 log_function_throwable=Texto para 'Throwable' (Opcional) 
 log_only=Log/Mostrar s\u00F3lo\:
 log_parser=Nombre de la clase Parser de Log
 log_parser_cnf_msg=No pude encontrar la clase. Por favor, aseg\u00FArese de colocar el archivo jar en el directorio /lib.
 log_parser_illegal_msg=No pude acceder a la clase debido a una "IllegalAcessException".
 log_parser_instantiate_msg=No pude crear una instancia del parser de log. Por favor aseg\u00FArese de que el parser implementar la interfaz LogParser.
 log_sampler=Muestreador de Log de Acceso de Tomcat
 log_success_only=\u00C9xitos
 logic_controller_title=Controlador Simple
 login_config=Configuraci\u00F3n de Login
 login_config_element=Elemento de Configuraci\u00F3n de Login
 longsum_param_1=Primer 'long' a a\u00F1adir
 longsum_param_2=Segundo 'long' a a\u00F1adir - m\u00E1s 'longs' pueden ser sumados a\u00F1adiendo m\u00E1s argumentos.
 loop_controller_title=Controlador Bucle
 looping_control=Control de Bucles
 lower_bound=L\u00EDmite inferior
 mail_reader_account=Usuario\:
 mail_reader_all_messages=Todo
 mail_reader_delete=Borrar archivos del servidor
 mail_reader_folder=Carpeta\:
 mail_reader_num_messages=N\u00FAmero de mensajes a recuperar\:
 mail_reader_password=Contrase\u00F1a\:
 mail_reader_port=Puerto del servidor (opcional)\:
 mail_reader_server=Servidor\:
 mail_reader_server_type=Tipo de Servidor\:
 mail_reader_storemime=Almacenar el mensaje usando MIME(raw)
 mail_reader_title=Muestreador Lector de Correo
 mail_sent=Mail enviado con \u00E9xito
 mailer_attributes_panel=Atributos de Mailing
 mailer_error=No pude enviar mail. Por favor, corrija las entradas incorrectas.
 mailer_visualizer_title=Visualizador de Mailer
 match_num_field=Coincidencia No. (0 para Aleatorio)\:
 max=M\u00E1ximo
 maximum_param=El valor m\u00E1ximo permitido para un rango de valores
 md5hex_assertion_failure=Error validando MD5\: obtuve {0} pero deber\u00EDa haber obtenido {1}
 md5hex_assertion_label=MD5Hex
 md5hex_assertion_md5hex_test=MD5Hex a Comprobar
 md5hex_assertion_title=Aserci\u00F3n MD5Hex
 menu_assertions=Aserciones
 menu_close=Cerrar
 menu_collapse_all=Colapsar todo
 menu_config_element=Elemento de Configuraci\u00F3n
 menu_edit=Editar
 menu_expand_all=Expandir todo
 menu_fragments=Fragmento de Prueba
 menu_generative_controller=Muestreador
 menu_listener=Receptor
 menu_logic_controller=Controlador L\u00F3gico
 menu_merge=Mezclar
 menu_modifiers=Modificadores
 menu_non_test_elements=Elementos NoDePrueba
 menu_open=Abrir
 menu_post_processors=Post Procesadores
 menu_pre_processors=Pre Procesadores
 menu_response_based_modifiers=Modificadores Basados en Respuesta
 menu_tables=Tabla
 menu_threads=Hilos (Usuarios)
 menu_timer=Temporizador
 metadata=MetaDatos
 method=M\u00E9todo\:
 mimetype=Tipo MIME
 minimum_param=El valor m\u00EDnimo admitido para un rango de valores
 minute=minuto
 modddn=Nombre de entrada antiguo
 modification_controller_title=Controlador de Modificaci\u00F3n
 modification_manager_title=Gestor de Modificaci\u00F3n
 modify_test=Prueba de Modificaci\u00F3n
 modtest=Prueba de Modificaci\u00F3n
 module_controller_module_to_run=M\u00F3dulo a ejecutar
 module_controller_title=Controlador de M\u00F3dulo
 module_controller_warning=No pudo encontrar el m\u00F3dulo\:
-monitor_equation_active=Activo\: (ocupado/m\u00E1x) > 25%
-monitor_equation_dead=Muerto\: no hay respuesta
-monitor_equation_healthy=Sano. (ocupado/m\u00E1x) < 25%
-monitor_equation_load=Carga\: ((ocupado/m\u00E1x) * 50) + ((memoria usada/memoria m\u00E1x) * 50)
-monitor_equation_warning=Aviso\: (ocupado/m\u00E1x) > 67%
-monitor_health_tab_title=Salud
-monitor_health_title=Resultados del Monitor
-monitor_is_title=Utilizar como Monitor
-monitor_label_left_bottom=0 %
-monitor_label_left_middle=50 %
-monitor_label_left_top=100 %
-monitor_label_prefix=Prefijo de conexi\u00F3n
-monitor_label_right_active=Activo
-monitor_label_right_dead=Muerto
-monitor_label_right_healthy=Sano
-monitor_label_right_warning=Aviso
-monitor_legend_health=Salud
-monitor_legend_load=Carga
-monitor_legend_memory_per=Memoria % (usada/total)
-monitor_legend_thread_per=Hilo % (ocupado/m\u00E1x)
-monitor_load_factor_mem=50
-monitor_load_factor_thread=50
-monitor_performance_servers=Servidores
-monitor_performance_tab_title=Rendimiento
-monitor_performance_title=Gr\u00E1fico de Rendimiento
 name=Nombre\:
 new=Nuevo
 newdn=Nuevo distinghuised name
 no=Noruego
 number_of_threads=N\u00FAmero de Hilos
 obsolete_test_element=Este elemento de test es obsoleto
 once_only_controller_title=Controlador Only Once
 opcode=opCode
 open=Abrir...
 option=Opciones
 optional_tasks=Tareas Opcionales
 paramtable=Enviar Par\u00E1metros Con la Petici\u00F3n\:
 password=Contrase\u00F1a
 paste=Pegar
 paste_insert=Pegar como Inserci\u00F3n
 path=Ruta\:
 path_extension_choice=Extensi\u00F3n de Path (utilice ";" como separador)
 path_extension_dont_use_equals=No utilice el signo igual en la extensi\u00F3n del path (compatibilidad con Intershop Enfinity)
 path_extension_dont_use_questionmark=No utilice el signo interrogaci\u00F3n en la extensi\u00F3n del path (compatibilidad con Intershop Enfinity)
 patterns_to_exclude=URL Patrones a Excluir
 patterns_to_include=URL Patrones a Incluir
 pkcs12_desc=Clave PKCS (*.p12)
 pl=Polaco
 port=Puerto\:
 post_thread_group_title=Tirar abajo grupo de Hilos
 property_as_field_label={0}\:
 property_default_param=Valor por defecto
 property_edit=Editar
 property_editor.value_is_invalid_message=El texto que acaba de introducir no es un valor v\u00E1lido para esta propiedad. La propiedad ser\u00E1 devuelta a su valor anterior.
 property_editor.value_is_invalid_title=Entrada inv\u00E1lida
 property_name_param=Nombre de propiedad
 property_returnvalue_param=\u00BFRetornar el valor original de la propiedad (falso, por defecto)?
 property_tool_tip={0}\: {1}
 property_undefined=No definido
 property_value_param=Valor de propiedad
 property_visualiser_title=Visualizador de propiedades
 protocol=Protocolo\:
 protocol_java_border=Clase java
 protocol_java_classname=Nombre de clase\:
 protocol_java_config_tile=Muestra de Configure Java
 protocol_java_test_title=Test Java
 provider_url=URL Proveedor
 proxy_assertions=A\u00F1adir Aserciones
 proxy_cl_error=Si est\u00E1 especificando un servidor proxy, el puerto y el host deben ser provistos.
 proxy_content_type_exclude=Excluir\:
 proxy_content_type_filter=Filtro de tipo de contenido
 proxy_content_type_include=Incluir\:
 proxy_daemon_bind_error=No pudo crear el proxy - puerto en uso. Escoger otro puerto.
 proxy_daemon_error=No pudo crear el proxy - ver traza para m\u00E1s detalles
 proxy_headers=Capturar Cabeceras HTTP
 proxy_regex=Coincidencia Regex
 proxy_sampler_settings=Par\u00E1metros muestra HTTP
 proxy_sampler_type=Tipo\:
 proxy_separators=A\u00F1adir Separadores
 proxy_target=Controlador Objetivo\:
 proxy_test_plan_content=Contenido del plan de pruebas
 proxy_title=Servidor Proxy HTTP
 pt_br=Portugu\u00E9s (Brasile\u00F1o)
 ramp_up=Periodo de Subida (en segundos)\:
 random_control_title=Controlador Aleatorio
 random_order_control_title=Controlador Orden Aleatorio
 realm=Dominio (realm)
 record_controller_title=Controlador Grabaci\u00F3n
 ref_name_field=Nombre de Referencia\:
 regex_extractor_title=Extractor de Expresiones Regulares
 regex_field=Expresi\u00F3n Regular\:
 regex_source=Campo de Respuesta a comprobar
 regex_src_body=Cuerpo
 regex_src_body_unescaped=Cuerpo (No escapado)
 regex_src_hdrs=Cabeceras
 regex_src_url=URL
 regexfunc_param_1=Expresi\u00F3n regular usada para buscar resultados en la peticiones previas
 regexfunc_param_2=Plantilla para la cadena de sustituci\u00F3n, utilizando grupos de la expresi\u00F3n regular. El formato es $[grupo]$.\nEjemplo $1$.
 regexfunc_param_3=Qu\u00E9 coincidencia utilizar. Un entero 1 o mayor, RAND para indicar a JMeter que utilice un n\u00FAmero aleatorio, un floar o ALL para indicar que todas las coincidencias deber\u00EDan ser utilizadas
 regexfunc_param_4=Texto intermedio. Si se selecciona ALL, the texto intermedio ser\u00E1 utilizado para generar los resultados
 regexfunc_param_5=Texto por Defecto. Utilizado en lugar de la plantilla si la expresi\u00F3n regular no encuentra coincidencias. 
 regexfunc_param_7=Nombre de la variable de entrada que contiene el texto a ser parseado ([muestra anterior])
 regexp_render_no_text=El dato de respuesta del resultado no es texto.
 regexp_tester_button_test=Test
 regexp_tester_field=Expresi\u00F3n regular\:
 regexp_tester_title=Testeador de RegExp
 remote_error_init=Error inicializando el servidor remoto
 remote_error_starting=Error arrancando el servidor remoto
 remote_exit=Salir Remoto
 remote_exit_all=Salir de Todo Remoto
 remote_shut=Apagar remoto
 remote_shut_all=Apagar todo remoto
 remote_start=Arrancar Remoto
 remote_start_all=Arrancar Todo Remoto
 remote_stop=Parar Remoto
 remote_stop_all=Parar Todo Remoto
 remove=Borrar
 rename=Renombrar entrada
 report=Informe
 report_bar_chart=Gr\u00E1fico de barras
 report_bar_graph_url=URL
 report_base_directory=Directorio base
 report_chart_caption=Leyenda del gr\u00E1fico
 report_chart_x_axis=Eje X
 report_chart_x_axis_label=Etiqueta para el eje X
 report_chart_y_axis=Eje Y
 report_chart_y_axis_label=Etiqueta para el eje Y
 report_line_graph=Gr\u00E1fico de l\u00EDneas
 report_line_graph_urls=Incluir URL
 report_output_directory=Directorio de salida para el informe
 report_page=P\u00E1gina del informe
 report_page_element=Elemento de p\u00E1gina
 report_page_footer=Pie de p\u00E1gina
 report_page_header=Cabecera de p\u00E1gina
 report_page_index=Crear \u00EDndice de p\u00E1gina
 report_page_intro=P\u00E1gina de introducci\u00F3n
 report_page_style_url=URL de la hoja de estilos
 report_page_title=T\u00EDtulo de p\u00E1gina
 report_pie_chart=Gr\u00E1fico de tarta
 report_plan=Esquema del reporte
 report_select=Seleccionar
 report_summary=Resumen de informe
 report_table=Tabla de informe
 report_writer=Escritor del reporte
 report_writer_html=Escritor HTML del reporte
 request_data=Pedir Datos
 reset_gui=Resetear GUI
 response_save_as_md5=\u00BFGuardar la respuesta como MD5 hash?
 restart=Rearranque
 resultaction_title=Manejador de Acci\u00F3n para Status de Resultados 
 resultsaver_errors=Guardar Respuestas Fallidas Solamente
 resultsaver_prefix=Prefijo de nombre de archivo\:
 resultsaver_skipautonumber=No a\u00F1adir n\u00FAmero al prefijo
 resultsaver_skipsuffix=No a\u00F1adir sufijo
 resultsaver_success=Guardar s\u00F3lo respuestas satisfactorias
 resultsaver_title=Guardar respuestas en archivo
 resultsaver_variable=Nombre de variable\:
 retobj=Devolver objeto
 reuseconnection=Reusar conexi\u00F3n
 revert_project=Revertir
 revert_project?=\u00BFRevertir proyecto?
 root=Ra\u00EDz
 root_title=Ra\u00EDz
 run=Lanzar
 running_test=Test lanzado
 runtime_controller_title=Controlador Tiempo de Ejecuci\u00F3n
 runtime_seconds=Tiempo de ejecuci\u00F3n (segundos)
 sample_result_save_configuration=Guardar Configuraci\u00F3n de Resultado de Muestra
 sample_scope=Aplicar a\:
 sample_scope_all=Muestra principal y submuestras
 sample_scope_children=S\u00F3lo submuestras
 sample_scope_parent=S\u00F3lo muestra principal
 sample_scope_variable=Variable JMeter
 sampler_label=Etiqueta
 sampler_on_error_action=Acci\u00F3n a tomar despu\u00E9s de un error de Muestreador
 sampler_on_error_continue=Continuar
 sampler_on_error_start_next_loop=Comenzar siguiente iteraci\u00F3n
 sampler_on_error_stop_test=Parar Test
 sampler_on_error_stop_test_now=Parar test ahora
 sampler_on_error_stop_thread=Parar Hilo
 save=Guardar
 save?=\u00BFGuardar?
 save_all_as=Guardar Plan de Pruebas como
 save_as=Guardar selecci\u00F3n como...
 save_as_error=\u00A1M\u00E1s de un item seleccionado\!
 save_as_image=Guardar como imagen
 save_as_image_all=Guardar la pantalla como imagen
 save_assertionresultsfailuremessage=Guardar Mensaje de Fallo de Resultados de Aserci\u00F3n
 save_assertions=Guardar Resultados de Aserci\u00F3n
 save_asxml=Guardar Como XML
 save_bytes=Guardar conteo de bytes
 save_code=Guardar C\u00F3digo de Respuesta
 save_datatype=Guardar Tipo de Datos
 save_encoding=Guardar Codificaci\u00F3n
 save_fieldnames=Guardar Nombre de Campo
 save_filename=Guardar el nombre del fichero de respuesta
 save_graphics=Guardar Gr\u00E1ficos
 save_hostname=Guardar el nombre de host
 save_idletime=Guardar tiempo inactivo
 save_label=Guardar Etiqueta
 save_latency=Guardar Latencia
 save_message=Guardar Mensaje de Respuesta
 save_overwrite_existing_file=El fichero seleccionado ya existe, \u00BFquiere sobreescribirlo?
 save_requestheaders=Guardar Cabeceras de Petici\u00F3n
 save_responsedata=Guardar Datos de Respuesta
 save_responseheaders=Guardar Cabeceras de Respuesta
 save_samplecount=Guardar muestra y conteo de error
 save_samplerdata=Guardar Datos de Muestreador
 save_subresults=Guardar Sub Resultados
 save_success=Guardado Correctamente
 save_threadcounts=Guardar conteos hilos activos
 save_threadname=Guardar Nombre de Hilo
 save_time=Guardar Tiempo
 save_timestamp=Guardar Etiqueta de Tiempo
 save_url=Guardar URL
 sbind=Conexi\u00F3n/Desconexi\u00F3n Simple
 scheduler=Planificador
 scheduler_configuration=Configuraci\u00F3n del Planificador
 scope=\u00C1mbito
 search_base=Base de B\u00FAsqueda
 search_filter=Filtro de B\u00FAsqueda
 search_test=Prueba de B\u00FAsqueda
 search_text_button_close=Cerrar
 search_text_button_find=Encontrar
 search_text_button_next=Encontrar siguiente
 search_text_chkbox_case=Sensible a may\u00FAsculas
 search_text_chkbox_regexp=Expresi\u00F3n regular
 search_text_field=Buscar\:
 search_text_msg_not_found=Texto no encontrado
 search_text_title_not_found=No encontrado
 searchbase=Base de B\u00FAsqueda
 searchfilter=Filtro de B\u00FAsqueda
 searchtest=Prueba de B\u00FAsqueda
 second=segundo
 secure=Seguro
 send_file=Enviar un archivo Con la Petici\u00F3n
 send_file_browse=Navegar...
 send_file_filename_label=Nombre de Archivo\:
 send_file_mime_label=Tipo MIME\:
 send_file_param_name_label=Nombre de Par\u00E1metro\:
 server=Nombre de Servidor o IP\:
 servername=Nombre de Servidor\:
 session_argument_name=Nombre de Argumento de Sesi\u00F3n
 setup_thread_group_title=Montar grupo de Hilos
 should_save=Deber\u00EDa guardar el plan de pruebas antes de lanzarlo. Si est\u00E1 utilizando archivos de datos (ie, para DCV o _StringFromFile), entonces es especialmente importante que primero guarde su script de prueba.
 shutdown=Interrumpir
 simple_config_element=Elemento de Configuraci\u00F3n Simple
 simple_data_writer_title=Escritor de Datos Simple
 size_assertion_comparator_error_equal=siendo igual a
 size_assertion_comparator_error_greater=siendo mayor que
 size_assertion_comparator_error_greaterequal=siendo mayor o igual a
 size_assertion_comparator_error_less=siendo menor que
 size_assertion_comparator_error_lessequal=siendo menor o igual que
 size_assertion_comparator_error_notequal=no siendo igual a
 size_assertion_comparator_label=Tipo de Comparaci\u00F3n
 size_assertion_failure=El resultado tuvo el tama\u00F1o incorrecto\: fu\u00E9 {0} bytes, pero deber\u00EDa haber sido {1} {2} bytes.
 size_assertion_input_error=Por favor, introduzca un entero positivo v\u00E1lido.
 size_assertion_label=Tama\u00F1o en bytes\:
 size_assertion_size_test=Tama\u00F1o a Comprobar
 size_assertion_title=Aserci\u00F3n de Tama\u00F1o
 smime_assertion_issuer_dn=Nombre \u00FAnico del emisor\:
 smime_assertion_message_position=Ejecutar aserci\u00F3n sobre el mensaje a partir de la posici\u00F3n
 smime_assertion_not_signed=Mensaje no firmado
 smime_assertion_signature=Firma
 smime_assertion_signer=Cerficado del firmante
 smime_assertion_signer_by_file=Certificado
 smime_assertion_signer_constraints=Chequear valores
 smime_assertion_signer_dn=Nombre \u00FAnico del firmante
 smime_assertion_signer_email=Direcci\u00F3n de correo del firmante
 smime_assertion_signer_no_check=No chequear
 smime_assertion_signer_serial=N\u00FAmero de serie
 smime_assertion_title=Aserci\u00F3n SMIME
 smime_assertion_verify_signature=Verificar firma
 smtp_additional_settings=Par\u00E1metros adicionales
 smtp_attach_file=Adjuntar fichero(s)\:
 smtp_attach_file_tooltip=Separar ficheros con ";"
 smtp_auth_settings=Par\u00E1metros de autentificaci\u00F3n
 smtp_bcc=Direcciones en copia oculta (BCC)\:
 smtp_cc=Direcciones en copia(CC)\:
 smtp_default_port=(Por defecto\: SMTP\:25, SSL\:465, StartTLS\:587)
 smtp_eml=Enviar .eml\:
 smtp_enabledebug=\u00BFActivar las trazas de depuraci\u00F3n?
 smtp_enforcestarttls=Imponer StartTLS
 smtp_enforcestarttls_tooltip=<html><b>Forza</b> al servidor a usar StartTLS.<br />Si no es seleccionado el servidor SMTP no soporta  StartTLS, <br />una conexi\u00F3n normal SMTP ser\u00E1 usada como reserva. <br /><i>Por favor advierta</i> que este objeto crea un fichero en "/tmp/", <br />so Esto causar\u00E1 problemas bajo Windows.</html>
 smtp_from=Direcci\u00F3n Desde\:
 smtp_header_add=A\u00F1adir cabecera
 smtp_header_name=Nombre de cabecera
 smtp_header_remove=Suprimir
 smtp_header_value=Valor de cabecera
 smtp_mail_settings=Par\u00E1metros del correo
 smtp_message=Mensaje\:
 smtp_message_settings=Par\u00E1metros del mensaje\:
 smtp_messagesize=Calcular tama\u00F1o del mensaje
 smtp_password=Contrase\u00F1a\:
 smtp_plainbody=Enviar texto plano(i.e. no multipart/mixed)
 smtp_replyto=Direcci\u00F3n Responder-a\:
 smtp_sampler_title=Muestra SMTP
 smtp_security_settings=Par\u00E1metros de seguridad
 smtp_server=Servidor\:
 smtp_server_port=Puerto\:
 smtp_server_settings=Par\u00E1metros del servidor
 smtp_subject=Asunto\:
 smtp_suppresssubj=Suprimir la cabecera del asunto
 smtp_timestamp=Incluir timestamp en el asunto
 smtp_to=Direcci\u00F3n A\:
 smtp_trustall=Verificar todos  los certificados
 smtp_trustall_tooltip=<html><b>Fuerza</b> a JMeter a verificar todos los certificados, que vienen del CA.</html>
 smtp_truststore=Almacenamiento local de confianza\:
 smtp_truststore_tooltip=<html>Nombre de la ruta del almacenamiento local de confianza.<br />Rutas relativas son resueltas contra el directorio actual.<br />Si esto falla, contra el directorio que contiene el script de test (JMX file)</html>
 smtp_useauth=Usar autentificaci\u00F3n
 smtp_usenone=No usar funcionalidades de seguridad
 smtp_username=Nombre de usuario\:
 smtp_usessl=Usar SSL
 smtp_usestarttls=Usar StartTLS
 smtp_usetruststore=Usar almacenamiento local de confianza
 smtp_usetruststore_tooltip=<html>Permite a JMeter usar un almacenamiento de confianza local.</html>
 soap_action=Acci\u00F3n Soap
 soap_data_title=Datos Soap/XML-RPC
 soap_sampler_title=Petici\u00F3n Soap/XML-RPC
 soap_send_action=Enviar SOAPAction\:
 split_function_separator=Texto para separar. Por defecto es , (coma)
 split_function_string=Texto a separar
 ssl_alias_prompt=Por favor, introduzca su alias favorito
 ssl_alias_select=Seleccione su alias para la prueba
 ssl_alias_title=Alias de Cliente
 ssl_error_title=Problema con el KeyStore
 ssl_pass_prompt=Por favor, introduzca su contrase\u00F1a
 ssl_pass_title=Contrase\u00F1a de KeyStore
 ssl_port=Puerto SSL
 sslmanager=Gestor SSL
 start=Arrancar
 start_no_timers=Inicio no se detiene
 starttime=Tiempo de Arranque
 stop=Parar
 stopping_test=Parando todos los hilos. Por favor, sea paciente.
 stopping_test_failed=Uno o m\u00E1s hilos de test no saldr\u00E1n; ver fichero de log.
 stopping_test_title=Parando la Prueba
 string_from_file_encoding=Codificaci\u00F3n, si no el por defecto de la plataforma (opcional) 
 string_from_file_file_name=Introduzca ruta completa al archivo
 string_from_file_seq_final=N\u00FAmero final de secuencia de archivo
 string_from_file_seq_start=N\u00FAmero inicial de secuencia de archivo
 summariser_title=Generar Resumen de Resultados
 summary_report=Reporte resumen
 switch_controller_label=Conmutar Valor
 switch_controller_title=Conmutar Controlador
 table_visualizer_bytes=Bytes
 table_visualizer_sample_num=Muestra \#
 table_visualizer_sample_time=Tiempo de Muestra (ms)
 table_visualizer_start_time=Tiempo de comienzo
 table_visualizer_status=Estado
 table_visualizer_success=\u00C9xito
 table_visualizer_thread_name=Nombre del hilo
 table_visualizer_warning=Alerta
 tcp_classname=Nombre de clase TCPClient\:
 tcp_config_title=Configuraci\u00F3n de Muestreador TCP
 tcp_nodelay=Establecer SinRetardo
 tcp_port=Puerto\:
 tcp_request_data=Texto a enviar
 tcp_sample_title=Muestreador TCP
 tcp_timeout=Timeout (milisegundos)
 template_field=Plantilla\:
 test=Prueba
 test_action_action=Acci\u00F3n
 test_action_duration=Duraci\u00F3n
 test_action_pause=Pausa
 test_action_stop=Parar
 test_action_stop_now=Parar ahora
 test_action_target=Objetivo
 test_action_target_test=Todos los Hilos
 test_action_target_thread=Hilo Actual
 test_action_title=Acci\u00F3n de Prueba
 test_configuration=Configuraci\u00F3n de Pruebas
 test_fragment_title=Fragmento de Prueba
 test_plan=Plan de Pruebas
 test_plan_classpath_browse=A\u00F1adir directorio o jar al classpath
 testconfiguration=Configuraci\u00F3n de Pruebas
 testplan.serialized=Lanza cada Grupo de Hilos separadamente (i.e. lanza un grupo antes de lanzar el siguiente)
 testplan_comments=Comentarios
 testt=Prueba
 textbox_cancel=Cancelar
 textbox_close=Cerrar
 textbox_save_close=Guardar y cerrar
 textbox_title_edit=Editar texto
 textbox_title_view=Ver texto
 textbox_tooltip_cell=Doble click para ver/editar
 thread_delay_properties=Propiedades de Retardo de Hilos
 thread_group_title=Grupo de Hilos
 thread_properties=Propiedades de Hilo
 threadgroup=Grupo de Hilos
 throughput_control_bynumber_label=Ejecuciones Totales
 throughput_control_bypercent_label=Porcentaje de Ejecuciones
 throughput_control_perthread_label=Por Usuario
 throughput_control_title=Controlador Throughput
 throughput_control_tplabel=Rendimiento
 time_format=Cadena de formateo para SimpleDateFormat(opcional)
 timelim=L\u00EDmite de Tiempo
 tr=Turco
 transaction_controller_include_timers=Incluir la duraci\u00F3n de temporizador y pre-post procesadores en la muestra generada
 transaction_controller_parent=Generar muestra padre
 transaction_controller_title=Controlador Transaction
 unbind=Desligar Hilo
 unescape_html_string=Cadena de texto para quitar caracteres de escapado
 unescape_string=Cadena de texto contiene caracteres Java de escapado
 uniform_timer_delay=Desplazamiento de Retraso Constante (en milisegundos)\:
 uniform_timer_memo=A\u00F1ade un retardo aleatorio con una distribuci\u00F3n uniforme
 uniform_timer_range=M\u00E1ximo retardo Aleatorio (en milisegundos)
 uniform_timer_title=Temporizador Aleatorio Uniforme
 update_per_iter=Actualizar Una Vez Por Iteraci\u00F3n
 upload=Subida de Archivo
 upper_bound=L\u00EDmite Superior
 url=URL
 url_config_get=GET
 url_config_http=HTTP
 url_config_https=HTTPS
 url_config_post=POST
 url_config_protocol=Protocolo\:
 url_config_title=Valores por Defecto para Petici\u00F3n HTTP
 url_full_config_title=Muestra UrlFull
 url_multipart_config_title=Valores por Defecto para Petici\u00F3n HTTP Multipart
 use_expires=Usar cabecera 'Cache-Control/Expires' cuando se procesan peticiones GET
 use_keepalive=Utilizar KeepAlive
 use_multipart_for_http_post=Usar 'multipart/form-data' para HTTP POST
 use_multipart_mode_browser=Cabeceras compatibles con navegadores
 use_recording_controller=Utilizar Controlador Recording
 user=Usuario
 user_defined_test=Prueba Definida por el Usuario
 user_defined_variables=Variables definidas por el Usuario
 user_param_mod_help_note=(No cambie esto. En su lugar, modifique el archivo con ese nombre en el directorio /bin de JMeter)
 user_parameters_table=Par\u00E1metros
 user_parameters_title=Par\u00E1metros de Usuario
 userdn=Nombre de Usuario
 username=Nombre de Usuario
 userpw=Contrase\u00F1a
 value=Valor
 var_name=Nombre de Referencia
 variable_name_param=Nombre de variable(puede incluir variables y referencias a funci\u00F3n)
 view_graph_tree_title=Ver \u00C1rbol Gr\u00E1fico
 view_results_assertion_error=Error de aserci\u00F3n\:
 view_results_assertion_failure=Fallo de aserci\u00F3n\:
 view_results_assertion_failure_message=Mensaje de fallo de aserci\u00F3n\:
 view_results_desc=Muestra los resultados de texto del muestreo en forma de \u00E1rbol
 view_results_error_count=Conteo de error\:
 view_results_fields=campos\:
 view_results_in_table=Ver Resultados en \u00C1rbol
 view_results_latency=Latencia\:
 view_results_load_time=Tiempo de carga\:
 view_results_render=Renderizador\:
 view_results_render_html=HTML
 view_results_render_html_embedded=HTML(descargar elementos embebidos)
 view_results_render_json=JSON
 view_results_render_text=Texto
 view_results_render_xml=XML
 view_results_request_headers=Cabeceras de petici\u00F3n\:
 view_results_response_code=C\u00F3digo de respuesta\:
 view_results_response_headers=Cabeceras de respuesta\:
 view_results_response_message=Mensaje de respuesta\:
 view_results_response_too_large_message=Respuesta muy larga a ser mostrada. Tama\u00F1o\:
 view_results_response_partial_message=Principio del mensaje:
 view_results_sample_count=Conteo de muestra\:
 view_results_sample_start=Comienzo de muestra\:
 view_results_search_pane=Panel de b\u00FAsqueda
 view_results_size_in_bytes=Tama\u00F1o en bytes\:
 view_results_tab_assertion=Resultado de la aserci\u00F3n
 view_results_tab_request=Petici\u00F3n
 view_results_tab_response=Datos de Respuesta
 view_results_tab_sampler=Resultado del Muestreador
 view_results_table_fields_key=Campo adicional
 view_results_table_fields_value=Valor
 view_results_table_headers_key=Cabecera de respuesta
 view_results_table_headers_value=Valor
 view_results_table_request_headers_key=Cabecera de petici\u00F3n
 view_results_table_request_headers_value=Valor
 view_results_table_request_http_cookie=Cookie
 view_results_table_request_http_host=M\u00E1quina
 view_results_table_request_http_method=M\u00E9todo
 view_results_table_request_http_nohttp=No muestra HTTP
 view_results_table_request_http_path=Ruta
 view_results_table_request_http_port=Puerto
 view_results_table_request_http_protocol=Protocolo
 view_results_table_request_params_key=Nombre de par\u00E1metro
 view_results_table_request_params_value=Valor
 view_results_table_request_raw_nodata=No mostrar datos
 view_results_table_request_tab_http=HTTP
 view_results_table_request_tab_raw=En bruto
 view_results_table_result_tab_parsed=Parseado
 view_results_table_result_tab_raw=En bruto
 view_results_thread_name=Nombre del hilo\:
 view_results_title=Ver Resultados
 view_results_tree_title=Ver \u00C1rbol de Resultados
 warning=\u00A1Atenci\u00F3n\!
 web_proxy_server_title=Servidor Proxy
 web_request=Petici\u00F3n HTTP
 web_server=Servidor Web
 web_server_client=Implementaci\u00F3n del Cliente\:
 web_server_domain=Nombre de Servidor o IP\:
 web_server_port=Puerto\:
 web_server_timeout_connect=Conexi\u00F3n\:
 web_server_timeout_response=Respuesta\:
 web_server_timeout_title=Timeout (milisegundos)
 web_testing2_title=Petici\u00F3n HTTP HttpClient
 web_testing_embedded_url_pattern=Las URLs embebidas deben coincidir a\:
 web_testing_retrieve_images=Recuperar Todos los Recursos Empotrados de Archivos HTML
 web_testing_source_ip=Direcci\u00F3n IP fuente\:
 web_testing_title=Petici\u00F3n HTTP
 while_controller_label=Condici\u00F3n (funci\u00F3n o variable)
 while_controller_title=Controlador While
 workbench_title=Banco de Trabajo
 xml_assertion_title=Aserci\u00F3n XML
 xml_download_dtds=Recuperar DTDs externos
 xml_namespace_button=Utilizar NameSpaces
 xml_tolerant_button=Parser XML/HTML Tolerante
 xml_validate_button=Validar XML
 xml_whitespace_button=Ignorar Espacios
 xmlschema_assertion_label=Nombre de Archivo\:
 xmlschema_assertion_title=Aserci\u00F3n de Esquema XML
 xpath_assertion_button=Validar
 xpath_assertion_check=Comprobar Expresi\u00F3n XPath
 xpath_assertion_error=Error en XPath
 xpath_assertion_failed=Expresi\u00F3n XPath Inv\u00E1lida
 xpath_assertion_label=XPath
 xpath_assertion_negate=True si nada coincide
 xpath_assertion_option=Opciones para parsear XML
 xpath_assertion_test=Aserci\u00F3n XPath
 xpath_assertion_tidy=Prueba y ordena la entrada
 xpath_assertion_title=Aserci\u00F3n XPath
 xpath_assertion_valid=Expresi\u00F3n XPath V\u00E1lida
 xpath_assertion_validation=Validar el XML contra el DTD
 xpath_assertion_whitespace=Ignorar espacios
 xpath_expression=Expresi\u00F3n XPath contra la que comparar
 xpath_extractor_fragment=\u00BFRetornar el fragmento XPATH en el caso de contenido de texto?
 xpath_extractor_query=Consulta XPath\:
 xpath_extractor_title=Extractor XPath
 xpath_file_file_name=Archivo XML del que obtener valores
 xpath_tidy_quiet=Silencioso
 xpath_tidy_report_errors=Reportar los errores
 xpath_tidy_show_warnings=Mostrar advertencias
 you_must_enter_a_valid_number=Debe introducir un n\u00FAmero v\u00E1lido
 zh_cn=Chino (Simplificado)
 zh_tw=Chino (Tradicional)
diff --git a/src/core/org/apache/jmeter/resources/messages_fr.properties b/src/core/org/apache/jmeter/resources/messages_fr.properties
index 06306c460..17b28c369 100644
--- a/src/core/org/apache/jmeter/resources/messages_fr.properties
+++ b/src/core/org/apache/jmeter/resources/messages_fr.properties
@@ -1,1354 +1,1334 @@
 #   Licensed to the Apache Software Foundation (ASF) under one or more
 #   contributor license agreements.  See the NOTICE file distributed with
 #   this work for additional information regarding copyright ownership.
 #   The ASF licenses this file to You under the Apache License, Version 2.0
 #   (the "License"); you may not use this file except in compliance with
 #   the License.  You may obtain a copy of the License at
 # 
 #       http://www.apache.org/licenses/LICENSE-2.0
 # 
 #   Unless required by applicable law or agreed to in writing, software
 #   distributed under the License is distributed on an "AS IS" BASIS,
 #   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 #   See the License for the specific language governing permissions and
 #   limitations under the License.
 
 #Stored by I18NEdit, may be edited!
 about=A propos de JMeter
 active_threads_tooltip=Unit\u00E9s actives
 add=Ajouter
 add_as_child=Ajouter en tant qu'enfant
 add_from_clipboard=Ajouter depuis Presse-papier
 add_from_suggested_excludes=Ajouter exclusions propos\u00E9es
 add_parameter=Ajouter un param\u00E8tre
 add_pattern=Ajouter un motif \:
 add_test=Ajout
 add_user=Ajouter un utilisateur
 add_value=Ajouter valeur
 addtest=Ajout
 aggregate_graph=Graphique des statistiques
 aggregate_graph_choose_color=Choisir couleur
 aggregate_graph_choose_foreground_color=Couleur valeur
 aggregate_graph_color_bar=Couleur \:
 aggregate_graph_column=Colonne
 aggregate_graph_column_selection=S\u00E9lection de colonnes par libell\u00E9 \:
 aggregate_graph_column_settings=Param\u00E8tres colonne
 aggregate_graph_columns_to_display=Colonnes \u00E0 afficher \:
 aggregate_graph_dimension=Taille graphique
 aggregate_graph_display=G\u00E9n\u00E9rer le graphique
 aggregate_graph_draw_outlines=Bordure de barre ?
 aggregate_graph_dynamic_size=Taille de graphique dynamique
 aggregate_graph_font=Police \:
 aggregate_graph_height=Hauteur \:
 aggregate_graph_increment_scale=Intervalle \u00E9chelle \:
 aggregate_graph_legend=L\u00E9gende
 aggregate_graph_legend.placement.bottom=Bas
 aggregate_graph_legend.placement.left=Gauche
 aggregate_graph_legend.placement.right=Droite
 aggregate_graph_legend.placement.top=Haut
 aggregate_graph_legend_placement=Position \:
 aggregate_graph_max_length_xaxis_label=Longueur maximum du libell\u00E9 de l'axe des abscisses \:
 aggregate_graph_ms=Millisecondes
 aggregate_graph_no_values_to_graph=Pas de valeurs pour le graphique
 aggregate_graph_number_grouping=S\u00E9parateur de milliers ?
 aggregate_graph_response_time=Temps de r\u00E9ponse
 aggregate_graph_save=Enregistrer le graphique
 aggregate_graph_save_table=Enregistrer le tableau de donn\u00E9es
 aggregate_graph_save_table_header=Inclure l'ent\u00EAte du tableau
 aggregate_graph_size=Taille \:
 aggregate_graph_style=Style \:
 aggregate_graph_sync_with_name=Synchroniser avec nom
 aggregate_graph_tab_graph=Graphique
 aggregate_graph_tab_settings=Param\u00E8tres
 aggregate_graph_title=Graphique agr\u00E9g\u00E9
 aggregate_graph_title_group=Titre
 aggregate_graph_use_group_name=Ajouter le nom du groupe aux libell\u00E9s
 aggregate_graph_user_title=Titre du graphique \:
 aggregate_graph_value_font=Police de la valeur \:
 aggregate_graph_value_labels_vertical=Libell\u00E9 de valeurs vertical ?
 aggregate_graph_width=Largeur \:
 aggregate_graph_xaxis_group=Abscisses
 aggregate_graph_yaxis_group=Ordonn\u00E9es (milli-secondes)
 aggregate_graph_yaxis_max_value=Echelle maximum \:
 aggregate_report=Rapport agr\u00E9g\u00E9
 aggregate_report_bandwidth=Ko/sec re\u00e7us
 aggregate_report_sent_bytes_per_sec=KB/sec \u00E9mis
 aggregate_report_count=\# Echantillons
 aggregate_report_error=Erreur
 aggregate_report_error%=% Erreur
 aggregate_report_max=Max
 aggregate_report_median=M\u00E9diane
 aggregate_report_min=Min
 aggregate_report_rate=D\u00E9bit
 aggregate_report_stddev=Ecart type
 aggregate_report_total_label=TOTAL
 aggregate_report_xx_pct1_line={0}% centile
 aggregate_report_xx_pct2_line={0}% centile
 aggregate_report_xx_pct3_line={0}% centile
 ajp_sampler_title=Requ\u00EAte AJP/1.3
 als_message=Note \: Le parseur de log d'acc\u00E8s est g\u00E9n\u00E9rique et vous permet de se brancher \u00E0 
 als_message2=votre propre parseur. Pour se faire, impl\u00E9menter le LogParser, ajouter le jar au 
 als_message3=r\u00E9pertoire /lib et entrer la classe (fichier .class) dans l'\u00E9chantillon (sampler).
 analyze=En train d'analyser le fichier de donn\u00E9es
 anchor_modifier_title=Analyseur de lien HTML
 appearance=Apparence
 argument_must_not_be_negative=L'argument ne peut pas \u00EAtre n\u00E9gatif \!
 arguments_panel_title=Param\u00E8tres de commande
 assertion_assume_success=Ignorer le statut
 assertion_body_resp=Corps de r\u00E9ponse
 assertion_code_resp=Code de r\u00E9ponse
 assertion_contains=Contient (exp. r\u00E9guli\u00E8re)
 assertion_equals=Est \u00E9gale \u00E0 (texte brut)
 assertion_headers=Ent\u00EAtes de r\u00E9ponse
 assertion_matches=Correspond \u00E0 (exp. r\u00E9guli\u00E8re)
 assertion_message_resp=Message de r\u00E9ponse
 assertion_network_size=R\u00E9ponse compl\u00E8te
 assertion_not=Inverser
 assertion_pattern_match_rules=Type de correspondance du motif
 assertion_patterns_to_test=Motifs \u00E0 tester
 assertion_regex_empty_default_value=Utiliser la cha\u00EEne vide comme valeur par d\u00E9faut
 assertion_resp_field=Section de r\u00E9ponse \u00E0 tester
 assertion_resp_size_field=Taille \u00E0 v\u00E9rifier sur
 assertion_substring=Contient (texte brut)
 assertion_text_document=Document (texte)
 assertion_text_resp=Texte de r\u00E9ponse
 assertion_textarea_label=Assertions \:
 assertion_title=Assertion R\u00E9ponse
 assertion_url_samp=URL Echantillon
 assertion_visualizer_title=R\u00E9cepteur d'assertions
 attribute=Attribut \:
 attribute_field=Attribut \:
 attrs=Attributs
 auth_base_url=URL de base
 auth_manager_clear_per_iter=R\u00E9authentifier \u00E0 chaque it\u00E9ration ?
 auth_manager_options=Options
 auth_manager_title=Gestionnaire d'autorisation HTTP
 auths_stored=Autorisations stock\u00E9es
 average=Moyenne
 average_bytes=Moy. octets
 backend_listener=R\u00E9cepteur asynchrone
 backend_listener_classname=Impl\u00E9mentation du r\u00E9cepteur asynchrone
 backend_listener_paramtable=Param\u00E8tres
 backend_listener_queue_size=Taille de la queue
 bind=Connexion de l'unit\u00E9
 bouncy_castle_unavailable_message=Les jars de bouncycastle sont indisponibles, ajoutez les au classpath.
 browse=Parcourir...
 bsf_sampler_title=Echantillon BSF
 bsf_script=Script \u00E0 lancer (variables\: ctx vars props SampleResult sampler log Label FileName Parameters args[] OUT)
 bsf_script_file=Fichier script \u00E0 lancer \:
 bsf_script_language=Langage de script \:
 bsf_script_parameters=Param\u00E8tres \u00E0 passer au script/fichier \:
 bsh_assertion_script=Script (IO\: Failure[Message], Response. IN\: Response[Data|Code|Message|Headers], RequestHeaders, Sample[Label|rData])
 bsh_assertion_script_variables=Les variables suivantes sont d\u00E9finies pour le script \:\nEn lecture/\u00E9criture \: Failure, FailureMessage, SampleResult, vars, props, log.\nEn lecture seule \: Response[Data|Code|Message|Headers], RequestHeaders, SampleLabel, SamplerData, ctx
 bsh_assertion_title=Assertion BeanShell
 bsh_function_expression=Expression \u00E0 \u00E9valuer
 bsh_sampler_title=Echantillon BeanShell
 bsh_script=Script (voir ci-dessous pour les variables qui sont d\u00E9finies)
 bsh_script_file=Fichier script \:
 bsh_script_parameters=Param\u00E8tres  (-> String Parameters et String []bsh.args)
 bsh_script_reset_interpreter=R\u00E9initialiser l'interpr\u00E9teur bsh avant chaque appel
 bsh_script_variables=Les variables suivantes sont d\u00E9finies pour le script \:\nSampleResult, ResponseCode, ResponseMessage, IsSuccess, Label, FileName, ctx, vars, props, log
 busy_testing=Je suis occup\u00E9 \u00E0 tester, veuillez arr\u00EAter le test avant de changer le param\u00E8trage
 cache_manager_size=Nombre maximum d'\u00E9l\u00E9ments dans le cache
 cache_manager_title=Gestionnaire de cache HTTP
 cache_session_id=Identifiant de session de cache ?
 cancel=Annuler
 cancel_exit_to_save=Il y a des \u00E9l\u00E9ments qui n'ont pas \u00E9t\u00E9 sauv\u00E9s. Voulez-vous enregistrer avant de sortir ?
 cancel_new_from_template=Il y a des \u00E9l\u00E9ments qui n'ont pas \u00E9t\u00E9 sauv\u00E9s. Voulez-vous enregistrer avant de charger le mod\u00E8le ?
 cancel_new_to_save=Il y a des \u00E9l\u00E9ments qui n'ont pas \u00E9t\u00E9 sauv\u00E9s. Voulez-vous enregistrer avant de nettoyer le plan de test ?
 cancel_revert_project=Il y a des \u00E9l\u00E9ments qui n'ont pas \u00E9t\u00E9 sauv\u00E9s. Annuler les changements et revenir \u00E0 la derni\u00E8re sauvegarde du plan de test ?
 change_parent=Changer le contr\u00F4leur
 char_value=Caract\u00E8re num\u00E9rique Unicode (d\u00E9cimal or 0xhex)
 check_return_code_title=V\u00E9rifier le code retour
 choose_function=Choisir une fonction
 choose_language=Choisir une langue
 clear=Nettoyer
 clear_all=Nettoyer tout
 clear_cache_each_iteration=Vider le cache \u00E0 chaque it\u00E9ration ?
 clear_cache_per_iter=Nettoyer le cache \u00E0 chaque it\u00E9ration ?
 clear_cookies_per_iter=Nettoyer les cookies \u00E0 chaque it\u00E9ration ?
 clipboard_node_read_error=Une erreur est survenue lors de la copie du noeud
 close=Fermer
 closeconnection=Fermer la connexion
 collapse_tooltip=Cliquer pour ouvrir / r\u00E9duire
 column_delete_disallowed=Supprimer cette colonne n'est pas possible
 column_number=Num\u00E9ro de colonne du fichier CSV | next | *alias
 command_config_box_title=Commande \u00E0 ex\u00E9cuter
 command_config_std_streams_title=Flux standard (fichiers)
 command_field_title=Commande \:
 compare=Comparaison
 comparefilt=Filtre de comparaison
 comparison_differ_content=Le contenu des r\u00E9ponses est diff\u00E9rent.
 comparison_differ_time=La diff\u00E9rence du temps de r\u00E9ponse diff\u00E8re de plus de 
 comparison_invalid_node=Noeud invalide 
 comparison_regex_string=Expression r\u00E9guli\u00E8re
 comparison_regex_substitution=Substitution
 comparison_response_time=Temps de r\u00E9ponse \: 
 comparison_unit=ms
 comparison_visualizer_title=R\u00E9cepteur d'assertions de comparaison
 config_element=El\u00E9ment de configuration
 config_save_settings=Configurer
 confirm=Confirmer
 constant_throughput_timer_memo=Ajouter un d\u00E9lai entre les \u00E9chantillions pour obtenir un d\u00E9bit constant
 constant_timer_delay=D\u00E9lai d'attente (en millisecondes) \:
 constant_timer_memo=Ajouter un d\u00E9lai fixe entre les \u00E9chantillions de test
 constant_timer_title=Compteur de temps fixe
 content_encoding=Encodage contenu \:
 controller=Contr\u00F4leur
 cookie_implementation_choose=Impl\u00E9mentation \:
 cookie_manager_policy=Politique des cookies \:
 cookie_manager_title=Gestionnaire de cookies HTTP
 cookie_options=Options
 cookies_stored=Cookies stock\u00E9s
 copy=Copier
 counter_config_title=Compteur
 counter_per_user=Suivre le compteur ind\u00E9pendamment pour chaque unit\u00E9 de test
 counter_reset_per_tg_iteration=R\u00E9initialiser le compteur \u00E0 chaque it\u00E9ration du groupe d'unit\u00E9s
 countlim=Limiter le nombre d'\u00E9l\u00E9ments retourn\u00E9s \u00E0
 critical_section_controller_label=Nom du verrou
 critical_section_controller_title=Contr\u00F4leur Section critique
 cssjquery_attribute=Attribut
 cssjquery_empty_default_value=Utiliser la cha\u00EEne vide comme valeur par d\u00E9faut
 cssjquery_impl=Impl\u00E9mentation CSS/JQuery\:
 cssjquery_render_no_text=Les donn\u00E9es de r\u00E9ponse ne sont pas du texte.
 cssjquery_tester_button_test=Tester
 cssjquery_tester_error=Une erreur s''est produite lors de l''\u00E9valuation de l''expression\:{0}, erreur\:{1}
 cssjquery_tester_field=S\u00E9lecteur\:
 cssjquery_tester_title=Testeur CSS/JQuery
 csvread_file_file_name=Fichier CSV pour obtenir les valeurs de | *alias
 cut=Couper
 cut_paste_function=Fonction de copier/coller de cha\u00EEne de caract\u00E8re
 database_conn_pool_max_usage=Utilisation max pour chaque connexion\:
 database_conn_pool_props=Pool de connexions \u221A\u2020 la base de donn\u221A\u00A9es
 database_conn_pool_size=Nombre de Connexions dans le Pool\:
 database_conn_pool_title=Valeurs par d\u00E9faut du Pool de connexions JDBC
 database_driver_class=Classe du Driver\:
 database_login_title=Valeurs par d\u00E9faut de la base de donn\u221A\u00A9es JDBC
 database_sql_query_string=Requ\u00EAte SQL \:
 database_sql_query_title=Requ\u00EAte SQL JDBC par d\u00E9faut
 database_testing_title=Requ\u221A\u2122te JDBC
 database_url=URL JDBC\:
 database_url_jdbc_props=URL et driver JDBC de la base de donn\u221A\u00A9es
 ddn=DN \:
 de=Allemand
 debug_off=D\u00E9sactiver le d\u00E9bogage
 debug_on=Activer le d\u00E9bogage
 default_parameters=Param\u00E8tres par d\u00E9faut
 default_value_field=Valeur par d\u00E9faut \:
 delay=D\u00E9lai avant d\u00E9marrage (secondes) \:
 delayed_start=Cr\u00E9er les unit\u00E9s seulement quand n\u00E9cessaire
 delete=Supprimer
 delete_parameter=Supprimer le param\u00E8tre
 delete_test=Suppression
 delete_user=Supprimer l'utilisateur
 deltest=Suppression
 deref=D\u00E9r\u00E9f\u00E9rencement des alias
 description=Description
 detail=D\u00E9tail
 directory_field_title=R\u00E9pertoire d'ex\u00E9cution \:
 disable=D\u00E9sactiver
 distribution_graph_title=Graphique de distribution (DEPRECATED)
 distribution_note1=Ce graphique se mettra \u00E0 jour tous les 10 \u00E9chantillons
 dn=Racine DN \:
 dns_cache_manager_title=Gestionnaire de cache DNS
 dns_hostname_or_ip=Nom de machine ou adresse IP
 dns_servers=Serveurs DNS
 domain=Domaine \:
 done=Fait
 down=Descendre
 duplicate=Dupliquer
 duration=Dur\u00E9e (secondes) \:
 duration_assertion_duration_test=Dur\u00E9e maximale \u00E0 v\u00E9rifier
 duration_assertion_failure=L''op\u00E9ration a dur\u00E9e trop longtemps\: cela a pris {0} millisecondes, mais n''aurait pas d\u00FB durer plus de {1} millisecondes.
 duration_assertion_input_error=Veuillez entrer un entier positif valide.
 duration_assertion_label=Dur\u00E9e en millisecondes \:
 duration_assertion_title=Assertion Dur\u00E9e
 duration_tooltip=Temps pass\u00E9 depuis le d\u00E9but du test en cours
 edit=Editer
 email_results_title=R\u00E9sultat d'email
 en=Anglais
 enable=Activer
 encode=URL Encoder
 encode?=Encodage
 encoded_value=Valeur de l'URL encod\u00E9e
 endtime=Date et heure de fin \:
 entry_dn=Entr\u00E9e DN \:
 entrydn=Entr\u00E9e DN
 environment_panel_title=Variables d'environnement
 eolbyte=Valeur byte de l'indicateur de fin de ligne (EOL)\: 
 error_indicator_tooltip=Affiche le nombre d'erreurs dans le journal(log), cliquer pour afficher la console.
 error_loading_help=Erreur au chargement de la page d'aide
 error_occurred=Une erreur est survenue
 error_title=Erreur
 es=Espagnol
 escape_html_string=Cha\u00EEne d'\u00E9chappement
 eval_name_param=Variable contenant du texte et r\u00E9f\u00E9rences de fonctions
 evalvar_name_param=Nom de variable
 example_data=Exemple de donn\u00E9e
 example_title=Echantillon exemple
 exit=Quitter
 expected_return_code_title=Code retour attendu \: 
 expiration=Expiration
 expression_field=Expression CSS/JQuery \:
 field_name=Nom du champ
 file=Fichier
 file_already_in_use=Ce fichier est d\u00E9j\u00E0 utilis\u00E9
 file_visualizer_append=Concat\u00E9ner au fichier de donn\u00E9es existant
 file_visualizer_auto_flush=Vider automatiquement apr\u00E8s chaque echantillon de donn\u00E9es
 file_visualizer_browse=Parcourir...
 file_visualizer_close=Fermer
 file_visualizer_file_options=Options de fichier
 file_visualizer_filename=Nom du fichier \: 
 file_visualizer_flush=Vider
 file_visualizer_missing_filename=Aucun fichier de sortie sp\u00E9cifi\u00E9.
 file_visualizer_open=Ouvrir...
 file_visualizer_output_file=\u00C9crire les r\u00E9sultats dans un fichier ou lire les r\u00E9sultats depuis un fichier CSV / JTL
 file_visualizer_submit_data=Inclure les donn\u00E9es envoy\u00E9es
 file_visualizer_title=Rapporteur de fichier
 file_visualizer_verbose=Sortie verbeuse
 filename=Nom de fichier \: 
 find_target_element=Trouver l'\u00E9l\u00E9ment cible
 follow_redirects=Suivre les redirect.
 follow_redirects_auto=Rediriger automat.
 font.sansserif=Sans Serif
 font.serif=Serif
 fontstyle.bold=Gras
 fontstyle.italic=Italique
 fontstyle.normal=Normal
 foreach_controller_title=Contr\u00F4leur Pour chaque (ForEach)
 foreach_end_index=Indice de fin de la boucle (inclus)
 foreach_input=Pr\u00E9fixe de la variable d'entr\u00E9e \:
 foreach_output=Nom de la variable de sortie \:
 foreach_start_index=Indice de d\u00E9but de la boucle(exclus)
 foreach_use_separator=Ajouter un soulign\u00E9 "_" avant le nombre ?
 format=Format du nombre \:
 fr=Fran\u00E7ais
 ftp_binary_mode=Utiliser le mode binaire ?
 ftp_get=R\u00E9cup\u00E9rer (get)
 ftp_local_file=Fichier local \:
 ftp_local_file_contents=Contenus fichier local \:
 ftp_put=D\u00E9poser (put)
 ftp_remote_file=Fichier distant \:
 ftp_sample_title=Param\u00E8tres FTP par d\u00E9faut
 ftp_save_response_data=Enregistrer le fichier dans la r\u00E9ponse ?
 ftp_testing_title=Requ\u00EAte FTP
 function_dialog_menu_item=Assistant de fonctions
 function_helper_title=Assistant de fonctions
 function_name_param=Nom de la fonction. Utilis\u00E9 pour stocker les valeurs \u00E0 utiliser ailleurs dans la plan de test
 function_name_paropt=Nom de variable dans laquelle le r\u00E9sultat sera stock\u00E9 (optionnel)
 function_params=Param\u00E8tres de la fonction
 functional_mode=Mode de test fonctionnel
 functional_mode_explanation=S\u00E9lectionner le mode de test fonctionnel uniquement si vous avez besoin\nd'enregistrer les donn\u00E9es re\u00E7ues du serveur dans un fichier \u00E0 chaque requ\u00EAte. \n\nS\u00E9lectionner cette option affecte consid\u00E9rablement les performances.
 gaussian_timer_delay=D\u00E9lai de d\u00E9calage bas\u00E9 gaussian (en millisecondes) \:
 gaussian_timer_memo=Ajoute un d\u00E9lai al\u00E9atoire avec une distribution gaussienne
 gaussian_timer_range=D\u00E9viation (en millisecondes) \:
 gaussian_timer_title=Compteur de temps al\u00E9atoire gaussien
 generate=G\u00E9n\u00E9rer
 generator=Nom de la classe g\u00E9n\u00E9ratrice
 generator_cnf_msg=N'a pas p\u00FB trouver la classe g\u00E9n\u00E9ratrice. Assurez-vous que vous avez plac\u00E9 votre fichier jar dans le r\u00E9pertoire /lib
 generator_illegal_msg=N'a pas p\u00FB acc\u00E9der \u00E0 la classes g\u00E9n\u00E9ratrice \u00E0 cause d'une IllegalAccessException.
 generator_instantiate_msg=N'a pas p\u00FB cr\u00E9er une instance du parseur g\u00E9n\u00E9rateur. Assurez-vous que le g\u00E9n\u00E9rateur impl\u00E9mente l'interface Generator.
 graph_apply_filter=Appliquer le filtre
 graph_choose_graphs=Graphique \u00E0 afficher
 graph_full_results_title=Graphique de r\u00E9sultats complets
 graph_pointshape_circle=Cercle
 graph_pointshape_diamond=Diamant
 graph_pointshape_none=Aucun
 graph_pointshape_square=Carr\u00E9
 graph_pointshape_triangle=Triangle
 graph_resp_time_interval_label=Interval (ms) \:
 graph_resp_time_interval_reload=Appliquer l'interval
 graph_resp_time_not_enough_data=Impossible de dessiner le graphique, pas assez de donn\u00E9es
 graph_resp_time_series_selection=S\u00E9lection des \u00E9chantillons par libell\u00E9 \:
 graph_resp_time_settings_line=Param\u00E9tres de la courbe
 graph_resp_time_settings_pane=Param\u00E9tres du graphique
 graph_resp_time_shape_label=Forme de la jonction \:
 graph_resp_time_stroke_width=Largeur de ligne \:
 graph_resp_time_title=Graphique \u00E9volution temps de r\u00E9ponses
 graph_resp_time_title_label=Titre du graphique \:  
 graph_resp_time_xaxis_time_format=Formatage heure (SimpleDateFormat) \:
 graph_results_average=Moyenne
 graph_results_data=Donn\u00E9es
 graph_results_deviation=Ecart type
 graph_results_latest_sample=Dernier \u00E9chantillon
 graph_results_median=M\u00E9diane
 graph_results_ms=ms
 graph_results_no_samples=Nombre d'\u00E9chantillons
 graph_results_throughput=D\u00E9bit
 graph_results_title=Graphique de r\u00E9sultats
 groovy_function_expression=Expression \u00E0 \u00E9valuer
 grouping_add_separators=Ajouter des s\u00E9parateurs entre les groupes
 grouping_in_controllers=Mettre chaque groupe dans un nouveau contr\u00F4leur
 grouping_in_transaction_controllers=Mettre chaque groupe dans un nouveau contr\u00F4leur de transaction
 grouping_mode=Grouper \:
 grouping_no_groups=Ne pas grouper les \u00E9chantillons
 grouping_store_first_only=Stocker le 1er \u00E9chantillon pour chaque groupe uniquement
 header_manager_title=Gestionnaire d'ent\u00EAtes HTTP
 headers_stored=Ent\u00EAtes stock\u00E9es
 heap_dump=Cr\u00E9er une image disque de la m\u00E9moire (heap dump)
 help=Aide
 help_node=Quel est ce noeud ?
 html_assertion_file=Ecrire un rapport JTidy dans un fichier
 html_assertion_label=Assertion HTML
 html_assertion_title=Assertion HTML
 html_extractor_title=Extracteur CSS/JQuery
 html_extractor_type=Impl\u00E9mentation de l'extracteur CSS/JQuery
 http_implementation=Impl\u00E9mentation \:
 http_response_code=Code de r\u00E9ponse HTTP
 http_url_rewriting_modifier_title=Transcripteur d'URL HTTP
 http_user_parameter_modifier=Modificateur de param\u00E8tre utilisateur HTTP
 httpmirror_max_pool_size=Taille maximum du pool d'unit\u00E9s \:
 httpmirror_max_queue_size=Taille maximum de la file d'attente \:
 httpmirror_settings=Param\u00E8tres
 httpmirror_title=Serveur HTTP miroir
 id_prefix=Pr\u00E9fixe d'ID
 id_suffix=Suffixe d'ID
 if_controller_evaluate_all=Evaluer pour tous les fils ?
 if_controller_expression=Interpr\u00E9ter la condition comme une expression
 if_controller_label=Condition (d\u00E9faut Javascript) \:
 if_controller_title=Contr\u00F4leur Si (If)
 ignore_subcontrollers=Ignorer les sous-blocs de contr\u00F4leurs
 include_controller=Contr\u00F4leur Inclusion
 include_equals=Inclure \u00E9gale ?
 include_path=Plan de test \u00E0 inclure
 increment=Incr\u00E9ment \:
 infinite=Infini
 initial_context_factory=Fabrique de contexte initiale
 insert_after=Ins\u00E9rer apr\u00E8s
 insert_before=Ins\u00E9rer avant
 insert_parent=Ins\u00E9rer en tant que parent
 interleave_control_title=Contr\u00F4leur Interleave
 interleave_accross_threads=Alterne en prenant en compte toutes les unit\u00E9s
 intsum_param_1=Premier entier \u00E0 ajouter
 intsum_param_2=Deuxi\u00E8me entier \u00E0 ajouter - les entier(s) suivants peuvent \u00EAtre ajout\u00E9(s) avec les arguments suivants.
 invalid_data=Donn\u00E9e invalide
 invalid_mail=Une erreur est survenue lors de l'envoi de l'email
 invalid_mail_address=Une ou plusieurs adresse(s) invalide(s) ont \u00E9t\u00E9 d\u00E9tect\u00E9e(s)
 invalid_mail_server=Le serveur de mail est inconnu (voir le fichier de journalisation JMeter)
 invalid_variables=Variables invalides
 iteration_counter_arg_1=TRUE, pour que chaque utilisateur ait son propre compteur, FALSE pour un compteur global
 iterator_num=Nombre d'it\u00E9rations \:
 ja=Japonais
 jar_file=Fichiers .jar
 java_request=Requ\u00EAte Java
 java_request_defaults=Requ\u00EAte Java par d\u00E9faut
 javascript_expression=Expression JavaScript \u00E0 \u00E9valuer
 jexl_expression=Expression JEXL \u00E0 \u00E9valuer
 jms_auth_required=Obligatoire
 jms_bytes_message=Message binaire
 jms_client_caption=Le client r\u00E9cepteur utilise MessageConsumer.receive () pour \u00E9couter les messages.
 jms_client_caption2=MessageListener utilise l'interface onMessage(Message) pour \u00E9couter les nouveaux messages.
 jms_client_id=ID du Client
 jms_client_type=Client
 jms_communication_style=Type de communication \: 
 jms_concrete_connection_factory=Fabrique de connexion 
 jms_config=Source du message \:
 jms_config_title=Configuration JMS
 jms_connection_factory=Fabrique de connexion
 jms_correlation_title=Champs alternatifs pour la correspondance de message
 jms_dest_setup=Evaluer
 jms_dest_setup_dynamic=A chaque \u00E9chantillon
 jms_dest_setup_static=Au d\u00E9marrage
 jms_durable_subscription_id=ID d'abonnement durable
 jms_expiration=Expiration (ms)
 jms_file=Fichier
 jms_initial_context_factory=Fabrique de connexion initiale
 jms_itertions=Nombre d'\u00E9chantillons \u00E0 agr\u00E9ger
 jms_jndi_defaults_title=Configuration JNDI par d\u00E9faut
 jms_jndi_props=Propri\u00E9t\u00E9s JNDI
 jms_map_message=Message Map
 jms_message_title=Propri\u00E9t\u00E9s du message
 jms_message_type=Type de message \: 
 jms_msg_content=Contenu
 jms_object_message=Message Object
 jms_point_to_point=Requ\u00EAte JMS Point-\u00E0-point
 jms_priority=Priorit\u00E9 (0-9)
 jms_properties=Propri\u00E9t\u00E9s JMS
 jms_properties_name=Nom
 jms_properties_title=Propri\u00E9t\u00E9s JMS
 jms_properties_type=Classe de la Valeur
 jms_properties_value=Valeur
 jms_props=Propri\u00E9t\u00E9s JMS
 jms_provider_url=URL du fournisseur
 jms_publisher=Requ\u00EAte JMS Publication
 jms_pwd=Mot de passe
 jms_queue=File
 jms_queue_connection_factory=Fabrique QueueConnection
 jms_queueing=Ressources JMS
 jms_random_file=Dossier contenant des fichiers al\u00E9atoires (suffix\u00E9s par .dat pour un message binaire, .txt ou .obj pour un message texte ou un objet)
 jms_receive_queue=Nom JNDI de la file d'attente Receive 
 jms_request=Requ\u00EAte seule
 jms_requestreply=Requ\u00EAte R\u00E9ponse
 jms_sample_title=Requ\u00EAte JMS par d\u00E9faut
 jms_selector=S\u00E9lecteur JMS
 jms_send_queue=Nom JNDI de la file d'attente Request
 jms_separator=S\u00E9parateur
 jms_stop_between_samples=Arr\u00EAter entre les \u00E9chantillons ?
 jms_store_response=Stocker la r\u00E9ponse
 jms_subscriber_on_message=Utiliser MessageListener.onMessage()
 jms_subscriber_receive=Utiliser MessageConsumer.receive()
 jms_subscriber_title=Requ\u00EAte JMS Abonnement
 jms_testing_title=Messagerie Request
 jms_text_area=Message texte ou Message Objet s\u00E9rialis\u00E9 en XML par XStream
 jms_text_message=Message texte
 jms_timeout=D\u00E9lai (ms)
 jms_topic=Destination
 jms_use_auth=Utiliser l'authentification ?
 jms_use_file=Depuis un fichier
 jms_use_non_persistent_delivery=Utiliser un mode de livraison non persistant ?
 jms_use_properties_file=Utiliser le fichier jndi.properties
 jms_use_random_file=Fichier al\u00E9atoire
 jms_use_req_msgid_as_correlid=Utiliser l'ID du message Request
 jms_use_res_msgid_as_correlid=Utiliser l'ID du message Response
 jms_use_text=Zone de texte (ci-dessous)
 jms_user=Utilisateur
 jndi_config_title=Configuration JNDI
 jndi_lookup_name=Interface remote
 jndi_lookup_title=Configuration Lookup JNDI 
 jndi_method_button_invoke=Invoquer
 jndi_method_button_reflect=R\u00E9flection
 jndi_method_home_name=Nom de la m\u00E9thode home
 jndi_method_home_parms=Param\u00E8tres de la m\u00E9thode home
 jndi_method_name=Configuration m\u00E9thode
 jndi_method_remote_interface_list=Interfaces remote
 jndi_method_remote_name=Nom m\u00E9thodes remote
 jndi_method_remote_parms=Param\u00E8tres m\u00E9thode remote
 jndi_method_title=Configuration m\u00E9thode remote
 jndi_testing_title=Requ\u00EAte JNDI
 jndi_url_jndi_props=Propri\u00E9t\u00E9s JNDI
 json_post_processor_title=Extracteur JSON
 jsonpath_render_no_text=Pas de Texte
 jsonpath_renderer=Testeur JSON Path
 jsonpath_tester_button_test=Tester
 jsonpath_tester_field=Expression JSON Path
 jsonpath_tester_title=Testeur JSON Path
 jsonpp_compute_concat=Calculer la variable de concat\u00E9nation (suffix _ALL)
 jsonpp_default_values=Valeure par d\u00E9fault
 jsonpp_error_number_arguments_mismatch_error=D\u00E9calage entre nombre de variables, expressions et valeurs par d\u00E9faut
 jsonpp_json_path_expressions=Expressions JSON Path
 jsonpp_match_numbers=Nombre de correspondances
 jsonpp_variable_names=Noms des variables
 junit_append_error=Concat\u00E9ner les erreurs d'assertion
 junit_append_exception=Concat\u00E9ner les exceptions d'ex\u00E9cution
 junit_constructor_error=Impossible de cr\u00E9er une instance de la classe
 junit_constructor_string=Libell\u00E9 de cha\u00EEne Constructeur
 junit_create_instance_per_sample=Cr\u00E9er une nouvelle instance pour chaque \u00E9chantillon
 junit_do_setup_teardown=Ne pas appeler setUp et tearDown
 junit_error_code=Code d'erreur
 junit_error_default_msg=Une erreur inattendue est survenue
 junit_error_msg=Message d'erreur
 junit_failure_code=Code d'\u00E9chec
 junit_failure_default_msg=Test \u00E9chou\u00E9
 junit_failure_msg=Message d'\u00E9chec
 junit_junit4=Rechercher les annotations JUnit 4 (au lieu de JUnit 3)
 junit_pkg_filter=Filtre de paquets
 junit_request=Requ\u00EAte JUnit
 junit_request_defaults=Requ\u00EAte par d\u00E9faut JUnit
 junit_success_code=Code de succ\u00E8s
 junit_success_default_msg=Test r\u00E9ussi
 junit_success_msg=Message de succ\u00E8s
 junit_test_config=Param\u00E8tres Test JUnit
 junit_test_method=M\u00E9thode de test
 action_check_message=Un test est en cours, arr\u00EAtez le avant d''utiliser cette commande
 action_check_title=Test en cours
 ldap_argument_list=Liste d'arguments LDAP
 ldap_connto=D\u00E9lai d'attente de connexion (millisecondes)
 ldap_parse_results=Examiner les r\u00E9sultats de recherche ?
 ldap_sample_title=Requ\u00EAte LDAP par d\u00E9faut
 ldap_search_baseobject=Effectuer une recherche 'baseobject'
 ldap_search_onelevel=Effectuer une recherche 'onelevel'
 ldap_search_subtree=Effectuer une recherche 'subtree'
 ldap_secure=Utiliser le protocole LDAP s\u00E9curis\u00E9 (ldaps) ?
 ldap_testing_title=Requ\u00EAte LDAP
 ldapext_sample_title=Requ\u00EAte LDAP \u00E9tendue par d\u00E9faut
 ldapext_testing_title=Requ\u00EAte LDAP \u00E9tendue
 library=Librairie
 load=Charger
 log_errors_only=Erreurs
 log_file=Emplacement du fichier de journal (log)
 log_function_comment=Commentaire (facultatif)
 log_function_level=Niveau de journalisation (INFO par d\u00E9faut), OUT ou ERR
 log_function_string=Cha\u00EEne \u00E0 tracer
 log_function_string_ret=Cha\u00EEne \u00E0 tracer (et \u00E0 retourner)
 log_function_throwable=Texte de l'exception Throwable (optionnel)
 log_only=Uniquement \:
 log_parser=Nom de la classe de parseur des journaux (log)
 log_parser_cnf_msg=N'a pas p\u00FB trouver cette classe. Assurez-vous que vous avez plac\u00E9 votre fichier jar dans le r\u00E9pertoire /lib
 log_parser_illegal_msg=N'a pas p\u00FB acc\u00E9der \u00E0 la classe \u00E0 cause d'une exception IllegalAccessException.
 log_parser_instantiate_msg=N'a pas p\u00FB cr\u00E9er une instance du parseur de log. Assurez-vous que le parseur impl\u00E9mente l'interface LogParser.
 log_sampler=Echantillon Journaux d'acc\u00E8s Tomcat
 log_success_only=Succ\u00E8s
 logic_controller_title=Contr\u00F4leur Simple
 login_config=Configuration Identification
 login_config_element=Configuration Identification 
 longsum_param_1=Premier long \u221A\u2020 ajouter
 longsum_param_2=Second long \u221A\u2020 ajouter - les autres longs pourront \u221A\u2122tre cumul\u221A\u00A9s en ajoutant d'autres arguments.
 loop_controller_title=Contr\u00F4leur Boucle
 looping_control=Contr\u00F4le de boucle
 lower_bound=Borne Inf\u00E9rieure
 mail_reader_account=Nom utilisateur \:
 mail_reader_all_messages=Tous
 mail_reader_delete=Supprimer les messages du serveur
 mail_reader_folder=Dossier \:
 mail_reader_header_only=R\u00E9cup\u00E9rer seulement les ent\u00EAtes
 mail_reader_num_messages=Nombre de message \u00E0 r\u00E9cup\u00E9rer \:
 mail_reader_password=Mot de passe \:
 mail_reader_port=Port (optionnel) \:
 mail_reader_server=Serveur \:
 mail_reader_server_type=Protocole (ex. pop3, imaps) \:
 mail_reader_storemime=Stocker le message en utilisant MIME (brut)
 mail_reader_title=Echantillon Lecteur d'email
 mail_sent=Email envoy\u00E9 avec succ\u00E8s
 mailer_addressees=Destinataire(s) \: 
 mailer_attributes_panel=Attributs de courrier
 mailer_connection_security=S\u00E9curit\u00E9 connexion \: 
 mailer_error=N'a pas p\u00FB envoyer l'email. Veuillez corriger les erreurs de saisie.
 mailer_failure_limit=Limite d'\u00E9chec \: 
 mailer_failure_subject=Sujet Echec \: 
 mailer_failures=Nombre d'\u00E9checs \: 
 mailer_from=Exp\u00E9diteur \: 
 mailer_host=Serveur \: 
 mailer_login=Identifiant \: 
 mailer_msg_title_error=Erreur
 mailer_msg_title_information=Information
 mailer_password=Mot de passe \: 
 mailer_port=Port \: 
 mailer_string=Notification d'email
 mailer_success_limit=Limite de succ\u00E8s \: 
 mailer_success_subject=Sujet Succ\u00E8s \: 
 mailer_test_mail=Tester email
 mailer_title_message=Message
 mailer_title_settings=Param\u00E8tres
 mailer_title_smtpserver=Serveur SMTP
 mailer_visualizer_title=R\u00E9cepteur Notification Email
 match_num_field=R\u00E9cup\u00E9rer la Ni\u00E8me corresp. (0 \: Al\u00E9atoire) \: 
 max=Maximum \:
 maximum_param=La valeur maximum autoris\u00E9e pour un \u00E9cart de valeurs
 md5hex_assertion_failure=Erreur de v\u00E9rification de la somme MD5 \: obtenu {0} mais aurait d\u00FB \u00EAtre {1}
 md5hex_assertion_label=MD5Hex
 md5hex_assertion_md5hex_test=MD5Hex \u00E0 v\u00E9rifier
 md5hex_assertion_title=Assertion MD5Hex
 mechanism=M\u00E9canisme
 menu_assertions=Assertions
 menu_close=Fermer
 menu_collapse_all=R\u00E9duire tout
 menu_config_element=Configurations
 menu_edit=Editer
 menu_expand_all=Etendre tout
 menu_fragments=Fragment d'\u00E9l\u00E9ments
 menu_generative_controller=Echantillons
 menu_listener=R\u00E9cepteurs
 menu_logger_panel=Afficher la console 
 menu_logic_controller=Contr\u00F4leurs Logiques
 menu_merge=Fusionner...
 menu_modifiers=Modificateurs
 menu_non_test_elements=El\u00E9ments hors test
 menu_open=Ouvrir...
 menu_post_processors=Post-Processeurs
 menu_pre_processors=Pr\u00E9-Processeurs
 menu_response_based_modifiers=Modificateurs bas\u00E9s sur la r\u00E9ponse
 menu_search=Rechercher
 menu_search_reset=Effacer la recherche
 menu_tables=Table
 menu_threads=Moteurs d'utilisateurs
 menu_timer=Compteurs de temps
 menu_toolbar=Barre d'outils
 metadata=M\u00E9ta-donn\u00E9es
 method=M\u00E9thode \:
 mimetype=Type MIME
 minimum_param=La valeur minimale autoris\u00E9e pour l'\u00E9cart de valeurs
 minute=minute
 modddn=Ancienne valeur
 modification_controller_title=Contr\u00F4leur Modification
 modification_manager_title=Gestionnaire Modification
 modify_test=Modification
 modtest=Modification
 module_controller_module_to_run=Module \u00E0 ex\u00E9cuter \:
 module_controller_title=Contr\u00F4leur Module
 module_controller_warning=Ne peut pas trouver le module \:
-monitor_equation_active=Activit\u00E9 \:  (occup\u00E9e/max) > 25%
-monitor_equation_dead=Mort \: pas de r\u00E9ponse
-monitor_equation_healthy=Sant\u00E9 \:  (occup\u00E9e/max) < 25%
-monitor_equation_load=Charge \:  ((occup\u00E9e / max) * 50) + ((m\u00E9moire utilis\u00E9e / m\u00E9moire maximum) * 50)
-monitor_equation_warning=Attention \:  (occup\u00E9/max) > 67%
-monitor_health_tab_title=Sant\u00E9
-monitor_health_title=Moniteur de connecteurs (DEPRECATED)
-monitor_is_title=Utiliser comme moniteur (DEPRECATED)
-monitor_label_prefix=Pr\u00E9fixe de connecteur \:
-monitor_label_right_active=Actif
-monitor_label_right_dead=Mort
-monitor_label_right_healthy=Sant\u00E9
-monitor_label_right_warning=Attention
-monitor_legend_health=Sant\u00E9
-monitor_legend_load=Charge
-monitor_legend_memory_per=M\u00E9moire % (utilis\u00E9e/total)
-monitor_legend_thread_per=Unit\u00E9 % (occup\u00E9/max)
-monitor_performance_servers=Serveurs
-monitor_performance_tab_title=Performance
-monitor_performance_title=Graphique de performance
 name=Nom \:
 new=Nouveau
 newdn=Nouveau DN
 next=Suivant
 no=Norv\u00E9gien
 notify_child_listeners_fr=Notifier les r\u00E9cepteurs fils des \u00E9chantillons filtr\u00E9s
 number_of_threads=Nombre d'unit\u00E9s (utilisateurs) \:
 obsolete_test_element=Cet \u00E9l\u00E9ment de test est obsol\u00E8te
 once_only_controller_title=Contr\u00F4leur Ex\u00E9cution unique
 opcode=Code d'op\u00E9ration
 open=Ouvrir...
 option=Options
 optional_tasks=T\u00E2ches optionnelles
 paramtable=Envoyer les param\u00E8tres avec la requ\u00EAte \:
 password=Mot de passe \:
 paste=Coller
 paste_insert=Coller ins\u00E9rer
 path=Chemin \:
 path_extension_choice=Extension de chemin (utiliser ";" comme separateur)
 path_extension_dont_use_equals=Ne pas utiliser \u00E9gale dans l'extension de chemin (Compatibilit\u00E9 Intershop Enfinity)
 path_extension_dont_use_questionmark=Ne pas utiliser le point d'interrogation dans l'extension du chemin (Compatiblit\u00E9 Intershop Enfinity)
 patterns_to_exclude=URL \: motifs \u00E0 exclure
 patterns_to_include=URL \: motifs \u00E0 inclure
 pkcs12_desc=Clef PKCS 12 (*.p12)
 pl=Polonais
 poisson_timer_delay=D\u00E9lai de d\u00E9calage bas\u00E9 sur la loi de poisson (en millisecondes) \:
 poisson_timer_memo=Ajoute un d\u00E9lai al\u00E9atoire avec une distribution de type Poisson
 poisson_timer_range=D\u00E9viation (en millisecondes) \:
 poisson_timer_title=Compteur de temps al\u00E9atoire selon la loi de Poisson 
 port=Port \:
 post_as_parameters=Param\u00E8tres
 post_body=Corps de la requ\u00EAte
 post_body_raw=Donn\u00E9es de la requ\u00EAte
 post_files_upload=T\u00E9l\u00E9chargement de fichiers
 post_thread_group_title=Groupe d'unit\u00E9s de fin
 previous=Pr\u00E9c\u00E9dent
 property_as_field_label={0}\:
 property_default_param=Valeur par d\u00E9faut
 property_edit=Editer
 property_editor.value_is_invalid_message=Le texte que vous venez d'entrer n'a pas une valeur valide pour cette propri\u00E9t\u00E9.\nLa propri\u00E9t\u00E9 va revenir \u00E0 sa valeur pr\u00E9c\u00E9dente.
 property_editor.value_is_invalid_title=Texte saisi invalide
 property_name_param=Nom de la propri\u00E9t\u00E9
 property_returnvalue_param=Revenir \u00E0 la valeur originale de la propri\u00E9t\u00E9 (d\u00E9faut non) ?
 property_tool_tip=<html>{0}</html>
 property_undefined=Non d\u00E9fini
 property_value_param=Valeur de propri\u00E9t\u00E9
 property_visualiser_title=Afficheur de propri\u00E9t\u00E9s
 protocol=Protocole [http] \:
 protocol_java_border=Classe Java
 protocol_java_classname=Nom de classe \:
 protocol_java_config_tile=Configurer \u00E9chantillon Java
 protocol_java_test_title=Test Java
 provider_url=Provider URL
 proxy_assertions=Ajouter une Assertion R\u00E9ponse
 proxy_cl_error=Si un serveur proxy est sp\u00E9cifi\u00E9, h\u00F4te et port doivent \u00EAtre donn\u00E9
 proxy_cl_wrong_target_cl=Le contr\u00F4leur cible est configur\u00E9 en mode "Utiliser un contr\u00F4leur enregistreur" \nmais aucun contr\u00F4leur de ce type n'existe, assurez vous de l'ajouter comme fils \nde Groupe d'unit\u00E9s afin de pouvoir d\u00E9marrer l'enregisteur
 proxy_content_type_exclude=Exclure \:
 proxy_content_type_filter=Filtre de type de contenu
 proxy_content_type_include=Inclure \:
 proxy_daemon_bind_error=Impossible de lancer le serveur proxy, le port est d\u00E9j\u00E0 utilis\u00E9. Choisissez un autre port.
 proxy_daemon_error=Impossible de lancer le serveur proxy, voir le journal pour plus de d\u00E9tails
 proxy_daemon_error_from_clipboard=depuis le presse-papier
 proxy_daemon_error_not_retrieve=Impossible d'ajouter
 proxy_daemon_error_read_args=Impossible de lire les arguments depuis le presse-papiers \:
 proxy_daemon_msg_check_details=Svp, v\u00E9rifier les d\u00E9tails ci-dessous lors de l'installation du certificat dans le navigateur
 proxy_daemon_msg_created_in_bin=cr\u00E9\u00E9 dans le r\u00E9pertoire bin de JMeter
 proxy_daemon_msg_install_as_in_doc=Vous pouvez l'installer en suivant les instructions de la documentation Component Reference (voir Installing the JMeter CA certificate for HTTPS recording paragraph)
 proxy_daemon_msg_rootca_cert=Certificat AC ra\u00E7ine \:
 proxy_domains=Domaines HTTPS \:
 proxy_domains_dynamic_mode_tooltip=Liste de noms de domaine pour les url HTTPS, ex. jmeter.apache.org ou les domaines wildcard comme *.apache.org. Utiliser la virgule comme s\u00E9parateur. 
 proxy_domains_dynamic_mode_tooltip_java6=Pour activer ce champ, utiliser un environnement d'ex\u00E9cution Java 7+
 proxy_general_settings=Param\u00E8tres g\u00E9n\u00E9raux
 proxy_headers=Capturer les ent\u00EAtes HTTP
 proxy_prefix_http_sampler_name=Pr\u00E9fixe \:
 proxy_regex=Correspondance des variables par regex ?
 proxy_sampler_settings=Param\u00E8tres Echantillon HTTP
 proxy_sampler_type=Type \:
 proxy_separators=Ajouter des s\u00E9parateurs
 proxy_settings_port_error_digits=Seuls les chiffres sont autoris\u00E9s.
 proxy_settings_port_error_invalid_data=Donn\u00E9es invalides
 proxy_target=Contr\u00F4leur Cible \:
 proxy_test_plan_content=Param\u00E8tres du plan de test
 proxy_title=Enregistreur script de test HTTP(S)
 pt_br=Portugais (Br\u00E9sil)
 ramp_up=Dur\u00E9e de mont\u00E9e en charge (en secondes) \:
 random_control_title=Contr\u00F4leur Al\u00E9atoire
 random_order_control_title=Contr\u00F4leur d'Ordre al\u00E9atoire
 random_multi_result_source_variable=Variable(s) source (separateur |)
 random_multi_result_target_variable=Variable cible
 random_string_chars_to_use=Caract\u00E8res \u00E0 utiliser pour la g\u00E9n\u00E9ration de la cha\u00EEne al\u00E9atoire
 random_string_length=Longueur de cha\u00EEne al\u00E9atoire
 realm=Univers (realm)
 record_controller_clear_samples=Supprimer tous les \u00E9chantillons
 record_controller_title=Contr\u00F4leur Enregistreur
 redo=R\u00E9tablir
 ref_name_field=Nom de r\u00E9f\u00E9rence \:
 regex_extractor_title=Extracteur Expression r\u00E9guli\u00E8re
 regex_field=Expression r\u00E9guli\u00E8re \:
 regex_params_names_field=Num\u00E9ro du groupe de la Regex pour les noms des param\u00E8tres
 regex_params_ref_name_field=Nom de la r\u00E9f\u00E9rence de la Regex
 regex_params_title=Param\u00E8tres utilisateurs bas\u00E9s sur RegEx
 regex_params_values_field=Num\u00E9ro du groupe de la Regex pour les valeurs des param\u00E8tres
 regex_source=Port\u00E9e
 regex_src_body=Corps
 regex_src_body_as_document=Corps en tant que Document
 regex_src_body_unescaped=Corps (non \u00E9chapp\u00E9)
 regex_src_hdrs=Ent\u00EAtes (R\u00E9ponse)
 regex_src_hdrs_req=Ent\u00EAtes (Requ\u00EAte)
 regex_src_url=URL
 regexfunc_param_1=Expression r\u00E9guli\u00E8re utilis\u00E9e pour chercher les r\u00E9sultats de la requ\u00EAte pr\u00E9c\u00E9dente.
 regexfunc_param_2=Canevas pour la ch\u00EEne de caract\u00E8re de remplacement, utilisant des groupes d'expressions r\u00E9guli\u00E8res. Le format est  $[group]$.  Exemple $1$.
 regexfunc_param_3=Quelle correspondance utiliser. Un entier 1 ou plus grand, RAND pour indiquer que JMeter doit choisir al\u00E9atoirement , A d\u00E9cimal, ou ALL indique que toutes les correspondances doivent \u00EAtre utilis\u00E9es
 regexfunc_param_4=Entre le texte. Si ALL est s\u00E9lectionn\u00E9, l'entre-texte sera utilis\u00E9 pour g\u00E9n\u00E9rer les r\u00E9sultats ([""])
 regexfunc_param_5=Text par d\u00E9faut. Utilis\u00E9 \u00E0 la place du canevas si l'expression r\u00E9guli\u00E8re ne trouve pas de correspondance
 regexfunc_param_7=Variable en entr\u221A\u00A9e contenant le texte \u221A\u2020 parser ([\u221A\u00A9chantillon pr\u221A\u00A9c\u221A\u00A9dent])
 regexp_render_no_text=Les donn\u00E9es de r\u00E9ponse ne sont pas du texte.
 regexp_tester_button_test=Tester
 regexp_tester_field=Expression r\u00E9guli\u00E8re \:
 regexp_tester_title=Testeur de RegExp
 remote_error_init=Erreur lors de l'initialisation du serveur distant
 remote_error_starting=Erreur lors du d\u221A\u00A9marrage du serveur distant
 remote_exit=Sortie distante
 remote_exit_all=Sortie distante de tous
 remote_shut=Extinction \u00E0 distance
 remote_shut_all=Extinction \u00E0 distance de tous
 remote_start=D\u00E9marrage distant
 remote_start_all=D\u00E9marrage distant de tous
 remote_stop=Arr\u00EAt distant
 remote_stop_all=Arr\u00EAt distant de tous
 remove=Supprimer
 remove_confirm_msg=Etes-vous s\u00FBr de vouloir supprimer ce(s) \u00E9l\u00E9ment(s) ?
 remove_confirm_title=Confirmer la suppression ?
 rename=Renommer une entr\u00E9e
 report=Rapport
 report_bar_chart=Graphique \u221A\u2020 barres
 report_bar_graph_url=URL
 report_base_directory=R\u221A\u00A9pertoire de Base
 report_chart_caption=L\u221A\u00A9gende du graph
 report_chart_x_axis=Axe X
 report_chart_x_axis_label=Libell\u221A\u00A9 de l'Axe X
 report_chart_y_axis=Axe Y
 report_chart_y_axis_label=Libell\u221A\u00A9 de l'Axe Y
 report_line_graph=Graphique Lin\u221A\u00A9aire
 report_line_graph_urls=Inclure les URLs
 report_output_directory=R\u221A\u00A9pertoire de sortie du rapport
 report_page=Page de Rapport
 report_page_element=Page Element
 report_page_footer=Pied de page
 report_page_header=Ent\u221A\u2122te de Page
 report_page_index=Cr\u221A\u00A9er la Page d'Index
 report_page_intro=Page d'Introduction
 report_page_style_url=Url de la feuille de style
 report_page_title=Titre de la Page
 report_pie_chart=Camembert
 report_plan=Plan du rapport
 report_select=Selectionner
 report_summary=Rapport r\u221A\u00A9sum\u221A\u00A9
 report_table=Table du Rapport
 report_writer=R\u221A\u00A9dacteur du Rapport
 report_writer_html=R\u221A\u00A9dacteur de rapport HTML
 reportgenerator_top5_error_count=#Erreurs
 reportgenerator_top5_error_label=Erreur
 reportgenerator_top5_label=Echantillon
 reportgenerator_top5_sample_count=#Echantillons
 reportgenerator_top5_total=Total
 reportgenerator_summary_apdex_apdex=Apdex
 reportgenerator_summary_apdex_samplers=Libell\u00E9
 reportgenerator_summary_apdex_satisfied=T (Seuil de tol\u00E9rance)
 reportgenerator_summary_apdex_tolerated=F (Seuil de frustration)
 reportgenerator_summary_errors_count=Nombre d'erreurs
 reportgenerator_summary_errors_rate_all=% de tous les \u00E9chantillons
 reportgenerator_summary_errors_rate_error=% des erreurs
 reportgenerator_summary_errors_type=Type d'erreur
 reportgenerator_summary_statistics_count=\#Echantillons
 reportgenerator_summary_statistics_error_count=KO
 reportgenerator_summary_statistics_error_percent=% Erreur
 reportgenerator_summary_statistics_kbytes=Ko re\u00e7ues / sec
 reportgenerator_summary_statistics_sent_kbytes=Ko envoy\u00e9s / sec
 reportgenerator_summary_statistics_label=Libell\u00E9
 reportgenerator_summary_statistics_max=Max
 reportgenerator_summary_statistics_mean=Temps moyen
 reportgenerator_summary_statistics_min=Min
 reportgenerator_summary_statistics_percentile_fmt=%d%% centile
 reportgenerator_summary_statistics_throughput=D\u00E9bit
 reportgenerator_summary_total=Total
 request_data=Donn\u00E9e requ\u00EAte
 reset=R\u00E9initialiser
 reset_gui=R\u00E9initialiser l'\u00E9l\u00E9ment
 response_save_as_md5=R\u00E9ponse en empreinte MD5
 response_time_distribution_satisfied_label=Requ\u00EAtes \\ntemps de r\u00E9ponse <= {0}ms
 response_time_distribution_tolerated_label=Requ\u00EAtes \\ntemps de r\u00E9ponse > {0}ms et <= {1}ms
 response_time_distribution_untolerated_label=Requ\u00EAtes \\ntemps de r\u00E9ponse > {0}ms
 response_time_distribution_failed_label=Requ\u00EAtes en erreur
 restart=Red\u00E9marrer
 resultaction_title=Op\u00E9rateur R\u00E9sultats Action
 resultsaver_addtimestamp=Ajouter un timestamp
 resultsaver_errors=Enregistrer seulement les r\u00E9ponses en \u00E9checs
 resultsaver_numberpadlen=Taille minimale du num\u00E9ro de s\u00E9quence
 resultsaver_prefix=Pr\u00E9fixe du nom de fichier \: 
 resultsaver_skipautonumber=Ne pas ajouter de nombre au pr\u00E9fixe
 resultsaver_skipsuffix=Ne pas ajouter de suffixe
 resultsaver_success=Enregistrer seulement les r\u00E9ponses en succ\u00E8s
 resultsaver_title=Sauvegarder les r\u00E9ponses vers un fichier
 resultsaver_variable=Nom de variable \:
 retobj=Retourner les objets
 return_code_config_box_title=Configuration du code retour
 reuseconnection=R\u00E9-utiliser la connexion
 revert_project=Annuler les changements
 revert_project?=Annuler les changements sur le projet ?
 root=Racine
 root_title=Racine
 run=Lancer
 run_threadgroup=Lancer
 run_threadgroup_no_timers=Lancer sans pauses
 running_test=Lancer test
 runtime_controller_title=Contr\u00F4leur Dur\u00E9e d'ex\u00E9cution
 runtime_seconds=Temps d'ex\u00E9cution (secondes) \:
 sample_result_save_configuration=Sauvegarder la configuration de la sauvegarde des \u00E9chantillons
 sample_scope=Appliquer sur
 sample_scope_all=L'\u00E9chantillon et ses ressources li\u00E9es
 sample_scope_children=Les ressources li\u00E9es
 sample_scope_parent=L'\u00E9chantillon
 sample_scope_variable=Une variable \:
 sample_timeout_memo=Interrompre l'\u00E9chantillon si le d\u00E9lai est d\u00E9pass\u00E9
 sample_timeout_timeout=D\u00E9lai d'attente avant interruption (en millisecondes) \: 
 sample_timeout_title=Compteur Interruption
 sampler_label=Libell\u00E9
 sampler_on_error_action=Action \u00E0 suivre apr\u00E8s une erreur d'\u00E9chantillon
 sampler_on_error_continue=Continuer
 sampler_on_error_start_next_loop=D\u00E9marrer it\u00E9ration suivante
 sampler_on_error_stop_test=Arr\u00EAter le test
 sampler_on_error_stop_test_now=Arr\u00EAter le test imm\u00E9diatement
 sampler_on_error_stop_thread=Arr\u00EAter l'unit\u00E9
 save=Enregistrer le plan de test
 save?=Enregistrer ?
 save_all_as=Enregistrer le plan de test sous...
 save_as=Enregistrer sous...
 save_as_error=Au moins un \u00E9l\u00E9ment doit \u00EAtre s\u00E9lectionn\u00E9 \!
 save_as_image=Enregistrer en tant qu'image sous...
 save_as_image_all=Enregistrer l'\u00E9cran en tant qu'image...
 save_as_test_fragment=Enregistrer comme Fragment de Test
 save_as_test_fragment_error=Au moins un \u00E9l\u00E9ment ne peut pas \u00EAtre plac\u00E9 sous un Fragment de Test
 save_assertionresultsfailuremessage=Messages d'erreur des assertions
 save_assertions=R\u00E9sultats des assertions (XML)
 save_asxml=Enregistrer au format XML
 save_bytes=Nombre d'octets re\u00e7us
 save_code=Code de r\u00E9ponse HTTP
 save_connecttime=Temps \u00E9tablissement connexion
 save_datatype=Type de donn\u00E9es
 save_encoding=Encodage
 save_fieldnames=Libell\u00E9 des colonnes (CSV)
 save_filename=Nom de fichier de r\u00E9ponse
 save_graphics=Enregistrer le graphique
 save_hostname=Nom d'h\u00F4te
 save_idletime=Temps d'inactivit\u00E9
 save_label=Libell\u00E9
 save_latency=Latence
 save_message=Message de r\u00E9ponse
 save_overwrite_existing_file=Le fichier s\u00E9lectionn\u00E9 existe d\u00E9j\u00E0, voulez-vous l'\u00E9craser ?
 save_requestheaders=Ent\u00EAtes de requ\u00EAte (XML)
 save_responsedata=Donn\u00E9es de r\u00E9ponse (XML)
 save_responseheaders=Ent\u00EAtes de r\u00E9ponse (XML)
 save_samplecount=Nombre d'\u00E9chantillon et d'erreur
 save_samplerdata=Donn\u00E9es d'\u00E9chantillon (XML)
 save_sentbytes=Nombre d'octets envoy\u00E9s
 save_subresults=Sous r\u00E9sultats (XML)
 save_success=Succ\u00E8s
 save_threadcounts=Nombre d'unit\u00E9s actives
 save_threadname=Nom d'unit\u00E9
 save_time=Temps \u00E9coul\u00E9
 save_timestamp=Horodatage
 save_url=URL
 save_workbench=Sauvegarder le plan de travail
 sbind=Simple connexion/d\u00E9connexion
 scheduler=Programmateur de d\u00E9marrage
 scheduler_configuration=Configuration du programmateur
 scope=Port\u00E9e
 search=Rechercher
 search_base=Base de recherche
 search_expand=Rechercher & D\u00E9plier
 search_filter=Filtre de recherche
 search_test=Recherche
 search_text_button_close=Fermer
 search_text_button_find=Rechercher
 search_text_button_next=Suivant
 search_text_chkbox_case=Consid\u00E9rer la casse
 search_text_chkbox_regexp=Exp. reguli\u00E8re
 search_text_field=Rechercher \:
 search_text_msg_not_found=Texte non trouv\u00E9
 search_text_title_not_found=Pas trouv\u00E9
 search_tree_title=Rechercher dans l'arbre
 searchbase=Base de recherche
 searchfilter=Filtre de recherche
 searchtest=Recherche
 second=seconde
 secure=S\u00E9curis\u00E9 \:
 send_file=Envoyer un fichier avec la requ\u00EAte \:
 send_file_browse=Parcourir...
 send_file_filename_label=Chemin du fichier
 send_file_mime_label=Type MIME
 send_file_param_name_label=Nom du param\u00E8tre
 server=Nom ou IP du serveur \:
 servername=Nom du serveur \:
 session_argument_name=Nom des arguments de la session
 setup_thread_group_title=Groupe d'unit\u00E9s de d\u00E9but
 should_save=Vous devez enregistrer le plan de test avant de le lancer.  \nSi vous utilisez des fichiers de donn\u00E9es (i.e. Source de donn\u00E9es CSV ou la fonction _StringFromFile), \nalors c'est particuli\u00E8rement important d'enregistrer d'abord votre script de test. \nVoulez-vous enregistrer maintenant votre plan de test ?
 shutdown=Eteindre
 simple_config_element=Configuration Simple
 simple_data_writer_title=Enregistreur de donn\u00E9es
 size_assertion_comparator_error_equal=est \u00E9gale \u00E0
 size_assertion_comparator_error_greater=est plus grand que
 size_assertion_comparator_error_greaterequal=est plus grand ou \u00E9gale \u00E0
 size_assertion_comparator_error_less=est inf\u00E9rieur \u00E0
 size_assertion_comparator_error_lessequal=est inf\u00E9rieur ou \u00E9gale \u00E0
 size_assertion_comparator_error_notequal=n'est pas \u00E9gale \u00E0
 size_assertion_comparator_label=Type de comparaison
 size_assertion_failure=Le r\u00E9sultat n''a pas la bonne taille \: il \u00E9tait de {0} octet(s), mais aurait d\u00FB \u00EAtre de {1} {2} octet(s).
 size_assertion_input_error=Entrer un entier positif valide svp.
 size_assertion_label=Taille en octets \:
 size_assertion_size_test=Taille \u00E0 v\u00E9rifier
 size_assertion_title=Assertion Taille
 smime_assertion_issuer_dn=Nom unique de l'\u00E9metteur \: 
 smime_assertion_message_position=V\u00E9rifier l'assertion sur le message \u00E0 partir de la position
 smime_assertion_not_signed=Message non sign\u00E9
 smime_assertion_signature=Signature
 smime_assertion_signer=Certificat signataire
 smime_assertion_signer_by_file=Fichier du certificat \: 
 smime_assertion_signer_constraints=V\u00E9rifier les valeurs \:
 smime_assertion_signer_dn=Nom unique du signataire \: 
 smime_assertion_signer_email=Adresse courriel du signataire \: 
 smime_assertion_signer_no_check=Pas de v\u00E9rification
 smime_assertion_signer_serial=Num\u00E9ro de s\u00E9rie \: 
 smime_assertion_title=Assertion SMIME
 smime_assertion_verify_signature=V\u00E9rifier la signature
 smtp_additional_settings=Param\u00E8tres suppl\u00E9mentaires
 smtp_attach_file=Fichier(s) attach\u00E9(s) \:
 smtp_attach_file_tooltip=S\u00E9parer les fichiers par le point-virgule ";"
 smtp_auth_settings=Param\u00E8tres d'authentification
 smtp_bcc=Adresse en copie cach\u00E9e (Bcc) \:
 smtp_cc=Adresse en copie (CC) \:
 smtp_default_port=(D\u00E9fauts \: SMTP \: 25, SSL \: 465, StartTLS \: 587)
 smtp_eml=Envoyer un message .eml \:
 smtp_enabledebug=Activer les traces de d\u00E9bogage ?
 smtp_enforcestarttls=Forcer le StartTLS
 smtp_enforcestarttls_tooltip=<html><b>Force</b> le serveur a utiliser StartTLS.<br />Si il n'est pas s\u00E9lectionn\u00E9 et que le serveur SMTP ne supporte pas StartTLS, <br />une connexion SMTP normale sera utilis\u00E9e \u00E0 la place. <br /><i>Merci de noter</i> que la case \u00E0 cocher cr\u00E9\u00E9e un fichier dans /tmp/, <br />donc cela peut poser des probl\u00E8mes sous Windows.</html>
 smtp_from=Adresse exp\u00E9diteur (From) \:
 smtp_header_add=Ajouter une ent\u00EAte
 smtp_header_name=Nom d'ent\u00EAte
 smtp_header_remove=Supprimer
 smtp_header_value=Valeur d'ent\u00EAte
 smtp_mail_settings=Param\u00E8tres du courriel
 smtp_message=Message \:
 smtp_message_settings=Param\u00E8tres du message
 smtp_messagesize=Calculer la taille du message
 smtp_password=Mot de passe \:
 smtp_plainbody=Envoyer le message en texte (i.e. sans multipart/mixed)
 smtp_replyto=Adresse de r\u00E9ponse (Reply-To) \:
 smtp_sampler_title=Requ\u00EAte SMTP
 smtp_security_settings=Param\u00E8tres de s\u00E9curit\u00E9
 smtp_server=Serveur \:
 smtp_server_connection_timeout=D\u00E9lai d'attente de connexion \:
 smtp_server_port=Port \:
 smtp_server_settings=Param\u00E8tres du serveur
 smtp_server_timeout=D\u00E9lai d'attente de r\u00E9ponse \:
 smtp_server_timeouts_settings=D\u00E9lais d'attente (milli-secondes)
 smtp_subject=Sujet \:
 smtp_suppresssubj=Supprimer l'ent\u00EAte Sujet (Subject)
 smtp_timestamp=Ajouter un horodatage dans le sujet
 smtp_to=Adresse destinataire (To) \:
 smtp_trustall=Faire confiance \u00E0 tous les certificats
 smtp_trustall_tooltip=<html><b>Forcer</b> JMeter \u00E0 faire confiance \u00E0 tous les certificats, quelque soit l'autorit\u00E9 de certification du certificat.</html>
 smtp_truststore=Coffre de cl\u00E9s local \:
 smtp_truststore_tooltip=<html>Le chemin du coffre de confiance.<br />Les chemins relatifs sont d\u00E9termin\u00E9s \u00E0 partir du r\u00E9pertoire courant.<br />En cas d'\u00E9chec, c'est le r\u00E9pertoire contenant le script JMX qui est utilis\u00E9.</html>
 smtp_useauth=Utiliser l'authentification
 smtp_usenone=Pas de fonctionnalit\u00E9 de s\u00E9curit\u00E9
 smtp_username=Identifiant \:
 smtp_usessl=Utiliser SSL
 smtp_usestarttls=Utiliser StartTLS
 smtp_usetruststore=Utiliser le coffre de confiance local
 smtp_usetruststore_tooltip=<html>Autoriser JMeter \u00E0 utiliser le coffre de confiance local.</html>
 soap_action=Action Soap
 soap_data_title=Donn\u00E9es Soap/XML-RPC
 soap_sampler_file_invalid=Le nom de fichier r\u00E9f\u00E9rence un fichier absent ou sans droits de lecture\:
 soap_sampler_title=Requ\u00EAte SOAP/XML-RPC
 soap_send_action=Envoyer l'action SOAP \:
 solinger=SO_LINGER\:
 split_function_separator=S\u00E9parateur utilis\u00E9 pour scinder le texte. Par d\u00E9faut , (virgule) est utilis\u00E9.
 split_function_string=Texte \u00E0 scinder
 ssl_alias_prompt=Veuillez entrer votre alias pr\u00E9f\u00E9r\u00E9
 ssl_alias_select=S\u00E9lectionner votre alias pour le test
 ssl_alias_title=Alias du client
 ssl_error_title=Probl\u00E8me de KeyStore
 ssl_pass_prompt=Entrer votre mot de passe
 ssl_pass_title=Mot de passe KeyStore
 ssl_port=Port SSL
 sslmanager=Gestionnaire SSL
 start=Lancer
 start_no_timers=Lancer sans pauses
 starttime=Date et heure de d\u00E9marrage \:
 stop=Arr\u00EAter
 stopping_test=Arr\u00EAt de toutes les unit\u00E9s de tests en cours. Le nombre d'unit\u00E9s actives est visible dans le coin haut droit de l'interface. Soyez patient, merci. 
 stopping_test_failed=Au moins une unit\u00E9 non arr\u00EAt\u00E9e; voir le journal.
 stopping_test_host=H\u00F4te
 stopping_test_title=En train d'arr\u00EAter le test
 string_from_file_encoding=Encodage du fichier (optionnel)
 string_from_file_file_name=Entrer le chemin (absolu ou relatif) du fichier
 string_from_file_seq_final=Nombre final de s\u00E9quence de fichier
 string_from_file_seq_start=D\u00E9marer le nombre de s\u00E9quence de fichier
 summariser_title=G\u00E9n\u00E9rer les resultats consolid\u00E9s
 summary_report=Rapport consolid\u00E9
 switch_controller_label=Aller vers le num\u00E9ro d'\u00E9l\u00E9ment (ou nom) subordonn\u00E9 \:
 switch_controller_title=Contr\u00F4leur Aller \u00E0
 system_sampler_stderr=Erreur standard (stderr) \:
 system_sampler_stdin=Entr\u00E9e standard (stdin) \:
 system_sampler_stdout=Sortie standard (stdout) \:
 system_sampler_title=Appel de processus syst\u00E8me
 table_visualizer_bytes=Octets
 table_visualizer_connect=\u00C9tabl. Conn.(ms)
 table_visualizer_latency=Latence
 table_visualizer_sample_num=Echantillon \#
 table_visualizer_sample_time=Temps (ms)
 table_visualizer_sent_bytes=Octets envoy\u00E9s
 table_visualizer_start_time=Heure d\u00E9but
 table_visualizer_status=Statut
 table_visualizer_success=Succ\u00E8s
 table_visualizer_thread_name=Nom d'unit\u00E9
 table_visualizer_warning=Alerte
 target_server=Serveur cible
 tcp_classname=Nom de classe TCPClient \:
 tcp_config_title=Param\u00E8tres TCP par d\u00E9faut
 tcp_nodelay=D\u00E9finir aucun d\u00E9lai (NoDelay)
 tcp_port=Num\u00E9ro de port \:
 tcp_request_data=Texte \u00E0 envoyer \:
 tcp_sample_title=Requ\u00EAte TCP
 tcp_timeout=Expiration (millisecondes) \:
 teardown_on_shutdown=Ex\u00E9cuter le Groupe d'unit\u00E9s de fin m\u00EAme apr\u00E8s un arr\u00EAt manuel des Groupes d'unit\u00E9s principaux
 template_choose=Choisir le mod\u00E8le
 template_create_from=Cr\u00E9er
 template_field=Canevas \:
 template_load?=Charger le mod\u00E8le ?
 template_menu=Mod\u00E8les...
 template_merge_from=Fusionner
 template_reload=Recharger les mod\u00E8les
 template_title=Mod\u00E8les
 test=Test
 test_action_action=Action \:
 test_action_duration=Dur\u00E9e (millisecondes) \:
 test_action_pause=Mettre en pause
 test_action_restart_next_loop=Passer \u00E0 l'it\u00E9ration suivante de la boucle
 test_action_stop=Arr\u00EAter
 test_action_stop_now=Arr\u00EAter imm\u00E9diatement
 test_action_target=Cible \:
 test_action_target_test=Toutes les unit\u00E9s
 test_action_target_thread=Unit\u00E9 courante
 test_action_title=Action test
 test_configuration=Type de test
 test_fragment_title=Fragment d'\u00E9l\u00E9ments
 test_plan=Plan de test
 test_plan_classpath_browse=Ajouter un r\u00E9pertoire ou un fichier 'jar' au 'classpath'
 testconfiguration=Tester la configuration
 testplan.serialized=Lancer les groupes d'unit\u00E9s en s\u00E9rie (c'est-\u00E0-dire \: lance un groupe \u00E0 la fois)
 testplan_comments=Commentaires \:
 testt=Test
 textbox_cancel=Annuler
 textbox_close=Fermer
 textbox_save_close=Enregistrer & Fermer
 textbox_title_edit=Editer texte
 textbox_title_view=Voir texte
 textbox_tooltip_cell=Double clic pour voir/editer
 thread_delay_properties=Propri\u00E9t\u00E9s de temporisation de l'unit\u00E9
 thread_group_title=Groupe d'unit\u00E9s
 thread_properties=Propri\u00E9t\u00E9s du groupe d'unit\u00E9s
 threadgroup=Groupe d'unit\u00E9s
 throughput_control_bynumber_label=Ex\u00E9cutions totales
 throughput_control_bypercent_label=Pourcentage d'ex\u00E9cution
 throughput_control_perthread_label=Par utilisateur
 throughput_control_title=Contr\u00F4leur D\u00E9bit
 throughput_control_tplabel=D\u00E9bit \:
 time_format=Chaine de formatage sur le mod\u00E8le SimpleDateFormat (optionnel)
 timelim=Limiter le temps de r\u00E9ponses \u00E0 (ms)
 timeout_config_box_title=Configuration du d\u00E9lai d'expiration
 timeout_title=D\u00E9lai expiration (ms)
 toggle=Permuter
 toolbar_icon_set_not_found=Le fichier de description des ic\u00F4nes de la barre d'outils n'est pas trouv\u00E9. Voir les journaux.
 total_threads_tooltip=Nombre total d'Unit\u00E9s \u00E0 lancer
 tr=Turc
 transaction_controller_include_timers=Inclure la dur\u00E9e des compteurs de temps et pre/post processeurs dans le calcul du temps
 transaction_controller_parent=G\u00E9n\u00E9rer en \u00E9chantillon parent
 transaction_controller_title=Contr\u00F4leur Transaction
 transform_into_variable=Remplacer les valeurs par des variables
 unbind=D\u00E9connexion de l'unit\u00E9
 undo=Annuler
 unescape_html_string=Cha\u00EEne \u00E0 \u00E9chapper
 unescape_string=Cha\u00EEne de caract\u00E8res contenant des\u00E9chappements Java
 uniform_timer_delay=D\u00E9lai de d\u00E9calage constant (en millisecondes) \:
 uniform_timer_memo=Ajoute un d\u00E9lai al\u00E9atoire avec une distribution uniforme
 uniform_timer_range=D\u00E9viation al\u00E9atoire maximum (en millisecondes) \:
 uniform_timer_title=Compteur de temps al\u00E9atoire uniforme
 up=Monter
 update=Mettre \u00E0 jour
 update_per_iter=Mettre \u00E0 jour une fois par it\u00E9ration
 upload=Fichier \u00E0 uploader
 upper_bound=Borne sup\u00E9rieure
 url=URL
 url_config_get=GET
 url_config_http=HTTP
 url_config_https=HTTPS
 url_config_post=POST
 url_config_protocol=Protocole \:
 url_config_title=Param\u00E8tres HTTP par d\u00E9faut
 url_full_config_title=Echantillon d'URL complet
 url_multipart_config_title=Requ\u00EAte HTTP Multipart par d\u00E9faut
 urldecode_string=Cha\u00EEne de style URL \u00E0 d\u00E9coder
 urlencode_string=Cha\u00EEne de caract\u00E8res \u00E0 encoder en style URL
 use_custom_dns_resolver=Utiliser un r\u00E9solveur DNS personnalis\u00E9
 use_expires=Utiliser les ent\u00EAtes Cache-Control/Expires lors du traitement des requ\u00EAtes GET
 use_keepalive=Connexion persist.
 use_multipart_for_http_post=Multipart/form-data
 use_multipart_mode_browser=Ent\u00EAtes compat. navigateur
 use_recording_controller=Utiliser un contr\u00F4leur enregistreur
 use_system_dns_resolver=Utiliser le r\u00E9solveur DNS syst\u00E8me (JVM)
 user=Utilisateur
 user_defined_test=Test d\u00E9fini par l'utilisateur
 user_defined_variables=Variables pr\u00E9-d\u00E9finies
 user_param_mod_help_note=(Ne pas changer. A la place, modifier le fichier de ce nom dans le r\u00E9pertoire /bin de JMeter)
 user_parameters_table=Param\u00E8tres
 user_parameters_title=Param\u00E8tres Utilisateur
 userdn=Identifiant
 username=Nom d'utilisateur \:
 userpw=Mot de passe
 validate_threadgroup=Valider
 value=Valeur \:
 value_to_quote_meta=Valeur \u00E0 \u00E9chapper des caract\u00E8res sp\u00E9ciaux utilis\u00E8s par ORO Regexp
 var_name=Nom de r\u00E9f\u00E9rence \:
 variable_name_param=Nom de variable (peut inclure une r\u00E9f\u00E9rence de variable ou fonction)
 view_graph_tree_title=Voir le graphique en arbre
 view_results_assertion_error=Erreur d'assertion \: 
 view_results_assertion_failure=Echec d'assertion \: 
 view_results_assertion_failure_message=Message d'\u00E9chec d'assertion \: 
 view_results_autoscroll=D\u00E9filement automatique ?
 view_results_childsamples=Echantillons enfants?
 view_results_connect_time=Temps \u00E9tablissement connexion \: 
 view_results_datatype=Type de donn\u00E9es ("text"|"bin"|"")\: 
 view_results_desc=Affiche les r\u00E9sultats d'un \u00E9chantillon dans un arbre de r\u00E9sultats
 view_results_error_count=Compteur erreur\: 
 view_results_fields=champs \:
 view_results_in_table=Tableau de r\u00E9sultats
 view_results_latency=Latence \: 
 view_results_load_time=Temps de r\u00E9ponse \: 
 view_results_render=Rendu \:
 view_results_render_browser=Navigateur
 view_results_render_document=Document
 view_results_render_html=HTML
 view_results_render_html_embedded=HTML et ressources
 view_results_render_html_formatted=Code source HTML Format\u00E9
 view_results_render_json=JSON
 view_results_render_text=Texte brut
 view_results_render_xml=XML
 view_results_request_headers=Ent\u00EAtes de requ\u00EAte \:
 view_results_response_code=Code de retour \: 
 view_results_response_headers=Ent\u00EAtes de r\u00E9ponse \:
 view_results_response_message=Message de retour \: 
 view_results_response_missing_tika=Manque l'archive tika-app.jar dans le classpath. Impossible de convertir en texte ce type de document.\nT\u00E9l\u00E9charger le fichier tika-app-x.x.jar depuis http\://tika.apache.org/download.html\nPuis ajouter ce fichier dans le r\u00E9pertoire <JMeter>/lib
 view_results_response_partial_message=D\u00E9but du message\:
 view_results_response_too_large_message=R\u00E9ponse d\u00E9passant la taille maximale d'affichage. Taille \: 
 view_results_sample_count=Compteur \u00E9chantillon \: 
 view_results_sample_start=Date d\u00E9but \u00E9chantillon \: 
 view_results_search_pane=Volet recherche 
 view_results_sent_bytes=Octets envoy\u00E9s:
 view_results_size_body_in_bytes=Taille du corps en octets \: 
 view_results_size_headers_in_bytes=Taille de l'ent\u00EAte en octets \: 
 view_results_size_in_bytes=Taille en octets \: 
 view_results_tab_assertion=R\u00E9sultats d'assertion
 view_results_tab_request=Requ\u00EAte
 view_results_tab_response=Donn\u00E9es de r\u00E9ponse
 view_results_tab_sampler=R\u00E9sultat de l'\u00E9chantillon
 view_results_table_fields_key=Champ suppl\u00E9mentaire
 view_results_table_fields_value=Valeur
 view_results_table_headers_key=Ent\u00EAtes de r\u00E9ponse
 view_results_table_headers_value=Valeur
 view_results_table_request_headers_key=Ent\u00EAtes de requ\u00EAte
 view_results_table_request_headers_value=Valeur
 view_results_table_request_http_cookie=Cookie
 view_results_table_request_http_host=H\u00F4te
 view_results_table_request_http_method=M\u00E9thode
 view_results_table_request_http_nohttp=N'est pas un \u00E9chantillon HTTP
 view_results_table_request_http_path=Chemin
 view_results_table_request_http_port=Port
 view_results_table_request_http_protocol=Protocole
 view_results_table_request_params_key=Nom de param\u00E8tre
 view_results_table_request_params_value=Valeur
 view_results_table_request_raw_nodata=Pas de donn\u00E9es \u00E0 afficher
 view_results_table_request_tab_http=HTTP
 view_results_table_request_tab_raw=Brut
 view_results_table_result_tab_parsed=D\u00E9cod\u00E9
 view_results_table_result_tab_raw=Brut
 view_results_thread_name=Nom d'unit\u00E9 \: 
 view_results_title=Voir les r\u00E9sultats
 view_results_tree_title=Arbre de r\u00E9sultats
 warning=Attention \!
 web_cannot_convert_parameters_to_raw=Ne peut pas convertir les param\u00E8tres en Donn\u00E9es POST brutes\ncar l'un des param\u00E8tres a un nom.
 web_cannot_switch_tab=Vous ne pouvez pas basculer car ces donn\u00E9es ne peuvent \u00EAtre converties.\nVider les donn\u00E9es pour basculer.
 web_parameters_lost_message=Basculer vers les Donn\u00E9es POST brutes va convertir en format brut\net perdre le format tabulaire quand vous s\u00E9lectionnerez un autre noeud\nou \u00E0 la sauvegarde du plan de test, \u00EAtes-vous s\u00FBr ?
 web_proxy_server_title=Requ\u00EAte via un serveur proxy
 web_request=Requ\u00EAte HTTP
 web_server=Serveur web
 web_server_client=Impl\u00E9mentation client \:
 web_server_domain=Nom ou adresse IP \:
 web_server_port=Port \:
 web_server_timeout_connect=Connexion \:
 web_server_timeout_response=R\u00E9ponse \:
 web_server_timeout_title=D\u00E9lai expiration (ms)
 web_testing2_title=Requ\u00EAte HTTP HTTPClient
 web_testing_advanced=Avanc\u00E9e
 web_testing_basic=Basique
 web_testing_concurrent_download=T\u00E9l\u00E9chargements en parall\u00E8le. Nombre \:
 web_testing_embedded_url_pattern=Les URL \u00E0 inclure doivent correspondre \u00E0 \:
 web_testing_retrieve_images=R\u00E9cup\u00E9rer les ressources incluses
 web_testing_retrieve_title=Ressources incluses dans les pages HTML
 web_testing_source_ip=Adresse source
 web_testing_source_ip_device=Interface
 web_testing_source_ip_device_ipv4=Interface IPv4
 web_testing_source_ip_device_ipv6=Interface IPv6
 web_testing_source_ip_hostname=IP/Nom d'h\u00F4te
 web_testing_title=Requ\u00EAte HTTP
 while_controller_label=Condition (fonction ou variable) \:
 while_controller_title=Contr\u00F4leur Tant Que
 workbench_title=Plan de travail
 xml_assertion_title=Assertion XML
 xml_download_dtds=R\u00E9cup\u00E9rer les DTD externes
 xml_namespace_button=Utiliser les espaces de noms
 xml_tolerant_button=Utiliser Tidy (analyseur tol\u00E9rant)
 xml_validate_button=Validation XML
 xml_whitespace_button=Ignorer les espaces
 xmlschema_assertion_label=Nom de fichier \: 
 xmlschema_assertion_title=Assertion Sch\u00E9ma XML
 xpath_assertion_button=Valider
 xpath_assertion_check=V\u00E9rifier l'expression XPath
 xpath_assertion_error=Erreur avec XPath
 xpath_assertion_failed=Expression XPath invalide
 xpath_assertion_label=XPath
 xpath_assertion_negate=Vrai si aucune correspondance trouv\u00E9e
 xpath_assertion_option=Options d'analyse XML
 xpath_assertion_test=V\u00E9rificateur XPath
 xpath_assertion_tidy=Essayer et nettoyer l'entr\u00E9e
 xpath_assertion_title=Assertion XPath
 xpath_assertion_valid=Expression XPath valide
 xpath_assertion_validation=Valider le code XML \u00E0 travers le fichier DTD
 xpath_assertion_whitespace=Ignorer les espaces
 xpath_expression=Expression XPath de correspondance
 xpath_extractor_fragment=Retourner le fragment XPath entier au lieu du contenu
 xpath_extractor_query=Requ\u00EAte XPath \:
 xpath_extractor_title=Extracteur XPath
 xpath_file_file_name=Fichier XML contenant les valeurs
 xpath_tester=Testeur XPath
 xpath_tester_button_test=Tester
 xpath_tester_field=Expression XPath
 xpath_tester_fragment=Retourner le fragment XPath entier au lieu du contenu ?
 xpath_tester_no_text=Les donn\u00E9es de r\u00E9ponse ne sont pas du texte.
 xpath_tester_title=Testeur XPath
 xpath_tidy_quiet=Silencieux
 xpath_tidy_report_errors=Rapporter les erreurs
 xpath_tidy_show_warnings=Afficher les alertes
 you_must_enter_a_valid_number=Vous devez entrer un nombre valide
 zh_cn=Chinois (simplifi\u00E9)
 zh_tw=Chinois (traditionnel)
diff --git a/src/core/org/apache/jmeter/resources/messages_ja.properties b/src/core/org/apache/jmeter/resources/messages_ja.properties
index ded975fe2..1d2d86a78 100644
--- a/src/core/org/apache/jmeter/resources/messages_ja.properties
+++ b/src/core/org/apache/jmeter/resources/messages_ja.properties
@@ -1,453 +1,445 @@
 #   Licensed to the Apache Software Foundation (ASF) under one or more
 #   contributor license agreements.  See the NOTICE file distributed with
 #   this work for additional information regarding copyright ownership.
 #   The ASF licenses this file to You under the Apache License, Version 2.0
 #   (the "License"); you may not use this file except in compliance with
 #   the License.  You may obtain a copy of the License at
 # 
 #       http://www.apache.org/licenses/LICENSE-2.0
 # 
 #   Unless required by applicable law or agreed to in writing, software
 #   distributed under the License is distributed on an "AS IS" BASIS,
 #   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 #   See the License for the specific language governing permissions and
 #   limitations under the License.
 
 #Stored by I18NEdit, may be edited!
 about=Apache JMeter \u306B\u3064\u3044\u3066
 add=\u8FFD\u52A0
 add_as_child=\u5B50\u3068\u3057\u3066\u8FFD\u52A0
 add_parameter=\u5909\u6570\u306E\u8FFD\u52A0
 add_pattern=\u30D1\u30BF\u30FC\u30F3\u8FFD\u52A0\:
 add_test=\u30C6\u30B9\u30C8\u306E\u8FFD\u52A0
 add_user=\u30E6\u30FC\u30B6\u30FC\u306E\u8FFD\u52A0
 add_value=\u5024\u306E\u8FFD\u52A0
 aggregate_report=\u7D71\u8A08\u30EC\u30DD\u30FC\u30C8
 aggregate_report_total_label=\u5408\u8A08
 als_message=\u6CE8\u610F\: \u30A2\u30AF\u30BB\u30B9\u30ED\u30B0\u30D1\u30FC\u30B5\u306F\u6C4E\u7528\u7684\u306B\u8A2D\u8A08\u3055\u308C\u3066\u3044\u308B\u306E\u3067\u3001\u72EC\u81EA\u30D1\u30FC\u30B5\u3092
 als_message2=\u30D7\u30E9\u30B0\u30A4\u30F3\u53EF\u80FD\u3067\u3059\u3002\u305D\u306E\u305F\u3081\u306B\u306F\u3001LogParser\u3092\u5B9F\u88C5\u3057\u3066/lib\u30C7\u30A3\u30EC\u30AF\u30C8\u30EA\u306B
 als_message3=jar\u30D5\u30A1\u30A4\u30EB\u3092\u8FFD\u52A0\u3057\u3001\u30B5\u30F3\u30D7\u30E9\u30FC\u3067\u30AF\u30E9\u30B9\u3092\u5165\u529B\u3057\u3066\u304F\u3060\u3055\u3044\u3002
 analyze=\u30C7\u30FC\u30BF\u30D5\u30A1\u30A4\u30EB\u3092\u5206\u6790...
 anchor_modifier_title=HTML \u30EA\u30F3\u30AF\u30D1\u30FC\u30B5
 appearance=\u30EB\u30C3\u30AF&\u30D5\u30A3\u30FC\u30EB
 argument_must_not_be_negative=\u5F15\u6570\u306F\u8CA0\u306E\u5024\u3067\u306A\u3051\u308C\u3070\u306A\u308A\u307E\u305B\u3093\uFF01
 assertion_code_resp=\u5FDC\u7B54\u30B3\u30FC\u30C9
 assertion_contains=\u542B\u3080
 assertion_matches=\u4E00\u81F4\u3059\u308B
 assertion_message_resp=\u5FDC\u7B54\u30E1\u30C3\u30BB\u30FC\u30B8
 assertion_not=\u5426\u5B9A
 assertion_pattern_match_rules=\u30D1\u30BF\u30FC\u30F3\u30DE\u30C3\u30C1\u30F3\u30B0\u30EB\u30FC\u30EB
 assertion_patterns_to_test=\u30C6\u30B9\u30C8\u30D1\u30BF\u30FC\u30F3
 assertion_resp_field=\u30C6\u30B9\u30C8\u3059\u308B\u30EC\u30B9\u30DD\u30F3\u30B9\u30D5\u30A3\u30FC\u30EB\u30C9
 assertion_text_resp=\u30C6\u30AD\u30B9\u30C8\u306E\u30EC\u30B9\u30DD\u30F3\u30B9
 assertion_textarea_label=\u30A2\u30B5\u30FC\u30B7\u30E7\u30F3\:
 assertion_title=\u30A2\u30B5\u30FC\u30B7\u30E7\u30F3
 assertion_url_samp=\u30B5\u30F3\u30D7\u30EA\u30F3\u30B0\u3055\u308C\u305F URL
 assertion_visualizer_title=\u30A2\u30B5\u30FC\u30B7\u30E7\u30F3 \u7D50\u679C
 auth_base_url=\u57FA\u5E95URL
 auth_manager_title=HTTP \u8A8D\u8A3C\u30DE\u30CD\u30FC\u30B8\u30E3
 auths_stored=\u8A8D\u8A3C\u30DE\u30CD\u30FC\u30B8\u30E3\u306B\u4FDD\u5B58\u3055\u308C\u3066\u3044\u308B\u8A8D\u8A3C
 browse=\u53C2\u7167...
 bsf_sampler_title=BSF\u30B5\u30F3\u30D7\u30E9\u30FC
 bsf_script=\u5B9F\u884C\u3059\u308B\u30B9\u30AF\u30EA\u30D7\u30C8
 bsf_script_file=\u5B9F\u884C\u3059\u308B\u30B9\u30AF\u30EA\u30D7\u30C8\u30D5\u30A1\u30A4\u30EB
 bsf_script_language=\u30B9\u30AF\u30EA\u30D7\u30C8\u8A00\u8A9E\:
 bsf_script_parameters=\u30B9\u30AF\u30EA\u30D7\u30C8/\u30D5\u30A1\u30A4\u30EB\u3078\u6E21\u3059\u30D1\u30E9\u30E1\u30FC\u30BF\:
 bsh_assertion_script=\u30B9\u30AF\u30EA\u30D7\u30C8(Response[Data|Code|Message|Headers], RequestHeaders, Sample[Label|rData], Result, Failure[Message])
 bsh_assertion_title=BeanShell\u30A2\u30B5\u30FC\u30B7\u30E7\u30F3
 bsh_function_expression=\u8A55\u4FA1\u5BFE\u8C61\u306E\u5F0F
 bsh_sampler_title=BeanShell\u30B5\u30F3\u30D7\u30E9\u30FC
 bsh_script=\u30B9\u30AF\u30EA\u30D7\u30C8 (variables\: SampleResult, ResponseCode, ResponseMessage, IsSuccess, Label, FileName)
 bsh_script_file=\u30B9\u30AF\u30EA\u30D7\u30C8\u30D5\u30A1\u30A4\u30EB
 bsh_script_parameters=\u30D1\u30E9\u30E1\u30FC\u30BF\uFF08-> String Parameters and String []bsh.args\uFF09
 busy_testing=\u73FE\u5728\u30C6\u30B9\u30C8\u4E2D\u3067\u3059\u3002\u8A2D\u5B9A\u5909\u66F4\u306E\u524D\u306B\u30C6\u30B9\u30C8\u3092\u505C\u6B62\u3057\u3066\u304F\u3060\u3055\u3044\u3002
 cancel=\u30AD\u30E3\u30F3\u30BB\u30EB
 cancel_exit_to_save=\u4FDD\u5B58\u3055\u308C\u3066\u3044\u306A\u3044\u30C6\u30B9\u30C8\u9805\u76EE\u304C\u3042\u308A\u307E\u3059\u3002\u7D42\u4E86\u3059\u308B\u524D\u306B\u4FDD\u5B58\u3057\u307E\u3059\u304B\uFF1F
 cancel_new_to_save=\u4FDD\u5B58\u3055\u308C\u3066\u3044\u306A\u3044\u30C6\u30B9\u30C8\u9805\u76EE\u304C\u3042\u308A\u307E\u3059\u3002\u30C6\u30B9\u30C8\u8A08\u753B\u3092\u6D88\u53BB\u3059\u308B\u524D\u306B\u4FDD\u5B58\u3057\u307E\u3059\u304B\uFF1F
 choose_function=\u95A2\u6570\u306E\u9078\u629E
 choose_language=\u8A00\u8A9E\u306E\u9078\u629E
 clear=\u6D88\u53BB
 clear_all=\u5168\u3066\u6D88\u53BB
 clear_cookies_per_iter=\u7E70\u308A\u8FD4\u3057\u3054\u3068\u306B\u30AF\u30C3\u30AD\u30FC\u3092\u7834\u68C4\u3057\u307E\u3059\u304B\uFF1F
 column_delete_disallowed=\u3053\u306E\u30AB\u30E9\u30E0\u306E\u524A\u9664\u6A29\u9650\u304C\u3042\u308A\u307E\u305B\u3093
 column_number=CSV\u30D5\u30A1\u30A4\u30EB\u306E\u30AB\u30E9\u30E0\u756A\u53F7
 config_element=\u8A2D\u5B9A\u30A8\u30EC\u30E1\u30F3\u30C8
 constant_throughput_timer_memo=\u4E00\u5B9A\u306E\u30B9\u30EB\u30FC\u30D7\u30C3\u30C8\u306B\u5230\u9054\u3057\u305F\u3089\u30B5\u30F3\u30D7\u30EA\u30F3\u30B0\u9593\u306B\u9045\u5EF6\u3092\u8FFD\u52A0
 constant_timer_delay=\u30B9\u30EC\u30C3\u30C9\u9045\u5EF6\u6642\u9593 (\u30DF\u30EA\u79D2)\:
 constant_timer_memo=\u30B5\u30F3\u30D7\u30EA\u30F3\u30B0\u9593\u306B\u4E00\u5B9A\u306E\u9045\u5EF6\u3092\u8FFD\u52A0
 constant_timer_title=\u5B9A\u6570\u30BF\u30A4\u30DE
 controller=\u30B3\u30F3\u30C8\u30ED\u30FC\u30E9
 cookie_manager_title=HTTP \u30AF\u30C3\u30AD\u30FC\u30DE\u30CD\u30FC\u30B8\u30E3
 cookies_stored=\u30AF\u30C3\u30AD\u30FC\u30DE\u30CD\u30FC\u30B8\u30E3\u306B\u4FDD\u5B58\u3055\u308C\u3066\u3044\u308B\u30AF\u30C3\u30AD\u30FC
 copy=\u30B3\u30D4\u30FC
 counter_config_title=\u30AB\u30A6\u30F3\u30BF
 counter_per_user=\u5404\u30E6\u30FC\u30B6\u72EC\u7ACB\u306E\u30C8\u30E9\u30C3\u30AF\u30AB\u30A6\u30F3\u30BF
 csvread_file_file_name=\u5024\u3092\u8AAD\u307F\u8FBC\u3080CSV\u30D5\u30A1\u30A4\u30EB
 cut=\u30AB\u30C3\u30C8
 cut_paste_function=\u751F\u6210\u3055\u308C\u305F\u95A2\u6570\u6587\u5B57\u5217\u3092\u30B3\u30D4\u30FC\u3057\u8CBC\u308A\u4ED8\u3051\u3066\u304F\u3060\u3055\u3044\u3002
 database_sql_query_string=SQL \u30AF\u30A8\u30EA\u30FC\u6587\u5B57\u5217\:
 database_sql_query_title=JDBC SQL \u30AF\u30A8\u30EA\u30FC\u521D\u671F\u5024\u8A2D\u5B9A
 de=\u30C9\u30A4\u30C4\u8A9E
 default_parameters=\u30C7\u30D5\u30A9\u30EB\u30C8\u30D1\u30E9\u30E1\u30FC\u30BF
 default_value_field=\u521D\u671F\u5024\uFF1A
 delay=\u8D77\u52D5\u9045\u5EF6\uFF08\u79D2\uFF09
 delete=\u524A\u9664
 delete_parameter=\u5909\u6570\u306E\u524A\u9664
 delete_test=\u30C6\u30B9\u30C8\u306E\u524A\u9664
 delete_user=\u30E6\u30FC\u30B6\u30FC\u306E\u524A\u9664
 disable=\u7121\u52B9
 dn=\uFF24\uFF2E
 domain=\u30C9\u30E1\u30A4\u30F3
 duration=\u6301\u7D9A\u6642\u9593\uFF08\u79D2\uFF09
 duration_assertion_duration_test=\u30A2\u30B5\u30FC\u30C8\u306E\u6301\u7D9A
 duration_assertion_failure=\u64CD\u4F5C\u306B\u6642\u9593\u304C\u304B\u304B\u308A\u3059\u304E\u307E\u3057\u305F\:{0}\u30DF\u30EA\u79D2\u304B\u304B\u308A\u307E\u3057\u305F\u304C\u3001{1}\u30DF\u30EA\u79D2\u3088\u308A\u3082\u9577\u304F\u304B\u304B\u308B\u3079\u304D\u3067\u306F\u3042\u308A\u307E\u305B\u3093\u3002
 duration_assertion_input_error=\u59A5\u5F53\u306A\u6B63\u306E\u6574\u6570\u3092\u5165\u529B\u3057\u3066\u304F\u3060\u3055\u3044\u3002
 duration_assertion_label=\u6301\u7D9A\u6642\u9593(\u30DF\u30EA\u79D2)
 duration_assertion_title=\u30A2\u30B5\u30FC\u30B7\u30E7\u30F3\u306E\u6301\u7D9A
 edit=\u7DE8\u96C6
 email_results_title=\u7D50\u679C\u3092\u30E1\u30FC\u30EB\u3067\u9001\u4FE1
 en=\u82F1\u8A9E
 enable=\u6709\u52B9
 encoded_value=URL\u30A8\u30F3\u30B3\u30FC\u30C9\u5024
 endtime=\u7D42\u4E86\u6642\u523B
 entry_dn=\u30A8\u30F3\u30C8\u30EADN
 error_loading_help=\u30D8\u30EB\u30D7\u30DA\u30FC\u30B8\u30ED\u30FC\u30C9\u4E2D\u306E\u30A8\u30E9\u30FC
 error_occurred=\u30A8\u30E9\u30FC\u304C\u767A\u751F
 example_data=\u30B5\u30F3\u30D7\u30EB\u30C7\u30FC\u30BF
 example_title=Example\u30B5\u30F3\u30D7\u30E9\u30FC
 exit=\u7D42\u4E86
 expiration=\u671F\u9650
 field_name=\u30D5\u30A3\u30FC\u30EB\u30C9\u540D
 file=\u30D5\u30A1\u30A4\u30EB
 file_already_in_use=\u305D\u306E\u30D5\u30A1\u30A4\u30EB\u306F\u3059\u3067\u306B\u4F7F\u7528\u4E2D\u3067\u3059\u3002
 file_visualizer_append=\u65E2\u306B\u5B58\u5728\u3059\u308B\u30C7\u30FC\u30BF\u30D5\u30A1\u30A4\u30EB\u3078\u8FFD\u52A0
 file_visualizer_auto_flush=\u5404\u30C7\u30FC\u30BF\u3092\u30B5\u30F3\u30D7\u30EA\u30F3\u30B0\u3057\u305F\u3042\u3068\u306B\u81EA\u52D5\u7684\u306B\u66F8\u51FA\u3057
 file_visualizer_browse=\u53C2\u7167...
 file_visualizer_close=\u9589\u3058\u308B
 file_visualizer_file_options=\u30D5\u30A1\u30A4\u30EB\u30AA\u30D7\u30B7\u30E7\u30F3
 file_visualizer_filename=\u30D5\u30A1\u30A4\u30EB\u540D
 file_visualizer_flush=\u66F8\u51FA\u3057
 file_visualizer_missing_filename=\u51FA\u529B\u30D5\u30A1\u30A4\u30EB\u304C\u6307\u5B9A\u3055\u308C\u3066\u3044\u307E\u305B\u3093\u3002
 file_visualizer_open=\u958B\u304F
 file_visualizer_output_file=\u5168\u3066\u306E\u30C7\u30FC\u30BF\u3092\u30D5\u30A1\u30A4\u30EB\u306B\u51FA\u529B
 file_visualizer_submit_data=\u9001\u4FE1\u30C7\u30FC\u30BF\u3092\u542B\u307E\u305B\u308B
 file_visualizer_title=\u30D5\u30A1\u30A4\u30EB\u30EC\u30DD\u30FC\u30BF
 file_visualizer_verbose=\u8A73\u7D30\u306A\u30E1\u30C3\u30BB\u30FC\u30B8\u3092\u51FA\u529B
 filename=\u30D5\u30A1\u30A4\u30EB\u540D
 follow_redirects=\u30EA\u30C0\u30A4\u30EC\u30AF\u30C8\u306B\u5BFE\u5FDC
 follow_redirects_auto=\u81EA\u52D5\u30EA\u30C0\u30A4\u30EC\u30AF\u30C8
 foreach_controller_title=ForEach\u30B3\u30F3\u30C8\u30ED\u30FC\u30E9
 foreach_input=Input\u5909\u6570\u540D\u63A5\u982D\u8F9E
 foreach_output=Output\u5909\u6570\u540D
 ftp_sample_title=FTP \u30EA\u30AF\u30A8\u30B9\u30C8\u521D\u671F\u5024\u8A2D\u5B9A
 ftp_testing_title=FTP \u30EA\u30AF\u30A8\u30B9\u30C8
 function_dialog_menu_item=\u95A2\u6570\u30D8\u30EB\u30D1\u30FC\u30C0\u30A4\u30A2\u30ED\u30B0
 function_helper_title=\u95A2\u6570\u30D8\u30EB\u30D1\u30FC
 function_name_param=\u95A2\u6570\u540D\u3002\u30C6\u30B9\u30C8\u8A08\u753B\u3067\u4F7F\u7528\u3059\u308B\u5024\u3092\u4FDD\u6301\u3059\u308B\u306E\u306B\u4F7F\u7528\u3055\u308C\u307E\u3059\u3002
 function_params=\u95A2\u6570\u30D1\u30E9\u30E1\u30FC\u30BF
 functional_mode=Functional \u30C6\u30B9\u30C8\u30E2\u30FC\u30C9
 functional_mode_explanation=\u5404\u30EA\u30AF\u30A8\u30B9\u30C8\u306B\u5BFE\u3059\u308B\u30B5\u30FC\u30D0\u30FC\u306E\u5FDC\u7B54\u3092\n\u30D5\u30A1\u30A4\u30EB\u3078\u66F8\u304D\u8FBC\u307F\u305F\u3044\u5834\u5408\u306E\u307FFunctional \u30C6\u30B9\u30C8\u30E2\u30FC\u30C9\u3092\u9078\u629E\u3057\u3066\u4E0B\u3055\u3044\u3002\n\n\u3053\u306E\u30AA\u30D7\u30B7\u30E7\u30F3\u3092\u9078\u3093\u3060\u3068\u304D\u306E\u6027\u80FD\u306B\u5BFE\u3059\u308B\u5F71\u97FF\u306B\u7559\u610F\u3057\u3066\u304F\u3060\u3055\u3044\u3002
 gaussian_timer_delay=\u9045\u5EF6\u6642\u9593\u30AA\u30D5\u30BB\u30C3\u30C8\u5B9A\u6570 (\u30DF\u30EA\u79D2)\:
 gaussian_timer_memo=\u30AC\u30A6\u30B9\u5206\u5E03\u306B\u3088\u308B\u30E9\u30F3\u30C0\u30E0\u306A\u9045\u5EF6\u3092\u8FFD\u52A0
 gaussian_timer_range=\u504F\u5DEE (\u30DF\u30EA\u79D2)\:
 gaussian_timer_title=\u30AC\u30A6\u30B9\u4E71\u6570\u30BF\u30A4\u30DE
 generate=\u751F\u6210
 generator=\u751F\u6210\u30AF\u30E9\u30B9\u540D
 generator_cnf_msg=\u751F\u6210\u30AF\u30E9\u30B9\u304C\u898B\u3064\u304B\u308A\u307E\u305B\u3093\u3002/lib\u30C7\u30A3\u30EC\u30AF\u30C8\u30EA\u306B\u751F\u6210\u30AF\u30E9\u30B9\u3092\u542B\u3080jar\u30D5\u30A1\u30A4\u30EB\u304C\u3042\u308B\u3053\u3068\u3092\u78BA\u8A8D\u3057\u3066\u4E0B\u3055\u3044\u3002
 generator_illegal_msg=IllegalAcessException\u306B\u3088\u308A\u751F\u6210\u30AF\u30E9\u30B9\u3078\u30A2\u30AF\u30BB\u30B9\u3067\u304D\u307E\u305B\u3093\u3067\u3057\u305F\u3002
 generator_instantiate_msg=\u751F\u6210\u30D1\u30FC\u30B5\u306E\u30A4\u30F3\u30B9\u30BF\u30F3\u30B9\u3092\u4F5C\u6210\u3067\u304D\u307E\u305B\u3093\u3067\u3057\u305F\u3002Generator\u30A4\u30F3\u30BF\u30D5\u30A7\u30FC\u30B9\u3092\u5B9F\u88C5\u3059\u308B\u751F\u6210\u30AF\u30E9\u30B9\u3092\u78BA\u8A8D\u3057\u3066\u4E0B\u3055\u3044\u3002
 graph_choose_graphs=\u8868\u793A\u3059\u308B\u30B0\u30E9\u30D5
 graph_full_results_title=\u7D50\u679C\u3092\u30B0\u30E9\u30D5\u8868\u793A(\u8A73\u7D30)
 graph_results_average=\u5E73\u5747
 graph_results_data=\u30C7\u30FC\u30BF
 graph_results_deviation=\u504F\u5DEE
 graph_results_latest_sample=\u6700\u65B0\u306E\u30B5\u30F3\u30D7\u30EB
 graph_results_median=\u4E2D\u592E\u5024
 graph_results_ms=\u30DF\u30EA\u79D2(ms)
 graph_results_no_samples=\u30B5\u30F3\u30D7\u30EB\u6570
 graph_results_throughput=\u30B9\u30EB\u30FC\u30D7\u30C3\u30C8
 graph_results_title=\u30B0\u30E9\u30D5\u8868\u793A
 grouping_add_separators=\u30B0\u30EB\u30FC\u30D7\u9593\u306B\u30BB\u30D1\u30EC\u30FC\u30BF\u3092\u8FFD\u52A0
 grouping_in_controllers=\u65B0\u898F\u30B3\u30F3\u30C8\u30ED\u30FC\u30E9\u3078\u5404\u30B0\u30EB\u30FC\u30D7\u3092\u7F6E\u304F
 grouping_mode=\u30B0\u30EB\u30FC\u30D7\u306B\u3059\u308B\:
 grouping_no_groups=\u30B5\u30F3\u30D7\u30E9\u30FC\u3092\u30B0\u30EB\u30FC\u30D7\u306B\u3057\u306A\u3044
 grouping_store_first_only=\u5404\u30B0\u30EB\u30FC\u30D7\u306E\u6700\u521D\u306E\u30B5\u30F3\u30D7\u30E9\u30FC\u3060\u3051\u4FDD\u5B58
 header_manager_title=HTTP \u30D8\u30C3\u30C0\u30DE\u30CD\u30FC\u30B8\u30E3
 headers_stored=\u30D8\u30C3\u30C0\u30FC\u30DE\u30CD\u30FC\u30B8\u30E3\u306B\u4FDD\u5B58\u3055\u308C\u3066\u3044\u308B\u30D8\u30C3\u30C0
 help=\u30D8\u30EB\u30D7
 http_response_code=HTTP\u5FDC\u7B54\u30B3\u30FC\u30C9
 http_url_rewriting_modifier_title=HTTP URL-Rewriting \u4FEE\u98FE\u5B50
 http_user_parameter_modifier=HTTP\u30E6\u30FC\u30B6\u30FC\u30D1\u30E9\u30E1\u30FC\u30BF\u306E\u5909\u66F4
 id_prefix=ID\u63A5\u982D\u8F9E
 id_suffix=ID \u63A5\u5C3E\u8F9E
 if_controller_label=\u6761\u4EF6
 if_controller_title=If \u30B3\u30F3\u30C8\u30ED\u30FC\u30E9
 ignore_subcontrollers=\u30B5\u30D6\u30B3\u30F3\u30C8\u30ED\u30FC\u30E9\u30D6\u30ED\u30C3\u30AF\u3092\u7121\u8996
 include_equals=\u7B49\u53F7\u542B\u3080\uFF1F
 increment=\u5897\u5206
 infinite=\u7121\u9650\u30EB\u30FC\u30D7
 insert_after=\u5F8C\u3078\u633F\u5165
 insert_before=\u524D\u3078\u633F\u5165
 insert_parent=\u4E0A\u306E\u968E\u5C64\u306B\u633F\u5165
 interleave_control_title=\u30A4\u30F3\u30BF\u30EA\u30FC\u30D6\u30B3\u30F3\u30C8\u30ED\u30FC\u30E9
 intsum_param_1=\u6700\u521D\u306B\u8FFD\u52A0\u3059\u308Bint
 intsum_param_2=\uFF12\u56DE\u76EE\u306B\u8FFD\u52A0\u3059\u308Bint - \u3055\u3089\u306A\u308B\u5F15\u6570\u3092\u8FFD\u52A0\u3057\u3066\u5408\u8A08\u304C\u8A08\u7B97\u3055\u308C\u308B
 invalid_data=\u9069\u5207\u3067\u306A\u3044\u30C7\u30FC\u30BF
 invalid_mail_server=\u4E0D\u660E\u306A\u30E1\u30FC\u30EB\u30B5\u30FC\u30D0\u30FC\u3067\u3059\u3002
 iteration_counter_arg_1=TRUE, \u30E6\u30FC\u30B6\u30FC\u6BCE\u306B\u30AB\u30A6\u30F3\u30BF\u30FC\u3092\u6301\u3064\u3053\u3068\u304C\u3067\u304D\u308B, FALSE \u30B0\u30ED\u30FC\u30D0\u30EB\u30AB\u30A6\u30F3\u30BF\u30FC\u3068\u306A\u308B
 iterator_num=\u30EB\u30FC\u30D7\u56DE\u6570\:
 java_request=Java \u30EA\u30AF\u30A8\u30B9\u30C8
 java_request_defaults=Java \u30EA\u30AF\u30A8\u30B9\u30C8\u521D\u671F\u5024\u8A2D\u5B9A
 jndi_config_title=JNDI \u8A2D\u5B9A
 jndi_lookup_name=\u30EA\u30E2\u30FC\u30C8\u30A4\u30F3\u30BF\u30D5\u30A7\u30FC\u30B9
 jndi_lookup_title=JNDI \u30EB\u30C3\u30AF\u30A2\u30C3\u30D7\u8A2D\u5B9A
 jndi_method_button_invoke=\u547C\u3073\u51FA\u3057
 jndi_method_button_reflect=\u30EA\u30D5\u30EC\u30AF\u30C8
 jndi_method_home_name=\u30DB\u30FC\u30E0\u30E1\u30BD\u30C3\u30C9\u540D
 jndi_method_home_parms=\u30DB\u30FC\u30E0\u30E1\u30BD\u30C3\u30C9\u306E\u5F15\u6570
 jndi_method_name=\u30E1\u30BD\u30C3\u30C9\u8A2D\u5B9A
 jndi_method_remote_interface_list=\u30EA\u30E2\u30FC\u30C8\u30A4\u30F3\u30BF\u30D5\u30A7\u30FC\u30B9
 jndi_method_remote_name=\u30EA\u30E2\u30FC\u30C8\u30E1\u30BD\u30C3\u30C9\u540D
 jndi_method_remote_parms=\u30EA\u30E2\u30FC\u30C8\u30E1\u30BD\u30C3\u30C9\u306E\u5F15\u6570
 jndi_method_title=\u30EA\u30E2\u30FC\u30C8\u30E1\u30BD\u30C3\u30C9\u8A2D\u5B9A
 jndi_testing_title=JNDI \u30EA\u30AF\u30A8\u30B9\u30C8
 jndi_url_jndi_props=JNDI \u30D7\u30ED\u30D1\u30C6\u30A3
 ja=\u65E5\u672C\u8A9E
 ldap_sample_title=LDAP\u30EA\u30AF\u30A8\u30B9\u30C8\u521D\u671F\u5024\u8A2D\u5B9A
 ldap_testing_title=LDAP\u30EA\u30AF\u30A8\u30B9\u30C8
 load=\u8AAD\u8FBC
 log_errors_only=\u30ED\u30B0\u30A8\u30E9\u30FC\u306E\u307F
 log_file=\u30ED\u30B0\u30D5\u30A1\u30A4\u30EB\u306E\u5834\u6240
 log_parser=Log\u30D1\u30FC\u30B5\u30AF\u30E9\u30B9\u540D
 log_parser_cnf_msg=\u30AF\u30E9\u30B9\u304C\u898B\u3064\u304B\u308A\u307E\u305B\u3093\u3002/lib\u30C7\u30A3\u30EC\u30AF\u30C8\u30EA\u306B\u30AF\u30E9\u30B9\u3092\u542B\u3080jar\u30D5\u30A1\u30A4\u30EB\u304C\u3042\u308B\u3053\u3068\u3092\u78BA\u8A8D\u3057\u3066\u4E0B\u3055\u3044\u3002
 log_parser_illegal_msg=IllegalAcessException\u306B\u3088\u308A\u30AF\u30E9\u30B9\u3078\u30A2\u30AF\u30BB\u30B9\u3067\u304D\u307E\u305B\u3093\u3067\u3057\u305F\u3002
 log_parser_instantiate_msg=\u30ED\u30B0\u30D1\u30FC\u30B5\u306E\u30A4\u30F3\u30B9\u30BF\u30F3\u30B9\u3092\u4F5C\u6210\u3067\u304D\u307E\u305B\u3093\u3067\u3057\u305F\u3002LogParser\u30A4\u30F3\u30BF\u30D5\u30A7\u30FC\u30B9\u3092\u5B9F\u88C5\u3059\u308B\u30D1\u30FC\u30B5\u30AF\u30E9\u30B9\u3092\u78BA\u8A8D\u3057\u3066\u4E0B\u3055\u3044\u3002
 log_sampler=Tomcat\u30A2\u30AF\u30BB\u30B9\u30ED\u30B0\u30B5\u30F3\u30D7\u30E9\u30FC
 logic_controller_title=\u30B7\u30F3\u30D7\u30EB\u30B3\u30F3\u30C8\u30ED\u30FC\u30E9
 login_config=\u30ED\u30B0\u30A4\u30F3\u8A2D\u5B9A
 login_config_element=\u30ED\u30B0\u30A4\u30F3\u8A2D\u5B9A\u30A8\u30EC\u30E1\u30F3\u30C8
 loop_controller_title=\u30EB\u30FC\u30D7\u30B3\u30F3\u30C8\u30ED\u30FC\u30E9
 looping_control=\u30EB\u30FC\u30D7\u30B3\u30F3\u30C8\u30ED\u30FC\u30EB
 lower_bound=\u4E0B\u9650
 mailer_attributes_panel=\u30E1\u30FC\u30EB\u306E\u5C5E\u6027
 mailer_error=\u30E1\u30FC\u30EB\u3092\u9001\u4FE1\u3067\u304D\u307E\u305B\u3093\u3067\u3057\u305F\u3002\u5165\u529B\u5185\u5BB9\u306B\u9593\u9055\u3044\u304C\u306A\u3044\u304B\u78BA\u8A8D\u3057\u3066\u304F\u3060\u3055\u3044\u3002
 mailer_visualizer_title=\u30E1\u30FC\u30E9\u30FC\u30D3\u30B8\u30E5\u30A2\u30E9\u30A4\u30B6
 match_num_field=\u4E00\u81F4\u756A\u53F7\uFF080\u304B\u3089\u4E71\u6570\uFF09\uFF1A
 max=\u6700\u5927\u5024
 maximum_param=\u5024\u57DF\u306E\u6700\u5927\u5024
 md5hex_assertion_failure=MD5 sum \u30A2\u30B5\u30FC\u30C8\u30A8\u30E9\u30FC \:  \u7D50\u679C\u306F {0} \u3067\u3057\u305F\u304C\u3001{1}\u3067\u306A\u3051\u308C\u3070\u306A\u308A\u307E\u305B\u3093\u3002
 md5hex_assertion_md5hex_test=\u30A2\u30B5\u30FC\u30C8\u5BFE\u8C61\u306EMD5Hex
 md5hex_assertion_title=MD5Hex\u30A2\u30B5\u30FC\u30B7\u30E7\u30F3
 menu_assertions=\u30A2\u30B5\u30FC\u30B7\u30E7\u30F3
 menu_close=\u9589\u3058\u308B
 menu_config_element=\u8A2D\u5B9A\u30A8\u30EC\u30E1\u30F3\u30C8
 menu_edit=\u7DE8\u96C6
 menu_generative_controller=\u30B5\u30F3\u30D7\u30E9\u30FC
 menu_listener=\u30EA\u30B9\u30CA\u30FC
 menu_logic_controller=\u30ED\u30B8\u30C3\u30AF\u30B3\u30F3\u30C8\u30ED\u30FC\u30E9
 menu_merge=\u4F75\u5408\uFF08\u30DE\u30FC\u30B8\uFF09
 menu_modifiers=\u4FEE\u98FE\u5B50
 menu_non_test_elements=Non-Test\u30A8\u30EC\u30E1\u30F3\u30C8
 menu_open=\u958B\u304F
 menu_post_processors=\u5F8C\u51E6\u7406
 menu_pre_processors=\u524D\u51E6\u7406
 menu_response_based_modifiers=\u30EC\u30B9\u30DD\u30F3\u30B9\u57FA\u6E96\u306E\u4FEE\u98FE\u5B50
 menu_timer=\u30BF\u30A4\u30DE
 metadata=\u30E1\u30BF\u30C7\u30FC\u30BF
 method=\u30E1\u30BD\u30C3\u30C9\:
 mimetype=Mime\u30BF\u30A4\u30D7
 minimum_param=\u5024\u57DF\u306E\u6700\u5C0F\u5024
 minute=\u5206
 modification_controller_title=\u5909\u66F4\u30B3\u30F3\u30C8\u30ED\u30FC\u30E9
 modification_manager_title=\u5909\u66F4\u30DE\u30CD\u30FC\u30B8\u30E3
 modify_test=\u30C6\u30B9\u30C8\u306E\u5909\u66F4
 module_controller_title=\u30E2\u30B8\u30E5\u30FC\u30EB\u30B3\u30F3\u30C8\u30ED\u30FC\u30E9
-monitor_equation_dead=Dead\:  \u5FDC\u7B54\u306A\u3057
-monitor_health_title=\u30E2\u30CB\u30BF\u7D50\u679C
-monitor_is_title=\u30E2\u30CB\u30BF\u3068\u3057\u3066\u4F7F\u7528
-monitor_legend_memory_per=\u30E1\u30E2\u30EA % (used/total)
-monitor_legend_thread_per=\u30B9\u30EC\u30C3\u30C9 % (busy/max)
-monitor_performance_servers=\u30B5\u30FC\u30D0
-monitor_performance_tab_title=\u30D1\u30D5\u30A9\u30FC\u30DE\u30F3\u30B9
-monitor_performance_title=\u30D1\u30D5\u30A9\u30FC\u30DE\u30F3\u30B9\u30B0\u30E9\u30D5
 name=\u540D\u524D\:
 new=\u65B0\u898F
 no=\u30CE\u30EB\u30A6\u30A7\u30FC\u8A9E
 number_of_threads=\u30B9\u30EC\u30C3\u30C9\u6570\:
 once_only_controller_title=\u4E00\u5EA6\u3060\u3051\u5B9F\u884C\u3055\u308C\u308B\u30B3\u30F3\u30C8\u30ED\u30FC\u30E9
 open=\u958B\u304F...
 option=\u30AA\u30D7\u30B7\u30E7\u30F3
 optional_tasks=\u30AA\u30D7\u30B7\u30E7\u30F3\u30BF\u30B9\u30AF
 paramtable=\u30EA\u30AF\u30A8\u30B9\u30C8\u3067\u9001\u308B\u30D1\u30E9\u30E1\u30FC\u30BF\:
 password=\u30D1\u30B9\u30EF\u30FC\u30C9
 paste=\u30DA\u30FC\u30B9\u30C8
 paste_insert=\u633F\u5165\u3068\u3057\u3066\u30DA\u30FC\u30B9\u30C8
 path=\u30D1\u30B9\:
 path_extension_choice=\u30D1\u30B9\u306E\u62E1\u5F35(\u533A\u5207\u308A\u306B\u306F";"\u3092\u4F7F\u3063\u3066\u304F\u3060\u3055\u3044)
 path_extension_dont_use_equals=\u30D1\u30B9\u306E\u62E1\u5F35\u306B\u7B49\u53F7\u3092\u4F7F\u308F\u306A\u3044\uFF08Intershop Enfinity \u4E92\u63DB\u306E\u305F\u3081\uFF09
 patterns_to_exclude=\u9664\u5916\u3059\u308B\u30D1\u30BF\u30FC\u30F3
 patterns_to_include=\u633F\u5165\u3059\u308B\u30D1\u30BF\u30FC\u30F3
 port=\u30DD\u30FC\u30C8\:
 property_default_param=\u521D\u671F\u5024
 property_edit=\u7DE8\u96C6
 property_editor.value_is_invalid_message=\u5165\u529B\u3055\u308C\u305F\u30C6\u30AD\u30B9\u30C8\u306F\u3053\u306E\u30D7\u30ED\u30D1\u30C6\u30A3\u306B\u9069\u3057\u3066\u3044\u307E\u305B\u3093\u3002\n\u5143\u306E\u5024\u306B\u623B\u3057\u307E\u3059\u3002
 property_editor.value_is_invalid_title=\u9069\u5207\u3067\u306A\u3044\u5165\u529B
 property_name_param=\u30D7\u30ED\u30D1\u30C6\u30A3\u540D
 property_undefined=\u5B9A\u7FA9\u3055\u308C\u3066\u3044\u306A\u3044
 protocol=\u30D7\u30ED\u30C8\u30B3\u30EB\:
 protocol_java_border=Java \u30AF\u30E9\u30B9
 protocol_java_classname=\u30AF\u30E9\u30B9\u540D\:
 protocol_java_config_tile=Java \u30B5\u30F3\u30D7\u30EB\u306E\u8A2D\u5B9A
 protocol_java_test_title=Java \u30C6\u30B9\u30C8
 proxy_assertions=\u30A2\u30B5\u30FC\u30B7\u30E7\u30F3\u306E\u8FFD\u52A0
 proxy_cl_error=\u30D7\u30ED\u30AD\u30B7\u30FC\u30B5\u30FC\u30D0\u30FC\u304C\u6307\u5B9A\u3055\u308C\u3066\u3044\u308B\u5834\u5408\u306F\u3001\u30DB\u30B9\u30C8\u540D\u3068\u30DD\u30FC\u30C8\u3082\u6307\u5B9A\u3057\u3066\u304F\u3060\u3055\u3044\u3002
 proxy_headers=HTTP\u30D8\u30C3\u30C0\u306E\u53D6\u308A\u8FBC\u307F
 proxy_separators=\u30BB\u30D1\u30EC\u30FC\u30BF\u306E\u8FFD\u52A0
 proxy_target=\u5BFE\u8C61\u3068\u306A\u308B\u30B3\u30F3\u30C8\u30ED\u30FC\u30E9\:
 proxy_title=HTTP \u30D7\u30ED\u30AD\u30B7\u30B5\u30FC\u30D0
 ramp_up=Ramp-Up \u671F\u9593 (\u79D2)\:
 random_control_title=\u4E71\u6570\u30B3\u30F3\u30C8\u30ED\u30FC\u30E9
 random_order_control_title=\u30E9\u30F3\u30C0\u30E0\u9806\u5E8F\u30B3\u30F3\u30C8\u30ED\u30FC\u30E9
 record_controller_title=\u8A18\u9332\u30B3\u30F3\u30C8\u30ED\u30FC\u30E9
 ref_name_field=\u53C2\u7167\u540D\uFF1A
 regex_extractor_title=\u6B63\u898F\u8868\u73FE\u62BD\u51FA
 regex_field=\u6B63\u898F\u8868\u73FE\uFF1A
 regexfunc_param_1=\u76F4\u524D\u306E\u30EA\u30AF\u30A8\u30B9\u30C8\u7D50\u679C\u304B\u3089\u691C\u7D22\u3059\u308B\u305F\u3081\u306E\u6B63\u898F\u8868\u73FE\u3067\u3059\u3002
 regexfunc_param_2=\u6587\u5B57\u5217\u3092\u7F6E\u63DB\u3059\u308B\u305F\u3081\u306E\u30C6\u30F3\u30D7\u30EC\u30FC\u30C8\u3067\u3001\u6B63\u898F\u8868\u73FE\u306E\u30B0\u30EB\u30FC\u30D7\u5316\u3092\u4F7F\u7528\u3067\u304D\u307E\u3059\u3002\u66F8\u5F0F\u306F$[group]$\u3002\u4F8B\uFF09 $1$\u3002
 regexfunc_param_3=\u30DE\u30C3\u30C1\u30F3\u30B0\u3067\u4F7F\u7528\u3057\u307E\u3059\u30021\u4EE5\u4E0A\u306E\u6574\u6570\u3001RAND(JMeter\u304C\u30E9\u30F3\u30C0\u30E0\u306B\u9078\u629E\u3059\u308B)\u3001\u6D6E\u52D5\u5C0F\u6570\u70B9\u3001ALL(\u5168\u3066\u306B\u4E00\u81F4\u3059\u308B)\u3001\u306E\u3044\u305A\u308C\u304B\u3092\u6307\u5B9A\u3067\u304D\u307E\u3059\u3002
 regexfunc_param_4=\u30C6\u30AD\u30B9\u30C8\u306E\u7BC4\u56F2\u3067\u3059\u3002ALL\u304C\u9078\u629E\u3055\u308C\u305F\u5834\u5408\u3001\u7D50\u679C\u3092\u751F\u6210\u3059\u308B\u305F\u3081\u306B\u4F7F\u308F\u308C\u307E\u3059\u3002
 regexfunc_param_5=\u521D\u671F\u30C6\u30AD\u30B9\u30C8\u3067\u3059\u3002\u6B63\u898F\u8868\u73FE\u3068\u4E00\u81F4\u3059\u308B\u6587\u5B57\u5217\u304C\u306A\u304B\u3063\u305F\u5834\u5408\u306B\u30C6\u30F3\u30D7\u30EC\u30FC\u30C8\u306E\u4EE3\u308F\u308A\u3068\u3057\u3066\u4F7F\u7528\u3055\u308C\u307E\u3059\u3002
 remote_exit=\u7D42\u4E86(\u30EA\u30E2\u30FC\u30C8)
 remote_exit_all=\u5168\u3066\u7D42\u4E86(\u30EA\u30E2\u30FC\u30C8)
 remote_start=\u958B\u59CB(\u30EA\u30E2\u30FC\u30C8)
 remote_start_all=\u5168\u3066\u958B\u59CB(\u30EA\u30E2\u30FC\u30C8)
 remote_stop=\u505C\u6B62(\u30EA\u30E2\u30FC\u30C8)
 remote_stop_all=\u5168\u3066\u505C\u6B62(\u30EA\u30E2\u30FC\u30C8)
 remove=\u524A\u9664
 report=\u30EC\u30DD\u30FC\u30C8
 request_data=\u30EA\u30AF\u30A8\u30B9\u30C8\u30C7\u30FC\u30BF
 restart=\u30EA\u30B9\u30BF\u30FC\u30C8
 resultaction_title=\u30A2\u30AF\u30B7\u30E7\u30F3\u30CF\u30F3\u30C9\u30E9\u306E\u7D42\u4E86\u72B6\u614B
 resultsaver_prefix=\u30D5\u30A1\u30A4\u30EB\u540D\u306E\u63A5\u982D\u8F9E\:
 resultsaver_title=\u5FDC\u7B54\u3092\u30D5\u30A1\u30A4\u30EB\u3078\u4FDD\u5B58
 root=\u30EB\u30FC\u30C8
 root_title=\u30EB\u30FC\u30C8
 run=\u5B9F\u884C
 running_test=\u30C6\u30B9\u30C8\u5B9F\u884C\u4E2D
 sampler_on_error_action=\u30B5\u30F3\u30D7\u30E9\u30FC\u30A8\u30E9\u30FC\u5F8C\u306E\u30A2\u30AF\u30B7\u30E7\u30F3
 sampler_on_error_continue=\u7D9A\u884C
 sampler_on_error_stop_test=\u30C6\u30B9\u30C8\u505C\u6B62
 sampler_on_error_stop_thread=\u30B9\u30EC\u30C3\u30C9\u505C\u6B62
 save=\u30C6\u30B9\u30C8\u8A08\u753B\u3092\u4FDD\u5B58
 save?=\u4FDD\u5B58?
 save_all_as=\u30C6\u30B9\u30C8\u8A08\u753B\u306B\u540D\u524D\u3092\u3064\u3051\u3066\u4FDD\u5B58
 save_as=\u5225\u540D\u3067\u4FDD\u5B58...
 scheduler=\u30B9\u30B1\u30B8\u30E5\u30FC\u30E9
 scheduler_configuration=\u30B9\u30B1\u30B8\u30E5\u30FC\u30E9\u8A2D\u5B9A
 search_base=\u691C\u7D22\u57FA\u6E96
 search_filter=\u691C\u7D22\u30D5\u30A3\u30EB\u30BF
 search_test=\u30C6\u30B9\u30C8\u306E\u691C\u7D22
 second=\u79D2
 secure=\u30BB\u30AD\u30E5\u30A2
 send_file=\u30EA\u30AF\u30A8\u30B9\u30C8\u3068\u4E00\u7DD2\u306B\u9001\u4FE1\u3055\u308C\u308B\u30D5\u30A1\u30A4\u30EB\:
 send_file_browse=\u53C2\u7167...
 send_file_filename_label=\u30D5\u30A1\u30A4\u30EB\u540D\:
 send_file_mime_label=MIME \u30BF\u30A4\u30D7\:
 send_file_param_name_label=\u30D1\u30E9\u30E1\u30FC\u30BF\u540D\:
 server=\u30B5\u30FC\u30D0\u540D\u307E\u305F\u306F IP\:
 servername=\u30B5\u30FC\u30D0\u540D\uFF1A
 session_argument_name=\u30BB\u30C3\u30B7\u30E7\u30F3\u5F15\u6570\u540D
 shutdown=\u30B7\u30E3\u30C3\u30C8\u30C0\u30A6\u30F3
 simple_config_element=\u30B7\u30F3\u30D7\u30EB\u8A2D\u5B9A\u30A8\u30EC\u30E1\u30F3\u30C8
 simple_data_writer_title=\u30B7\u30F3\u30D7\u30EB\u30C7\u30FC\u30BF\u30E9\u30A4\u30BF
 size_assertion_comparator_error_equal=\u7B49\u3057\u3044
 size_assertion_comparator_error_greater=\u5927\u306A\u308A\u5C0F
 size_assertion_comparator_error_greaterequal=\u4EE5\u4E0A
 size_assertion_comparator_error_less=\u5C0F\u306A\u308A\u5927
 size_assertion_comparator_error_lessequal=\u4EE5\u4E0B
 size_assertion_comparator_error_notequal=\u7B49\u3057\u304F\u306A\u3044
 size_assertion_comparator_label=\u6BD4\u8F03\u306E\u578B
 size_assertion_failure=\u7D50\u679C\u306F\u6B63\u3057\u304F\u306A\u3044\u30B5\u30A4\u30BA\u3067\u3059\u3002\:{0}\u30D0\u30A4\u30C8\u3067\u3059\u304C\u3001{1}\u30D0\u30A4\u30C8\u304B{2}\u30D0\u30A4\u30C8\u3067\u306A\u3051\u308C\u3070\u306A\u308A\u307E\u305B\u3093\u3002
 size_assertion_input_error=\u9069\u5207\u306A\u6B63\u306E\u6574\u6570\u3092\u5165\u529B\u3057\u3066\u304F\u3060\u3055\u3044\u3002
 size_assertion_label=\u30D0\u30A4\u30C8\u30B5\u30A4\u30BA\:
 size_assertion_size_test=\u30A2\u30B5\u30FC\u30C8\u306E\u30B5\u30A4\u30BA
 size_assertion_title=\u30B5\u30A4\u30BA\u30A2\u30B5\u30FC\u30B7\u30E7\u30F3
 soap_action=Soap\u30A2\u30AF\u30B7\u30E7\u30F3
 soap_data_title=Soap/XML-RPC \u30C7\u30FC\u30BF
 soap_sampler_title=Soap/XML-RPC\u30EA\u30AF\u30A8\u30B9\u30C8 
 ssl_alias_prompt=\u5B9A\u7FA9\u6E08\u307F\u306E\u30A8\u30A4\u30EA\u30A2\u30B9\u3092\u5165\u529B\u3057\u3066\u4E0B\u3055\u3044\u3002
 ssl_alias_select=\u30C6\u30B9\u30C8\u3059\u308B\u30A8\u30A4\u30EA\u30A2\u30B9\u3092\u9078\u629E\u3057\u3066\u4E0B\u3055\u3044\u3002
 ssl_alias_title=\u30AF\u30E9\u30A4\u30A2\u30F3\u30C8\u30A8\u30A4\u30EA\u30A2\u30B9
 ssl_error_title=\u30AD\u30FC\u30B9\u30C8\u30A2\u30A8\u30E9\u30FC
 ssl_pass_prompt=\u30D1\u30B9\u30EF\u30FC\u30C9\u3092\u5165\u529B\u3057\u3066\u4E0B\u3055\u3044\u3002
 ssl_pass_title=\u30AD\u30FC\u30B9\u30C8\u30A2\u30D1\u30B9\u30EF\u30FC\u30C9
 ssl_port=SSL\u30DD\u30FC\u30C8
 sslmanager=SSL \u30DE\u30CD\u30FC\u30B8\u30E3
 start=\u958B\u59CB
 starttime=\u958B\u59CB\u6642\u523B
 stop=\u505C\u6B62
 stopping_test=\u3059\u3079\u3066\u306E\u30C6\u30B9\u30C8\u7528\u30B9\u30EC\u30C3\u30C9\u3092\u505C\u6B62\u4E2D\u3067\u3059\u3002\u3057\u3070\u3089\u304F\u304A\u5F85\u3061\u304F\u3060\u3055\u3044\u3002
 stopping_test_title=\u30C6\u30B9\u30C8\u306E\u505C\u6B62\u4E2D
 string_from_file_file_name=\u30D5\u30A1\u30A4\u30EB\u306E\u30D5\u30EB\u30D1\u30B9\u3092\u5165\u529B\u3057\u3066\u304F\u3060\u3055\u3044
 string_from_file_seq_final=\u6700\u7D42\u30D5\u30A1\u30A4\u30EB\u30B7\u30FC\u30B1\u30F3\u30B9\u756A\u53F7
 string_from_file_seq_start=\u958B\u59CB\u30D5\u30A1\u30A4\u30EB\u30B7\u30FC\u30B1\u30F3\u30B9\u756A\u53F7
 summariser_title=\u7D50\u679C\u306E\u6982\u8981\u3092\u751F\u6210
 tcp_config_title=TCP\u30B5\u30F3\u30D7\u30E9\u30FC\u8A2D\u5B9A
 tcp_nodelay=\u9045\u5EF6\u306A\u3057\u3092\u8A2D\u5B9A
 tcp_port=\u30DD\u30FC\u30C8\u756A\u53F7\:
 tcp_request_data=\u9001\u4FE1\u3059\u308B\u30C6\u30AD\u30B9\u30C8
 tcp_sample_title=TCP\u30B5\u30F3\u30D7\u30E9\u30FC
 tcp_timeout=\u30BF\u30A4\u30E0\u30A2\u30A6\u30C8\:
 template_field=\u30C6\u30F3\u30D7\u30EC\u30FC\u30C8\uFF1A
 test=\u30C6\u30B9\u30C8
 test_configuration=\u30C6\u30B9\u30C8\u8A2D\u5B9A
 test_plan=\u30C6\u30B9\u30C8\u8A08\u753B
 testplan.serialized=\u5404\u30B9\u30EC\u30C3\u30C9\u30B0\u30EB\u30FC\u30D7\u3092\u5225\u3005\u306B\u5B9F\u884C
 testplan_comments=\u30B3\u30E1\u30F3\u30C8\:
 thread_delay_properties=\u30B9\u30EC\u30C3\u30C9\u9045\u5EF6\u6642\u9593\u30D7\u30ED\u30D1\u30C6\u30A3
 thread_group_title=\u30B9\u30EC\u30C3\u30C9\u30B0\u30EB\u30FC\u30D7
 thread_properties=\u30B9\u30EC\u30C3\u30C9\u30D7\u30ED\u30D1\u30C6\u30A3
 threadgroup=\u30B9\u30EC\u30C3\u30C9\u30B0\u30EB\u30FC\u30D7
 throughput_control_bynumber_label=\u5168\u4F53\u5B9F\u884C
 throughput_control_bypercent_label=\u30D1\u30FC\u30BB\u30F3\u30C8\u5B9F\u884C
 throughput_control_perthread_label=\u30E6\u30FC\u30B6\u30FC\u3054\u3068
 throughput_control_title=\u30B9\u30EB\u30FC\u30D7\u30C3\u30C8\u30B3\u30F3\u30C8\u30ED\u30FC\u30E9
 throughput_control_tplabel=\u30B9\u30EB\u30FC\u30D7\u30C3\u30C8
 transaction_controller_title=\u30C8\u30E9\u30F3\u30B6\u30AF\u30B7\u30E7\u30F3\u30B3\u30F3\u30C8\u30ED\u30FC\u30E9
 uniform_timer_delay=\u9045\u5EF6\u6642\u9593\u30AA\u30D5\u30BB\u30C3\u30C8\u5B9A\u6570 (\u30DF\u30EA\u79D2)\:
 uniform_timer_memo=\u4E00\u69D8\u5206\u5E03\u306B\u3088\u308B\u30E9\u30F3\u30C0\u30E0\u306A\u9045\u5EF6\u3092\u8FFD\u52A0
 uniform_timer_range=\u6700\u5927\u9045\u5EF6\u6642\u9593 (\u30DF\u30EA\u79D2)\:
 uniform_timer_title=\u4E00\u69D8\u4E71\u6570\u30BF\u30A4\u30DE
 update_per_iter=\u7E70\u308A\u8FD4\u3057\u3054\u3068\u306B\u66F4\u65B0
 upload=\u30D5\u30A1\u30A4\u30EB\u30A2\u30C3\u30D7\u30ED\u30FC\u30C9
 upper_bound=\u4E0A\u9650
 url_config_protocol=\u30D7\u30ED\u30C8\u30B3\u30EB\:
 url_config_title=HTTP \u30EA\u30AF\u30A8\u30B9\u30C8\u521D\u671F\u5024\u8A2D\u5B9A
 url_full_config_title=UrlFull \u30B5\u30F3\u30D7\u30EB
 url_multipart_config_title=HTTP\u30DE\u30EB\u30C1\u30D1\u30FC\u30C8\u30EA\u30AF\u30A8\u30B9\u30C8\u521D\u671F\u5024\u8A2D\u5B9A
 use_keepalive=KeepAlive \u3092\u6709\u52B9\u306B\u3059\u308B
 use_recording_controller=\u8A18\u9332\u30B3\u30F3\u30C8\u30ED\u30FC\u30E9\u306E\u4F7F\u7528
 user=\u30E6\u30FC\u30B6\u30FC
 user_defined_test=\u30E6\u30FC\u30B6\u30FC\u5B9A\u7FA9\u30C6\u30B9\u30C8
 user_defined_variables=\u30E6\u30FC\u30B6\u30FC\u5B9A\u7FA9\u5909\u6570
 user_param_mod_help_note=(\u5909\u66F4\u3057\u306A\u3044\u3067\u304F\u3060\u3055\u3044\u3002\u5909\u66F4\u3059\u308B\u5834\u5408\u306F\u3001JMeter\u306E/bin\u30C7\u30A3\u30EC\u30AF\u30C8\u30EA\u306B\u3042\u308B\u540C\u540D\u306E\u30D5\u30A1\u30A4\u30EB\u3092\u5909\u66F4\u3057\u3066\u304F\u3060\u3055\u3044\u3002)
 user_parameters_table=\u30D1\u30E9\u30E1\u30FC\u30BF
 user_parameters_title=\u30E6\u30FC\u30B6\u30FC\u30D1\u30E9\u30E1\u30FC\u30BF
 username=\u30E6\u30FC\u30B6\u30FC\u540D
 value=\u5024
 var_name=\u53C2\u7167\u540D
 view_graph_tree_title=\u7D50\u679C\u3092\u30B0\u30E9\u30D5\u3068\u30C4\u30EA\u30FC\u3067\u8868\u793A
 view_results_in_table=\u7D50\u679C\u3092\u8868\u3067\u8868\u793A
 view_results_tab_request=\u30EA\u30AF\u30A8\u30B9\u30C8
 view_results_tab_response=\u5FDC\u7B54\u30C7\u30FC\u30BF
 view_results_title=\u7D50\u679C\u8868\u793A
 view_results_tree_title=\u7D50\u679C\u3092\u30C4\u30EA\u30FC\u3067\u8868\u793A
 web_request=HTTP \u30EA\u30AF\u30A8\u30B9\u30C8
 web_server=Web \u30B5\u30FC\u30D0
 web_server_domain=\u30B5\u30FC\u30D0\u540D\u307E\u305F\u306F IP\:
 web_server_port=\u30DD\u30FC\u30C8\u756A\u53F7\:
 web_testing_retrieve_images=\u5168\u3066\u306E\u30A4\u30E1\u30FC\u30B8\u3068\u30A2\u30D7\u30EC\u30C3\u30C8\u3092\u7E70\u308A\u8FD4\u3057\u30C0\u30A6\u30F3\u30ED\u30FC\u30C9\u3059\u308B(HTML \u30D5\u30A1\u30A4\u30EB\u306E\u307F)
 web_testing_title=HTTP \u30EA\u30AF\u30A8\u30B9\u30C8
 workbench_title=\u30EF\u30FC\u30AF\u30D9\u30F3\u30C1
 xml_assertion_title=XML \u30A2\u30B5\u30FC\u30B7\u30E7\u30F3
 you_must_enter_a_valid_number=\u9069\u5207\u306A\u6570\u5024\u3092\u5165\u529B\u3057\u3066\u304F\u3060\u3055\u3044
diff --git a/src/core/org/apache/jmeter/resources/messages_pt_BR.properties b/src/core/org/apache/jmeter/resources/messages_pt_BR.properties
index a6e6137b2..199a064df 100644
--- a/src/core/org/apache/jmeter/resources/messages_pt_BR.properties
+++ b/src/core/org/apache/jmeter/resources/messages_pt_BR.properties
@@ -1,872 +1,852 @@
 #   Licensed to the Apache Software Foundation (ASF) under one or more
 #   contributor license agreements.  See the NOTICE file distributed with
 #   this work for additional information regarding copyright ownership.
 #   The ASF licenses this file to You under the Apache License, Version 2.0
 #   (the "License"); you may not use this file except in compliance with
 #   the License.  You may obtain a copy of the License at
 # 
 #       http://www.apache.org/licenses/LICENSE-2.0
 # 
 #   Unless required by applicable law or agreed to in writing, software
 #   distributed under the License is distributed on an "AS IS" BASIS,
 #   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 #   See the License for the specific language governing permissions and
 #   limitations under the License.
 
 # Warning: JMeterUtils.getResString() replaces space with '_'
 # and converts keys to lowercase before lookup
 # => All keys in this file must also be lower case or they won't match
 #
 
 # Please add new entries in alphabetical order
 
 about=Sobre Apache JMeter
 add=Adicionar
 add_as_child=Adicionar como filho
 add_parameter=Adicionar Var\u00E1vel
 add_pattern=Adicionar Padr\u00E3o\:
 add_test=Adicionar Teste
 add_user=Adicionar Usu\u00E1rio
 add_value=Adicionar Valor
 addtest=Adicionar teste
 aggregate_graph=Gr\u00E1ficos Estat\u00EDsticos
 aggregate_graph_column=Coluna
 aggregate_graph_display=Exibir Gr\u00E1fico
 aggregate_graph_height=Altura
 aggregate_graph_max_length_xaxis_label=Largura m\u00E1xima do r\u00F3tulo do eixo x
 aggregate_graph_ms=Milisegundos
 aggregate_graph_response_time=Tempo de Tesposta
 aggregate_graph_save=Salvar Gr\u00E1fico
 aggregate_graph_save_table=Salvar Dados da Tabela
 aggregate_graph_save_table_header=Salvar Cabe\u00E7alho da Tabela
 aggregate_graph_title=Gr\u00E1fico Agregado
 aggregate_graph_use_group_name=Incluir nome do grupo no r\u00F3tulo?
 aggregate_graph_user_title=T\u00EDtulo para o Gr\u00E1fico
 aggregate_graph_width=Largura
 aggregate_report=Relat\u00F3rio Agregado
 aggregate_report_bandwidth=KB/s
 aggregate_report_count=\# Amostras
 aggregate_report_error=Erro
 aggregate_report_error%=% de Erro
 aggregate_report_max=M\u00E1x.
 aggregate_report_median=Mediana
 aggregate_report_min=M\u00EDn.
 aggregate_report_rate=Vaz\u00E3o
 aggregate_report_stddev=Desvio Padr\u00E3o
 ajp_sampler_title=Testador AJP/1.3
 als_message=Nota\: O Processador de Logs de Acesso \u00E9 gen\u00E9rico em seu projeto e permite que voc\u00EA o especialize
 als_message2=seu pr\u00F3prio processador. Para tanto, implementar o LogParser, e adicionar o arquivo jar
 als_message3=diret\u00F3rio /lib e entre com a classe no testador
 analyze=Analizar Arquivo de Dados...
 anchor_modifier_title=Processador de Links HTML
 appearance=Apar\u00EAncia
 argument_must_not_be_negative=O Argumento n\u00E3o pode ser negativo\!
 assertion_assume_success=Ignorar estado
 assertion_code_resp=C\u00F3digo de Resposta
 assertion_contains=Cont\u00E9m
 assertion_equals=Igual
 assertion_headers=Cabe\u00E7alhos da Resposta
 assertion_matches=Combina
 assertion_message_resp=Mensagem da Resposta
 assertion_not=N\u00E3o
 assertion_pattern_match_rules=Regras para Combina\u00E7\u00E3o de Padr\u00F5es
 assertion_patterns_to_test=Padr\u00F5es a serem Testados
 assertion_resp_field=Testar que Campo da Resposta
 assertion_text_resp=Resposta de Texto
 assertion_textarea_label=Asser\u00E7\u00F5es\:
 assertion_title=Asser\u00E7\u00F5es de Resposta
 assertion_url_samp=URL Amostrada
 assertion_visualizer_title=Resultados de Asser\u00E7\u00E3o
 attribute=Atributo
 attrs=Atributos
 auth_base_url=URL Base
 auth_manager_title=Gerenciador de Autoriza\u00E7\u00E3o HTTP
 auths_stored=Autoriza\u00E7\u00F5es Armazenadas no Gerenciador de Autoriza\u00E7\u00E3o
 average=M\u00E9dia
 average_bytes=M\u00E9dia de Bytes
 bind=Liga\u00E7\u00E3o do Usu\u00E1rio Virtual
 browse=Procurar...
 bsf_sampler_title=Testador BSF
 bsf_script=Script a ser executado (vari\u00E1veis\: ctx vars props SampleResult sampler log Label FileName Parameters args[] OUT)
 bsf_script_file=Arquivo de script a ser executado
 bsf_script_language=Linguagem de scripting\:
 bsf_script_parameters=Par\u00E2metros a serem passados ao script/arquivo\:
 bsh_assertion_script=Script (veja abaixo quais vari\u00E1veis que est\u00E3o definidas)
 bsh_assertion_script_variables=As seguintes vari\u00E1veis est\u00E3o definidas para o script\:\nEscrita/Leitura\: Failure, FailureMessage, SampleResult, vars, props, log.\nSomente Leitura\: Response[Data|Code|Message|Headers], RequestHeaders, SampleLabel, SamplerData, ctx
 bsh_assertion_title=Asser\u00E7\u00E3o BeanShell
 bsh_function_expression=Express\u00E3o a ser avaliada
 bsh_sampler_title=Testador BeanShell
 bsh_script=Script (veja abaixo quais vari\u00E1veis est\u00E3o definidas)
 bsh_script_file=Arquivo de script
 bsh_script_parameters=Par\u00E2metros (\=> String Parameters e String []bsh.args)
 bsh_script_reset_interpreter=Reiniciar bsh.Interpreter antes de cada chamada
 bsh_script_variables=As seguintes vari\u00E1veis est\u00E3o definidas para o script\:\nSampleResult, RespondeCode, ResponseMessage, IsSuccess, Label, FileName, ctx, vars, props, log
 busy_testing=Eu estou ocupado testando, por favor pare o teste antes de alterar as configura\u00E7\u00F5es
 cache_manager_title=Gerenciador de Cache HTTP
 cache_session_id=Fazer cache do ID da sess\u00E3o?
 cancel=Cancelar
 cancel_exit_to_save=Existem itens n\u00E3o salvos. Voc\u00EA deseja salvar antes de sair?
 cancel_new_to_save=Existem itens n\u00E3o salvos. Voc\u00EA deseja salvar antes de limpar o plano de teste?
 cancel_revert_project=Existem itens n\u00E3o salvos. Voc\u00EA deseja reverter para o plano de teste salvo previamente?
 char_value=N\u00FAmero unicode do caracter (decimal ou 0xhex)
 choose_function=Escolher Fun\u00E7\u00E3o
 choose_language=Escolher Linguagem
 clear=Limpar
 clear_all=Limpar Tudo
 clear_cache_per_iter=Limpar cache a cada itera\u00E7\u00E3o?
 clear_cookies_per_iter=Limpar cookies a cada itera\u00E7\u00E3o?
 column_delete_disallowed=N\u00E3o \u00E9 permitida a exclus\u00E3o desta coluna.
 column_number=N\u00FAmero da coluna no arquivo CSV | pr\u00F3x | *apelido
 compare=Comparar
 comparefilt=Filtro de compara\u00E7\u00E3o
 config_element=Elemento de Configura\u00E7\u00E3o
 config_save_settings=Configurar
 constant_throughput_timer_memo=Adicionar um atraso entre amostragens para obter vaz\u00E3o constante
 constant_timer_delay=Atraso do usu\u00E1rio virtual (em milisegundos)
 constant_timer_memo=Adicionar um atraso constante entre amostragens
 constant_timer_title=Temporizador Constante
 content_encoding=Codifica\u00E7\u00E3o do conte\u00FAdo\:
 controller=Controlador
 cookie_manager_policy=Pol\u00EDtica de Cookie
 cookie_manager_title=Gerenciador de Cookie HTTP
 cookies_stored=Cookies Definidos pelo Usu\u00E1rio
 copy=Copiar
 counter_config_title=Contador
 counter_per_user=Realiza contagem independentemente para cada usu\u00E1rio
 countlim=Tamanho limite
 csvread_file_file_name=Arquivo CSV de onde os valores ser\u00E3o obtidos | *apelido
 cut=Recortar
 cut_paste_function=Copiar e colar texto da fun\u00E7\u00E3o
 database_conn_pool_max_usage=Uso M\u00E1ximo Para Cada Conex\u00E3o\:
 database_conn_pool_props=Grupo de Conex\u00F5es com o Banco de Dados
 database_conn_pool_size=N\u00FAmero de Conex\u00F5es no Grupo de Conex\u00F5es
 database_conn_pool_title=Padr\u00F5es JDBC do Grupo de Conex\u00F5es ao Banco de Dados
 database_driver_class=Classe do Driver\:
 database_login_title=Padr\u00F5es JDBC para Acesso ao Banco de Dados
 database_sql_query_string=Consulta SQL\:
 database_sql_query_title=Padr\u00F5es JDBC para Consultas SQL
 database_testing_title=Requisi\u00E7\u00E3o JDBC
 database_url=URL JDBC\:
 database_url_jdbc_props=URL do Banco de Dados e Driver JDBC
 de=Alem\u00E3o
 debug_off=Desabilitar debug
 debug_on=Habilitar debug
 default_parameters=Par\u00E2metros Padr\u00E3o
 default_value_field=Valor Padr\u00E3o\:
 delay=Atraso para in\u00EDcio (segundos)
 delete=Excluir
 delete_parameter=Excluir Vari\u00E1vel
 delete_test=Excluir Teste
 delete_user=Excluir Usu\u00E1rio
 deltest=Teste de exclus\u00E3o
 deref=Dereferenciar apelidos
 disable=Desabilitar
 distribution_graph_title=Gr\u00E1fico de Distribui\u00E7\u00E3o (alfa)
 distribution_note1=O gr\u00E1fico ser\u00E1 atualizado a cada 10 amostras
 domain=Dom\u00EDnio
 done=Pronto
 duration=Dura\u00E7\u00E3o (segundos)
 duration_assertion_duration_test=Dura\u00E7\u00E3o para Avaliar
 duration_assertion_failure=A opera\u00E7\u00E3o tomou muito tempo\: levou {0} milisegundos, mas n\u00E3o deveria ter levado mais do que {1} milisegundos
 duration_assertion_input_error=Favor entrar com um inteiro positivo v\u00E1lido.
 duration_assertion_label=Dura\u00E7\u00E3o em milisegundos\:
 duration_assertion_title=Asser\u00E7\u00E3o de Dura\u00E7\u00E3o
 edit=Editar
 email_results_title=Enviar Resultados por Email
 en=Ingl\u00EAs
 enable=Habilitar
 encode?=Codificar?
 encoded_value=Valor da URL Codificada
 endtime=Tempo de T\u00E9rmino
 entry_dn=Entrada DN
 entrydn=Entrada DN
 error_loading_help=Erro ao carregar p\u00E1gina de ajuda
 error_occurred=Um erro ocorreu
 error_title=Erro
 es=Espanhol
 escape_html_string=String a ser escapada
 eval_name_param=Texto contendo refer\u00EAncias de fun\u00E7\u00F5es e vari\u00E1veis
 evalvar_name_param=Nome da vari\u00E1vel
 example_data=Dados da amostra
 example_title=Testador de Exemplo
 exit=Sair
 expiration=Expira\u00E7\u00E3o
 field_name=Nome do campo
 file=Arquivo
 file_already_in_use=Este arquivo j\u00E1 est\u00E1 em uso
 file_visualizer_append=Adicionar a um Arquivo de Dados Existente
 file_visualizer_auto_flush=Automaticamente descarregar dados (flush) ap\u00F3s cada amostra de dados
 file_visualizer_browse=Procurar...
 file_visualizer_close=Fechar
 file_visualizer_file_options=Op\u00E7\u00F5es do Arquivo
 file_visualizer_filename=Nome do arquivo
 file_visualizer_flush=Descarregar (flush)
 file_visualizer_missing_filename=N\u00E3o foi especificado nenhum nome de arquivo de sa\u00EDda.
 file_visualizer_open=Abrir
 file_visualizer_output_file=Escrever resultados para arquivo / Ler a partir do arquivo
 file_visualizer_submit_data=Incluir Dados Enviados
 file_visualizer_title=Relat\u00F3rios de Arquivo
 file_visualizer_verbose=Sa\u00EDda detalhada (verbose)
 filename=Nome do arquivo
 follow_redirects=Seguir redire\u00E7\u00F5es
 follow_redirects_auto=Redirecionar automaticamente
 foreach_controller_title=Controlador ParaCada (ForEach)
 foreach_input=Prefixo da vari\u00E1vel de entrada
 foreach_output=Nome da vari\u00E1vel de sa\u00EDda
 foreach_use_separator=Adicionar "_" antes do n\u00FAmero?
 format=Formato do n\u00FAmero
 fr=Franc\u00EAs
 ftp_binary_mode=Usar modo bin\u00E1rio?
 ftp_local_file=Arquivo local\:
 ftp_local_file_contents=Conte\u00FAdo do Arquivo Local\:
 ftp_remote_file=Arquivo remoto\:
 ftp_sample_title=Padr\u00F5es para Requisi\u00E7ao FTP
 ftp_save_response_data=Salvar Arquivos na Resposta?
 ftp_testing_title=Requisi\u00E7\u00E3o FTP
 function_dialog_menu_item=Di\u00E1logo de Fun\u00E7\u00E3o de Ajuda
 function_helper_title=Fun\u00E7\u00E3o de Ajuda
 function_name_param=Nome da vari\u00E1vel na qual ser\u00E1 armazenado o resultado (requerido)
 function_name_paropt=Nome da vari\u00E1vel na qual ser\u00E1 armazenado o resultado (opcional)
 function_params=Par\u00E2metros da Fun\u00E7\u00E3o
 functional_mode=Modo de Teste Funcional (ex\: salvar dados das respostas e dados dos testadores)
 functional_mode_explanation=Selecionando Modo de Teste Funcional pode afetar o desempenho de modo adverso.
 gaussian_timer_delay=Offset do Atraso Constante (em milisegundos)\:
 gaussian_timer_memo=Adiciona um atraso aleat\u00F3rio atrav\u00E9s de uma distribui\u00E7\u00E3o gaussiana.
 gaussian_timer_range=Desvio (em milisegundos)\:
 gaussian_timer_title=Temporizador Aleat\u00F3rio Gaussiano
 generate=Gerar
 generator=Nome da classe Geradora
 generator_cnf_msg=N\u00E3o foi poss\u00EDvel encontrar a classe geradora. Verifique se voc\u00EA colocou o jar correto no diret\u00F3rio  /lib.
 generator_illegal_msg=N\u00E3o foi poss\u00EDvel acessar a classe geradora devido a uma IllegalAccessException.
 generator_instantiate_msg=N\u00E3o foi poss\u00EDvel criar uma inst\u00E2ncia do processador gerador. Verifique se o gerador implementa a interface Generator.
 graph_choose_graphs=Gr\u00E1ficos a serem Exibidos
 graph_full_results_title=Gr\u00E1fico de Resultados Completos
 graph_results_average=M\u00E9dia
 graph_results_data=Dados
 graph_results_deviation=Desvio
 graph_results_latest_sample=\u00DAltima Amostra
 graph_results_median=Mediana
 graph_results_no_samples=N\u00FAm. de Amostras
 graph_results_throughput=Vaz\u00E3o
 graph_results_title=Gr\u00E1fico de Resultados
 grouping_add_separators=Adicionar separadores entre grupos
 grouping_in_controllers=Colocar cada grupo em um novo controlador
 grouping_mode=Agrupamento\:
 grouping_no_groups=N\u00E3o agrupar testadores
 grouping_store_first_only=Armazenar primeiro testador de cada grupo apenas
 header_manager_title=Gerenciador de Cabe\u00E7alhos HTTP
 headers_stored=Cabe\u00E7alhos Armazenados no Gerenciador de Cabe\u00E7alhos
 help=Ajuda
 help_node=O que \u00E9 este n\u00F3?
 html_assertion_file=Escrever relat\u00F3rio do JTidy em arquivo
 html_assertion_label=Asser\u00E7\u00E3o HTML
 html_assertion_title=Asser\u00E7\u00E3o HTML
 http_implementation=Implementa\u00E7\u00E3o\:
 http_response_code=C\u00F3digo da Resposta HTTP
 http_url_rewriting_modifier_title=Modificador de Re-escrita de URL HTTP
 http_user_parameter_modifier=Modificador de Par\u00E2metros HTTP do Usu\u00E1rio
 httpmirror_title=Servidor Espelho HTTP
 id_prefix=Prefixo do ID
 id_suffix=Sufixo do ID
 if_controller_evaluate_all=Avaliar para todos os filhos?
 if_controller_expression=Interpretar Condi\u00E7\u00E3o como Express\u00E3o de Vari\u00E1vel?
 if_controller_label=Condi\u00E7\u00E3o (padr\u00E3o\: Javascript)
 if_controller_title=Controlador Se
 ignore_subcontrollers=Ignorar blocos de sub-controladores
 include_controller=Controlador de Inclus\u00E3o
 include_equals=Incluir Igual?
 include_path=Incluir Plano de Teste
 increment=Incremento
 infinite=Infinito
 initial_context_factory=F\u00E1brica de Contexto Inicial
 insert_after=Inserir Depois
 insert_before=Inserir Antes
 insert_parent=Inserir como Pai
 interleave_control_title=Controlador de Intercala\u00E7\u00E3o
 intsum_param_1=Primeiro inteiro para adicionar.
 intsum_param_2=Segundo inteiro a ser adicionado - posteriormente inteiros podem ser somados atrav\u00E9s da adi\u00E7\u00E3o de novos argumentos.
 invalid_data=Dados inv\u00E1lidos
 invalid_mail=Ocorreu um erro ao enviar o e-mail
 invalid_mail_address=Foram detectados um ou mais endere\u00E7os de email inv\u00E1lidos
 invalid_mail_server=Houve um problema ao contactar o servidor de email (veja arquivo de log do JMeter)
 invalid_variables=Vari\u00E1veis inv\u00E1lidas
 iteration_counter_arg_1=TRUE, para que cada usu\u00E1rio tenha seu pr\u00F3prio contador, FALSE para um contador global
 iterator_num=Contador de Itera\u00E7\u00E3o
 ja=Japon\u00EAs
 jar_file=Arquivos Jar
 java_request=Requisi\u00E7\u00E3o Java
 java_request_defaults=Padr\u00F5es de Requisi\u00E7\u00E3o Java
 javascript_expression=Express\u00E3o JavaScript a ser avaliada
 jexl_expression=Express\u00E3o JEXL a ser avaliada
 jms_auth_required=Requerido
 jms_client_caption=Cliente recebedor usa TopicSubscriber.receive() para aguardar uma mensagem.
 jms_client_caption2=MessageListener usa a interface onMessage(Message) para aguardar novas mensagens.
 jms_client_type=Cliente
 jms_communication_style=Estilo de comunica\u00E7\u00E3o
 jms_concrete_connection_factory=F\u00E1brica Concreta de Conex\u00E3o
 jms_config=Configura\u00E7\u00E3o
 jms_config_title=Configura\u00E7\u00E3o JMS
 jms_connection_factory=F\u00E1brica de Conex\u00E3o
 jms_file=Arquivo
 jms_initial_context_factory=F\u00E1brica de Contexto Inicial
 jms_itertions=N\u00FAmeros de amostras para agregar
 jms_jndi_defaults_title=Configura\u00E7\u00E3o Padr\u00E3o de JNDI
 jms_jndi_props=Propriedades JNDI
 jms_message_title=Propriedades das mensagens
 jms_message_type=Tipo das Mensagens
 jms_msg_content=Conte\u00FAdo
 jms_object_message=Mensagens de Objetos
 jms_point_to_point=JMS Ponto a Ponto
 jms_props=Propriedades JMS
 jms_provider_url=URL do Provedor
 jms_publisher=Publicador JMS
 jms_pwd=Senha
 jms_queue=Fila
 jms_queue_connection_factory=F\u00E1brica de Conex\u00F5es em Fila
 jms_queueing=Recursos JMS
 jms_random_file=Arquivo Aleat\u00F3rio
 jms_receive_queue=Nome da Fila de Recebimento JNDI
 jms_request=Somente Requisitar
 jms_requestreply=Requisitar e Responder
 jms_sample_title=Padr\u00F5es de Requisi\u00E7\u00E3o JMS
 jms_send_queue=Fila de Requisi\u00E7\u00E3o de nomes JNDI
 jms_store_response=Armazenar a resposta
 jms_subscriber_on_message=Utilizar MessageListener.onMessage()
 jms_subscriber_receive=Usar TopicSubscriber.receive()
 jms_subscriber_title=Assinante JMS
 jms_testing_title=Requisi\u00E7\u00E3o de Mensagens
 jms_text_message=Mensagem de Texto
 jms_timeout=Tempo limite (timeout) em milisegundos
 jms_topic=T\u00F3pico
 jms_use_auth=Usar Autoriza\u00E7\u00E3o?
 jms_use_file=Do Arquivo
 jms_use_non_persistent_delivery=Utilizar modo de entrega n\u00E3o persistente
 jms_use_properties_file=Utilizar aquivo jndi.properties
 jms_use_random_file=Arquivo Aleat\u00F3rio
 jms_use_req_msgid_as_correlid=Utilizar ID de Mensagem de Requisi\u00E7\u00E3o como ID de Correla\u00E7\u00E3o
 jms_use_text=\u00C1rea de texto
 jms_user=Usu\u00E1rio
 jndi_config_title=Configura\u00E7\u00E3o JNDI
 jndi_lookup_name=Interface Remota
 jndi_lookup_title=Configura\u00E7\u00E3o de Lookup JNDI
 jndi_method_button_invoke=Invocar
 jndi_method_button_reflect=Refletir
 jndi_method_home_name=Nome do M\u00E9todo Home
 jndi_method_home_parms=Par\u00E2metros do M\u00E9todo Home
 jndi_method_name=Configura\u00E7\u00E3o do M\u00E9todo
 jndi_method_remote_interface_list=Interfaces Remotas
 jndi_method_remote_name=Nome do M\u00E9todo Remoto
 jndi_method_remote_parms=Par\u00E2metros do M\u00E9todo Remoto
 jndi_method_title=Configura\u00E7\u00E3o do M\u00E9todo Remoto
 jndi_testing_title=Requisi\u00E7\u00E3o JNDI
 jndi_url_jndi_props=Propriedades JNDI
 junit_append_error=Adicionar erros de asser\u00E7\u00E3o
 junit_append_exception=Adicionar exce\u00E7\u00F5es de tempo de execu\u00E7\u00E3o
 junit_constructor_error=N\u00E3o foi poss\u00EDvel criar uma inst\u00E2ncia da classe
 junit_constructor_string=R\u00F3tulo String do Construtor
 junit_do_setup_teardown=N\u00E3o chamar setUp e tearDown
 junit_error_code=C\u00F3digo de Erro
 junit_error_default_msg=Houve um erro inesperado
 junit_error_msg=Mensagem de Erro
 junit_failure_code=C\u00F3digo da Falha
 junit_failure_default_msg=O teste falhou
 junit_failure_msg=Mensagns de Falha
 junit_pkg_filter=Filtro de Pacote
 junit_request=Requisi\u00E7\u00E3o JUnit
 junit_request_defaults=Padr\u00F5es de Requisi\u00E7\u00E3o JUnit
 junit_success_code=C\u00F3digo de Sucesso
 junit_success_default_msg=Teste com sucesso
 junit_success_msg=Mensagem de Sucesso
 junit_test_config=Par\u00E2metros de Teste JUnit
 junit_test_method=M\u00E9todo de Teste
 ldap_argument_list=Lista de Argumentos LDAP
 ldap_connto=Tempo limite de Conex\u00E3o (timeout) em milisegundos
 ldap_parse_results=Processar os resultados da busca?
 ldap_sample_title=Padr\u00F5es de Requisi\u00E7\u00E3o LDAP
 ldap_search_baseobject=Realizar busca b\u00E1sica de objetos
 ldap_search_onelevel=Realizar busca de um n\u00EDvel
 ldap_search_subtree=Realizar busca em sub-\u00E1rvore
 ldap_secure=Utilizar Protocolo LDAP Seguro?
 ldap_testing_title=Requisi\u00E7\u00E3o LDAP
 ldapext_sample_title=Padr\u00F5es de Requisi\u00E7\u00E3o LDAP Estendidas
 ldapext_testing_title=Requisi\u00E7\u00E3o LDAP Estendida
 library=Biblioteca
 load=Carregar
 log_errors_only=Erros
 log_file=Localiza\u00E7\u00E3o do arquivo de log
 log_function_comment=Coment\u00E1rios adicionais (opcional)
 log_function_level=N\u00EDvel de log (padr\u00E3o INFO) ou OUT ou ERR
 log_function_string=String a ser logada
 log_function_string_ret=String a ser logada (e retornada)
 log_function_throwable=Texto a ser lan\u00E7ado (opcional)
 log_only=Apenas Logar/Exibir
 log_parser=Nome da Classe Processadora de Logs
 log_parser_cnf_msg=N\u00E3o foi poss\u00EDvel encontrar a classe. Verifique se o jar se encontra no diret\u00F3rio /lib.
 log_parser_illegal_msg=N\u00E3o foi poss\u00EDvel acessar a classe devido a IllegalAccessException.
 log_parser_instantiate_msg=N\u00E3o foi poss\u00EDvel criar uma inst\u00E2ncia do processador de logs. Verifique se o processador implementa a interface LogParser.
 log_sampler=Testador de Log de Acessp do Tomcat
 log_success_only=Sucessos
 logic_controller_title=Controlador Simples
 login_config=Configura\u00E7\u00E3o de Login
 login_config_element=Elemento de Configura\u00E7\u00E3o de Login
 longsum_param_1=Primeiro long a ser adicionado
 longsum_param_2=Segundo long a ser adicionado - adicionalmente novos longs podem ser somados atrav\u00E9s da adi\u00E7\u00E3o de novos argumentos
 loop_controller_title=Controlador de Itera\u00E7\u00E3o
 looping_control=Controle de Itera\u00E7\u00E3o
 lower_bound=Limite Inferior
 mail_reader_account=Nome do usu\u00E1rio\:
 mail_reader_all_messages=Todos
 mail_reader_delete=Excluir mensagens do servidor
 mail_reader_folder=Diret\u00F3rio\:
 mail_reader_num_messages=N\u00FAmero de mensagens a serem recuperadas\:
 mail_reader_password=Senha\:
 mail_reader_server=Servidor\:
 mail_reader_server_type=Tipo do Servidor\:
 mail_reader_storemime=Armazenar as mensagens utilizando MIME
 mail_reader_title=Testador Leitor de Emails
 mail_sent=Email enviado com sucesso
 mailer_attributes_panel=Atributos de envio de emails
 mailer_error=N\u00E3o foi poss\u00EDvel enviar email. Favor verificar as configura\u00E7\u00F5es.
 mailer_visualizer_title=Vizualizador de Email
 match_num_field=N\u00FAmero para Combina\u00E7\u00E3o (0 para aleat\u00F3rio)
 max=M\u00E1ximo
 maximum_param=O valor m\u00E1ximo permitido para um intervalo de valores
 md5hex_assertion_failure=Erro avaliando soma MD5\: encontrado {0} mas deveria haver {1}
 md5hex_assertion_md5hex_test=MD5Hex para Asser\u00E7\u00E3o
 md5hex_assertion_title=Asser\u00E7\u00E3o MD5Hex
 menu_assertions=Asser\u00E7\u00F5es
 menu_close=Fechar
 menu_collapse_all=Fechar Todos
 menu_config_element=Elemento de Configura\u00E7\u00E3o
 menu_edit=Editar
 menu_expand_all=Expandir Todos
 menu_generative_controller=Testador
 menu_listener=Ouvinte
 menu_logic_controller=Controlador L\u00F3gico
 menu_merge=Mesclar
 menu_modifiers=Modificadores
 menu_non_test_elements=Elementos que n\u00E3o s\u00E3o de Teste
 menu_open=Abrir
 menu_post_processors=P\u00F3s-Processadores
 menu_pre_processors=Pr\u00E9-Processadores
 menu_response_based_modifiers=Modificadores Baseados na Resposta
 menu_timer=Temporizador
 metadata=Metadados
 method=M\u00E9todo\:
 minimum_param=Valor m\u00EDnimo permitido para um intervalo de valores
 minute=minuto
 modddn=Velho nome da entrada
 modification_controller_title=Controlador de Modifica\u00E7\u00E3o
 modification_manager_title=Gerenciador de Modifica\u00E7\u00E3o
 modify_test=Modificar Teste
 modtest=Teste de Modifica\u00E7\u00E3o
 module_controller_module_to_run=M\u00F3dulo a ser executado
 module_controller_title=Controlador de M\u00F3dulo
 module_controller_warning=N\u00E3o foi poss\u00EDvel encontrar o m\u00F3dulo\:
-monitor_equation_active=Ativo\: (ocupado / max) > 25%
-monitor_equation_dead=Morto\: sem resposta
-monitor_equation_healthy=Saud\u00E1vel\: (ocupado / max) < 25%
-monitor_equation_load=Carga\: ((ocupado / max) * 50) + ((mem\u00F3ria utilizada / max mem\u00F3ria) * 50)
-monitor_equation_warning=Alerta\: (ocupado / max) > 67%
-monitor_health_tab_title=Sa\u00FAde
-monitor_health_title=Monitorar Resultados
-monitor_is_title=Usar como Monitor
-monitor_label_prefix=Prefixo de Conex\u00E3o
-monitor_label_right_active=Ativo
-monitor_label_right_dead=Morto
-monitor_label_right_healthy=Saud\u00E1vel
-monitor_label_right_warning=Alerta
-monitor_legend_health=Sa\u00FAde
-monitor_legend_load=Carga
-monitor_legend_memory_per=Mem\u00F3ria % (usada / total)
-monitor_legend_thread_per=Thread % (ocupado / max)
-monitor_performance_servers=Servidores
-monitor_performance_tab_title=Desempenho
-monitor_performance_title=Gr\u00E1fico de Desempenho
 name=Nome\:
 new=Novo
 newdn=Novo nome distingu\u00EDvel
 no=Noruegu\u00EAs
 number_of_threads=N\u00FAmero de Usu\u00E1rios Virtuais (threads)\:
 obsolete_test_element=O elemento de teste est\u00E1 obsoleto.
 once_only_controller_title=Controlador de Uma \u00DAnica Vez
 open=Abrir...
 option=Op\u00E7\u00F5es
 optional_tasks=Tarefas Opcionais
 paramtable=Enviar Par\u00E2metros Com a Requisi\u00E7\u00E3o
 password=Senha
 paste=Colar
 paste_insert=Colar como Inser\u00E7\u00E3o
 path=Caminho\:
 path_extension_choice=Extens\u00F5es do Caminho (usar ";" como separador)
 path_extension_dont_use_equals=N\u00E3o usar igual nas extens\u00F5es do caminho (compatibilidae com Intershop Enfinity)
 path_extension_dont_use_questionmark=N\u00E3o utilizar s\u00EDmbolo de interroga\u00E7\u00E3o nas extens\u00F5es do caminho (Compatibilidade com Intershop Enfinity)
 patterns_to_exclude=Padr\u00F5es de URL a serem exclu\u00EDdos
 patterns_to_include=Padr\u00F5es de URL a serem inclu\u00EDdos
 pl=Polon\u00EAs
 port=Porta\:
 property_default_param=Valor padr\u00E3o
 property_edit=Editar
 property_editor.value_is_invalid_message=O texto informado n\u00E3o \u00E9 um valor v\u00E1lido para esta propriedade.\nA propriedade ser\u00E1 revertida para o seu valor pr\u00E9vio.
 property_editor.value_is_invalid_title=Entrada inv\u00E1lida.
 property_name_param=Nome da propriedade
 property_returnvalue_param=Retornar Valor Original da Propriedade (padr\u00E3o\: false)?
 property_undefined=Indefinido
 property_value_param=Valor da propriedade
 property_visualiser_title=Exibi\u00E7\u00E3o da Propriedade
 protocol=Protocolo [http]\:
 protocol_java_border=Classe Java
 protocol_java_classname=Nome da classe\:
 protocol_java_config_tile=Configurar amostra Java
 protocol_java_test_title=Teste Java
 provider_url=URL do Provedor
 proxy_assertions=Adicionar Asser\u00E7\u00F5es
 proxy_cl_error=Se estiver especificando um servidor proxy, nome do servidor e porta precisam ser informados
 proxy_content_type_exclude=Excluir\:
 proxy_content_type_filter=Filtro de tipo de conte\u00FAdo\:
 proxy_content_type_include=Incluir\:
 proxy_daemon_bind_error=N\u00E3o foi poss\u00EDvel criar o proxy - porta em uso\: Escolha outra porta.
 proxy_daemon_error=N\u00E3o foi poss\u00EDvel criar o proxy - veja log para detalhes
 proxy_headers=Capturar Cabe\u00E7alhos HTTP
 proxy_regex=Combina\u00E7\u00E3o de express\u00E3o regular
 proxy_sampler_settings=Configura\u00E7\u00F5es do Testador HTTP
 proxy_sampler_type=Tipo\:
 proxy_separators=Adicionar Separadores
 proxy_target=Controlador alvo\:
 proxy_test_plan_content=Conte\u00FAdo do Plano de Teste
 proxy_title=Servidor HTTP Proxy
 pt_br=Portugu\u00EAs (Brasileiro)
 ramp_up=Tempo de inicializa\u00E7\u00E3o (em segundos)
 random_control_title=Controlador Aleat\u00F3rio
 random_order_control_title=Controlador de Ordem Aleat\u00F3ria
 realm=Reino (realm)
 record_controller_title=Controlador de Grava\u00E7\u00E3o
 ref_name_field=Nome de Refer\u00EAncia\:
 regex_extractor_title=Extractor de Express\u00E3o Regular
 regex_field=Express\u00E3o Regular
 regex_source=Campo da Resposta a ser verificado
 regex_src_body=Corpo (body)
 regex_src_body_unescaped=Corpo (body) - n\u00E3o escapado
 regex_src_hdrs=Cabe\u00E7alhos (headers)
 regexfunc_param_1=Express\u00E3o regular usada para buscar amostras anteriores - ou vari\u00E1vel.
 regexfunc_param_2=Modelo (template) para substitui\u00E7\u00E3o de string, usando grupos de express\u00F5es reuglares. Formato \u00E9 ${grupo}$. Exemplo $1$.
 regexfunc_param_3=Que combina\u00E7\u00E3o usar. Um inteiro 1 ou maior, RAND indica que JMeter deve escolher aleatoriamente, um ponto flutuante (float) ou ALL indicando todas as combina\u00E7\u00F5es devem ser usadas ([1])
 regexfunc_param_4=Entre texto. Se ALL est\u00E1 selecionado, o que estiver ENTRE o texto informado ser\u00E1 utilizado para gerar os resultados ([""])
 regexfunc_param_5=Texto padr\u00E3o. Usado no lugar do modelo (template) se a express\u00E3o regular n\u00E3o econtrar nenhuma combina\u00E7\u00E3o ([""])
 regexfunc_param_7=Nome da vari\u00E1vel de entrada contidas no texto a ser processado ([amostra anterior]) 
 remote_error_init=Erro inicializando o servidor remoto
 remote_error_starting=Erro inicializando o servidor remoto
 remote_exit=Sa\u00EDda Remota
 remote_exit_all=Sair de Todos Remotos
 remote_start=Inicializar Remoto
 remote_start_all=Inicializar Todos Remotos
 remote_stop=Parar Remoto
 remote_stop_all=Parar Todos Remotos
 remove=Remover
 rename=Renomear entrada
 report=Relat\u00F3rio
 report_bar_chart=Gr\u00E1fico de Barras
 report_base_directory=Diret\u00F3rio Base
 report_chart_caption=Legenda do Gr\u00E1fico
 report_chart_x_axis=Eixo X
 report_chart_x_axis_label=R\u00F3tulo do Eixo X
 report_chart_y_axis=Eixo Y
 report_chart_y_axis_label=R\u00F3tulo do Eixo Y
 report_line_graph=Gr\u00E1fico de Linha
 report_line_graph_urls=Incluir URLs
 report_output_directory=Diret\u00F3rio de Sa\u00EDda do Relat\u00F3rio
 report_page=P\u00E1gina do Relat\u00F3rio
 report_page_element=Elemento da P\u00E1gina
 report_page_footer=Rodap\u00E9 da P\u00E1gina
 report_page_header=Cabe\u00E7alho da P\u00E1gina
 report_page_index=Criar \u00CDndice de P\u00E1ginas
 report_page_intro=P\u00E1gina de Introdu\u00E7\u00E3o
 report_page_style_url=URL da folha de estilos (stylesheet)
 report_page_title=T\u00EDtulo da P\u00E1gina
 report_pie_chart=Gr\u00E1fico de Pizza
 report_plan=Plano de Relat\u00F3rio
 report_select=Selecionar
 report_summary=Sum\u00E1rio do Relat\u00F3rio
 report_table=Tabela do Relat\u00F3rio
 report_writer=Escritor de Relat\u00F3rio
 report_writer_html=Escritor de Relat\u00F3rio HTML
 request_data=Requisitar Dados
 reset_gui=Reiniciar GUI
 response_save_as_md5=Salvar respostas como chave MD5?
 restart=Reiniciar
 resultaction_title=Manuseador de A\u00E7\u00F5es de Estados do Resultado
 resultsaver_errors=Somente Salvar Respostas que Falharam
 resultsaver_prefix=Prefixo do nome do arquivo
 resultsaver_skipautonumber=N\u00E3o adicionar n\u00FAmeros ao prefixo
 resultsaver_success=Somente Salvar Respostas de Sucesso
 resultsaver_title=Salvar respostas para arquivo
 resultsaver_variable=Nome da Vari\u00E1vel\:
 retobj=Objeto de retorno
 reuseconnection=Reusar conex\u00E3o
 revert_project=Reverter
 revert_project?=Reverter projeto?
 root=Raiz
 root_title=Raiz
 run=Executar
 running_test=Testes executando
 runtime_controller_title=Controlador de Tempo de Execu\u00E7\u00E3o
 runtime_seconds=Tempo de execu\u00E7\u00E3o (segundos)
 sample_result_save_configuration=Configura\u00E7\u00E3o de Salvar Resultados da Amostra
 sample_scope=Quais amostras testar
 sample_scope_all=Amostras principais e sub-amostras
 sample_scope_children=Somente Sub-amostras
 sample_scope_parent=Somente Amostras principais
 sampler_label=R\u00F3tulo
 sampler_on_error_action=A\u00E7\u00E3o a ser tomada depois de erro do testador
 sampler_on_error_continue=Continuar
 sampler_on_error_stop_test=Interromper Teste
 sampler_on_error_stop_test_now=Interrompe Teste Agora
 sampler_on_error_stop_thread=Interromper Usu\u00E1rio Virtual
 save=Salvar
 save?=Salvar?
 save_all_as=Salvar Plano de Teste como
 save_as=Salvar Sele\u00E7\u00E3o Como...
 save_as_error=Mais de um item selecionado\!
 save_as_image=Salvar N\u00F3 como Imagem
 save_as_image_all=Salvar Tela Como Imagem
 save_assertionresultsfailuremessage=Salvar Mensagens de Falha de Asser\u00E7\u00E3o
 save_assertions=Salvar Resultados de Asser\u00E7\u00F5es (XML)
 save_asxml=Salvar como XML
 save_bytes=Salvar quantidade de bytes
 save_code=Salvar C\u00F3digo da Resposta
 save_datatype=Salvar Tipo de Dados
 save_encoding=Salvar Codifica\u00E7\u00E3o
 save_fieldnames=Salvar Nomes dos Campos (CSV)
 save_filename=Nome do Arquivo para Salvar Respostas
 save_graphics=Salvar Gr\u00E1fico
 save_hostname=Salvar Nome do Host
 save_label=Salvar R\u00F3tulo
 save_latency=Salvar Lat\u00EAncia
 save_message=Salvar Mensagens das Respostas
 save_overwrite_existing_file=O arquivo selecionado j\u00E1 existe, voc\u00EA quer substitu\u00ED-lo?
 save_requestheaders=Salvar Cabe\u00E7alhos das Requisi\u00E7\u00F5es (XML)
 save_responsedata=Salvar Dados das Respostas (XML)
 save_responseheaders=Salvar Cabe\u00E7alhos das Respostas (XML)
 save_samplecount=Salvar Amostra e Contador de Erros
 save_samplerdata=Salvar Dados do Testador (XML)
 save_subresults=Salvar sub resultados (XML)
 save_success=Salvar Sucessos
 save_threadcounts=Salvar Contador de Usu\u00E1rios Virtuais Ativos
 save_threadname=Salvar Nome do Usu\u00E1rio Virtual
 save_time=Salvar Tempo Decorrido
 save_timestamp=Salvar Data e Hora
 save_url=Salvar URL
 sbind=Ligar/Desligar \u00FAnico (single bind/unbind)
 scheduler=Agendador
 scheduler_configuration=Configura\u00E7\u00E3o do Agendador
 scope=Escopo
 search_base=Base de busca
 search_filter=Filtro de busca
 search_test=Teste de busca
 searchbase=Base de busca
 searchfilter=Filtro de Busca
 searchtest=Teste de Busca
 second=segundo
 secure=Seguro
 send_file=Enviar Arquivos com a Requisi\u00E7\u00E3o
 send_file_browse=Procurar...
 send_file_filename_label=Caminho do Arquivo\:
 send_file_param_name_label=Nome do Par\u00E2metro\:
 server=Nome do servidor ou IP\:
 servername=Nome do servidor\:
 session_argument_name=Nome do Argumento de Sess\u00E3o
 should_save=Voc\u00EA deveria salvar seu plano de teste antes de execut\u00E1-lo.\nSe voc\u00EA est\u00E1 usando suporte a arquivos de dados (ex\: Conjunto de Dados CSV ou _StringFromFile),\nent\u00E3o \u00E9 particularmente importante salvar seu script de teste.\nVoc\u00EA quer salvar seu plano de teste primeiro?
 shutdown=Desligar
 simple_config_element=Elemento de Configura\u00E7\u00E3o Simples
 simple_data_writer_title=Escritor de Dados Simples
 size_assertion_comparator_error_equal=igual a
 size_assertion_comparator_error_greater=maior que
 size_assertion_comparator_error_greaterequal=maior ou igual que
 size_assertion_comparator_error_less=menor que
 size_assertion_comparator_error_lessequal=menor ou igual que
 size_assertion_comparator_error_notequal=diferente de
 size_assertion_comparator_label=Tipo de Compara\u00E7\u00E3o
 size_assertion_failure=O resultado estava com tamanho errado\: Tinha {0} bytes, mas deveria ter {1} {2} bytes
 size_assertion_input_error=Favor entrar um inteiro positivo v\u00E1lido.
 size_assertion_label=Tamanho em bytes\:
 size_assertion_size_test=Tamanho para Asser\u00E7\u00E3o
 size_assertion_title=Asser\u00E7\u00E3o de Tamanho
 soap_action=A\u00E7\u00E3o SOAP
 soap_data_title=Dados Soap/XML-RPC
 soap_sampler_title=Requisi\u00E7\u00E3o SOAP/XML-RPC
 soap_send_action=Enviar a\u00E7\u00E3o SOAP\:
 split_function_separator=Separador. Padr\u00E3o \u00E9 , (v\u00EDrgula)
 split_function_string=String a ser separada
 ssl_alias_prompt=Favor digitar seu apelido preferido
 ssl_alias_select=Selecione seu apelido para o teste
 ssl_alias_title=Apelido do Cliente
 ssl_error_title=Problema com Armazenamento de Chave
 ssl_pass_prompt=Favor digitar sua senha
 ssl_pass_title=Senha do Armaz\u00E9m de Chaves (KeyStore)
 ssl_port=Porta SSL
 sslmanager=Gerenciador SSL
 start=Iniciar
 start_no_timers=Iniciar sem pausas
 starttime=Tempo de In\u00EDcio
 stop=Interromper
 stopping_test=Interrompendo todos os usu\u00E1rios virtuais. Por favor, seja paciente.
 stopping_test_failed=Um ou mais usu\u00E1rios virtuais n\u00E3o pararam; veja arquivo de log.
 stopping_test_title=Interrompendo Teste
 string_from_file_file_name=Entre com o caminho completo do arquivo
 string_from_file_seq_final=N\u00FAmero de sequ\u00EAncia final do arquivo (opcional)
 string_from_file_seq_start=Numero de sequ\u00EAncia inicial do arquivo (opcional)
 summariser_title=Gerar Sum\u00E1rio de Resultados
 summary_report=Relat\u00F3rio de Sum\u00E1rio
 switch_controller_label=Valor de Sele\u00E7\u00E3o
 switch_controller_title=Controlador de Sele\u00E7\u00E3o
 table_visualizer_sample_num=Amostra \#
 table_visualizer_sample_time=Tempo da amostra (ms)
 table_visualizer_start_time=Tempo de in\u00EDcio
 table_visualizer_status=Estado
 table_visualizer_success=Sucesso
 table_visualizer_thread_name=Nome do Usu\u00E1rio Virtual
 table_visualizer_warning=Alerta
 tcp_classname=Nome da classe TCPClient\:
 tcp_config_title=Configura\u00E7\u00E3o do Testador TCP
 tcp_nodelay=Alterar "Sem Atrasos"
 tcp_port=N\u00FAmero da Porta\:
 tcp_request_data=Texto para envio
 tcp_sample_title=Testador TCP
 tcp_timeout=Tempo limite (ms)
 template_field=Modelo\:
 test=Teste
 test_action_action=A\u00E7\u00E3o
 test_action_duration=Dura\u00E7\u00E3o (ms)
 test_action_pause=Pausar
 test_action_stop=Encerrar
 test_action_stop_now=Encerrar Agora
 test_action_target=Alvo
 test_action_target_test=Todos Usu\u00E1ros Virtuais
 test_action_target_thread=Usu\u00E1rio Virtual Atual
 test_action_title=A\u00E7\u00E3o de Teste
 test_configuration=Configura\u00E7\u00E3o do Teste
 test_plan=Plano de Teste
 test_plan_classpath_browse=Adiconar diret\u00F3rio ou jar ao caminho de classes (classpath)
 testconfiguration=Configura\u00E7\u00E3o de Teste
 testplan.serialized=Executar Grupos de Usu\u00E1rios consecutivamente (ex\: executar um grupo de cada vez)
 testplan_comments=Coment\u00E1rios\:
 testt=Teste
 thread_delay_properties=Propriedades de Atraso do Usu\u00E1rio Virtual
 thread_group_title=Grupo de Usu\u00E1rios
 thread_properties=Propriedades do Usu\u00E1rio Virtual
 threadgroup=Grupo de Usu\u00E1rios
 throughput_control_bynumber_label=Total de Execu\u00E7\u00F5es
 throughput_control_bypercent_label=Percentagem de Execu\u00E7\u00F5es
 throughput_control_perthread_label=Por Usu\u00E1rio
 throughput_control_title=Controlador de Vaz\u00E3o
 throughput_control_tplabel=Vaz\u00E3o
 time_format=Formato de string para o SimpleDateFormat (opcional)
 timelim=Tempo limite
 tr=Turco
 transaction_controller_include_timers=Incluem dura\u221a\u00df\u221a\u00a3o do temporizador e pr\u221a\u00a9-p\u221a\u2265s processadores em amostra gerada
 transaction_controller_parent=Gerar amostras do pai
 transaction_controller_title=Controlador de Transa\u00E7\u00E3o
 unbind=Liberar Usu\u00E1rio Virtual
 unescape_html_string=String a ser escapada
 unescape_string=String contendo escapes de Java
 uniform_timer_delay=Limite de Atraso Constante (em ms)
 uniform_timer_memo=Adiciona um atraso aleat\u00F3rio com uma distribui\u00E7\u00E3o uniforme
 uniform_timer_range=Atraso M\u00E1ximo Aleat\u00F3rio (ms)
 uniform_timer_title=Temporizador Aleat\u00F3rio Uniforme
 update_per_iter=Atualizar uma \u00FAnica vez por itera\u00E7\u00E3o
 upload=Subir Arquivo
 upper_bound=Limite Superior
 url_config_protocol=Protocolo\:
 url_config_title=Padr\u00F5es de Requisi\u00E7\u00E3o HTTP
 url_full_config_title=Amostra de URL Completa
 url_multipart_config_title=Padr\u00F5es de Requisi\u00E7\u00E3o HTTP Multiparte
 use_keepalive=Usar Manter Ativo (KeepAlive)
 use_multipart_for_http_post=Usar multipart/form-data para HTTP POST
 use_recording_controller=Usar Controlador de Grava\u00E7\u00E3o
 user=Usu\u00E1rio
 user_defined_test=Teste Definido pelo Usu\u00E1rio
 user_defined_variables=Vari\u00E1veis Definidas Pelo Usu\u00E1rio
 user_param_mod_help_note=(N\u00E3o modifique isto. Modifique o arquivo com aquele nome no diret\u00F3rio /bin do JMeter)
 user_parameters_table=Par\u00E2metros
 user_parameters_title=Par\u00E2metros do Usu\u00E1rio
 userdn=Nome do Usu\u00E1rio
 username=Nome do Usu\u00E1rio
 userpw=Senha
 value=Valor
 var_name=Nome de Refer\u00EAncia
 variable_name_param=Nome da vari\u00E1vel (pode incluir refer\u00EAncias de vari\u00E1veis e fun\u00E7\u00F5es)
 view_graph_tree_title=Ver Gr\u00E1fico de \u00C1rvore
 view_results_assertion_error=Erro de asser\u00E7\u00E3o\:
 view_results_assertion_failure=Falha de asser\u00E7\u00E3o\:
 view_results_assertion_failure_message=Mensagem de falha de asser\u00E7\u00E3o\:
 view_results_desc=Exibe os resultados de amostragem na forma de \u00E1rvore
 view_results_error_count=Contador de Erros\:
 view_results_fields=campos\:
 view_results_in_table=Ver Resultados em Tabela
 view_results_latency=Lat\u00EAncia\:
 view_results_load_time=Tempo de Carga\:
 view_results_render_html=Renderizar HTML
 view_results_render_json=Renderizar JSON
 view_results_render_text=Exibir Texto
 view_results_render_xml=Renderizar XML
 view_results_request_headers=Cabe\u00E7alhos das Requisi\u00E7\u00F5es
 view_results_response_code=C\u00F3digo de Resposta\:
 view_results_response_headers=Cabe\u00E7alhos da Resposta\:
 view_results_response_message=Mensagem de resposta\:
 view_results_response_too_large_message=Resposta muito grande para ser exibida. Tamanho\:
 view_results_response_partial_message=In\u00EDcio da mensagem:
 view_results_sample_count=Contagem de amostras\:
 view_results_sample_start=In\u00EDcio da Amostra\:
 view_results_size_in_bytes=Tamanho em bytes\:
 view_results_tab_assertion=Resultados da asser\u00E7\u00E3o
 view_results_tab_request=Requisi\u00E7\u00E3o
 view_results_tab_response=Dados da resposta
 view_results_tab_sampler=Resultados do testador
 view_results_thread_name=Nome do Usu\u00E1rio Virtual\:
 view_results_title=Ver Resultados
 view_results_tree_title=Ver \u00C1rvore de Resultados
 warning=Alerta\!
 web_request=Requisi\u00E7\u00E3o HTTP
 web_server=Servidor Web
 web_server_client=Implementa\u00E7\u00E3o do Cliente\:
 web_server_domain=Nome do Servidor ou IP\:
 web_server_port=N\u00FAmero da Porta\:
 web_server_timeout_connect=Conectar\:
 web_server_timeout_response=Resposta\:
 web_server_timeout_title=Tempo limite (ms)
 web_testing2_title=Cliente HTTP de Requisi\u00E7\u00E3o HTTP
 web_testing_embedded_url_pattern=URLs embutidas precisam combinar\:
 web_testing_retrieve_images=Recuperar todos recursos embutidos a partir de arquivos HTML
 web_testing_title=Requisi\u00E7\u00E3o HTTP
 while_controller_label=Condi\u00E7\u00F5e (fun\u00E7\u00E3o ou vari\u00E1vel)
 while_controller_title=Controlador de Enquanto
 workbench_title=\u00C1rea de Trabalho
 xml_assertion_title=Asser\u00E7\u00E3o XML
 xml_namespace_button=Usar Espa\u00E7o de Nome (namespace)
 xml_tolerant_button=Processador de XML/HTML Tolerante
 xml_validate_button=Validar XML
 xml_whitespace_button=Ignorar espa\u00E7os em branco
 xmlschema_assertion_label=Nome do arquivo\:
 xmlschema_assertion_title=Asser\u00E7\u00E3o de Esquema de XML
 xpath_assertion_button=Validar
 xpath_assertion_check=Verificar Express\u00E3o XPath
 xpath_assertion_error=Erro com XPath
 xpath_assertion_failed=Express\u00F5es XPath Inv\u00E1lidas
 xpath_assertion_negate=Verdadeiro se nada combina
 xpath_assertion_option=Op\u00E7\u00F5es de Processamento de XML
 xpath_assertion_test=Asser\u00E7\u00E3o XPath
 xpath_assertion_tidy=Tentar e melhorar entrada
 xpath_assertion_title=Asser\u00E7\u00E3o XPath
 xpath_assertion_valid=Express\u00E3o XPath V\u00E1lida
 xpath_assertion_validation=Validar XML de acordo com DTD
 xpath_assertion_whitespace=Ignorar espa\u00E7os em branco
 xpath_expression=Express\u00F5es XPath que ser\u00E3o combinadas
 xpath_extractor_query=Consulta XPath
 xpath_extractor_title=Extractor XPath
 xpath_file_file_name=Arquivo XML de onde os valores ser\u00E3o extra\u00EDdos
 xpath_tidy_quiet=Quieto
 xpath_tidy_report_errors=Reportar erros
 xpath_tidy_show_warnings=Exibir alertas
 you_must_enter_a_valid_number=Voc\u00EA precisa entrar com um n\u00FAmero v\u00E1lido
 zh_cn=Chin\u00EAs (Simplificado)
 zh_tw=Chin\u00EAs (Tradicional)
diff --git a/src/core/org/apache/jmeter/resources/messages_tr.properties b/src/core/org/apache/jmeter/resources/messages_tr.properties
index c31297949..75e6a617c 100644
--- a/src/core/org/apache/jmeter/resources/messages_tr.properties
+++ b/src/core/org/apache/jmeter/resources/messages_tr.properties
@@ -1,809 +1,790 @@
 #   Licensed to the Apache Software Foundation (ASF) under one or more
 #   contributor license agreements.  See the NOTICE file distributed with
 #   this work for additional information regarding copyright ownership.
 #   The ASF licenses this file to You under the Apache License, Version 2.0
 #   (the "License"); you may not use this file except in compliance with
 #   the License.  You may obtain a copy of the License at
 # 
 #       http://www.apache.org/licenses/LICENSE-2.0
 # 
 #   Unless required by applicable law or agreed to in writing, software
 #   distributed under the License is distributed on an "AS IS" BASIS,
 #   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 #   See the License for the specific language governing permissions and
 #   limitations under the License.
 
 #Stored by I18NEdit, may be edited!
 about=Apache JMeter Hakk\u0131nda
 add=Ekle
 add_as_child=\u00C7ocuk Olarak Ekle
 add_parameter=De\u011Fi\u015Fken Olarak Ekle
 add_pattern=Desen Ekle\:
 add_test=Test Ekle
 add_user=Kullan\u0131c\u0131 Ekle
 add_value=De\u011Fer Ekle
 addtest=Test ekle
 aggregate_graph=\u0130statiksel Grafikler
 aggregate_graph_column=Kolon
 aggregate_graph_display=Grafik G\u00F6ster
 aggregate_graph_height=Y\u00FCkseklik
 aggregate_graph_max_length_xaxis_label=X-ekseni etiketinin maximum uzunlu\u011Fu
 aggregate_graph_ms=Milisaniyeler
 aggregate_graph_response_time=Cevap Zaman\u0131
 aggregate_graph_save=Grafi\u011Fi kaydet
 aggregate_graph_save_table=Tablo Verisini Kaydet
 aggregate_graph_save_table_header=Tablo Ba\u015Fl\u0131\u011F\u0131n\u0131 Kaydet
 aggregate_graph_title=Toplu Grafik
 aggregate_graph_user_title=Grafik Ba\u015Fl\u0131\u011F\u0131
 aggregate_graph_width=Geni\u015Flik
 aggregate_report=Toplu Rapor
 aggregate_report_bandwidth=KB/sn
 aggregate_report_count=\# \u00D6rnek
 aggregate_report_error=Hata
 aggregate_report_error%=Hata %
 aggregate_report_max=En \u00C7ok
 aggregate_report_median=Ortalama
 aggregate_report_min=En Az
 aggregate_report_rate=Transfer Oran\u0131
 aggregate_report_total_label=TOPLAM
 als_message=Not\: Eri\u015Fim Logu Ayr\u0131\u015Ft\u0131r\u0131c\u0131s\u0131 eklentiye izin veren genel-ge\u00E7er bir tasar\u0131ma sahiptir
 als_message2=\u00F6zg\u00FCn ayr\u0131\u015Ft\u0131r\u0131c\u0131. Bu \u015Fekilde yapmak i\u00E7in, LogParser'i ger\u00E7ekle, jar'\u0131 \u015Furaya ekle\: 
 als_message3=/lib dizini ve \u00F6rnekleyicideki s\u0131n\u0131f\u0131 gir.
 analyze=Veri Dosyas\u0131n\u0131 Analiz Et...
 anchor_modifier_title=HTML Ba\u011Flant\u0131s\u0131 Ayr\u0131\u015Ft\u0131r\u0131c\u0131s\u0131
 appearance=Temalar
 argument_must_not_be_negative=Ba\u011F\u0131ms\u0131z de\u011Fi\u015Fken negatif olmamal\u0131\!
 assertion_assume_success=Durumu Yoksay
 assertion_code_resp=Cevap Kodu
 assertion_contains=\u0130\u00E7erir
 assertion_equals=E\u015Fittir
 assertion_headers=Cevap Ba\u015Fl\u0131klar\u0131
 assertion_matches=\u00D6rt\u00FC\u015F\u00FCr
 assertion_message_resp=Cevap Mesaj\u0131
 assertion_pattern_match_rules=Desen \u00D6rt\u00FC\u015Fme Kurallar\u0131
 assertion_patterns_to_test=Test Edilecek Desenler
 assertion_resp_field=Test Edilecek Cevap Alan\u0131
 assertion_text_resp=Metin Cevap
 assertion_textarea_label=Do\u011Frulamalar\:
 assertion_title=Cevap Do\u011Frulamas\u0131
 assertion_url_samp=URL \u00D6rneklendi
 assertion_visualizer_title=Do\u011Frulama Sonu\u00E7lar\u0131
 attribute=\u00D6znitelik
 attrs=\u00D6znitelikler
 auth_base_url=Temel URL
 auth_manager_title=HTTP Yetkilendirme Y\u00F6neticisi
 auths_stored=Yetkilendirme Y\u00F6neticisinde Tutulan Yetkilendirmeler
 average=Ortalama
 average_bytes=Ort. Byte
 bind=\u0130\u015F Par\u00E7ac\u0131\u011F\u0131 Ba\u011Flamas\u0131
 browse=G\u00F6zat...
 bsf_sampler_title=BSF \u00D6rnekleyicisi
 bsf_script=\u00C7al\u0131\u015Ft\u0131r\u0131lacak betik (de\u011Fi\u015Fkenler\: ctx vars props SampleResult sampler log Label FileName Parameters args[] OUT)
 bsf_script_file=\u00C7al\u0131\u015Ft\u0131r\u0131lacak betik dosyas\u0131
 bsf_script_language=Betik dili\:
 bsf_script_parameters=Beti\u011Fe veya betik dosyas\u0131na ge\u00E7ilecek parametreler
 bsh_assertion_script=Betik (tan\u0131ml\u0131 de\u011Fi\u015Fkenler i\u00E7in a\u015Fa\u011F\u0131ya bak\u0131n)
 bsh_assertion_script_variables=Betik i\u00E7in \u015Fu de\u011Fi\u015Fkenler tan\u0131mlanm\u0131\u015Ft\u0131r\:\nOkuma/Yazma\: Failure, FailureMessage, SampleResult, vars, props, log.\nSalt Okunur\: Response[Data|Code|Message|Headers], RequestHeaders, SampleLabel, SamplerData, ctx
 bsh_assertion_title=BeanShell Do\u011Frulamas\u0131
 bsh_function_expression=De\u011Ferlendirilecek ifade
 bsh_sampler_title=BeanShell \u00D6rnekleyici
 bsh_script=Betik (tan\u0131ml\u0131 de\u011Fi\u015Fkenler i\u00E7in a\u015Fa\u011F\u0131ya bak\u0131n)
 bsh_script_file=Betik Dosyas\u0131
 bsh_script_parameters=Parametreler (-> Dizgi (String) Parametreler ve String []bsh.args)
 bsh_script_variables=Betik i\u00E7in \u015Fu de\u011Fi\u015Fkenler tan\u0131ml\u0131d\u0131r\:\nSampleResult, ResponseCode, ResponseMessage, IsSuccess, Label, FileName, ctx, vars, props, log
 busy_testing=Testle me\u015Fgul\u00FCm, l\u00FCtfen ayarlar\u0131 de\u011Fi\u015Ftirmeden \u00F6nce testi durdurun
 cache_session_id=\u00D6nbellek oturum Id'si?
 cancel=\u0130ptal
 cancel_exit_to_save=Kaydedilmemi\u015F test maddeleri var. \u00C7\u0131kmadan \u00F6nce kaydetmek ister misiniz?
 cancel_new_to_save=Kaydedilmemi\u015F test maddeleri var. Testi temizlemeden \u00F6nce kaydetmek ister misin?
 cancel_revert_project=Kaydedilmemi\u015F test maddeleri var. Daha \u00F6nce kaydedilmi\u015F olan test plan\u0131na d\u00F6nmek ister misiniz?
 choose_function=Fonksiyon se\u00E7in
 choose_language=Dil se\u00E7in
 clear=Temizle
 clear_all=Hepsini Temizle
 clear_cookies_per_iter=Her tekrar i\u00E7in \u00E7erezleri temizle?
 column_delete_disallowed=Bu kolonu silmek i\u00E7in izin yok
 column_number=CSV dosyas\u0131 i\u00E7in kolon numaras\u0131 | ileri | *takma ad
 compare=Kar\u015F\u0131la\u015Ft\u0131r
 comparefilt=Filtreyi kar\u015F\u0131la\u015Ft\u0131r
 config_element=Ayar Eleman\u0131
 config_save_settings=Ayarla
 constant_throughput_timer_memo=Sabit bir transfer oran\u0131 elde etmek i\u00E7in \u00F6rneklemeler aras\u0131na gecikme ekle
 constant_timer_delay=\u0130\u015F Par\u00E7ac\u0131\u011F\u0131 Gecikmesi (milisaniyeler)
 constant_timer_memo=\u00D6rneklemeler aras\u0131na sabit bir gecikme ekle
 constant_timer_title=Sabit Zamanlay\u0131c\u0131
 content_encoding=\u0130\u00E7erik kodlamas\u0131\:
 controller=Denet\u00E7i
 cookie_manager_policy=\u00C7erez Politikas\u0131
 cookie_manager_title=HTTP \u00C7erez Y\u00F6neticisi
 cookies_stored=\u00C7erez Y\u00F6neticisinde Tutulan \u00C7erezler
 copy=Kopyala
 counter_config_title=Saya\u00E7
 counter_per_user=Sayac\u0131 her kullan\u0131c\u0131 i\u00E7in ba\u011F\u0131ms\u0131z \u00E7al\u0131\u015Ft\u0131r
 countlim=Boyut s\u0131n\u0131r\u0131
 csvread_file_file_name=De\u011Ferlerin okunaca\u011F\u0131 CSV dosyas\u0131 | *k\u0131saltma
 cut=Kes
 cut_paste_function=Fonksiyon metnini kopyala ve yap\u0131\u015Ft\u0131r
 database_conn_pool_max_usage=Her Ba\u011Flant\u0131 i\u00E7in En Fazla Kullan\u0131m\:
 database_conn_pool_props=Veritaban\u0131 Ba\u011Flant\u0131s\u0131 Havuzu
 database_conn_pool_size=Havuzdaki Ba\u011Flant\u0131 Say\u0131s\u0131
 database_conn_pool_title=JDBC Veritaban Ba\u011Flant\u0131s\u0131 Havuzu \u00D6ntan\u0131ml\u0131 De\u011Ferleri
 database_driver_class=S\u00FCr\u00FCc\u00FC S\u0131n\u0131f\u0131\:
 database_login_title=JDBC Veritaban\u0131 Giri\u015Fi \u00D6ntan\u0131ml\u0131 De\u011Ferleri
 database_sql_query_string=SQL Sorgusu Metni\:
 database_sql_query_title=JDBC SQL Sorgusu \u00D6ntan\u0131ml\u0131 De\u011Ferleri
 database_testing_title=JDBC \u0130ste\u011Fi
 database_url=JDBC Adresi\:
 database_url_jdbc_props=Veritaban\u0131 Adresi ve JDBC S\u00FCr\u00FCc\u00FCs\u00FC
 de=Alman
 debug_off=Hata ay\u0131klamas\u0131n\u0131 saf d\u0131\u015F\u0131 b\u0131rak
 debug_on=Hata ay\u0131klamas\u0131n\u0131 etkinle\u015Ftir
 default_parameters=\u00D6ntan\u0131ml\u0131 Parametreler
 default_value_field=\u00D6ntan\u0131ml\u0131 De\u011Fer\:
 delay=Ba\u015Flang\u0131\u00E7 gecikmesi (saniye)
 delete=Sil
 delete_parameter=De\u011Fi\u015Fkeni Sil
 delete_test=Testi Sil
 delete_user=Kullan\u0131c\u0131y\u0131 Sil
 deltest=Testi sil
 deref=K\u0131saltmalar\u0131 g\u00F6ster
 disable=Safd\u0131\u015F\u0131 b\u0131rak
 distribution_graph_title=Da\u011F\u0131t\u0131m Grafi\u011Fi (alfa)
 distribution_note1=Grafik 10 \u00F6rnekte bir g\u00FCncellenecek
 domain=Etki Alan\u0131
 done=Bitti
 duration=S\u00FCre (saniye)
 duration_assertion_duration_test=Do\u011Frulama S\u00FCresi
 duration_assertion_failure=\u0130\u015Flem \u00E7ok uzun s\u00FCrd\u00FC\: {0} milisaniye s\u00FCrmesi gerekirken, {1}  milisaniyeden fazla s\u00FCrd\u00FC.
 duration_assertion_input_error=Pozitif bir tamsay\u0131 giriniz.
 duration_assertion_label=Milisaniye olarak s\u00FCre\:
 duration_assertion_title=S\u00FCre Do\u011Frulamas\u0131
 edit=D\u00FCzenle
 email_results_title=E-posta Sonu\u00E7lar\u0131
 en=\u0130ngilizce
 enable=Etkinle\u015Ftir
 encode?=Kodlama?
 encoded_value=URL Kodlanm\u0131\u015F De\u011Fer
 endtime=Biti\u015F Zaman\u0131
 entry_dn=Giri\u015F DN'i
 entrydn=Giri\u015F DN'i
 error_loading_help=Yard\u0131m sayfas\u0131n\u0131 y\u00FCklerken hata
 error_occurred=Hata Olu\u015Ftu
 error_title=Hata
 es=\u0130spanyolca
 eval_name_param=De\u011Fi\u015Fken ve fonksiyon referanslar\u0131 i\u00E7eren metin
 evalvar_name_param=De\u011Fi\u015Fken ismi
 example_data=\u00D6rnek Veri
 example_title=\u00D6rnekleyici \u00F6rne\u011Fi
 exit=\u00C7\u0131k\u0131\u015F
 expiration=S\u00FCre dolumu
 field_name=Alan ismi
 file=Dosya
 file_already_in_use=Bu dosya zaten kullan\u0131l\u0131yor
 file_visualizer_append=Varolan Veri Dosyas\u0131na Ekle
 file_visualizer_auto_flush=Her \u00D6rnekten Sonra Otomatik Olarak Temizle
 file_visualizer_browse=G\u00F6zat...
 file_visualizer_close=Kapat
 file_visualizer_file_options=Dosya Se\u00E7enekleri
 file_visualizer_filename=Dosya ismi
 file_visualizer_flush=Temizle
 file_visualizer_missing_filename=\u00C7\u0131kt\u0131 dosyas\u0131 belirtilmedi.
 file_visualizer_open=A\u00E7
 file_visualizer_output_file=Sonu\u00E7lar\u0131 dosyaya yaz / Dosyadan oku
 file_visualizer_submit_data=Girilen Veriyi Ekle
 file_visualizer_title=Dosya Raprolay\u0131c\u0131
 file_visualizer_verbose=\u00C7\u0131kt\u0131y\u0131 Detayland\u0131r
 filename=Dosya \u0130smi
 follow_redirects=Y\u00F6nlendirmeleri \u0130zle
 follow_redirects_auto=Otomatik Olarak Y\u00F6nlendir
 foreach_controller_title=ForEach Denet\u00E7isi
 foreach_input=Giri\u015F de\u011Fi\u015Fkeni \u00F6neki
 foreach_output=\u00C7\u0131k\u0131\u015F de\u011Fi\u015Fkeni ismi
 foreach_use_separator=Numara \u00F6n\u00FCne "_" ekle ?
 format=Numara bi\u00E7imi
 fr=Frans\u0131zca
 ftp_binary_mode=\u0130kili kipi kullan ?
 ftp_local_file=Yerel Dosya\:
 ftp_remote_file=Uzak Dosya\:
 ftp_sample_title=FTP \u0130ste\u011Fi \u00D6ntan\u0131ml\u0131 De\u011Ferleri
 ftp_save_response_data=Cevab\u0131 Dosyaya Kaydet ?
 ftp_testing_title=FTP \u0130ste\u011Fi
 function_dialog_menu_item=Fonksiyon Yard\u0131m\u0131 Diyalo\u011Fu
 function_helper_title=Fonksiyon Yard\u0131m\u0131
 function_name_param=Sonucu tutacak de\u011F\u015Fkenin ismi (gerekli)
 function_name_paropt=Sonucu tutacak de\u011Fi\u015Fkenin ismi (iste\u011Fe ba\u011Fl\u0131)
 function_params=Fonksiyon Parametresi
 functional_mode=Fonksiyonel Test Kipi (\u00F6r\: Cevap Verisini ve \u00D6rnekleyici Verisini kaydet)
 functional_mode_explanation=Ba\u015Far\u0131m\u0131 olumsuz etkileyecek olmas\u0131na ra\u011Fmen Fonksiyonel Test Kipi se\u00E7iliyor.
 gaussian_timer_delay=Sabit Gecikme S\u0131n\u0131r\u0131 (milisaniye)
 gaussian_timer_memo=Gauss da\u011F\u0131l\u0131m\u0131na g\u00F6re rastgele bir gecikme ekler
 gaussian_timer_range=Sapma (milisaniye)
 gaussian_timer_title=Gauss Rastgele Zamanlay\u0131c\u0131
 generate=\u00DCret
 generator=\u00DCretici S\u0131n\u0131f\u0131n \u0130smi
 generator_cnf_msg=\u00DCretici s\u0131n\u0131f\u0131 bulamad\u0131. L\u00FCtfen jar dosyas\u0131n\u0131 /lib dizini alt\u0131na yerle\u015Ftirdi\u011Finizden emin olun.
 generator_illegal_msg=IllegalAccessException nedeniyle \u00FCretici s\u0131n\u0131fa eri\u015Femedi.
 generator_instantiate_msg=\u00DCretici ayr\u0131\u015Ft\u0131r\u0131c\u0131 i\u00E7in \u00F6rnek yaratamad\u0131. L\u00FCtfen \u00FCreticinin "Generator" arabirimini ger\u00E7ekledi\u011Finden emin olun.
 graph_choose_graphs=G\u00F6sterilecek Grafikler
 graph_full_results_title=Grafik Tam Sonu\u00E7lar\u0131
 graph_results_average=Ortalama
 graph_results_data=Veri
 graph_results_deviation=Sapma
 graph_results_latest_sample=Son \u00D6rnek
 graph_results_median=Orta
 graph_results_no_samples=\u00D6rnek Say\u0131s\u0131
 graph_results_throughput=Transfer Oran\u0131
 graph_results_title=Grafik Sonu\u00E7lar\u0131
 grouping_add_separators=Gruplar aras\u0131na ayra\u00E7 ekle
 grouping_in_controllers=Her grubu yeni bir denet\u00E7iye koy
 grouping_mode=Gruplama\:
 grouping_no_groups=\u00D6rnekleyicileri gruplama
 grouping_store_first_only=Her grubun sadece 1. \u00F6rnekleyicilerini tut
 header_manager_title=HTTP Ba\u015Fl\u0131k Y\u00F6neticisi
 headers_stored=Ba\u015Fl\u0131k Y\u00F6neticisinde Tutulan Ba\u015Fl\u0131klar
 help=Yard\u0131m
 help_node=Bu d\u00FC\u011F\u00FCm nedir?
 html_assertion_file=JTidy raporunu dosyaya yaz
 html_assertion_label=HTML Do\u011Frulama
 html_assertion_title=HTML Do\u011Frulama
 http_implementation=Uygulamas\u0131\:
 http_response_code=HTTP cevap kodu
 http_url_rewriting_modifier_title=HTTP URL Yeniden Yazma Niteleyicisi
 http_user_parameter_modifier=HTTP Kullan\u0131c\u0131 Parametresi Niteleyicisi
 httpmirror_title=HTTP Ayna Sunucusu
 id_prefix=ID \u00D6neki
 id_suffix=ID Soneki
 if_controller_evaluate_all=T\u00FCm \u00E7ocuklar i\u00E7in hesapla?
 if_controller_label=Durum (Javascript)
 if_controller_title=If Denet\u00E7isi
 ignore_subcontrollers=Alt denet\u00E7i bloklar\u0131n\u0131 yoksay
 include_controller=\u0130\u00E7erme Denet\u00E7isi
 include_equals=E\u015Fleniyorsa i\u00E7er?
 include_path=Test Plan\u0131n\u0131 \u0130\u00E7er
 increment=Artt\u0131r
 infinite=Her zaman
 initial_context_factory=\u0130lk Ba\u011Flam Fabrikas\u0131
 insert_after=Arkas\u0131na Ekle
 insert_before=\u00D6n\u00FCne Ekle
 insert_parent=Ebeveynine Ekle
 interleave_control_title=Aral\u0131k Denet\u00E7isi
 intsum_param_1=Eklenecek ilk tamsay\u0131.
 intsum_param_2=Eklenecek ikinci tamsay\u0131 - sonraki tamsay\u0131lar di\u011Fer argumanlar\u0131 ekleyerek toplanabilir.
 invalid_data=Ge\u00E7ersiz veri
 invalid_mail=E-posta g\u00F6nderirken hata olu\u015Ftu
 invalid_mail_address=Bir veya daha fazla ge\u00E7ersiz e-posta adresi tespit edildi
 invalid_mail_server=E-posta sunucusuna ba\u011Flan\u0131rken problem (JMeter log dosyas\u0131na bak\u0131n\u0131z)
 invalid_variables=Ge\u00E7ersiz de\u011Fi\u015Fkenler
 iteration_counter_arg_1=TRUE, her kullan\u0131c\u0131n\u0131n kendi sayac\u0131na sahip olmas\u0131 i\u00E7in, FALSE genel-ge\u00E7er saya\u00E7 i\u00E7in
 iterator_num=D\u00F6ng\u00FC Say\u0131s\u0131\:
 ja=Japonca
 jar_file=Jar Dosyalar\u0131
 java_request=Java \u0130ste\u011Fi
 java_request_defaults=Java \u0130ste\u011Fi \u00D6ntan\u0131ml\u0131 De\u011Ferleri
 javascript_expression=De\u011Ferlendirilecek javascript ifadesi
 jexl_expression=De\u011Ferlendirilecek JEXL ifadesi
 jms_auth_required=Gerekli
 jms_client_caption=Mesaj dinlemek i\u00E7in TopicSubscriber.receive() kullanan istemciyi al.
 jms_client_caption2=MessageListener yeni mesajlar\u0131 dinlemek i\u00E7in onMessage(Message)'\u0131 kullan\u0131r.
 jms_client_type=\u0130stemci
 jms_communication_style=\u0130leti\u015Fim \u015Eekli
 jms_concrete_connection_factory=Somut Ba\u011Flant\u0131 Fabrikas\u0131
 jms_config=Ayarlar
 jms_config_title=JMS Ayar\u0131
 jms_connection_factory=Ba\u011Flant\u0131 Fabrikas\u0131
 jms_file=Dosya
 jms_initial_context_factory=Ba\u015Flang\u0131\u00E7 Ba\u011Flam Fabrikas\u0131
 jms_itertions=Toplanacak istek say\u0131s\u0131
 jms_jndi_defaults_title=JNDI \u00D6ntan\u0131ml\u0131 Ayarlar\u0131
 jms_jndi_props=JDNI \u00D6zellikleri
 jms_message_title=Mesaj \u00F6zellikleri
 jms_message_type=Mesaj Tipi
 jms_msg_content=\u0130\u00E7erik
 jms_object_message=Nesne Mesaj\u0131
 jms_point_to_point=JMS U\u00E7tan Uca
 jms_props=JMS \u00D6zellikleri
 jms_provider_url=Sa\u011Flay\u0131c\u0131 Adresi (URL)
 jms_publisher=JMS Yay\u0131nc\u0131s\u0131
 jms_pwd=\u015Eifre
 jms_queue=S\u0131ra
 jms_queue_connection_factory=QueueConnection Fabrikas\u0131
 jms_queueing=JMS Kaynaklar\u0131
 jms_random_file=Rastgele Dosyas\u0131
 jms_receive_queue=S\u0131ray\u0131 alan JNDI ismi 
 jms_request=Sadece \u0130stek
 jms_requestreply=\u0130stek Cevap
 jms_sample_title=JMS \u00D6ntan\u0131ml\u0131 \u0130ste\u011Fi 
 jms_send_queue=S\u0131ray\u0131 alan JNDI ismi
 jms_subscriber_on_message=MessageListener.onMessage()'\u0131 kullan
 jms_subscriber_receive=TopicSubscriber.receive()'\u0131 kullan
 jms_subscriber_title=JMS Abonesi
 jms_testing_title=Mesajla\u015Fma \u0130ste\u011Fi
 jms_text_message=Metin Mesaj\u0131
 jms_timeout=Zaman A\u015F\u0131m\u0131 (milisaniye)
 jms_topic=Konu
 jms_use_file=Dosyadan
 jms_use_non_persistent_delivery=S\u00FCrekli olmayan da\u011F\u0131t\u0131m kipini kullan?
 jms_use_properties_file=jndi.properties dosyas\u0131n\u0131 kullan
 jms_use_random_file=Rastgele Dosyas\u0131
 jms_use_text=Metin alan\u0131
 jms_user=Kullan\u0131c\u0131
 jndi_config_title=JNDI Ayar\u0131
 jndi_lookup_name=Uzak Arabirim
 jndi_lookup_title=JNDI Arama Ayar\u0131
 jndi_method_button_invoke=\u00C7a\u011F\u0131r
 jndi_method_button_reflect=Yans\u0131t
 jndi_method_home_name=Yerel Metod \u0130smi
 jndi_method_home_parms=Yerel Metod Parametreleri
 jndi_method_name=Metod Ayar\u0131
 jndi_method_remote_interface_list=Uzak Arabirimler
 jndi_method_remote_name=Uzak Metod \u0130smi
 jndi_method_remote_parms=Uzak Metod Parametreleri
 jndi_method_title=Uzak Metod Ayar\u0131
 jndi_testing_title=JNDI \u0130ste\u011Fi
 jndi_url_jndi_props=JNDI \u00D6zellikleri
 junit_append_error=Do\u011Frulama hatalar\u0131n\u0131 ekle
 junit_append_exception=\u00C7al\u0131\u015Fma zaman\u0131 istisnalar\u0131n\u0131 ekle
 junit_constructor_error=S\u0131n\u0131f \u00F6rne\u011Fi yarat\u0131lamad\u0131
 junit_constructor_string=Yap\u0131c\u0131 Metin Etiketi
 junit_do_setup_teardown=setUp ve tearDown'u \u00E7a\u011F\u0131rma
 junit_error_code=Hata Kodu
 junit_error_default_msg=Beklenmedik hata olu\u015Ftu
 junit_error_msg=Hata Mesaj\u0131
 junit_failure_code=Ba\u015Far\u0131s\u0131zl\u0131k Kodu 
 junit_failure_default_msg=Test ba\u015Far\u0131s\u0131z oldu.
 junit_failure_msg=Ba\u015Far\u0131s\u0131zl\u0131k Mesaj\u0131
 junit_pkg_filter=Paket Filtresi
 junit_request=JUnit \u0130ste\u011Fi
 junit_request_defaults=JUnit \u0130ste\u011Fi \u00D6ntan\u0131ml\u0131 De\u011Ferleri
 junit_success_code=Ba\u015Far\u0131 Kodu
 junit_success_default_msg=Test ba\u015Far\u0131s\u0131z
 junit_success_msg=Ba\u015Far\u0131 Mesaj\u0131
 junit_test_config=JUnit Test Parametreleri
 junit_test_method=Test Metodu
 ldap_argument_list=LDAP Arg\u00FCman Listesi
 ldap_connto=Ba\u011Flant\u0131 zaman a\u015F\u0131m\u0131 (milisaniye)
 ldap_parse_results=Arama sonu\u00E7lar\u0131n\u0131 ayr\u0131\u015Ft\u0131r ?
 ldap_sample_title=LDAP \u0130ste\u011Fi \u00D6ntan\u0131ml\u0131 Ayarlar\u0131
 ldap_search_baseobject=Temel-nesne aramas\u0131 ger\u00E7ekle\u015Ftir
 ldap_search_onelevel=Tek-seviye aramas\u0131 ger\u00E7ekle\u015Ftir
 ldap_search_subtree=Alt-a\u011Fa\u00E7 aramas\u0131 ger\u00E7ekle\u015Ftir
 ldap_secure=G\u00FCvenli LDAP Protokulu kullan ?
 ldap_testing_title=LDAP \u0130ste\u011Fi
 ldapext_sample_title=LDAP Geli\u015Fmi\u015F \u0130ste\u011Fi \u00D6ntan\u0131ml\u0131 De\u011Ferleri
 ldapext_testing_title=LDAP Geli\u015Fmi\u015F \u0130ste\u011Fi
 load=Y\u00FCkle
 log_errors_only=Hatalar
 log_file=Log Dosyas\u0131 Yolu
 log_function_comment=Ek yorum (iste\u011Fe ba\u011Fl\u0131)
 log_function_level=Log seviyesi (\u00F6ntan\u0131ml\u0131 INFO) ya OUT ya da ERR
 log_function_string=Loglanacak metin
 log_function_string_ret=Loglanacak (ve d\u00F6n\u00FClecek) metin
 log_function_throwable=At\u0131lacak metin (iste\u011Fe ba\u011Fl\u0131)
 log_only=Sadece Log/G\u00F6r\u00FCnt\u00FCleme\:
 log_parser=Log Ayr\u0131\u015Ft\u0131r\u0131c\u0131s\u0131 S\u0131n\u0131f\u0131n\u0131n \u0130smi
 log_parser_cnf_msg=S\u0131n\u0131f\u0131 bulamad\u0131. L\u00FCtfen jar dosyas\u0131n\u0131 /lib dizini alt\u0131na yerle\u015Ftirdi\u011Finizden emin olun.
 log_parser_illegal_msg=IllegalAcessException nedeniyle s\u0131n\u0131fa eri\u015Femedi.
 log_parser_instantiate_msg=Log ayr\u0131\u015Ft\u0131r\u0131c\u0131 \u00F6rne\u011Fi yaratamad\u0131. L\u00FCtfen ayr\u0131\u015Ft\u0131r\u0131c\u0131n\u0131n LogParser arabirimini ger\u00E7ekledi\u011Finden emin olun.
 log_sampler=Tomcat Eri\u015Fimi Log \u00D6rnekleyicisi
 log_success_only=Ba\u015Far\u0131lar
 logic_controller_title=Basit Denet\u00E7i
 login_config=Kullan\u0131c\u0131 Giri\u015Fi Ayar\u0131
 login_config_element=Kullan\u0131c\u0131 Giri\u015Fi Eleman\u0131
 longsum_param_1=Eklenek ilk b\u00FCy\u00FCk say\u0131 (long)
 longsum_param_2=Eklenecek ikinci b\u00FCy\u00FCk say\u0131 (long) - di\u011Fer b\u00FCy\u00FCk say\u0131lar di\u011Fer arg\u00FCmanlar\u0131n toplanmas\u0131yla elde edilebilir.
 loop_controller_title=D\u00F6ng\u00FC Denet\u00E7isi
 looping_control=D\u00F6ng\u00FC Kontrol\u00FC
 lower_bound=A\u015Fa\u011F\u0131 S\u0131n\u0131r
 mail_reader_account=Kullan\u0131c\u0131 ismi\:
 mail_reader_all_messages=Hepsi
 mail_reader_delete=Sunucudan mesajlar\u0131 sil
 mail_reader_folder=Klas\u00F6r\:
 mail_reader_num_messages=\u00C7ekilecek mesajlar\u0131n say\u0131s\u0131\:
 mail_reader_password=\u015Eifre\:
 mail_reader_server=Sunucu\:
 mail_reader_server_type=Sunucu Tipi\:
 mail_reader_title=Eposta Okuyucu \u00D6rnekleyicisi
 mail_sent=Eposta ba\u015Far\u0131yla g\u00F6nderildi
 mailer_attributes_panel=Eposta \u00F6znitelikleri
 mailer_error=Eposta g\u00F6nderilemedi. L\u00FCtfen sorunlu girdileri d\u00FCzeltin.
 mailer_visualizer_title=Eposta G\u00F6r\u00FCnt\u00FCleyicisi
 match_num_field=E\u015Fle\u015Fme Numaras\u0131. (Rastgele i\u00E7in 0)
 max=En Fazla
 maximum_param=\u0130zin verilen de\u011Fer aral\u0131\u011F\u0131 i\u00E7in en b\u00FCy\u00FCk de\u011Fer
 md5hex_assertion_failure=MD5 toplam\u0131 do\u011Frulamas\u0131 hatas\u0131\: {1} beklenirken {0} al\u0131nd\u0131
 md5hex_assertion_label=MDBHex
 md5hex_assertion_md5hex_test=Do\u011Frulanacak MD5Hex
 md5hex_assertion_title=MD5Hex Do\u011Frulamas\u0131
 menu_assertions=Do\u011Frulamalar
 menu_close=Kapat
 menu_collapse_all=Hepsini Kapat
 menu_config_element=Ayar Eleman\u0131
 menu_edit=D\u00FCzenle
 menu_expand_all=Hepsini A\u00E7
 menu_generative_controller=\u00D6rnekleyici
 menu_listener=Dinleyici
 menu_logic_controller=Mant\u0131k Denet\u00E7isi
 menu_merge=Birle\u015Ftir
 menu_modifiers=Niteleyiciler
 menu_non_test_elements=Test-d\u0131\u015F\u0131 Elemanlar
 menu_open=A\u00E7
 menu_post_processors=Test Sonras\u0131 \u0130\u015Flemciler
 menu_pre_processors=Test \u00D6ncesi \u0130\u015Flemciler
 menu_response_based_modifiers=Cevap Temelli Niteleyiciler
 menu_timer=Zamanlay\u0131c\u0131
 metadata=Veri hakk\u0131nda veri (metadata)
 method=Metod\:
 mimetype=Mime tipi
 minimum_param=\u0130zin verilen de\u011Fer aral\u0131\u011F\u0131 i\u00E7in en k\u00FC\u00E7\u00FCk de\u011Fer
 minute=dakika
 modddn=Eski girdi ismi
 modification_controller_title=De\u011Fi\u015Fiklik Denet\u00E7isi
 modification_manager_title=De\u011Fi\u015Fiklik Y\u00F6neticisi
 modify_test=Testi De\u011Fi\u015Ftir
 modtest=De\u011Fi\u015Fiklik testi
 module_controller_module_to_run=\u00C7al\u0131\u015Ft\u0131r\u0131lacak Birim
 module_controller_title=Birim Denet\u00E7isi
 module_controller_warning=Birim bulunamad\u0131\:
-monitor_equation_active=Aktif\: (me\u015Fgul/maksimum) > 25%
-monitor_equation_dead=\u00D6l\u00FC\: cevap yok
-monitor_equation_healthy=Sa\u011Fl\u0131kl\u0131\: (me\u015Fgul/maksimum) < 25%
-monitor_equation_load=Y\u00FCk\: ((me\u015Fgul / maksimum * 50) + ((kullan\u0131lan bellek / maksimum bellek)) > 25%
-monitor_equation_warning=Uyar\u0131\: (me\u015Fgul/maksimum) > 67%
-monitor_health_tab_title=Sa\u011Fl\u0131k
-monitor_health_title=\u0130zleme Sonu\u00E7lar\u0131
-monitor_is_title=\u0130zleyici olarak kullan
-monitor_label_right_active=Aktif
-monitor_label_right_dead=\u00D6l\u00FC
-monitor_label_right_healthy=Sa\u011Fl\u0131kl\u0131
-monitor_label_right_warning=Uyar\u0131
-monitor_legend_health=Sa\u011Fl\u0131k
-monitor_legend_load=Y\u00FCk
-monitor_legend_memory_per=Bellek % (kullan\u0131lan/toplam)
-monitor_legend_thread_per=\u0130\u015F par\u00E7ac\u0131\u011F\u0131 % (me\u015Fgul/maksimum)
-monitor_performance_servers=Sunucular
-monitor_performance_tab_title=Ba\u015Far\u0131m
-monitor_performance_title=Ba\u015Far\u0131m Grafi\u011Fi
 name=\u0130sim\:
 new=Yeni
 newdn=Yeni ay\u0131rt edici isim
 no=Norve\u00E7ce
 number_of_threads=\u0130\u015F par\u00E7ac\u0131\u011F\u0131 say\u0131s\u0131
 obsolete_test_element=Test eleman\u0131 belirsiz
 once_only_controller_title=Bir Kerelik Denet\u00E7i
 open=A\u00E7...
 option=Se\u00E7enekler
 optional_tasks=\u0130ste\u011Fe Ba\u011Fl\u0131 G\u00F6revler
 paramtable=\u0130stekle parametreleri g\u00F6nder\:
 password=\u015Eifre
 paste=Yap\u0131\u015Ft\u0131r
 paste_insert=Ekleme Olarak Yap\u0131\u015Ft\u0131r
 path=Yol\:
 path_extension_choice=Yol Uzatmas\u0131 (ayra\u00E7 olarak ";" kullan)
 path_extension_dont_use_equals=Yol uzatmas\u0131nda e\u015Fitlik kullanmay\u0131n (Intershop Enfinity uyumlulu\u011Fu)
 path_extension_dont_use_questionmark=Yol uzatmas\u0131nda soru i\u015Fareti kullanmay\u0131n (Intershop Enfinity uyumlulu\u011Fu)
 patterns_to_exclude=Hari\u00E7 Tutulacak URL Desenleri
 patterns_to_include=Dahil Edilecek URL Desenleri
 pkcs12_desc=PKCS 12 Anahtar (*.p12)
 property_default_param=\u00D6ntan\u0131ml\u0131 de\u011Fer
 property_edit=D\u00FCzenle
 property_editor.value_is_invalid_message=Girdi\u011Finiz metin bu \u00F6zellik i\u00E7in ge\u00E7erli de\u011Fil.\n\u00D6zellik \u00F6nceki de\u011Ferine geri d\u00F6nd\u00FCr\u00FClecek.
 property_editor.value_is_invalid_title=Ge\u00E7ersiz girdi
 property_name_param=\u00D6zellik ismi
 property_returnvalue_param=\u00D6zelli\u011Fin orjinal de\u011Ferini d\u00F6n (\u00F6ntan\u0131ml\u0131 false)?
 property_undefined=Tan\u0131ms\u0131z
 property_value_param=\u00D6zelli\u011Fin de\u011Feri
 property_visualiser_title=\u00D6zellik G\u00F6r\u00FCnt\u00FCleme
 protocol=Protokol [http]\:
 protocol_java_border=Java s\u0131n\u0131f\u0131
 protocol_java_classname=S\u0131n\u0131f ismi\:
 protocol_java_config_tile=Java \u00D6rne\u011Fi Ayarla
 protocol_java_test_title=Java Testi
 provider_url=Sa\u011Flay\u0131c\u0131 Adresi (URL)
 proxy_assertions=Do\u011Frulamalar\u0131 Ekle
 proxy_cl_error=Vekil sunucu belirtiliyorsa, sunucu ve port verilmeli
 proxy_content_type_exclude=Hari\u00E7 tut\:
 proxy_content_type_filter=\u0130\u00E7erik-tipi filtresi
 proxy_content_type_include=\u0130\u00E7eren\:
 proxy_headers=HTTP Ba\u015Fl\u0131klar\u0131n\u0131 Yakala
 proxy_regex=D\u00FCzenli ifade e\u015Fle\u015Fmesi
 proxy_sampler_settings=HTTP \u00D6rnekleyici Ayarlar\u0131
 proxy_sampler_type=Tip\:
 proxy_separators=Ayra\u00E7lar\u0131 Ekle
 proxy_target=Hedef Denet\u00E7isi\:
 proxy_test_plan_content=Test plan\u0131 i\u00E7eri\u011Fi
 proxy_title=HTTP Vekil Sunucusu
 ramp_up=Rampa S\u00FCresi (saniyeler)\:
 random_control_title=Rastgele Denet\u00E7isi
 random_order_control_title=Rastgele S\u0131ra Denet\u00E7isi
 realm=Alan (Realm)
 record_controller_title=Kaydetme Denet\u00E7isi
 ref_name_field=Referans \u0130smi\:
 regex_extractor_title=D\u00FCzenli \u0130fade \u00C7\u0131kar\u0131c\u0131
 regex_field=D\u00FCzenli \u0130fade\:
 regex_source=Se\u00E7ilecek Cevap Alanlar\u0131
 regex_src_body=G\u00F6vde
 regex_src_hdrs=Ba\u015Fl\u0131klar
 regex_src_url=Adres (URL)
 regexfunc_param_1=\u00D6nceki istekte sonu\u00E7lar\u0131 aramak i\u00E7in kullan\u0131lan d\u00FCzenli ifade
 regexfunc_param_2=De\u011Fi\u015Ftirme metni i\u00E7in, d\u00FCzenli ifadeden gruplar\u0131 kullanan \u015Fablon.\nBi\u00E7im $[group]$.  \u00D6rnek $1$.
 regexfunc_param_3=Hangi e\u015Fle\u015Fme kullan\u0131lacak. 1 ya da 1'den b\u00FCy\u00FCk bir tamsay\u0131, rastgele se\u00E7im i\u00E7in RAND, b\u00FCy\u00FCk say\u0131 (float) i\u00E7in A, t\u00FCm e\u015Fle\u015Fmelerin kullan\u0131lmas\u0131 i\u00E7in  ALL ([1])
 regexfunc_param_4=Metinler aras\u0131nda. E\u011Fer ALL se\u00E7iliyse, aradaki metin sonu\u00E7lar\u0131 yaratmak i\u00E7in kullan\u0131lacak ([""])
 regexfunc_param_5=\u00D6ntan\u0131ml\u0131 metin. E\u011Fer d\u00FCzenli ifade bir e\u015Fle\u015Fme yakalayamazsa, yerine kullan\u0131lacak \u015Fablon ([""])
 remote_error_init=Uzak sunucuyu s\u0131f\u0131rlarken hata
 remote_error_starting=Uzak sunucuyu ba\u015Flat\u0131rken hata
 remote_exit=Uzakta \u00C7\u0131k
 remote_exit_all=Uzakta Hepsinden \u00C7\u0131k 
 remote_start=Uzakta Ba\u015Flat
 remote_start_all=Uzakta Hepsini Ba\u015Flat
 remote_stop=Uzakta Durdur
 remote_stop_all=Uzakta Hepsini Durdur
 remove=Kald\u0131r
 rename=Girdiyi yeniden adland\u0131r
 report=Rapor
 report_bar_chart=Bar Grafi\u011Fi
 report_bar_graph_url=Adres (URL)
 report_base_directory=Temel Dizin
 report_chart_caption=Grafik Ba\u015Fl\u0131\u011F\u0131
 report_chart_x_axis=X Ekseni
 report_chart_x_axis_label=X Ekseni Etiketi
 report_chart_y_axis=Y Ekseni
 report_chart_y_axis_label=Y Ekseni Etiketi
 report_line_graph=\u00C7izgi Grafik
 report_line_graph_urls=\u0130\u00E7erilen Adresler (URLler)
 report_output_directory=Rapor i\u00E7in \u00C7\u0131kt\u0131 Dizini
 report_page=Rapor Sayfas\u0131
 report_page_element=Sayfa Eleman\u0131
 report_page_footer=Sayfa Altl\u0131\u011F\u0131
 report_page_header=Sayfa Ba\u015Fl\u0131\u011F\u0131
 report_page_index=Sayfa \u0130ndeksi Yarat
 report_page_intro=Sayfa Giri\u015Fi
 report_page_style_url=CSS Adresi (URL)
 report_page_title=Sayfa Ba\u015Fl\u0131\u011F\u0131
 report_pie_chart=Elma Grafi\u011Fi
 report_plan=Rapor Plan\u0131
 report_select=Se\u00E7
 report_summary=Rapor \u00D6zeti
 report_table=Rapor Tablosu
 report_writer=Rapor Yaz\u0131c\u0131
 report_writer_html=HTML Raporu Yaz\u0131c\u0131
 request_data=\u0130stek Verisi
 reset_gui=Aray\u00FCz\u00FC S\u0131f\u0131rla
 restart=Ba\u015Ftan ba\u015Flat
 resultaction_title=Sonu\u00E7 Durumu Eylem \u0130\u015Fleyici
 resultsaver_errors=Sadece Ba\u015Far\u0131s\u0131z Cevaplar\u0131 Kaydet
 resultsaver_prefix=Dosya ismi \u00F6neki\:
 resultsaver_title=Cevaplar\u0131 dosyaya kaydet
 retobj=Nesne d\u00F6n
 reuseconnection=Ba\u011Flant\u0131y\u0131 tekrar kullan
 revert_project=Geri d\u00F6nd\u00FCr
 revert_project?=Projeyi geri d\u00F6nd\u00FCr?
 root=K\u00F6k
 root_title=K\u00F6k
 run=\u00C7al\u0131\u015Ft\u0131r
 running_test=Testi \u00E7al\u0131\u015Ft\u0131r
 runtime_controller_title=\u00C7al\u0131\u015Fma Zaman\u0131 Denet\u00E7isi
 runtime_seconds=\u00C7al\u0131\u015Fma Zaman\u0131 (saniyeler)
 sample_result_save_configuration=\u00D6rnek Sonu\u00E7 Kaydetme Ayar\u0131
 sampler_label=Etiket
 sampler_on_error_action=\u00D6rnekleyici hatas\u0131ndan sonra yap\u0131lacak hareket
 sampler_on_error_continue=Devam et
 sampler_on_error_stop_test=Testi Durdur
 sampler_on_error_stop_thread=\u0130\u015F Par\u00E7ac\u0131\u011F\u0131 Durdur
 save=Kaydet
 save?=Kaydet?
 save_all_as=Test Plan\u0131 olarak Kaydet
 save_as=Se\u00E7imi Farkl\u0131 Kaydet...
 save_as_error=Birden fazla madde se\u00E7ili\!
 save_as_image=D\u00FC\u011F\u00FCm\u00FC Resim olarak Kaydet
 save_as_image_all=Ekran\u0131 Resim olarak Kaydet
 save_assertionresultsfailuremessage=Do\u011Frulama Ba\u015Far\u0131s\u0131zl\u0131\u011F\u0131 Mesaj\u0131n\u0131 Kaydet
 save_assertions=Do\u011Frulama Sonu\u00E7lar\u0131n\u0131 Kaydet (XML)
 save_asxml=XML olarak Kaydet
 save_bytes=Bayt say\u0131s\u0131n\u0131 kaydet
 save_code=Cevap Kodunu Kaydet
 save_datatype=Data Tipini Kaydet
 save_encoding=Kodlamay\u0131 Kaydet
 save_fieldnames=Alan \u0130simlerini Kaydet (CSV)
 save_filename=Cevap Dosya \u0130smini Kaydet
 save_graphics=Grafi\u011Fi Kaydet
 save_hostname=Sunucu \u0130smini Kaydet
 save_label=Etiketi Kaydet
 save_latency=Gecikme S\u00FCresi Kaydet
 save_message=Cevap Mesaj\u0131n\u0131 Kaydet
 save_overwrite_existing_file=Se\u00E7ili dosya zaten mevcut, \u00FCst\u00FCne yazmak ister misiniz?
 save_requestheaders=\u0130stek Ba\u015Fl\u0131klar\u0131n\u0131 Kaydet (XML)
 save_responsedata=Cevap Verisini Kaydet (XML)
 save_responseheaders=Cevap Ba\u015Fl\u0131klar\u0131n\u0131 Kaydet (XML)
 save_samplecount=\u00D6rnek ve Hata Say\u0131s\u0131n\u0131 Kaydet
 save_samplerdata=\u00D6rnekleyici Verisini Kaydet (XML)
 save_subresults=Alt Sonu\u00E7lar\u0131 Kaydet (XML)\n
 save_success=Ba\u015Far\u0131y\u0131 Kaydet
 save_threadcounts=Aktif \u0130\u015F Par\u00E7ac\u0131\u011F\u0131 Say\u0131s\u0131n\u0131 Kaydet
 save_threadname=\u0130\u015F Par\u00E7ac\u0131\u011F\u0131 \u0130smini Kaydet
 save_time=Ge\u00E7en Zaman\u0131 Kaydet
 save_timestamp=Tarih Bilgisini Kaydet
 save_url=URL Adresini Kaydet
 sbind=Yaln\u0131z ba\u011Fla/ba\u011Flama
 scheduler=Planla
 scheduler_configuration=Planlama Ayar\u0131
 scope=Kapsam
 search_base=Ara\u015Ft\u0131rma temeli
 search_filter=Ara\u015Ft\u0131rma Filtresi
 search_test=Ara\u015Ft\u0131rma Testi
 searchbase=Ara\u015Ft\u0131rma temeli
 searchfilter=Ara\u015Ft\u0131rma Filtresi
 searchtest=Ara\u015Ft\u0131rma testi
 second=saniye
 secure=G\u00FCvenli
 send_file=\u0130stekle Beraber Dosya G\u00F6nder\:
 send_file_browse=G\u00F6zat...
 send_file_filename_label=Dosya Yolu\:
 send_file_mime_label=MIME Tipi\:
 send_file_param_name_label=Parametre \u0130smi\:
 server=Sunucu \u0130smi veya IP\:
 servername=Sunucu \u0130smi \:
 session_argument_name=Oturum Arg\u00FCman\u0131 \u0130smi
 should_save=Testi \u00E7al\u0131\u015Ft\u0131rmadan \u00F6nce test plan\u0131n\u0131 kaydetmeniz tavsiye edilir.\nE\u011Fer destek veri dosyalar\u0131 kullan\u0131yorsan\u0131z (\u00F6r\: CSV Veri K\u00FCmesi ya da _StringFromFile), \u00F6ncelikle test beti\u011Fini kaydetmeniz \u00F6nemlidir.\n\u00D6ncelikle test plan\u0131n\u0131 kaydetmek istiyor musunuz?
 shutdown=Kapat
 simple_config_element=Basit Ayar Eleman\u0131
 simple_data_writer_title=Basit Veri Yaz\u0131c\u0131
 size_assertion_comparator_error_equal=e\u015Fittir
 size_assertion_comparator_error_greater=b\u00FCy\u00FCkt\u00FCr
 size_assertion_comparator_error_greaterequal=b\u00FCy\u00FCkt\u00FCr ya da e\u015Fittir
 size_assertion_comparator_error_less=k\u00FC\u00E7\u00FCkt\u00FCr
 size_assertion_comparator_error_lessequal=k\u00FC\u00E7\u00FCkt\u00FCr ya da e\u015Fittir
 size_assertion_comparator_error_notequal=e\u015Fit de\u011Fildir
 size_assertion_comparator_label=Kar\u015F\u0131la\u015Ft\u0131rma Tipi
 size_assertion_failure=Sonu\u00E7 boyutunda yanl\u0131\u015Fl\u0131k\: {0} bayt, halbuki {1} {2} bayt olmas\u0131 bekleniyordu.
 size_assertion_input_error=L\u00FCtfen ge\u00E7erli pozitif bir tamsay\u0131 girin.
 size_assertion_label=Boyut (bayt)\:
 size_assertion_size_test=Do\u011Frulanacak Boyut
 size_assertion_title=Boyut Do\u011Frulamas\u0131
 soap_data_title=Soap/XML-RPC Verisi
 soap_sampler_title=SOAP/XML-RPC \u0130ste\u011Fi
 soap_send_action=SOAPAction g\u00F6nder\: 
 ssl_alias_prompt=L\u00FCtfen tercih etti\u011Finiz k\u0131saltmay\u0131 girin
 ssl_alias_select=Test k\u0131saltman\u0131z\u0131 se\u00E7iniz
 ssl_alias_title=\u0130stemci K\u0131saltmas\u0131
 ssl_error_title=Anahtar Kayd\u0131 Problemi
 ssl_pass_prompt=L\u00FCtfen \u015Fifrenizi girin
 ssl_pass_title=Anahtar Kayd\u0131 Problemi
 ssl_port=SSL Portu
 sslmanager=SSL Y\u00F6neticisi
 start=Ba\u015Flat
 starttime=Ba\u015Flama Zaman\u0131
 stop=Durdur
 stopping_test=T\u00FCm i\u015F par\u00E7ac\u0131klar\u0131n\u0131 kapat\u0131yor. L\u00FCtfen sab\u0131rl\u0131 olun.
 stopping_test_title=Testleri Durduruyor
 string_from_file_file_name=Dosya tam yolunu girin
 string_from_file_seq_final=Dosya s\u0131ra numaras\u0131n\u0131 sonland\u0131r (iste\u011Fe ba\u011Fl\u0131)
 string_from_file_seq_start=Dosya s\u0131ra numaras\u0131n\u0131 ba\u015Flat (iste\u011Fe ba\u011Fl\u0131)
 summariser_title=\u00D6zet Sonu\u00E7lar Olu\u015Ftur
 summary_report=\u00D6zet Rapor
 switch_controller_label=Dallanma (Switch) De\u011Feri
 switch_controller_title=Dallanma (Switch) Denet\u00E7isi
 table_visualizer_bytes=Bayt
 table_visualizer_sample_num=\u00D6rnek \#
 table_visualizer_sample_time=\u00D6rnek Zaman\u0131(ms)
 table_visualizer_start_time=Ba\u015Flama Zaman\u0131
 table_visualizer_status=Durum
 table_visualizer_success=Ba\u015Far\u0131
 table_visualizer_thread_name=\u0130\u015F Par\u00E7ac\u0131\u011F\u0131 \u0130smi
 table_visualizer_warning=Uyar\u0131
 tcp_config_title=TCP \u00D6rnekleyici Ayar\u0131
 tcp_nodelay=Hi\u00E7 Gecikmeye Ayarla
 tcp_port=Port Numaras\u0131\:
 tcp_request_data=G\u00F6nderilecek metin
 tcp_sample_title=TCP \u00D6rnekleyici
 tcp_timeout=Zaman A\u015F\u0131m\u0131 (milisaniye)
 template_field=\u015Eablon\:
 test_action_action=Hareket
 test_action_duration=S\u00FCre (milisaniye)
 test_action_pause=Duraklat
 test_action_stop=Durdur
 test_action_target=Hedef
 test_action_target_test=T\u00FCm \u0130\u015F Par\u00E7ac\u0131klar\u0131
 test_action_target_thread=\u015Eu Anki \u0130\u015F Par\u00E7ac\u0131\u011F\u0131
 test_action_title=Test Hareketi
 test_configuration=Test Ayar\u0131
 test_plan=Test Plan\u0131
 test_plan_classpath_browse=S\u0131n\u0131f yoluna (classpath) dizin veya jar ekle
 testconfiguration=Test Ayar\u0131
 testplan.serialized=\u0130\u015F Par\u00E7ac\u0131\u011F\u0131 Gruplar\u0131n\u0131 Ard\u0131\u015F\u0131k \u00C7al\u0131\u015Ft\u0131r (\u00F6r\: her defas\u0131nda bir grup \u00E7al\u0131\u015Ft\u0131r)
 testplan_comments=Yorumlar\:
 thread_delay_properties=\u0130\u015F Par\u00E7ac\u0131\u011F\u0131 Gecikme \u00D6zellikleri
 thread_group_title=\u0130\u015F Par\u00E7ac\u0131\u011F\u0131 Grubu
 thread_properties=\u0130\u015F Par\u00E7ac\u0131\u011F\u0131 \u00D6zellikleri
 threadgroup=\u0130\u015F Par\u00E7ac\u0131\u011F\u0131 Grubu
 throughput_control_bynumber_label=Toplam Y\u00FCr\u00FCtme
 throughput_control_bypercent_label=Y\u00FCr\u00FCtme Y\u00FCzdesi
 throughput_control_perthread_label=Kullan\u0131c\u0131 Ba\u015F\u0131na
 throughput_control_title=Transfer Oran\u0131 Denet\u00E7isi
 throughput_control_tplabel=Transfer Oran\u0131
 time_format=Metni SimpleDateFormat i\u00E7in bi\u00E7imlendir (iste\u011Fe ba\u011Fl\u0131)
 timelim=Zaman s\u0131n\u0131r\u0131
 tr=T\u00FCrk\u00E7e
 transaction_controller_parent=Ebeveyn \u00F6rnek olu\u015Ftur
 transaction_controller_title=\u0130\u015Flem (transaction) Denet\u00E7isi
 unbind=\u0130\u015F Par\u00E7ac\u0131\u011F\u0131n\u0131 B\u0131rak
 uniform_timer_delay=Sabit Gecikme S\u0131n\u0131r\u0131 (milisaniye)\:
 uniform_timer_memo=Tek bi\u00E7imli da\u011F\u0131l\u0131mla rastgele gecikme ekler
 uniform_timer_range=Maksimum Rastgele Gecikme (milisaniye)\:
 uniform_timer_title=Tek Bi\u00E7imli Rastgele Zamanlay\u0131c\u0131
 update_per_iter=Her Tekrar i\u00E7in Bir Defa Yenile
 upload=Dosya Y\u00FCkleme
 upper_bound=\u00DCst S\u0131n\u0131r
 url=Adres (URL)
 url_config_protocol=Protokol\:
 url_config_title=HTTP \u0130ste\u011Fi \u00D6ntan\u0131ml\u0131 De\u011Ferleri
 url_full_config_title=UrlFull \u00D6rne\u011Fi
 url_multipart_config_title=HTTP Multipart \u0130ste\u011Fi \u00D6ntan\u0131ml\u0131 De\u011Ferleri
 use_keepalive=Canl\u0131Tut (KeepAlive) kullan
 use_multipart_for_http_post=HTTP POST i\u00E7in multipart/form-data kullan
 use_recording_controller=Kaydetme Denet\u00E7isi Kullan
 user=Kullan\u0131c\u0131
 user_defined_test=Kullan\u0131c\u0131 Tan\u0131ml\u0131 Test
 user_defined_variables=Kullan\u0131c\u0131 Tan\u0131ml\u0131 De\u011Fi\u015Fkenler
 user_param_mod_help_note=(Buray\u0131 de\u011Fi\u015Ftirme. Onun yerine, JMeter'in /bin dizinindeki dosya ismini d\u00FCzenle)
 user_parameters_table=Parametreler
 user_parameters_title=Kullan\u0131c\u0131 Parametreleri
 userdn=Kullan\u0131c\u0131 ismi
 username=Kullan\u0131c\u0131 ismi
 userpw=\u015Eifre
 value=De\u011Fer
 var_name=Referans \u0130smi
 variable_name_param=De\u011Fi\u015Fken ismi (de\u011Fi\u015Fken ve fonksiyon referanslar\u0131 i\u00E7erebilir)
 view_graph_tree_title=Grafik A\u011Fac\u0131n\u0131 G\u00F6ster
 view_results_in_table=Sonu\u00E7 Tablosunu G\u00F6ster
 view_results_render_html=HTML i\u015Fle
 view_results_render_json=JSON i\u015Fle
 view_results_render_text=Metin G\u00F6ster
 view_results_render_xml=XML \u0130\u015Fle
 view_results_tab_assertion=Do\u011Frulama sonucu
 view_results_tab_request=\u0130stek
 view_results_tab_response=Cevap verisi
 view_results_tab_sampler=\u00D6rnekleyici sonucu
 view_results_title=Sonu\u00E7lar\u0131 G\u00F6ster
 view_results_tree_title=Sonu\u00E7lar\u0131 G\u00F6sterme A\u011Fac\u0131
 warning=Uyar\u0131\!
 web_request=HTTP \u0130ste\u011Fi
 web_server=A\u011F Sunucusu
 web_server_client=\u0130stemci uygulamas\u0131\:
 web_server_domain=Sunucu \u0130smi veya IP\:
 web_server_port=Port Numaras\u0131\:
 web_testing2_title=HTTP \u0130ste\u011Fi HTTPClient
 web_testing_embedded_url_pattern=G\u00F6m\u00FCl\u00FC Adresler (URL) \u00F6rt\u00FC\u015Fmeli\:
 web_testing_retrieve_images=HTML Dosyalardan T\u00FCm G\u00F6m\u00FCl\u00FC Kaynaklar\u0131 Al
 web_testing_title=HTTP \u0130ste\u011Fi
 while_controller_label=Ko\u015Ful (fonksiyon veya de\u011Fi\u015Fken)
 while_controller_title=While Denet\u00E7isi
 workbench_title=Tezgah
 xml_assertion_title=XML Do\u011Frulamas\u0131
 xml_namespace_button=Namespace kullan
 xml_tolerant_button=Ho\u015Fg\u00F6r\u00FClen XML/HTML Ayr\u0131\u015Ft\u0131r\u0131c\u0131
 xml_validate_button=XML'i do\u011Frula
 xml_whitespace_button=G\u00F6r\u00FCnmeyen Karakterleri Yoksay
 xmlschema_assertion_label=Dosya \u0130smi\:
 xmlschema_assertion_title=XML \u015Eemas\u0131 Do\u011Frulamas\u0131
 xpath_assertion_button=Do\u011Frula
 xpath_assertion_check=XPath \u0130fadesini Kontrol Et
 xpath_assertion_error=XPath'te Hata
 xpath_assertion_failed=Ge\u00E7ersiz XPath \u0130fadesi
 xpath_assertion_negate=E\u011Fer e\u015Fle\u015Fen yoksa True
 xpath_assertion_option=XML Ayr\u0131\u015Ft\u0131r\u0131c\u0131 Se\u00E7enekleri
 xpath_assertion_test=XPath Do\u011Frulamas\u0131
 xpath_assertion_tidy=Dene ve girdiyi d\u00FCzenle
 xpath_assertion_title=XPath Do\u011Frulamas\u0131
 xpath_assertion_valid=Ge\u00E7erli XPath \u0130fadesi
 xpath_assertion_validation=XML'i DTD'ye g\u00F6re kontrol et
 xpath_assertion_whitespace=G\u00F6r\u00FCnmeyen Karakterleri Yoksay
 xpath_expression=Kar\u015F\u0131la\u015Ft\u0131r\u0131lacak XPath ifadesi
 xpath_extractor_query=XPath sorgusu\:
 xpath_extractor_title=XPath \u00C7\u0131kar\u0131c\u0131
 xpath_file_file_name=De\u011Ferlerin okunaca\u011F\u0131 XML dosyas\u0131
 xpath_tidy_quiet=Sessiz
 xpath_tidy_report_errors=Hatalar\u0131 raporla
 xpath_tidy_show_warnings=Uyar\u0131lar\u0131 g\u00F6ster
 you_must_enter_a_valid_number=Ge\u00E7erli bir rakam girmelisiniz
 zh_cn=\u00C7ince (Basitle\u015Ftirilmi\u015F)
 zh_tw=\u00C7ince (Geleneksel)
diff --git a/src/core/org/apache/jmeter/resources/messages_zh_CN.properties b/src/core/org/apache/jmeter/resources/messages_zh_CN.properties
index f0aff99cd..4e86695e9 100644
--- a/src/core/org/apache/jmeter/resources/messages_zh_CN.properties
+++ b/src/core/org/apache/jmeter/resources/messages_zh_CN.properties
@@ -1,418 +1,405 @@
 #   Licensed to the Apache Software Foundation (ASF) under one or more
 #   contributor license agreements.  See the NOTICE file distributed with
 #   this work for additional information regarding copyright ownership.
 #   The ASF licenses this file to You under the Apache License, Version 2.0
 #   (the "License"); you may not use this file except in compliance with
 #   the License.  You may obtain a copy of the License at
 # 
 #       http://www.apache.org/licenses/LICENSE-2.0
 # 
 #   Unless required by applicable law or agreed to in writing, software
 #   distributed under the License is distributed on an "AS IS" BASIS,
 #   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 #   See the License for the specific language governing permissions and
 #   limitations under the License.
 
 about=\u5173\u4E8EApache JMeter
 add=\u6DFB\u52A0
 add_as_child=\u6DFB\u52A0\u5B50\u8282\u70B9
 add_parameter=\u6DFB\u52A0\u53D8\u91CF
 add_pattern=\u6DFB\u52A0\u6A21\u5F0F\uFF1A
 add_test=\u6DFB\u52A0\u6D4B\u8BD5
 add_user=\u6DFB\u52A0\u7528\u6237
 add_value=\u6DFB\u52A0\u6570\u503C
 aggregate_report=\u805A\u5408\u62A5\u544A
 aggregate_report_total_label=\u603B\u4F53
 als_message=\u6CE8\u610F\uFF1A\u8BBF\u95EE\u65E5\u5FD7\u89E3\u6790\u5668\uFF08Access Log Parser\uFF09\u662F\u901A\u7528\u7684\u5E76\u5141\u8BB8\u5B9A\u4E49\u63D2\u4EF6
 als_message2=\u81EA\u5B9A\u4E49\u7684\u89E3\u6790\u5668\u3002\u8981\u8FD9\u4E48\u505A\uFF0C\u5B9E\u73B0LogParser\uFF0C\u6DFB\u52A0jar\u5230
 als_message3=/lib\u76EE\u5F55\u5E76\u5728sampler\u4E2D\u8F93\u5165\u7C7B\u540D\u79F0\u3002
 analyze=\u5206\u6790\u6570\u636E\u6587\u4EF6...
 anchor_modifier_title=HTML\u94FE\u63A5\u89E3\u6790\u5668
 appearance=\u5916\u89C2
 argument_must_not_be_negative=\u53C2\u6570\u4E0D\u5141\u8BB8\u662F\u8D1F\u503C\uFF01
 assertion_code_resp=\u54CD\u5E94\u4EE3\u7801
 assertion_contains=\u5305\u62EC
 assertion_matches=\u5339\u914D
 assertion_message_resp=\u54CD\u5E94\u4FE1\u606F
 assertion_not=\u5426
 assertion_pattern_match_rules=\u6A21\u5F0F\u5339\u914D\u89C4\u5219
 assertion_patterns_to_test=\u8981\u6D4B\u8BD5\u7684\u6A21\u5F0F
 assertion_resp_field=\u8981\u6D4B\u8BD5\u7684\u54CD\u5E94\u5B57\u6BB5
 assertion_text_resp=\u54CD\u5E94\u6587\u672C
 assertion_textarea_label=\u65AD\u8A00\uFF1A
 assertion_title=\u54CD\u5E94\u65AD\u8A00
 assertion_url_samp=URL\u6837\u672C
 assertion_visualizer_title=\u65AD\u8A00\u7ED3\u679C
 auth_base_url=\u57FA\u7840URL
 auth_manager_title=HTTP\u6388\u6743\u7BA1\u7406\u5668
 auths_stored=\u5B58\u50A8\u5728\u6388\u6743\u7BA1\u7406\u5668\u4E2D\u7684\u6388\u6743
 browse=\u6D4F\u89C8...
 bsf_sampler_title=BSF \u53D6\u6837\u5668
 bsf_script=\u8981\u8FD0\u884C\u7684\u811A\u672C
 bsf_script_file=\u8981\u8FD0\u884C\u7684\u811A\u672C\u6587\u4EF6
 bsf_script_language=\u811A\u672C\u8BED\u8A00\uFF1A
 bsf_script_parameters=\u4F20\u9012\u7ED9\u811A\u672C/\u6587\u4EF6\u7684\u53C2\u6570\uFF1A
 bsh_assertion_title=BeanShell\u65AD\u8A00
 bsh_function_expression=\u8868\u8FBE\u5F0F\u6C42\u503C
 bsh_script_file=\u811A\u672C\u6587\u4EF6
 bsh_script_parameters=\u53C2\u6570\uFF08-> String Parameters \u548C String [ ]bash.args\uFF09
 busy_testing=\u6B63\u5728\u6D4B\u8BD5\uFF0C\u8BF7\u5728\u4FEE\u6539\u8BBE\u7F6E\u524D\u505C\u6B62\u6D4B\u8BD5
 cancel=\u53D6\u6D88
 cancel_exit_to_save=\u6D4B\u8BD5\u6761\u76EE\u672A\u5B58\u50A8\u3002\u4F60\u60F3\u5728\u9000\u51FA\u524D\u5B58\u50A8\u5417\uFF1F
 cancel_new_to_save=\u6D4B\u8BD5\u6761\u76EE\u672A\u5B58\u50A8\u3002\u4F60\u60F3\u5728\u6E05\u7A7A\u6D4B\u8BD5\u8BA1\u5212\u524D\u5B58\u50A8\u5417\uFF1F
 choose_function=\u9009\u62E9\u4E00\u4E2A\u529F\u80FD
 choose_language=\u9009\u62E9\u8BED\u8A00
 clear=\u6E05\u9664
 clear_all=\u6E05\u9664\u5168\u90E8
 clear_cookies_per_iter=\u6BCF\u6B21\u53CD\u590D\u6E05\u9664Cookies \uFF1F
 column_delete_disallowed=\u4E0D\u5141\u8BB8\u5220\u9664\u6B64\u5217
 column_number=CSV\u6587\u4EF6\u5217\u53F7| next| *alias
 constant_throughput_timer_memo=\u5728\u53D6\u6837\u95F4\u6DFB\u52A0\u5EF6\u8FDF\u6765\u83B7\u5F97\u56FA\u5B9A\u7684\u541E\u5410\u91CF
 constant_timer_delay=\u7EBF\u7A0B\u5EF6\u8FDF\uFF08\u6BEB\u79D2\uFF09\uFF1A
 constant_timer_memo=\u5728\u53D6\u6837\u95F4\u6DFB\u52A0\u56FA\u5B9A\u5EF6\u8FDF
 constant_timer_title=\u56FA\u5B9A\u5B9A\u65F6\u5668
 controller=\u63A7\u5236\u5668
 cookie_manager_title=HTTP Cookie \u7BA1\u7406\u5668
 cookies_stored=\u5B58\u50A8\u5728Cookie\u7BA1\u7406\u5668\u4E2D\u7684Cookie
 copy=\u590D\u5236
 counter_config_title=\u8BA1\u6570\u5668
 counter_per_user=\u4E0E\u6BCF\u7528\u6237\u72EC\u7ACB\u7684\u8DDF\u8E2A\u8BA1\u6570\u5668
 cut=\u526A\u5207
 cut_paste_function=\u62F7\u8D1D\u5E76\u7C98\u8D34\u51FD\u6570\u5B57\u7B26\u4E32
 database_sql_query_string=SQL\u67E5\u8BE2\u5B57\u7B26\u4E32\uFF1A
 database_sql_query_title=JDBC SQL \u67E5\u8BE2\u7F3A\u7701\u503C
 de=\u5FB7\u8BED
 default_parameters=\u7F3A\u7701\u53C2\u6570
 default_value_field=\u7F3A\u7701\u503C\uFF1A
 delay=\u542F\u52A8\u5EF6\u8FDF\uFF08\u79D2\uFF09
 delete=\u5220\u9664
 delete_parameter=\u5220\u9664\u53D8\u91CF
 delete_test=\u5220\u9664\u6D4B\u8BD5
 delete_user=\u5220\u9664\u7528\u6237
 disable=\u7981\u7528
 domain=\u57DF
 duration=\u6301\u7EED\u65F6\u95F4\uFF08\u79D2\uFF09
 duration_assertion_duration_test=\u65AD\u8A00\u6301\u7EED\u65F6\u95F4
 duration_assertion_failure=\u64CD\u4F5C\u6301\u7EED\u592A\u957F\u65F6\u95F4\uFF1A\u4ED6\u82B1\u8D39\u4E86{0}\u6BEB\u79D2\uFF0C\u4F46\u4E0D\u5E94\u8BE5\u8D85\u8FC7{1}\u6BEB\u79D2\u3002
 duration_assertion_input_error=\u8BF7\u8F93\u5165\u4E00\u4E2A\u6709\u6548\u7684\u6B63\u6574\u6570\u3002
 duration_assertion_label=\u6301\u7EED\u65F6\u95F4\uFF08\u6BEB\u79D2\uFF09\uFF1A
 duration_assertion_title=\u65AD\u8A00\u6301\u7EED\u65F6\u95F4
 edit=\u7F16\u8F91
 email_results_title=\u7535\u5B50\u90AE\u4EF6\u7ED3\u679C
 en=\u82F1\u8BED
 enable=\u542F\u7528
 encode?=\u7F16\u7801\uFF1F
 encoded_value=URL\u7F16\u7801\u540E\u7684\u503C
 endtime=\u7ED3\u675F\u65F6\u95F4
 entry_dn=\u5165\u53E3DN
 error_loading_help=\u52A0\u8F7D\u5E2E\u52A9\u9875\u9762\u51FA\u9519
 error_occurred=\u53D1\u751F\u9519\u8BEF
 example_data=\u6837\u672C\u6570\u636E
 example_title=\u793A\u4F8B\u53D6\u6837\u5668
 exit=\u9000\u51FA
 expiration=\u8FC7\u671F
 field_name=\u5B57\u6BB5\u540D\u6210
 file=\u6587\u4EF6
 file_already_in_use=\u6587\u4EF6\u6B63\u5728\u4F7F\u7528
 file_visualizer_append=\u6DFB\u52A0\u5230\u5DF2\u7ECF\u5B58\u5728\u7684\u6570\u636E\u6587\u4EF6
 file_visualizer_auto_flush=\u5728\u6BCF\u6B21\u6570\u636E\u53D6\u6837\u540E\u81EA\u52A8\u66F4\u65B0
 file_visualizer_browse=\u6D4F\u89C8...
 file_visualizer_close=\u5173\u95ED
 file_visualizer_file_options=\u6587\u4EF6\u64CD\u4F5C
 file_visualizer_filename=\u6587\u4EF6\u540D
 file_visualizer_flush=\u66F4\u65B0
 file_visualizer_missing_filename=\u6CA1\u6709\u6307\u5B9A\u8F93\u51FA\u6587\u4EF6\u540D\u3002
 file_visualizer_open=\u6253\u5F00
 file_visualizer_output_file=\u6240\u6709\u6570\u636E\u5199\u5165\u4E00\u4E2A\u6587\u4EF6
 file_visualizer_submit_data=\u5305\u62EC\u88AB\u63D0\u4EA4\u7684\u6570\u636E
 file_visualizer_title=\u6587\u4EF6\u62A5\u544A\u5668
 file_visualizer_verbose=\u8BE6\u7EC6\u7684\u8F93\u51FA
 filename=\u6587\u4EF6\u540D\u79F0
 follow_redirects=\u8DDF\u968F\u91CD\u5B9A\u5411
 follow_redirects_auto=\u81ea\u52a8\u91cd\u5b9a\u5411
 foreach_controller_title=ForEach\u63A7\u5236\u5668
 foreach_input=\u8F93\u5165\u53D8\u91CF\u524D\u7F00
 foreach_output=\u8F93\u51FA\u53D8\u91CF\u540D\u79F0
 ftp_sample_title=FTP\u8BF7\u6C42\u7F3A\u7701\u503C
 ftp_testing_title=FTP\u8BF7\u6C42
 function_dialog_menu_item=\u51FD\u6570\u52A9\u624B\u5BF9\u8BDD\u6846
 function_helper_title=\u51FD\u6570\u52A9\u624B
 function_name_param=\u51FD\u6570\u540D\u79F0\u3002\u7528\u4E8E\u5B58\u50A8\u5728\u6D4B\u8BD5\u8BA1\u5212\u4E2D\u5176\u4ED6\u7684\u65B9\u5F0F\u4F7F\u7528\u7684\u503C\u3002
 function_params=\u51FD\u6570\u53C2\u6570
 functional_mode=\u51FD\u6570\u6D4B\u8BD5\u6A21\u5F0F
 functional_mode_explanation=\u53EA\u6709\u5F53\u4F60\u9700\u8981\u8BB0\u5F55\u6BCF\u4E2A\u8BF7\u6C42\u4ECE\u670D\u52A1\u5668\u53D6\u5F97\u7684\u6570\u636E\u5230\u6587\u4EF6\u65F6\n\u624D\u9700\u8981\u9009\u62E9\u51FD\u6570\u6D4B\u8BD5\u6A21\u5F0F\u3002\n\n\u9009\u62E9\u8FD9\u4E2A\u9009\u9879\u5F88\u5F71\u54CD\u6027\u80FD\u3002\n
 gaussian_timer_delay=\u56FA\u5B9A\u5EF6\u8FDF\u504F\u79FB\uFF08\u6BEB\u79D2\uFF09\uFF1A
 gaussian_timer_memo=\u6DFB\u52A0\u4E00\u4E2A\u968F\u673A\u7684\u9AD8\u65AF\u5206\u5E03\u5EF6\u8FDF
 gaussian_timer_range=\u504F\u5DEE\uFF08\u6BEB\u79D2\uFF09\uFF1A
 gaussian_timer_title=\u9AD8\u65AF\u968F\u673A\u5B9A\u65F6\u5668
 generate=\u751F\u6210
 generator=\u751F\u6210\u5668\u7C7B\u540D\u79F0
 generator_cnf_msg=\u4E0D\u80FD\u627E\u5230\u751F\u6210\u5668\u7C7B\u3002\u8BF7\u786E\u5B9A\u4F60\u5C06jar\u6587\u4EF6\u653E\u7F6E\u5728/lib\u76EE\u5F55\u4E2D\u3002
 generator_illegal_msg=\u7531\u4E8EIllegalAcessException\uFF0C\u4E0D\u80FD\u8BBF\u95EE\u751F\u6210\u5668\u7C7B\u3002
 generator_instantiate_msg=\u4E0D\u80FD\u521B\u5EFA\u751F\u6210\u5668\u89E3\u6790\u5668\u7684\u5B9E\u4F8B\u3002\u8BF7\u786E\u4FDD\u751F\u6210\u5668\u5B9E\u73B0\u4E86Generator\u63A5\u53E3\u3002
 graph_choose_graphs=\u8981\u663E\u793A\u7684\u56FE\u5F62
 graph_full_results_title=\u56FE\u5F62\u7ED3\u679C
 graph_results_average=\u5E73\u5747
 graph_results_data=\u6570\u636E
 graph_results_deviation=\u504F\u79BB
 graph_results_latest_sample=\u6700\u65B0\u6837\u672C
 graph_results_median=\u4E2D\u503C
 graph_results_no_samples=\u6837\u672C\u6570\u76EE
 graph_results_throughput=\u541E\u5410\u91CF
 graph_results_title=\u56FE\u5F62\u7ED3\u679C
 grouping_add_separators=\u5728\u7EC4\u95F4\u6DFB\u52A0\u5206\u9694
 grouping_in_controllers=\u6BCF\u4E2A\u7EC4\u653E\u5165\u4E00\u4E2A\u65B0\u7684\u63A7\u5236\u5668
 grouping_mode=\u5206\u7EC4\uFF1A
 grouping_no_groups=\u4E0D\u5BF9\u6837\u672C\u5206\u7EC4
 grouping_store_first_only=\u53EA\u5B58\u50A8\u6BCF\u4E2A\u7EC4\u7684\u7B2C\u4E00\u4E2A\u6837\u672C
 header_manager_title=HTTP\u4FE1\u606F\u5934\u7BA1\u7406\u5668
 headers_stored=\u4FE1\u606F\u5934\u5B58\u50A8\u5728\u4FE1\u606F\u5934\u7BA1\u7406\u5668\u4E2D
 help=\u5E2E\u52A9
 http_response_code=HTTP\u578B\u5E94\u4EE3\u7801
 http_url_rewriting_modifier_title=HTTP URL \u91CD\u5199\u4FEE\u9970\u7B26
 http_user_parameter_modifier=HTTP \u7528\u6237\u53C2\u6570\u4FEE\u9970\u7B26
 id_prefix=ID\u524D\u7F00
 id_suffix=ID\u540E\u7F00
 if_controller_label=\u6761\u4EF6
 if_controller_title=\u5982\u679C\uFF08If\uFF09\u63A7\u5236\u5668
 ignore_subcontrollers=\u5FFD\u7565\u8D44\u63A7\u5236\u5668\u5757
 include_equals=\u5305\u542B\u7B49\u4E8E\uFF1F
 increment=\u9012\u589E
 infinite=\u6C38\u8FDC
 insert_after=\u4E4B\u540E\u63D2\u5165
 insert_before=\u4E4B\u524D\u63D2\u5165
 insert_parent=\u63D2\u5165\u4E0A\u7EA7
 interleave_control_title=\u4EA4\u66FF\u63A7\u5236\u5668
 intsum_param_1=\u8981\u6DFB\u52A0\u7684\u7B2C\u4E00\u4E2A\u6574\u6570\u3002
 intsum_param_2=\u8981\u6DFB\u52A0\u7684\u7B2C\u4E8C\u4E2A\u6574\u6570\u2014\u2014\u66F4\u591A\u7684\u6574\u6570\u53EF\u4EE5\u901A\u8FC7\u6DFB\u52A0\u66F4\u591A\u7684\u53C2\u6570\u6765\u6C42\u548C\u3002
 invalid_data=\u65E0\u6548\u6570\u636E
 invalid_mail_server=\u90AE\u4EF6\u670D\u52A1\u5668\u4E0D\u53EF\u77E5\u3002
 iteration_counter_arg_1=TRUE\uFF0C\u6BCF\u4E2A\u7528\u6237\u6709\u81EA\u5DF1\u7684\u8BA1\u6570\u5668\uFF1BFALSE\uFF0C\u4F7F\u7528\u5168\u5C40\u8BA1\u6570\u5668
 iterator_num=\u5FAA\u73AF\u6B21\u6570
 java_request=Java\u8BF7\u6C42
 java_request_defaults=Java\u8BF7\u6C42\u9ED8\u8BA4\u503C
 jndi_config_title=JNDI\u914D\u7F6E
 jndi_lookup_name=\u8FDC\u7A0B\u63A5\u53E3
 jndi_lookup_title=JNDI\u67E5\u8BE2\u914D\u7F6E
 jndi_method_button_invoke=\u8C03\u7528
 jndi_method_button_reflect=\u53CD\u5C04
 jndi_method_home_name=\u672C\u5730\u65B9\u6CD5\u540D\u79F0
 jndi_method_home_parms=\u672C\u5730\u65B9\u6CD5\u53C2\u6570
 jndi_method_name=\u65B9\u6CD5\u914D\u7F6E
 jndi_method_remote_interface_list=\u8FDC\u7A0B\u63A5\u53E3
 jndi_method_remote_name=\u8FDC\u7A0B\u65B9\u6CD5\u540D\u79F0
 jndi_method_remote_parms=\u8FDC\u7A0B\u65B9\u6CD5\u53C2\u6570
 jndi_method_title=\u8FDC\u7A0B\u65B9\u6CD5\u914D\u7F6E
 jndi_testing_title=JNDI\u8BF7\u6C42
 jndi_url_jndi_props=JNDI\u5C5E\u6027
 ja=\u65E5\u8BED
 ldap_sample_title=LDAP\u8BF7\u6C42\u9ED8\u8BA4\u503C
 ldap_testing_title=LDAP\u8BF7\u6C42
 load=\u8F7D\u5165
 log_errors_only=\u4EC5\u65E5\u5FD7\u9519\u8BEF
 log_file=\u65E5\u5FD7\u6587\u4EF6\u4F4D\u7F6E
 log_parser=\u65E5\u5FD7\u89E3\u6790\u5668\u7C7B\u540D
 log_parser_cnf_msg=\u627E\u4E0D\u5230\u7C7B\u3002\u786E\u8BA4\u4F60\u5C06jar\u6587\u4EF6\u653E\u5728\u4E86/lib\u76EE\u5F55\u4E2D\u3002
 log_parser_illegal_msg=\u56E0\u4E3AIllegalAccessException\u4E0D\u80FD\u8BBF\u95EE\u7C7B\u3002
 log_parser_instantiate_msg=\u4E0D\u80FD\u521B\u5EFA\u65E5\u5FD7\u89E3\u6790\u5668\u5B9E\u4F8B\u3002\u786E\u8BA4\u89E3\u6790\u5668\u5B9E\u73B0\u4E86LogParser\u63A5\u53E3\u3002
 log_sampler=Tomcat\u8BBF\u95EE\u65E5\u5FD7\u53D6\u6837\u5668
 logic_controller_title=\u7B80\u5355\u63A7\u5236\u5668
 login_config=\u767B\u9646\u914D\u7F6E
 login_config_element=\u767B\u9646\u914D\u7F6E\u5143\u4EF6/\u7D20
 loop_controller_title=\u5FAA\u73AF\u63A7\u5236\u5668
 looping_control=\u5FAA\u73AF\u63A7\u5236
 lower_bound=\u8F83\u4F4E\u8303\u56F4
 mailer_attributes_panel=\u90AE\u4EF6\u5C5E\u6027
 mailer_error=\u4E0D\u80FD\u53D1\u9001\u90AE\u4EF6\u3002\u8BF7\u4FEE\u6B63\u9519\u8BEF\u3002
 mailer_visualizer_title=\u90AE\u4EF6\u89C2\u5BDF\u4EEA
 match_num_field=\u5339\u914D\u6570\u5B57\uFF080\u4EE3\u8868\u968F\u673A\uFF09\uFF1A
 max=\u6700\u5927\u503C
 maximum_param=\u4E00\u4E2A\u8303\u56F4\u5185\u5141\u8BB8\u7684\u6700\u5927\u503C
 md5hex_assertion_failure=MD5\u603B\u5408\u65AD\u8A00\u9519\u8BEF\uFF1A\u5F97\u5230\u4E86{0}\uFF0C\u4F46\u5E94\u8BE5\u662F{1}
 md5hex_assertion_md5hex_test=\u8981\u65AD\u8A00\u7684MD5Hex
 md5hex_assertion_title=MD5Hex\u65AD\u8A00
 menu_assertions=\u65AD\u8A00
 menu_close=\u5173\u95ED
 menu_config_element=\u914D\u7F6E\u5143\u4EF6
 menu_edit=\u7F16\u8F91
 menu_listener=\u76D1\u542C\u5668
 menu_logic_controller=\u903B\u8F91\u63A7\u5236\u5668
 menu_merge=\u5408\u5E76
 menu_modifiers=\u4FEE\u9970\u7B26
 menu_non_test_elements=\u975E\u6D4B\u8BD5\u5143\u4EF6
 menu_open=\u6253\u5F00
 menu_post_processors=\u540E\u7F6E\u5904\u7406\u5668
 menu_pre_processors=\u524D\u7F6E\u5904\u7406\u5668
 menu_response_based_modifiers=\u57FA\u4E8E\u76F8\u5E94\u7684\u4FEE\u9970\u7B26
 menu_timer=\u5B9A\u65F6\u5668
 metadata=\u539F\u6570\u636E
 method=\u65B9\u6CD5\uFF1A
 mimetype=MIME\u7C7B\u578B
 minimum_param=\u4E00\u4E2A\u8303\u56F4\u5185\u7684\u6700\u5C0F\u503C
 minute=\u5206\u949F
 modification_controller_title=\u4FEE\u6B63\u63A7\u5236\u5668
 modification_manager_title=\u4FEE\u6B63\u7BA1\u7406\u5668
 modify_test=\u4FEE\u6539\u6D4B\u8BD5
 module_controller_title=\u6A21\u5757\u63A7\u5236\u5668
-monitor_equation_active=\u6D3B\u52A8\uFF1A(busy/max)>25%
-monitor_equation_dead=\u975E\u6D3B\u52A8\uFF1A\u6CA1\u6709\u54CD\u5E94
-monitor_equation_healthy=Healthy\:(busy/max)<25%
-monitor_health_title=\u76D1\u89C6\u5668\u7ED3\u679C
-monitor_is_title=\u7528\u4F5C\u76D1\u89C6\u5668
-monitor_label_right_active=\u6D3B\u52A8\u7684
-monitor_label_right_dead=\u975E\u6D3B\u52A8\u7684
-monitor_label_right_warning=\u8B66\u544A
-monitor_legend_load=\u8D1F\u8F7D
-monitor_legend_thread_per=\u7EBF\u7A0B%(busy/max)
-monitor_performance_servers=\u670D\u52A1\u5668
-monitor_performance_tab_title=\u6027\u80FD
-monitor_performance_title=\u6027\u80FD\u56FE
 name=\u540D\u79F0\uFF1A
 new=\u65B0\u5EFA
 no=\u632A\u5A01\u8BED
 number_of_threads=\u7EBF\u7A0B\u6570\uFF1A
 once_only_controller_title=\u4EC5\u4E00\u6B21\u63A7\u5236\u5668
 open=\u6253\u5F00...
 option=\u9009\u9879
 optional_tasks=\u5176\u4ED6\u4EFB\u52A1
 paramtable=\u540C\u8BF7\u6C42\u4E00\u8D77\u53D1\u9001\u53C2\u6570\uFF1A
 password=\u5BC6\u7801
 paste=\u7C98\u8D34
 paste_insert=\u4F5C\u4E3A\u63D2\u5165\u7C98\u8D34
 path=\u8DEF\u5F84\uFF1A
 path_extension_choice=\u8DEF\u5F84\u6269\u5C55\uFF08\u4F7F\u7528";"\u4F5C\u5206\u9694\u7B26\uFF09
 patterns_to_exclude=\u6392\u9664\u6A21\u5F0F
 patterns_to_include=\u5305\u542B\u6A21\u5F0F
 port=\u7AEF\u53E3\uFF1A
 property_default_param=\u9ED8\u8BA4\u503C
 property_edit=\u7F16\u8F91
 property_editor.value_is_invalid_title=\u65E0\u6548\u8F93\u5165
 property_name_param=\u5C5E\u6027\u540D\u79F0
 property_undefined=\u672A\u5B9A\u4E49
 protocol=\u534F\u8BAE\uFF1A
 protocol_java_border=Java\u7C7B
 protocol_java_classname=\u7C7B\u540D\u79F0\uFF1A
 protocol_java_config_tile=\u914D\u7F6EJava\u6837\u672C
 protocol_java_test_title=Java\u6D4B\u8BD5
 proxy_assertions=\u6DFB\u52A0\u65AD\u8A00
 proxy_cl_error=\u5982\u679C\u6307\u5B9A\u4EE3\u7406\u670D\u52A1\u5668\uFF0C\u4E3B\u673A\u548C\u7AEF\u53E3\u5FC5\u987B\u6307\u5B9A
 proxy_headers=\u8BB0\u5F55HTTP\u4FE1\u606F\u5934
 proxy_separators=\u6DFB\u52A0\u5206\u9694\u7B26
 proxy_target=\u76EE\u6807\u63A7\u5236\u5668\uFF1A
 proxy_title=HTTP\u4EE3\u7406\u670D\u52A1\u5668
 random_control_title=\u968F\u673A\u63A7\u5236\u5668
 random_order_control_title=\u968F\u673A\u987A\u5E8F\u63A7\u5236\u5668
 record_controller_title=\u5F55\u5236\u63A7\u5236\u5668
 ref_name_field=\u5F15\u7528\u540D\u79F0\uFF1A
 regex_extractor_title=\u6B63\u5219\u8868\u8FBE\u5F0F\u63D0\u53D6\u5668
 regex_field=\u6B63\u5219\u8868\u8FBE\u5F0F\uFF1A
 regex_source=\u8981\u68C0\u67E5\u7684\u54CD\u5E94\u5B57\u6BB5
 regex_src_body=\u4E3B\u4F53
 regex_src_hdrs=\u4FE1\u606F\u5934
 regexfunc_param_1=\u7528\u4E8E\u4ECE\u524D\u4E00\u4E2A\u8BF7\u6C42\u641C\u7D22\u7ED3\u679C\u7684\u6B63\u5219\u8868\u8FBE\u5F0F
 remote_exit=\u8FDC\u7A0B\u9000\u51FA
 remote_exit_all=\u8FDC\u7A0B\u5168\u90E8\u9000\u51FA
 remote_start=\u8FDC\u7A0B\u542F\u52A8
 remote_start_all=\u8FDC\u7A0B\u5168\u90E8\u542F\u52A8
 remote_stop=\u8FDC\u7A0B\u505C\u6B62
 remote_stop_all=\u8FDC\u7A0B\u5168\u90E8\u505C\u6B62
 remove=\u5220\u9664
 report=\u62A5\u544A
 request_data=\u8BF7\u6C42\u6570\u636E
 restart=\u91CD\u542F
 resultsaver_prefix=\u6587\u4EF6\u540D\u79F0\u524D\u7F00\uFF1A
 resultsaver_title=\u4FDD\u5B58\u54CD\u5E94\u5230\u6587\u4EF6
 root=\u6839
 root_title=\u6839
 run=\u8FD0\u884C
 running_test=\u6B63\u5728\u8FD0\u884C\u7684\u6D4B\u8BD5
 sampler_on_error_action=\u5728\u53D6\u6837\u5668\u9519\u8BEF\u540E\u8981\u6267\u884C\u7684\u52A8\u4F5C
 sampler_on_error_continue=\u7EE7\u7EED
 sampler_on_error_stop_test=\u505C\u6B62\u6D4B\u8BD5
 sampler_on_error_stop_thread=\u505C\u6B62\u7EBF\u7A0B
 save=\u4FDD\u5B58\u6D4B\u8BD5\u8BA1\u5212
 save?=\u4FDD\u5B58\uFF1F
 save_all_as=\u4FDD\u5B58\u6D4B\u8BD5\u8BA1\u5212\u4E3A
 save_as=\u9009\u4E2D\u90E8\u5206\u4FDD\u5B58\u4E3A...
 scheduler=\u8C03\u5EA6\u5668
 scheduler_configuration=\u8C03\u5EA6\u5668\u914D\u7F6E
 search_filter=\u641C\u7D22\u8FC7\u6EE4\u5668
 search_test=\u641C\u7D22\u6D4B\u8BD5
 secure=\u5B89\u5168
 send_file=\u540C\u8BF7\u6C42\u4E00\u8D77\u53D1\u9001\u6587\u4EF6\uFF1A
 send_file_browse=\u6D4F\u89C8...
 send_file_filename_label=\u6587\u4EF6\u540D\u79F0\uFF1A
 send_file_mime_label=MIME\u7C7B\u578B\uFF1A
 send_file_param_name_label=\u53C2\u6570\u540D\u79F0\uFF1A
 server=\u670D\u52A1\u5668\u540D\u79F0\u6216IP\uFF1A
 servername=\u670D\u52A1\u5668\u540D\u79F0\uFF1A
 session_argument_name=\u4F1A\u8BDD\u53C2\u6570\u540D\u79F0\uFF1A
 shutdown=\u5173\u95ED
 simple_config_element=\u7B80\u5355\u914D\u7F6E\u5143\u4EF6
 size_assertion_comparator_label=\u6BD4\u8F83\u7C7B\u578B
 size_assertion_input_error=\u8BF7\u8F93\u5165\u4E00\u4E2A\u6709\u6548\u7684\u6B63\u6574\u6570\u3002
 size_assertion_label=\u5B57\u8282\u5927\u5C0F\uFF1A
 soap_action=Soap\u52A8\u4F5C
 ssl_alias_prompt=\u8BF7\u8F93\u5165\u9996\u9009\u7684\u522B\u540D
 ssl_alias_select=\u4E3A\u6D4B\u8BD5\u9009\u62E9\u4F60\u7684\u522B\u540D
 ssl_alias_title=\u5BA2\u6237\u7AEF\u522B\u540D
 ssl_pass_prompt=\u8BF7\u8F93\u5165\u4F60\u7684\u5BC6\u7801
 ssl_port=SSL\u7AEF\u53E3
 sslmanager=SSL\u7BA1\u7406\u5668
 start=\u542F\u52A8
 starttime=\u542F\u52A8\u65F6\u95F4
 stop=\u505C\u6B62
 stopping_test=\u505C\u6B62\u5168\u90E8\u6D4B\u8BD5\u7EBF\u7A0B\u3002\u8BF7\u8010\u5FC3\u7B49\u5F85\u3002
 stopping_test_title=\u6B63\u5728\u505C\u6B62\u6D4B\u8BD5
 string_from_file_file_name=\u8F93\u5165\u6587\u4EF6\u7684\u5168\u8DEF\u5F84
 summariser_title=\u751F\u6210\u6982\u8981\u7ED3\u679C
 tcp_config_title=TCP\u53D6\u6837\u5668\u914D\u7F6E
 tcp_nodelay=\u8BBE\u7F6E\u65E0\u5EF6\u8FDF
 tcp_port=\u7AEF\u53E3\u53F7\uFF1A
 tcp_request_data=\u8981\u53D1\u9001\u7684\u6587\u672C
 tcp_sample_title=TCP\u53D6\u6837\u5668
 tcp_timeout=\u8D85\u65F6\uFF1A
 template_field=\u6A21\u677F\uFF1A
 test=\u6D4B\u8BD5
 test_configuration=\u6D4B\u8BD5\u914D\u7F6E
 test_plan=\u6D4B\u8BD5\u8BA1\u5212
 testplan.serialized=\u72EC\u7ACB\u8FD0\u884C\u6BCF\u4E2A\u7EBF\u7A0B\u7EC4\uFF08\u4F8B\u5982\u5728\u4E00\u4E2A\u7EC4\u8FD0\u884C\u7ED3\u675F\u540E\u542F\u52A8\u4E0B\u4E00\u4E2A\uFF09
 testplan_comments=\u6CE8\u91CA\uFF1A
 thread_delay_properties=\u7EBF\u7A0B\u5EF6\u8FDF\u5C5E\u6027
 thread_group_title=\u7EBF\u7A0B\u7EC4
 thread_properties=\u7EBF\u7A0B\u5C5E\u6027
 threadgroup=\u7EBF\u7A0B\u7EC4
 throughput_control_title=\u541E\u5410\u91CF\u63A7\u5236\u5668
 throughput_control_tplabel=\u541E\u5410\u91CF
 transaction_controller_title=\u4E8B\u52A1\u63A7\u5236\u5668
 update_per_iter=\u6BCF\u6B21\u8DCC\u4EE3\u66F4\u65B0\u4E00\u6B21
 upload=\u6587\u4EF6\u4E0A\u8F7D
 upper_bound=\u4E0A\u9650
 url_config_protocol=\u534F\u8BAE\uFF1A
 url_config_title=HTTP\u8BF7\u6C42\u9ED8\u8BA4\u503C
 use_recording_controller=\u4F7F\u7528\u5F55\u5236\u63A7\u5236\u5668
 user=\u7528\u6237
 user_defined_test=\u7528\u6237\u5B9A\u4E49\u7684\u6D4B\u8BD5
 user_defined_variables=\u7528\u6237\u5B9A\u4E49\u7684\u53D8\u91CF
 user_parameters_table=\u53C2\u6570
 user_parameters_title=\u7528\u6237\u53C2\u6570
 username=\u7528\u6237\u540D
 value=\u503C
 var_name=\u5F15\u7528\u540D\u79F0
 view_graph_tree_title=\u5BDF\u770B\u7ED3\u679C\u6811
 view_results_in_table=\u7528\u8868\u683C\u5BDF\u770B\u7ED3\u679C
 view_results_tab_request=\u8BF7\u6C42
 view_results_tab_response=\u54CD\u5E94\u6570\u636E
 view_results_tab_sampler=\u53D6\u6837\u5668\u7ED3\u679C
 view_results_title=\u5BDF\u770B\u7ED3\u679C
 view_results_tree_title=\u5BDF\u770B\u7ED3\u679C\u6811
 web_request=HTTP\u8BF7\u6C42
 web_server=Web\u670D\u52A1\u5668
 web_server_domain=\u670D\u52A1\u5668\u540D\u79F0\u6216IP\uFF1A
 web_server_port=\u7AEF\u53E3\u53F7\uFF1A
 web_testing_retrieve_images=\u4ECEHTML\u6587\u4EF6\u83B7\u53D6\u6240\u6709\u5185\u542B\u7684\u8D44\u6E90
 web_testing_title=HTTP\u8BF7\u6C42
 workbench_title=\u5DE5\u4F5C\u53F0
 xml_assertion_title=XML\u65AD\u8A00
 you_must_enter_a_valid_number=\u5FC5\u987B\u8F93\u5165\u6709\u6548\u7684\u6570\u5B57
 
diff --git a/src/core/org/apache/jmeter/resources/messages_zh_TW.properties b/src/core/org/apache/jmeter/resources/messages_zh_TW.properties
index 39f3f5380..cbe83250f 100644
--- a/src/core/org/apache/jmeter/resources/messages_zh_TW.properties
+++ b/src/core/org/apache/jmeter/resources/messages_zh_TW.properties
@@ -1,626 +1,607 @@
 #   Licensed to the Apache Software Foundation (ASF) under one or more
 #   contributor license agreements.  See the NOTICE file distributed with
 #   this work for additional information regarding copyright ownership.
 #   The ASF licenses this file to You under the Apache License, Version 2.0
 #   (the "License"); you may not use this file except in compliance with
 #   the License.  You may obtain a copy of the License at
 # 
 #       http://www.apache.org/licenses/LICENSE-2.0
 # 
 #   Unless required by applicable law or agreed to in writing, software
 #   distributed under the License is distributed on an "AS IS" BASIS,
 #   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 #   See the License for the specific language governing permissions and
 #   limitations under the License.
 
 #Stored by I18NEdit, may be edited!
 about=\u95DC\u65BC Apache JMeter
 add=\u65B0\u589E
 add_as_child=\u65B0\u589E\u70BA\u5B50\u5143\u4EF6
 add_parameter=\u65B0\u589E\u53C3\u6578
 add_pattern=\u65B0\u589E\u6A23\u5F0F\:
 add_test=\u65B0\u589E\u6E2C\u8A66
 add_user=\u65B0\u589E\u4F7F\u7528\u8005
 add_value=\u65B0\u589E\u503C
 addtest=\u65B0\u589E\u6E2C\u8A66
 aggregate_report=\u5F59\u6574\u5831\u544A
 aggregate_report_bandwidth=\u6BCF\u79D2\u4EDF\u4F4D\u5143\u7D44
 aggregate_report_count=\u53D6\u6A23\u6578
 aggregate_report_error%=\u932F\u8AA4\u7387
 aggregate_report_max=\u6700\u5927\u503C
 aggregate_report_median=\u4E2D\u9593\u503C
 aggregate_report_min=\u6700\u5C0F\u503C
 aggregate_report_rate=\u8655\u7406\u91CF
 aggregate_report_total_label=\u7E3D\u8A08
 als_message=\u8A3B\uFF1AAccess Log Parser \u8A2D\u8A08\u6210\u901A\u7528\uFF0C\u4F60\u53EF\u4EE5\u81EA\u884C\u52A0\u5F37\u529F\u80FD
 als_message2=\u8981\u5BE6\u4F5C LogParser\uFF0C\u4E26\u5C07 jar \u653E\u5728
 als_message3=/lib \u76EE\u9304\uFF0C\u7136\u5F8C\u5728\u53D6\u6A23\u4E2D\u8F38\u5165 class \u540D\u7A31
 analyze=\u5206\u6790\u8CC7\u6599\u6A94\u6848\u4E2D...
 anchor_modifier_title=HTML \u93C8\u7D50\u5256\u6790\u5668
 argument_must_not_be_negative=\u53C3\u6578\u4E0D\u53EF\u4EE5\u70BA\u8CA0\u503C\uFF01
 assertion_assume_success=\u5FFD\u7565\u72C0\u614B
 assertion_code_resp=\u56DE\u8986\u4EE3\u78BC
 assertion_contains=\u5305\u542B
 assertion_matches=\u76F8\u7B26
 assertion_message_resp=\u56DE\u8986\u8A0A\u606F
 assertion_not=\u975E
 assertion_pattern_match_rules=\u6A23\u5F0F\u6BD4\u5C0D\u898F\u5247
 assertion_patterns_to_test=\u6E2C\u8A66\u7528\u6A23\u5F0F
 assertion_resp_field=\u9808\u6AA2\u67E5\u7684\u56DE\u8986\u6B04\u4F4D
 assertion_text_resp=\u56DE\u8986\u6587\u5B57
 assertion_textarea_label=\u9A57\u8B49\uFF1A
 assertion_title=\u9A57\u8B49\u56DE\u8986
 assertion_url_samp=\u53D6\u6A23\u7684 URL
 assertion_visualizer_title=\u9A57\u8B49\u7D50\u679C
 attribute=\u5C6C\u6027
 attrs=\u5C6C\u6027
 auth_manager_title=HTTP \u6388\u6B0A\u7BA1\u7406\u54E1
 auths_stored=\u6388\u6B0A\u7BA1\u7406\u54E1\u4E2D\u8A18\u8F09\u7684\u6388\u6B0A\u8CC7\u6599
 average=\u5E73\u5747\u503C
 bind=\u57F7\u884C\u7DD2\u9023\u7D50
 browse=\u700F\u89BD...
 bsf_sampler_title=BSF \u53D6\u6A23
 bsf_script=\u8173\u672C
 bsf_script_file=\u8173\u672C\u6A94
 bsf_script_language=\u8173\u672C\u8A9E\u8A00\uFF1A
 bsf_script_parameters=\u50B3\u7D66\u8173\u672C(\u6A94\u6848)\u7684\u53C3\u6578\uFF1A
 bsh_assertion_script=\u8173\u672C
 bsh_assertion_script_variables=\u56DE\u8986[\u8CC7\u6599|\u4EE3\u78BC|\u8A0A\u606F|\u8868\u982D], \u8981\u6C42\u8868\u982D, \u53D6\u6A23\u6A19\u984C, \u53D6\u6A23\u8CC7\u6599
 bsh_assertion_title=BeanShell \u9A57\u8B49
 bsh_function_expression=\u88AB\u9A57\u8B49\u7684\u8868\u793A\u5F0F
 bsh_sampler_title=BeanShell \u53D6\u6A23
 bsh_script=\u8173\u672C(\u8B8A\u6578\uFF1A\u53D6\u6A23\u7D50\u679C,\u56DE\u8986\u4EE3\u78BC,\u56DE\u8986\u8A0A\u606F,\u662F\u5426\u6210\u529F,\u6A19\u984C,\u6A94\u540D)
 bsh_script_file=\u8173\u672C\u6A94\u6848
 bsh_script_parameters=\u53C3\u6578(->\u5B57\u4E32\u53C3\u6578\u548C String []bsh.args)
 busy_testing=\u6211\u6B63\u5FD9\u8457\u6E2C\u5462, \u8981\u6539\u8A2D\u5B9A\u503C\u8ACB\u5148\u505C\u6B62\u6E2C\u8A66
 cancel=\u53D6\u6D88
 cancel_exit_to_save=\u5C1A\u672A\u5132\u5B58, \u5148\u5132\u5B58\u518D\u96E2\u958B\u597D\u55CE\uFF1F
 cancel_new_to_save=\u5C1A\u672A\u5132\u5B58, \u5148\u5132\u5B58\u518D\u6E05\u9664\u597D\u55CE\uFF1F
 choose_function=\u9078\u64C7\u4E00\u500B\u529F\u80FD
 choose_language=\u9078\u64C7\u4E00\u7A2E\u8A9E\u8A00
 clear=\u6E05\u9664
 clear_all=\u5168\u90E8\u6E05\u9664
 clear_cookies_per_iter=\u6BCF\u56DE\u5408\u90FD\u5148\u6E05\u9664 Cookies\uFF1F
 column_delete_disallowed=\u6B64\u6B04\u4F4D\u4E0D\u5141\u8A31\u522A\u9664
 compare=\u6BD4\u8F03
 comparefilt=\u6BD4\u8F03\u904E\u6FFE\u5668
 config_element=\u8A2D\u5B9A
 config_save_settings=\u8A2D\u5B9A
 constant_throughput_timer_memo=\u70BA\u4F7F\u8655\u7406\u91CF\u70BA\u56FA\u5B9A\u503C, \u5728\u53D6\u6A23\u9593\u52A0\u5165\u5EF6\u9072\u6642\u9593
 constant_timer_delay=\u5EF6\u9072\u6642\u9593(\u55AE\u4F4D\u662F\u5343\u5206\u4E4B\u4E00\u79D2)
 constant_timer_memo=\u5728\u53D6\u6A23\u9593\u52A0\u5165\u56FA\u5B9A\u7684\u5EF6\u9072\u6642\u9593
 constant_timer_title=\u56FA\u5B9A\u503C\u8A08\u6642\u5668
 controller=\u63A7\u5236\u5668
 cookie_manager_title=HTTP Cookie \u7BA1\u7406\u54E1
 cookies_stored=Cookie \u7BA1\u7406\u54E1\u4E2D\u8A18\u9304\u7684 Cookies
 copy=\u8907\u88FD
 counter_config_title=\u8A08\u6578\u5668
 counter_per_user=\u6BCF\u500B\u4F7F\u7528\u8005\u7684\u8A08\u6578\u5668
 countlim=\u5927\u5C0F\u9650\u5236
 cut=\u526A\u4E0B
 cut_paste_function=\u8907\u88FD\u548C\u8CBC\u4E0A\u5B57\u4E32
 database_conn_pool_max_usage=\u6BCF\u500B\u9023\u7DDA\u6700\u5927\u4F7F\u7528\u91CF\uFF1A
 database_conn_pool_props=\u8CC7\u6599\u5EAB\u9023\u7DDA\u6C60
 database_conn_pool_size=\u8CC7\u6599\u5EAB\u9023\u7DDA\u6C60\u4E2D\u7684\u9023\u7DDA\u6578\uFF1A
 database_conn_pool_title=JDBC \u8CC7\u6599\u5EAB\u9023\u7DDA\u6C60\u9810\u8A2D\u503C
 database_driver_class=\u9A45\u52D5\u7A0B\u5F0F Class \uFF1A
 database_login_title=JDBC \u8CC7\u6599\u5EAB\u767B\u5165\u9810\u8A2D\u503C
 database_sql_query_string=SQL \u654D\u8FF0\uFF1A
 database_sql_query_title=JDBC SQL \u654D\u8FF0\u9810\u8A2D\u503C
 database_testing_title=JDBC \u8981\u6C42
 database_url=JDBC URL\uFF1A
 database_url_jdbc_props=\u8CC7\u6599\u5EAB URL \u548C JDBC \u9A45\u52D5\u7A0B\u5F0F
 de=\u5FB7\u570B
 default_parameters=\u9810\u8A2D\u53C3\u6578
 default_value_field=\u9810\u8A2D\u503C\uFF1A
 delay=\u555F\u52D5\u5EF6\u9072\u6642\u9593(\u79D2)
 delete=\u522A\u9664
 delete_parameter=\u522A\u9664\u503C
 delete_test=\u522A\u9664\u6E2C\u8A66
 delete_user=\u522A\u9664\u4F7F\u7528\u8005
 deltest=\u522A\u9664\u6E2C\u8A66
 deref=\u4E0D\u5F15\u7528\u5225\u540D
 disable=\u4E0D\u81F4\u80FD
 distribution_graph_title=\u5206\u6563\u5716\u5F62(alpha)
 distribution_note1=\u672C\u5716\u65BC\u6BCF10\u500B\u53D6\u6A23\u9032\u884C\u66F4\u65B0
 domain=\u7DB2\u57DF
 done=\u5B8C\u6210
 duration=\u671F\u9593
 duration_assertion_duration_test=\u88AB\u9A57\u8B49\u7684\u671F\u9593
 duration_assertion_failure=\u6B64\u52D5\u4F5C\u592A\u4E45\u4E86,\u61C9\u8A72\u5728{1}\u5FAE\u79D2\u4E4B\u5167\u5B8C\u6210,\u537B\u82B1\u4E86{0}\u5FAE\u79D2
 duration_assertion_input_error=\u8ACB\u8F38\u5165\u5408\u6CD5\u6B63\u6574\u6578\u503C
 duration_assertion_label=\u671F\u9593(\u5FAE\u79D2)
 duration_assertion_title=\u9A57\u8B49\u671F\u9593
 edit=\u7DE8\u8F2F
 email_results_title=\u96FB\u90F5\u7D50\u679C
 en=\u82F1\u6587
 enable=\u555F\u52D5
 encode?=\u7DE8\u78BC\uFF1F
 encoded_value=URL \u7DE8\u78BC\u503C
 endtime=\u7D50\u675F\u6642\u9593
 entry_dn=\u9032\u5165 DN
 entrydn=\u9032\u5165 DN
 error_loading_help=\u8F09\u5165\u8F14\u52A9\u8AAA\u660E\u5931\u6557
 error_occurred=\u767C\u751F\u932F\u8AA4
 example_data=\u8CC7\u6599\u7BC4\u4F8B
 example_title=\u53D6\u6A23\u7BC4\u4F8B
 exit=\u96E2\u958B
 expiration=\u5230\u671F
 field_name=\u6B04\u4F4D\u540D\u7A31
 file=\u6A94\u6848
 file_already_in_use=\u6A94\u6848\u5DF2\u5728\u4F7F\u7528\u4E2D
 file_visualizer_append=\u52A0\u5165\u65E2\u6709\u7684\u6A94\u6848
 file_visualizer_auto_flush=\u53D6\u5F97\u6BCF\u8CC7\u6599\u5F8C\u81EA\u52D5 Flush
 file_visualizer_browse=\u700F\u89BD
 file_visualizer_close=\u95DC\u9589
 file_visualizer_file_options=\u6A94\u6848\u9078\u9805
 file_visualizer_filename=\u6A94\u540D
 file_visualizer_missing_filename=\u6A94\u540D\u672A\u6307\u5B9A
 file_visualizer_open=\u958B\u555F
 file_visualizer_output_file=\u5C07\u5168\u90E8\u8CC7\u6599\u5BEB\u6210\u6A94\u6848
 file_visualizer_submit_data=\u5305\u542B\u5DF2\u50B3\u9001\u8CC7\u6599
 file_visualizer_title=\u6A94\u6848\u5831\u544A\u54E1
 file_visualizer_verbose=\u700F\u89BD\u8F38\u51FA
 filename=\u6A94\u540D
 follow_redirects=\u8DDF\u96A8\u91CD\u5C0E
 follow_redirects_auto=\u81EA\u52D5\u8DDF\u96A8\u91CD\u5C0E
 foreach_controller_title=ForEach \u63A7\u5236\u5668
 foreach_input=\u8B8A\u6578\u524D\u7F6E\u5B57\u4E32
 foreach_output=\u8F38\u51FA\u8B8A\u6578\u540D\u7A31
 foreach_use_separator=\u5728\u7DE8\u865F\u524D\u52A0\u4E0A\u5E95\u7DDA\u7B26\u865F\uFF1F
 fr=\u6CD5\u6587
 ftp_sample_title=FTP \u8981\u6C42\u9810\u8A2D\u503C
 ftp_testing_title=FTP \u8981\u6C42
 function_dialog_menu_item=\u529F\u80FD\u8F14\u52A9\u8AAA\u660E\u5C0D\u8A71
 function_helper_title=\u529F\u80FD\u8F14\u52A9\u8AAA\u660E
 function_name_param=\u529F\u80FD\u540D\u7A31. \u6703\u51FA\u73FE\u5728\u6574\u4EFD\u6E2C\u8A66\u8A08\u756B\u4E2D
 function_params=\u529F\u80FD\u53C3\u6578
 functional_mode=\u529F\u80FD\u6027\u6E2C\u8A66\u6A21\u5F0F
 functional_mode_explanation=\u53EA\u6709\u5728\u9700\u8981\u5C07\u6240\u6709\u56DE\u8986\u90FD\u5B58\u6210\u6A94\u6848\u6642\u624D\u9078\u7528\u9019\u7A2E\u6A21\u5F0F\n\n\u9078\u7528\u9019\u7A2E\u6A21\u5F0F\u5C0D\u6548\u80FD\u6703\u6709\u986F\u8457\u5F71\u97FF
 gaussian_timer_delay=\u5B9A\u503C\u5EF6\u9072\u5DEE(\u5FAE\u79D2)
 gaussian_timer_memo=\u4EE5\u9AD8\u65AF\u5206\u914D\u6CD5\u52A0\u5165\u96A8\u6A5F\u5EF6\u9072\u6642\u9593
 gaussian_timer_range=\u96E2\u5DEE(\u5FAE\u79D2)
 gaussian_timer_title=\u9AD8\u65AF\u96A8\u6A5F\u8A08\u6642\u5668
 generate=\u7522\u751F
 generator=\u9AD8\u65AF\u6CD5 class \u540D\u7A31
 generator_cnf_msg=\u627E\u4E0D\u5230\u7522\u751F\u5668 class. \u8ACB\u78BA\u8A8D jar \u6A94\u653E\u5728 /lib \u76EE\u9304
 generator_illegal_msg=\u7121\u6CD5\u5B58\u53D6\u7522\u751F\u5668 class (iIllegalAcessException)
 generator_instantiate_msg=\u7121\u6CD5\u4F7F\u7528\u7522\u751F\u5668, \u8ACB\u78BA\u8A8D\u5DF2\u5BE6\u4F5C Generator \u4ECB\u9762
 graph_choose_graphs=\u8981\u986F\u793A\u7684\u5716\u5F62
 graph_full_results_title=\u5B8C\u6574\u7D50\u679C\u5716\u5F62
 graph_results_average=\u5E73\u5747
 graph_results_data=\u8CC7\u6599
 graph_results_deviation=\u8B8A\u7570\u5DEE
 graph_results_latest_sample=\u6700\u8FD1\u7684\u53D6\u6A23
 graph_results_median=\u4E2D\u9593\u503C
 graph_results_ms=\u5FAE\u79D2
 graph_results_no_samples=\u53D6\u6A23\u7684\u7DE8\u865F
 graph_results_throughput=\u8655\u7406\u91CF
 graph_results_title=\u7D50\u679C\u5716\u5F62
 grouping_add_separators=\u7FA4\u7D44\u9593\u7684\u5206\u9694\u7DDA
 grouping_in_controllers=\u6BCF\u500B\u7FA4\u7D44\u5206\u653E\u81F3\u4E0D\u540C\u63A7\u5236\u5668
 grouping_mode=\u7FA4\u7D44\uFF1A
 grouping_no_groups=\u4E0D\u8981\u5C07\u53D6\u6A23\u5206\u7FA4\u7D44
 grouping_store_first_only=\u50C5\u5132\u5B58\u6BCF\u500B\u7FA4\u7D44\u7684\u7B2C\u4E00\u500B\u53D6\u6A23
 header_manager_title=HTTP \u6A19\u982D\u7BA1\u7406\u54E1
 headers_stored=\u6A19\u982D\u7BA1\u7406\u54E1\u4E2D\u5132\u5B58\u7684\u6A19\u982D\u8CC7\u6599
 help=\u8F14\u52A9\u8AAA\u660E
 html_assertion_label=HTML \u9A57\u8B49
 html_assertion_title=HTML \u9A57\u8B49
 http_response_code=HTTP \u56DE\u61C9\u4EE3\u78BC
 http_url_rewriting_modifier_title=HTTP URL \u91CD\u5C0E\u4FEE\u98FE\u8A5E
 http_user_parameter_modifier=HTTP \u4F7F\u7528\u8005\u53C3\u6578\u4FEE\u98FE\u8A5E
 id_prefix=ID \u524D\u7F6E\u5B57\u4E32
 id_suffix=ID \u5F8C\u7F6E\u5B57\u4E32
 if_controller_label=\u689D\u4EF6
 if_controller_title=\u82E5...\u63A7\u5236\u5668
 ignore_subcontrollers=\u5FFD\u7565\u5B50\u63A7\u5236\u5668\u5167\u5BB9
 include_equals=\u5305\u542B\u76F8\u7B49\uFF1F
 increment=\u589E\u91CF
 infinite=\u6C38\u4E45
 insert_after=\u52A0\u5728\u4E4B\u5F8C
 insert_before=\u52A0\u5728\u4E4B\u524D
 insert_parent=\u52A0\u5230\u4E0A\u4E00\u968E\u5C64
 interleave_control_title=\u4EA4\u932F\u63A7\u5236\u5668
 intsum_param_1=\u7B2C\u4E00\u500B\u6574\u6578\u53C3\u6578
 intsum_param_2=\u7B2C\u4E8C\u500B\u6574\u6578\u53C3\u6578\u2500\u5176\u4ED6\u7684\u6574\u6578\u53EF\u4EE5\u7531\u65B0\u589E\u7684\u53C3\u6578\u52A0\u7E3D
 invalid_data=\u7121\u6548\u8CC7\u6599
 invalid_mail=\u50B3\u9001\u96FB\u90F5\u6642\u767C\u751F\u932F\u8AA4
 invalid_mail_address=\u5075\u6E2C\u5230\u4E00\u500B\u4EE5\u4E0A\u7684\u7121\u6548\u96FB\u90F5\u5730\u5740
 invalid_mail_server=\u7121\u6CD5\u9023\u4E0A\u96FB\u90F5\u4F3A\u670D\u5668(\u8A73\u898BJMeter\u6B77\u7A0B\u6A94)
 iteration_counter_arg_1=\u6BCF\u500B\u4F7F\u7528\u8005\u4F7F\u7528\u4E0D\u540C\u8A08\u6578\u5668(TRUE)\u6216\u5171\u7528\u4E00\u500B\u5168\u57DF\u8A08\u6578\u5668(FALSE)
 iterator_num=\u8FF4\u5708\u6B21\u6578\uFF1A
 java_request=Java \u8981\u6C42
 java_request_defaults=Java \u8981\u6C42\u9810\u8A2D\u503C
 jms_auth_required=\u5FC5\u8981
 jms_client_caption=\u63A5\u6536\u7AEF\u900F\u904ETopicSubscriber.receive()\u63A5\u807D\u8A0A\u606F
 jms_client_caption2=MessageListener\u900F\u904EonMessage(Message\u4ECB\u9762\u63A5\u807D\u8A0A\u606F
 jms_client_type=\u7528\u6236\u7AEF
 jms_communication_style=\u6E9D\u901A\u6A21\u5F0F
 jms_concrete_connection_factory=\u5805\u56FA\u9023\u7DDA\u5DE5\u5EE0
 jms_config=\u8A2D\u7F6E
 jms_config_title=JMS \u8A2D\u7F6E
 jms_connection_factory=\u9023\u7DDA\u5DE5\u5EE0
 jms_file=\u6A94\u6848
 jms_initial_context_factory=JNDI \u521D\u59CB\u672C\u6587\u5DE5\u5EE0
 jms_itertions=\u8981\u7D2F\u8A08\u7684\u53D6\u6A23\u6578
 jms_jndi_defaults_title=JNDI \u9810\u8A2D\u914D\u7F6E
 jms_jndi_props=JNDI \u5C6C\u6027
 jms_message_title=\u8A0A\u606F
 jms_message_type=\u8A0A\u606F\u7A2E\u985E
 jms_msg_content=\u8A0A\u606F\u5167\u5BB9
 jms_object_message=\u7269\u4EF6\u8A0A\u606F
 jms_props=JMS \u5C6C\u6027
 jms_provider_url=\u63D0\u4F9B\u8005 URL
 jms_publisher=JMS \u767C\u4F48\u8005
 jms_pwd=\u5BC6\u78BC
 jms_queue=\u4F47\u5217
 jms_queue_connection_factory=\u4F47\u5217\u9023\u7DDA\u5DE5\u5EE0
 jms_queueing=JMS \u8CC7\u6E90
 jms_random_file=\u96A8\u6A5F\u6A94\u6848
 jms_receive_queue=\u63A5\u6536\u4F47\u5217
 jms_request=\u55AE\u5411\u8981\u6C42
 jms_requestreply=\u8981\u6C42\u4E14\u56DE\u8986
 jms_sample_title=JMS \u9810\u8A2D\u8981\u6C42
 jms_send_queue=\u50B3\u9001\u4F47\u5217
 jms_subscriber_on_message=\u4F7F\u7528 MessageListener.onMessage()
 jms_subscriber_receive=\u4F7F\u7528 TopicSubscriber.receive()
 jms_subscriber_title=JMS \u8A02\u95B1\u8005
 jms_testing_title=\u8981\u6C42\u8A0A\u606F
 jms_text_message=\u6587\u5B57\u8A0A\u606F
 jms_timeout=\u903E\u6642
 jms_topic=\u984C\u76EE
 jms_use_file=\u5F9E\u6A94\u6848
 jms_use_properties_file=\u4F7F\u7528 jndi.properties \u6A94
 jms_use_random_file=\u96A8\u6A5F\u6A94\u6848
 jms_use_text=\u6587\u5B57\u5340\u57DF
 jms_user=\u4F7F\u7528\u8005
 jndi_config_title=JNDI \u914D\u7F6E
 jndi_lookup_name=\u9060\u7AEF\u4ECB\u9762
 jndi_lookup_title=JNDI \u5C0B\u67E5\u914D\u7F6E
 jndi_method_button_invoke=\u8D77\u52D5
 jndi_method_button_reflect=\u53CD\u6620
 jndi_method_home_name=\u672C\u7AEF\u65B9\u6CD5
 jndi_method_home_parms=\u672C\u7AEF\u65B9\u6CD5\u53C3\u6578
 jndi_method_name=\u65B9\u6CD5\u914D\u7F6E
 jndi_method_remote_interface_list=\u9060\u7AEF\u4ECB\u9762
 jndi_method_remote_name=\u9060\u7AEF\u65B9\u6CD5\u540D\u7A31
 jndi_method_remote_parms=\u9060\u7AEF\u65B9\u6CD5\u53C3\u6578
 jndi_method_title=\u9060\u7AEF\u65B9\u6CD5\u914D\u7F6E
 jndi_testing_title=JNDI \u8981\u6C42
 jndi_url_jndi_props=JNDI \u5C6C\u6027
 ja=\u65E5\u6587
 ldap_argument_list=LDAP\u53C3\u6578\u5217\u8868
 ldap_sample_title=LDAP \u8981\u6C42\u9810\u8A2D\u503C
 ldap_testing_title=LDAP \u8981\u6C42
 ldapext_sample_title=LDAP \u5EF6\u4F38\u8981\u6C42\u9810\u8A2D\u503C
 ldapext_testing_title=LDAP \u5EF6\u4F38\u8981\u6C42
 load=\u8F09\u5165
 log_errors_only=\u53EA\u8A18\u9304\u932F\u8AA4
 log_file=\u6B77\u7A0B\u6A94\u4F4D\u7F6E
 log_parser=\u6B77\u7A0B\u6A94\u5256\u6790\u7A0B\u5F0F
 log_parser_cnf_msg=\u627E\u4E0D\u5230\u8A72 class, \u8ACB\u78BA\u5B9A jar \u6A94\u653E\u5728 /lib \u76EE\u9304\u4E0B
 log_parser_illegal_msg=\u7121\u6CD5\u5B58\u53D6 class (IllegalAcessException)
 log_parser_instantiate_msg=\u7121\u6CD5\u5EFA\u7ACB log parser. \u8ACB\u5B9A\u6709\u5BE6\u4F5C LogParser \u4ECB\u9762
 log_sampler=Tomcat \u5B58\u53D6\u8A18\u9304\u5256\u6790\u5668
 logic_controller_title=\u7C21\u6613\u63A7\u5236\u5668
 login_config=\u767B\u5165\u914D\u7F6E
 login_config_element=\u767B\u5165\u914D\u7F6E\u5143\u7D20
 loop_controller_title=\u8FF4\u5708\u63A7\u5236\u5668
 looping_control=\u8FF4\u5708\u63A7\u5236
 lower_bound=\u4F4E\u9650
 mail_reader_account=\u4F7F\u7528\u8005
 mail_reader_all_messages=\u5168\u90E8
 mail_reader_delete=\u5F9E\u4F3A\u670D\u5668\u522A\u9664
 mail_reader_folder=\u8CC7\u6599\u593E
 mail_reader_num_messages=\u5F85\u63A5\u6536\u8A0A\u606F\u6578
 mail_reader_password=\u5BC6\u78BC
 mail_reader_server=\u4F3A\u670D\u5668
 mail_reader_server_type=\u4F3A\u670D\u5668\u7A2E\u985E
 mail_reader_title=\u90F5\u4EF6\u8B80\u53D6\u8005\u53D6\u6A23
 mail_sent=\u90F5\u4EF6\u50B3\u9001\u6210\u529F
 mailer_attributes_panel=\u90F5\u5BC4\u5C6C\u6027
 mailer_error=\u7121\u6CD5\u5BC4\u51FA. \u8ACB\u66F4\u6B63\u932F\u8AA4\u503C
 mailer_visualizer_title=\u90F5\u4EF6\u8996\u89BA\u5316
 match_num_field=\u7B26\u5408\u6578\u5B57(0\u8868\u793A\u96A8\u6A5F)
 max=\u6700\u5927\u503C
 maximum_param=\u5141\u8A31\u7BC4\u570D\u4E2D\u7684\u6700\u5927\u503C
 md5hex_assertion_failure=\u9A57\u8B49 MD5 \u932F\u8AA4,\u61C9\u8A72\u662F{1}\u537B\u5F97\u5230{0}
 md5hex_assertion_md5hex_test=\u88AB\u9A57\u8B49\u7684 MD5Hex
 md5hex_assertion_title=MD5Hex \u9A57\u8B49
 menu_assertions=\u9A57\u8B49
 menu_close=\u95DC\u9589
 menu_config_element=\u8A2D\u5B9A\u5143\u7D20
 menu_edit=\u7DE8\u8F2F
 menu_generative_controller=\u53D6\u6A23
 menu_listener=\u63A5\u807D
 menu_logic_controller=\u908F\u8F2F\u63A7\u5236\u5668
 menu_merge=\u5408\u4F75
 menu_modifiers=\u4FEE\u98FE\u5143
 menu_non_test_elements=\u975E\u6E2C\u8A66\u5143\u7D20
 menu_open=\u958B\u555F
 menu_post_processors=\u5F8C\u7F6E\u8655\u7406\u5668
 menu_pre_processors=\u524D\u7F6E\u8655\u7406\u5668
 menu_response_based_modifiers=\u4EE5\u56DE\u8986\u70BA\u57FA\u6E96\u7684\u4FEE\u98FE\u5143
 menu_timer=\u8A08\u6642\u5668
 metadata=\u8CC7\u6599\u5B9A\u7FA9
 method=\u65B9\u6CD5
 mimetype=MIME\u7A2E\u985E
 minimum_param=\u5141\u8A31\u7BC4\u570D\u4E2D\u7684\u6700\u5C0F\u503C
 minute=\u5206\u9418
 modddn=\u820A\u8F38\u5165\u540D\u7A31
 modification_controller_title=\u4FEE\u98FE\u63A7\u5236\u5668
 modification_manager_title=\u4FEE\u98FE\u7BA1\u7406\u54E1
 modify_test=\u4FEE\u98FE\u6E2C\u8A66
 modtest=\u4FEE\u98FE\u6E2C\u8A66
 module_controller_title=\u6A21\u7D44\u63A7\u5236\u5668
-monitor_equation_active=\u6B63\u5E38\u904B\u4F5C (\u5FD9\u788C/\u6700\u5927) \u5927\u65BC 25 %
-monitor_equation_dead=\u505C\u6A5F \: \u6C92\u6709\u56DE\u61C9
-monitor_equation_healthy=\u5065\u5EB7 (\u5FD9\u788C/\u6700\u5927) < 25%
-monitor_equation_load=\u8CA0\u8F09 ( (busy / max) * 50) + ( (used memory / max memory) * 50)
-monitor_equation_warning=\u8B66\u544A (busy/max) > 67%
-monitor_health_tab_title=\u5065\u5EB7
-monitor_health_title=\u76E3\u8996\u7D50\u679C
-monitor_is_title=\u7576\u6210\u76E3\u8996\u5668
-monitor_label_right_active=\u6B63\u5E38\u904B\u4F5C
-monitor_label_right_dead=\u505C\u6A5F
-monitor_label_right_healthy=\u5065\u5EB7
-monitor_label_right_warning=\u8B66\u793A
-monitor_legend_health=\u5065\u5EB7
-monitor_legend_load=\u8CA0\u8F09
-monitor_legend_memory_per=\u8A18\u61B6\u9AD4\u4F7F\u7528\u7387 % (userd/total)
-monitor_legend_thread_per=\u57F7\u884C\u7DD2 % (busy/max)
-monitor_performance_servers=\u4F3A\u670D\u5668
-monitor_performance_tab_title=\u6548\u80FD
-monitor_performance_title=\u6548\u80FD\u5716\u5F62
 name=\u540D\u7A31
 new=\u65B0
 newdn=\u65B0\u7684\u8B58\u5225\u540D\u7A31
 no=\u632A\u5A01
 number_of_threads=\u57F7\u884C\u7DD2\u6578\u91CF
 once_only_controller_title=\u53EA\u6709\u4E00\u6B21\u63A7\u5236\u5668
 open=\u958B\u555F...
 option=\u9078\u9805
 optional_tasks=\u9078\u64C7\u6027\u5DE5\u4F5C
 paramtable=\u9001\u51FA\u542B\u53C3\u6578\u7684\u8981\u6C42
 password=\u5BC6\u78BC
 paste=\u8CBC\u4E0A
 paste_insert=\u8CBC\u4E0A(\u63D2\u5165)
 path=\u8DEF\u5F91
 path_extension_choice=\u5EF6\u4F38\u8DEF\u5F91(\u4F7F\u7528\u5206\u865F\u505A\u70BA\u5206\u9694\u865F)
 path_extension_dont_use_equals=\u4E0D\u8981\u5728\u5EF6\u4F38\u8DEF\u5F91\u4E2D\u4F7F\u7528\u7B49\u865F(Intershop Enfinity compatibility)
 path_extension_dont_use_questionmark=\u4E0D\u8981\u5728\u5EF6\u4F38\u8DEF\u5F91\u4E2D\u4F7F\u7528\u554F\u865F(Intershop Enfinity compatibility)
 patterns_to_exclude=\u9664\u5916\u7684\u578B\u5F0F
 patterns_to_include=\u8981\u5305\u542B\u7684\u578B\u5F0F
 port=\u7AEF\u53E3
 property_default_param=\u9810\u8A2D\u503C
 property_edit=\u7DE8\u8F2F
 property_editor.value_is_invalid_message=\u7531\u65BC\u4F60\u7684\u8F38\u5165\u503C\u4E0D\u5408\u6CD5.\u81EA\u52D5\u56DE\u5FA9\u5230\u539F\u503C
 property_editor.value_is_invalid_title=\u7121\u6548\u8F38\u5165
 property_name_param=\u5C6C\u6027\u540D\u7A31
 property_undefined=\u672A\u5B9A\u7FA9
 protocol=\u5354\u5B9A
 protocol_java_config_tile=\u8A2D\u5B9A Java \u7BC4\u4F8B
 protocol_java_test_title=Java \u6E2C\u8A66
 proxy_assertions=\u589E\u52A0\u9A57\u8B49
 proxy_cl_error=\u82E5\u8981\u6307\u5B9A\u4EE3\u7406\u4F3A\u670D\u5668,\u9808\u63D0\u4F9B\u4E3B\u6A5F\u540D\u7A31\u548C\u7AEF\u53E3
 proxy_headers=\u622A\u53D6 HTTP \u8868\u982D
 proxy_separators=\u589E\u52A0\u5206\u9694
 proxy_target=\u76EE\u6A19\u63A7\u5236\u5668
 proxy_title=HTTP \u4EE3\u7406\u4F3A\u670D\u5668
 ramp_up=\u555F\u52D5\u5EF6\u9072(\u79D2)
 random_control_title=\u96A8\u6A5F\u63A7\u5236\u5668
 random_order_control_title=\u96A8\u6A5F\u9806\u5E8F\u63A7\u5236\u5668
 record_controller_title=\u9304\u88FD\u63A7\u5236\u5668
 ref_name_field=\u53C3\u7167\u540D\u7A31
 regex_extractor_title=\u6B63\u898F\u8868\u793A\u5F0F\u5256\u6790\u5668
 regex_field=\u6B63\u898F\u8868\u793A\u5F0F
 regex_source=\u6B63\u898F\u8868\u793A\u5F0F\u6B04\u4F4D
 regex_src_body=\u672C\u6587
 regex_src_hdrs=\u8868\u982D
 remote_exit=\u9060\u7AEF\u96E2\u958B
 remote_exit_all=\u9060\u7AEF\u96E2\u958B\u5168\u90E8
 remote_start=\u9060\u7AEF\u555F\u52D5
 remote_start_all=\u9060\u7AEF\u555F\u52D5\u5168\u90E8
 remote_stop=\u9060\u7AEF\u505C\u6B62
 remote_stop_all=\u9060\u7AEF\u505C\u6B62\u5168\u90E8
 remove=\u79FB\u9664
 rename=\u66F4\u540D
 report=\u5831\u544A
 request_data=\u8981\u6C42\u8CC7\u6599
 restart=\u91CD\u65B0\u555F\u52D5
 resultaction_title=\u7D50\u679C\u72C0\u614B\u52D5\u4F5C\u8655\u7406\u5668
 resultsaver_errors=\u53EA\u5132\u5B58\u5931\u6557\u7684\u56DE\u8986
 resultsaver_prefix=\u6A94\u540D\u524D\u7F6E\u5B57\u4E32
 resultsaver_title=\u5C07\u56DE\u8986\u5B58\u5230\u6A94\u6848
 retobj=\u50B3\u56DE\u7269\u4EF6
 root=\u6839
 root_title=\u6839
 run=\u57F7\u884C
 running_test=\u57F7\u884C\u6E2C\u8A66
 runtime_controller_title=\u57F7\u884C\u6642\u671F\u63A7\u5236\u5668
 runtime_seconds=\u57F7\u884C\u6642\u671F(\u79D2)
 sample_result_save_configuration=\u53D6\u6A23\u7D50\u679C\u5132\u5B58\u914D\u7F6E
 sampler_on_error_action=\u53D6\u6A23\u932F\u8AA4\u5F8C\u63A1\u53D6\u7684\u52D5\u4F5C
 sampler_on_error_continue=\u7E7C\u7E8C
 sampler_on_error_stop_test=\u505C\u6B62\u6E2C\u8A66
 sampler_on_error_stop_thread=\u505C\u6B62\u57F7\u884C\u7DD2
 save=\u5132\u5B58\u6E2C\u8A66\u8A08\u756B
 save?=\u5132\u5B58\uFF1F
 save_all_as=\u5C07\u6E2C\u8A66\u8A08\u756B\u5132\u5B58\u6210...
 save_as=\u5132\u5B58\u6210...
 save_as_image=\u5132\u5B58\u6210\u5716\u5F62
 save_assertionresultsfailuremessage=\u5132\u5B58\u9A57\u8B49\u7D50\u679C\u5931\u6557\u8A0A\u606F
 save_assertions=\u5132\u5B58\u9A57\u8B49\u7D50\u679C
 save_asxml=\u5132\u5B58\u6210 XML
 save_code=\u5132\u5B58\u56DE\u8986\u4EE3\u78BC
 save_datatype=\u5132\u5B58\u8CC7\u6599\u578B\u614B
 save_encoding=\u5132\u5B58\u7DE8\u78BC
 save_fieldnames=\u5132\u5B58\u6B04\u4F4D\u540D\u7A31
 save_graphics=\u5132\u5B58\u5716\u5F62
 save_label=\u5132\u5B58\u6A19\u984C
 save_latency=\u5132\u5B58 Latency
 save_message=\u5132\u5B58\u56DE\u8986\u8A0A\u606F
 save_requestheaders=\u5132\u5B58\u8981\u6C42\u8868\u982D
 save_responsedata=\u5132\u5B58\u56DE\u8986\u8CC7\u6599
 save_responseheaders=\u5132\u5B58\u56DE\u8986\u8868\u982D
 save_samplerdata=\u5132\u5B58\u53D6\u6A23\u8CC7\u6599
 save_subresults=\u5132\u5B58\u5B50\u7D50\u679C
 save_success=\u5132\u5B58\u6210\u529F
 save_threadname=\u5132\u5B58\u57F7\u884C\u7DD2\u540D\u7A31
 save_time=\u5132\u5B58\u6642\u9593
 save_timestamp=\u5132\u5B58\u6642\u9593\u6233\u8A18
 sbind=\u55AE\u4E00\u7E6B\u7D50/\u4E0D\u7E6B\u7D50
 scheduler=\u5B9A\u6642\u5668
 scheduler_configuration=\u5B9A\u6642\u5668\u914D\u7F6E
 scope=\u7BC4\u570D
 search_base=\u641C\u5C0B\u57FA\u6E96
 search_filter=\u641C\u5C0B\u904E\u6FFE\u689D\u4EF6
 search_test=\u641C\u5C0B\u6E2C\u8A66
 searchbase=\u641C\u5C0B\u57FA\u6E96
 searchfilter=\u641C\u5C0B\u904E\u6FFE\u689D\u4EF6
 searchtest=\u641C\u5C0B\u6E2C\u8A66
 second=\u79D2
 secure=\u5B89\u5168
 send_file=\u8207\u8981\u6C42\u4E00\u540C\u50B3\u9001\u6A94\u6848
 send_file_browse=\u700F\u89BD...
 send_file_filename_label=\u6A94\u540D
 send_file_mime_label=MIME \u578B\u5F0F
 send_file_param_name_label=\u53C3\u6578\u540D\u7A31
 server=\u4F3A\u670D\u5668\u540D\u7A31\u6216 IP
 servername=\u4F3A\u670D\u5668\u540D\u7A31
 session_argument_name=\u9023\u7DDA\u968E\u6BB5\u53C3\u6578\u540D\u7A31
 should_save=\u57F7\u884C\u6E2C\u8A66\u524D\u8981\u5148\u5C07\u6E2C\u8A66\u8173\u672C\u5B58\u6A94. \u5C24\u5176\u662F\u7576\u4F60\u4F7F\u7528 CSV Data Set \u6216 _StringFromFile \u6642
 shutdown=\u95DC\u9589
 simple_config_element=\u7C21\u6613\u8A2D\u7F6E\u5143\u7D20
 simple_data_writer_title=\u7C21\u6613\u8CC7\u6599\u5BEB\u4F5C\u8005
 size_assertion_comparator_error_equal=\u7B49\u65BC
 size_assertion_comparator_error_greater=\u5927\u65BC
 size_assertion_comparator_error_greaterequal=\u5927\u65BC\u6216\u7B49\u65BC
 size_assertion_comparator_error_less=\u5C0F\u65BC
 size_assertion_comparator_error_lessequal=\u5C0F\u65BC\u6216\u7B49\u65BC
 size_assertion_comparator_error_notequal=\u4E0D\u7B49\u65BC
 size_assertion_comparator_label=\u6BD4\u8F03\u7684\u985E\u5225
 size_assertion_failure=\u5927\u5C0F\u932F\u8AA4, \u61C9\u8A72\u6709 {1}{2}\u4F4D\u5143\u7D44, \u537B\u6709 {0} \u4F4D\u5143\u7D44
 size_assertion_input_error=\u8ACB\u8F38\u5165\u6709\u6548\u6B63\u6574\u6578
 size_assertion_label=\u5927\u5C0F(\u4F4D\u5143\u7D44)
 size_assertion_size_test=\u9A57\u8B49\u5927\u5C0F
 size_assertion_title=\u9A57\u8B49\u5927\u5C0F
 soap_action=Soap \u52D5\u4F5C
 soap_data_title=Soap/XML-RPC \u8CC7\u6599
 soap_sampler_title=SOAP/XML-RPC \u8981\u6C42
 ssl_alias_prompt=\u8ACB\u8F38\u5165\u9810\u9078\u7684 alias
 ssl_alias_select=\u8ACB\u9078\u64C7\u6E2C\u8A66\u8981\u7528\u7684 alias
 ssl_error_title=KeyStore \u554F\u984C
 ssl_pass_prompt=\u8ACB\u8F38\u5165\u5BC6\u78BC
 ssl_pass_title=KeyStore \u5BC6\u78BC
 ssl_port=SSL \u7AEF\u53E3
 sslmanager=SSL \u7BA1\u7406\u54E1
 start=\u958B\u59CB
 starttime=\u958B\u59CB\u6642\u9593
 stop=\u505C\u6B62
 stopping_test=\u6B63\u5728\u505C\u6B62\u6240\u6709\u6E2C\u8A66\u7DD2. \u8ACB\u8010\u5FC3\u7B49\u5F85
 stopping_test_title=\u505C\u6B62\u6E2C\u8A66
 string_from_file_file_name=\u8F38\u5165\u6A94\u6848\u5B8C\u6574\u8DEF\u5F91
 string_from_file_seq_final=\u6A94\u6848\u5E8F\u865F(\u7D50\u675F)
 string_from_file_seq_start=\u6A94\u6848\u5E8F\u865F(\u958B\u59CB)
 summariser_title=\u7522\u751F\u7E3D\u8A08\u7D50\u679C
 switch_controller_label=\u5207\u63DB\u503C
 switch_controller_title=\u5207\u63DB\u63A7\u5236\u5668
 table_visualizer_bytes=\u4F4D\u5143\u7D44
 table_visualizer_sample_num=\u53D6\u6A23\u7DE8\u865F \#
 table_visualizer_sample_time=\u53D6\u6A23\u6642\u9593(\u5FAE\u79D2)
 tcp_config_title=TCP \u53D6\u6A23\u8A2D\u5B9A
 tcp_nodelay=\u8A2D\u70BA\u4E0D\u5EF6\u9072
 tcp_port=\u7AEF\u53E3\u865F\u78BC
 tcp_request_data=\u6B32\u50B3\u9001\u6587\u5B57
 tcp_sample_title=TCP \u53D6\u6A23
 tcp_timeout=\u903E\u6642(\u5FAE\u79D2)
 template_field=\u7BC4\u672C
 test=\u6E2C\u8A66
 testconfiguration=\u6E2C\u8A66\u914D\u7F6E
 test_action_action=\u52D5\u4F5C
 test_action_duration=\u671F\u9593
 test_action_pause=\u66AB\u505C
 test_action_stop=\u505C\u6B62
 test_action_target=\u6A19\u7684
 test_action_target_test=\u6240\u6709\u57F7\u884C\u7DD2
 test_action_target_thread=\u76EE\u524D\u57F7\u884C\u7DD2
 test_action_title=\u6E2C\u8A66\u52D5\u4F5C
 test_configuration=\u6E2C\u8A66\u914D\u7F6E
 test_plan=\u6E2C\u8A66\u8A08\u756B
 testplan.serialized=\u4F9D\u5E8F\u57F7\u884C\u57F7\u884C\u7DD2\u7FA4\u7D44,\u57F7\u884C\u5B8C\u4E00\u500B\u624D\u6703\u57F7\u884C\u4E0B\u4E00\u500B
 testplan_comments=\u5099\u8A3B
 testt=\u6E2C\u8A66
 thread_delay_properties=\u57F7\u884C\u7DD2\u5EF6\u9072\u5C6C\u6027
 thread_group_title=\u57F7\u884C\u7DD2\u7FA4\u7D44
 thread_properties=\u57F7\u884C\u7DD2\u5C6C\u6027
 threadgroup=\u57F7\u884C\u7DD2\u7FA4\u7D44
 throughput_control_bynumber_label=\u7E3D\u57F7\u884C\u6578
 throughput_control_bypercent_label=\u767E\u5206\u6BD4\u57F7\u884C
 throughput_control_perthread_label=\u6BCF\u500B\u4F7F\u7528\u8005
 throughput_control_title=\u8655\u7406\u91CF\u63A7\u5236\u5668
 throughput_control_tplabel=\u8655\u7406\u91CF
 timelim=\u6642\u9593\u9650\u5236
 transaction_controller_title=\u4EA4\u6613\u63A7\u5236\u5668
 unbind=\u672A\u7E6B\u7D50\u57F7\u884C\u7DD2
 uniform_timer_delay=\u5E38\u6578\u5EF6\u9072\u5DEE(\u5FAE\u79D2)
 uniform_timer_memo=\u52A0\u5165\u4E00\u81F4\u5206\u4F48\u7684\u96A8\u6A5F\u5EF6\u9072
 uniform_timer_range=\u96A8\u6A5F\u5EF6\u9072\u6700\u5927\u503C(\u5FAE\u79D2)
 uniform_timer_title=\u4E00\u81F4\u96A8\u6A5F\u8A08\u6642\u5668
 update_per_iter=\u6BCF\u56DE\u5408\u8B8A\u66F4\u4E00\u6B21
 upload=\u6A94\u6848\u4E0A\u50B3
 upper_bound=\u4E0A\u9650
 url_config_protocol=\u5354\u5B9A
 url_config_title=HTTP \u8981\u6C42\u9810\u8A2D\u503C
 url_full_config_title=UrlFull \u7BC4\u4F8B
 url_multipart_config_title=HTTP Multipart \u8981\u6C42\u9810\u8A2D\u503C
 use_recording_controller=\u4F7F\u7528\u9304\u88FD\u63A7\u5236\u5668
 user=\u4F7F\u7528\u8005
 user_defined_test=\u4F7F\u7528\u8005\u81EA\u8A02\u6E2C\u8A66
 user_defined_variables=\u4F7F\u7528\u8005\u81EA\u8A02\u8B8A\u6578
 user_param_mod_help_note=(\u4E0D\u8981\u8B8A\u66F4\u9019\u88E1, \u8981\u6539\u5C31\u6539\u5728 /bin \u76EE\u9304\u4E0B\u540C\u540D\u7684\u6A94\u6848\u5167\u5BB9)
 user_parameters_table=\u53C3\u6578
 user_parameters_title=\u4F7F\u7528\u8005\u53C3\u6578
 userdn=\u4F7F\u7528\u8005\u540D\u7A31
 username=\u4F7F\u7528\u8005\u540D\u7A31
 userpw=\u5BC6\u78BC
 value=\u503C
 var_name=\u53C3\u7167\u540D\u7A31
 view_graph_tree_title=\u6AA2\u8996\u5716\u5F62\u6A39
 view_results_in_table=\u6AA2\u8996\u8868\u683C\u5F0F\u7D50\u679C
 view_results_tab_request=\u8981\u6C42
 view_results_tab_response=\u56DE\u8986\u8CC7\u6599
 view_results_tab_sampler=\u53D6\u6A23\u7D50\u679C
 view_results_title=\u6AA2\u8996\u7D50\u679C
 view_results_tree_title=\u6AA2\u8996\u7D50\u679C\u6A39
 warning=\u8B66\u544A\uFF01
 web_request=HTTP \u8981\u6C42
 web_server=Web \u4F3A\u670D\u5668
 web_server_domain=\u4E3B\u6A5F\u540D\u7A31\u6216 IP
 web_server_port=\u7AEF\u53E3\u865F\u78BC
 web_testing_retrieve_images=\u53D6\u56DE\u6240\u6709\u5D4C\u5165 HTML \u7684\u8CC7\u6E90
 web_testing_title=HTTP \u8981\u6C42
 while_controller_label=\u689D\u4EF6 (blank/LAST \u6216 true)
 while_controller_title=\u7576.. \u63A7\u5236\u5668
 workbench_title=\u5DE5\u4F5C\u53F0
 xml_assertion_title=XML \u9A57\u8B49
 xml_namespace_button=\u4F7F\u7528\u540D\u7A31\u7A7A\u9593
 xml_tolerant_button=Tolerant XML/HTML \u5256\u6790\u5668
 xml_validate_button=\u9A57\u8B49 XML
 xml_whitespace_button=\u5FFD\u7565\u767D\u7A7A\u5B57\u5143
 xpath_assertion_button=\u9A57\u8B49
 xpath_assertion_check=\u6AA2\u67E5 XPath \u654D\u8FF0
 xpath_assertion_error=XPath \u932F\u8AA4
 xpath_assertion_failed=\u7121\u6548 XPath \u654D\u8FF0
 xpath_assertion_negate=\u5982\u679C\u5168\u4E0D\u7B26\u5408\u5247\u70BA True
 xpath_assertion_option=\u5256\u6790 XML \u9078\u9805
 xpath_assertion_test=\u9A57\u8B49 XPath
 xpath_assertion_tidy=\u8A66\u8457\u4E26\u5C07\u8F38\u5165\u8CC7\u6599 tidy up
 xpath_assertion_title=\u9A57\u8B49 XPath
 xpath_assertion_valid=\u5408\u6CD5 XPath \u654D\u8FF0
 xpath_assertion_validation=\u4EE5 DTD \u6AA2\u67E5 XML
 xpath_assertion_whitespace=\u5FFD\u7565\u767D\u7A7A\u5B57\u5143
 xpath_expression=\u8981\u6BD4\u5C0D\u7528\u7684 XPath \u654D\u8FF0
 xpath_file_file_name=\u53D6\u503C\u4F86\u6E90\u7684 XML \u6A94\u540D
 you_must_enter_a_valid_number=\u5FC5\u9808\u8F38\u5165\u4E00\u500B\u5408\u6CD5\u6578\u5B57
diff --git a/src/core/org/apache/jmeter/samplers/SampleResult.java b/src/core/org/apache/jmeter/samplers/SampleResult.java
index 066c35c5f..93466cec6 100644
--- a/src/core/org/apache/jmeter/samplers/SampleResult.java
+++ b/src/core/org/apache/jmeter/samplers/SampleResult.java
@@ -1,1510 +1,1511 @@
 /*
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
  */
 
 package org.apache.jmeter.samplers;
 
 import java.io.Serializable;
 import java.io.UnsupportedEncodingException;
 import java.net.HttpURLConnection;
 import java.net.URL;
 import java.nio.charset.Charset;
 import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
 import java.util.concurrent.TimeUnit;
 
 import org.apache.jmeter.assertions.AssertionResult;
 import org.apache.jmeter.gui.Searchable;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jorphan.logging.LoggingManager;
 import org.apache.jorphan.util.JOrphanUtils;
 import org.apache.log.Logger;
 
 // For unit tests, @see TestSampleResult
 
 /**
  * This is a nice packaging for the various information returned from taking a
  * sample of an entry.
  *
  */
 public class SampleResult implements Serializable, Cloneable, Searchable {
 
     private static final long serialVersionUID = 241L;
 
     // Needs to be accessible from Test code
     static final Logger log = LoggingManager.getLoggerForClass();
 
     /**
      * The default encoding to be used if not overridden.
      * The value is ISO-8859-1.
      */
     public static final String DEFAULT_HTTP_ENCODING = StandardCharsets.ISO_8859_1.name();
 
     // Bug 33196 - encoding ISO-8859-1 is only suitable for Western countries
     // However the suggested System.getProperty("file.encoding") is Cp1252 on
     // Windows
     // So use a new property with the original value as default
     // needs to be accessible from test code
     /**
      * The default encoding to be used to decode the responseData byte array.
      * The value is defined by the property "sampleresult.default.encoding"
      * with a default of DEFAULT_HTTP_ENCODING if that is not defined.
      */
     protected static final String DEFAULT_ENCODING
             = JMeterUtils.getPropDefault("sampleresult.default.encoding", // $NON-NLS-1$
             DEFAULT_HTTP_ENCODING);
 
     /* The default used by {@link #setResponseData(String, String)} */
     private static final String DEFAULT_CHARSET = Charset.defaultCharset().name();
 
     /**
      * Data type value ({@value}) indicating that the response data is text.
      *
      * @see #getDataType
      * @see #setDataType(java.lang.String)
      */
     public static final String TEXT = "text"; // $NON-NLS-1$
 
     /**
      * Data type value ({@value}) indicating that the response data is binary.
      *
      * @see #getDataType
      * @see #setDataType(java.lang.String)
      */
     public static final String BINARY = "bin"; // $NON-NLS-1$
 
     /** empty array which can be returned instead of null */
     public static final byte[] EMPTY_BA = new byte[0];
 
     private static final SampleResult[] EMPTY_SR = new SampleResult[0];
 
     private static final AssertionResult[] EMPTY_AR = new AssertionResult[0];
     
     private static final boolean GETBYTES_BODY_REALSIZE = 
         JMeterUtils.getPropDefault("sampleresult.getbytes.body_real_size", true); // $NON-NLS-1$
 
     private static final boolean GETBYTES_HEADERS_SIZE = 
         JMeterUtils.getPropDefault("sampleresult.getbytes.headers_size", true); // $NON-NLS-1$
     
     private static final boolean GETBYTES_NETWORK_SIZE =
             GETBYTES_HEADERS_SIZE && GETBYTES_BODY_REALSIZE;
 
     private SampleSaveConfiguration saveConfig;
 
     private SampleResult parent = null;
 
     /**
      * @param propertiesToSave
      *            The propertiesToSave to set.
      */
     public void setSaveConfig(SampleSaveConfiguration propertiesToSave) {
         this.saveConfig = propertiesToSave;
     }
 
     public SampleSaveConfiguration getSaveConfig() {
         return saveConfig;
     }
 
     private byte[] responseData = EMPTY_BA;
 
     private String responseCode = "";// Never return null
 
     private String label = "";// Never return null
 
     /** Filename used by ResultSaver */
     private String resultFileName = "";
 
     /** The data used by the sampler */
     private String samplerData;
 
     private String threadName = ""; // Never return null
 
     private String responseMessage = "";
 
     private String responseHeaders = ""; // Never return null
 
     private String contentType = ""; // e.g. text/html; charset=utf-8
 
     private String requestHeaders = "";
 
     // TODO timeStamp == 0 means either not yet initialised or no stamp available (e.g. when loading a results file)
     /** the time stamp - can be start or end */
     private long timeStamp = 0;
 
     private long startTime = 0;
 
     private long endTime = 0;
 
     private long idleTime = 0;// Allow for non-sample time
 
     /** Start of pause (if any) */
     private long pauseTime = 0;
 
     private List<AssertionResult> assertionResults;
 
     private List<SampleResult> subResults;
 
     /**
      * The data type of the sample
      * @see #getDataType()
      * @see #setDataType(String)
      * @see #TEXT
      * @see #BINARY
      */
     private String dataType=""; // Don't return null if not set
 
     private boolean success;
 
     //@GuardedBy("this"")
     /** files that this sample has been saved in */
     /** In Non GUI mode and when best config is used, size never exceeds 1, 
      * but as a compromise set it to 3 
      */
     private final Set<String> files = new HashSet<>(3);
 
     private String dataEncoding;// (is this really the character set?) e.g.
                                 // ISO-8895-1, UTF-8
 
     /** elapsed time */
     private long elapsedTime = 0;
 
     /** time to first response */
     private long latency = 0;
 
     /**
      * time to end connecting
      */
     private long connectTime = 0;
 
     /** Should thread start next iteration ? */
     private boolean startNextThreadLoop = false;
 
     /** Should thread terminate? */
     private boolean stopThread = false;
 
     /** Should test terminate? */
     private boolean stopTest = false;
 
     /** Should test terminate abruptly? */
     private boolean stopTestNow = false;
 
-    /** Is the sampler acting as a monitor? */
-    private boolean isMonitor = false;
-
     private int sampleCount = 1;
 
     private long bytes = 0; // Allows override of sample size in case sampler does not want to store all the data
     
     private int headersSize = 0;
     
     private long bodySize = 0;
 
     /** Currently active threads in this thread group */
     private volatile int groupThreads = 0;
 
     /** Currently active threads in all thread groups */
     private volatile int allThreads = 0;
 
     // TODO do contentType and/or dataEncoding belong in HTTPSampleResult instead?
 
     private static final boolean startTimeStamp
         = JMeterUtils.getPropDefault("sampleresult.timestamp.start", false);  // $NON-NLS-1$
 
     // Allow read-only access from test code
     static final boolean USENANOTIME
     = JMeterUtils.getPropDefault("sampleresult.useNanoTime", true);  // $NON-NLS-1$
 
     // How long between checks of nanotime; default 5000ms; set to <=0 to disable the thread
     private static final long NANOTHREAD_SLEEP = 
             JMeterUtils.getPropDefault("sampleresult.nanoThreadSleep", 5000);  // $NON-NLS-1$;
 
     static {
         if (startTimeStamp) {
             log.info("Note: Sample TimeStamps are START times");
         } else {
             log.info("Note: Sample TimeStamps are END times");
         }
         log.info("sampleresult.default.encoding is set to " + DEFAULT_ENCODING);
         log.info("sampleresult.useNanoTime="+USENANOTIME);
         log.info("sampleresult.nanoThreadSleep="+NANOTHREAD_SLEEP);
 
         if (USENANOTIME && NANOTHREAD_SLEEP > 0) {
             // Make sure we start with a reasonable value
             NanoOffset.nanoOffset = System.currentTimeMillis() - SampleResult.sampleNsClockInMs();
             NanoOffset nanoOffset = new NanoOffset();
             nanoOffset.setDaemon(true);
             nanoOffset.setName("NanoOffset");
             nanoOffset.start();
         }
     }
 
 
     private final long nanoTimeOffset;
 
     // Allow testcode access to the settings
     final boolean useNanoTime;
     
     final long nanoThreadSleep;
     
     /**
      * Cache for responseData as string to avoid multiple computations
      */
     private volatile transient String responseDataAsString;
     
     private long sentBytes;
 
     private long initOffset(){
         if (useNanoTime){
             return nanoThreadSleep > 0 ? NanoOffset.getNanoOffset() : System.currentTimeMillis() - sampleNsClockInMs();
         } else {
             return Long.MIN_VALUE;
         }
     }
 
     public SampleResult() {
         this(USENANOTIME, NANOTHREAD_SLEEP);
     }
 
     // Allow test code to change the default useNanoTime setting
     SampleResult(boolean nanoTime) {
         this(nanoTime, NANOTHREAD_SLEEP);
     }
 
     // Allow test code to change the default useNanoTime and nanoThreadSleep settings
     SampleResult(boolean nanoTime, long nanoThreadSleep) {
         this.elapsedTime = 0;
         this.useNanoTime = nanoTime;
         this.nanoThreadSleep = nanoThreadSleep;
         this.nanoTimeOffset = initOffset();
     }
 
     /**
      * Copy constructor.
      * 
      * @param res existing sample result
      */
     public SampleResult(SampleResult res) {
         this();
         allThreads = res.allThreads;//OK
         assertionResults = res.assertionResults;// TODO ??
         bytes = res.bytes;
         headersSize = res.headersSize;
         bodySize = res.bodySize;
         contentType = res.contentType;//OK
         dataEncoding = res.dataEncoding;//OK
         dataType = res.dataType;//OK
         endTime = res.endTime;//OK
         // files is created automatically, and applies per instance
         groupThreads = res.groupThreads;//OK
         idleTime = res.idleTime;
-        isMonitor = res.isMonitor;
         label = res.label;//OK
         latency = res.latency;
         connectTime = res.connectTime;
         location = res.location;//OK
         parent = res.parent; // TODO ??
         pauseTime = res.pauseTime;
         requestHeaders = res.requestHeaders;//OK
         responseCode = res.responseCode;//OK
         responseData = res.responseData;//OK
         responseDataAsString = null;
         responseHeaders = res.responseHeaders;//OK
         responseMessage = res.responseMessage;//OK
         // Don't copy this; it is per instance resultFileName = res.resultFileName;
         sampleCount = res.sampleCount;
         samplerData = res.samplerData;
         saveConfig = res.saveConfig;
         sentBytes = res.sentBytes;
         startTime = res.startTime;//OK
         stopTest = res.stopTest;
         stopTestNow = res.stopTestNow;
         stopThread = res.stopThread;
         startNextThreadLoop = res.startNextThreadLoop;
         subResults = res.subResults; // TODO ??
         success = res.success;//OK
         threadName = res.threadName;//OK
         elapsedTime = res.elapsedTime;
         timeStamp = res.timeStamp;
     }
 
     public boolean isStampedAtStart() {
         return startTimeStamp;
     }
 
     /**
      * Create a sample with a specific elapsed time but don't allow the times to
      * be changed later
      *
      * (only used by HTTPSampleResult)
      *
      * @param elapsed
      *            time
      * @param atend
      *            create the sample finishing now, else starting now
      */
     protected SampleResult(long elapsed, boolean atend) {
         this();
         long now = currentTimeInMillis();
         if (atend) {
             setTimes(now - elapsed, now);
         } else {
             setTimes(now, now + elapsed);
         }
     }
 
     /**
      * Create a sample with specific start and end times for test purposes, but
      * don't allow the times to be changed later
      *
      * (used by StatVisualizerModel.Test)
      *
      * @param start
      *            start time in milliseconds since unix epoch
      * @param end
      *            end time in milliseconds since unix epoch
      * @return sample with given start and end time
      */
     public static SampleResult createTestSample(long start, long end) {
         SampleResult res = new SampleResult();
         res.setStartTime(start);
         res.setEndTime(end);
         return res;
     }
 
     /**
      * Create a sample with a specific elapsed time for test purposes, but don't
      * allow the times to be changed later
      *
      * @param elapsed
      *            - desired elapsed time in milliseconds
      * @return sample that starts 'now' and ends <code>elapsed</code> milliseconds later
      */
     public static SampleResult createTestSample(long elapsed) {
         long now = System.currentTimeMillis();
         return createTestSample(now, now + elapsed);
     }
 
     /**
      * Allow users to create a sample with specific timestamp and elapsed times
      * for cloning purposes, but don't allow the times to be changed later
      *
      * Currently used by CSVSaveService and
      * StatisticalSampleResult
      *
      * @param stamp
      *            this may be a start time or an end time (both in
      *            milliseconds)
      * @param elapsed
      *            time in milliseconds
      */
     public SampleResult(long stamp, long elapsed) {
         this();
         stampAndTime(stamp, elapsed);
     }
 
     private static long sampleNsClockInMs() {
         return System.nanoTime() / 1000000;
     }
 
     /**
      * Helper method to get 1 ms resolution timing.
      * 
      * @return the current time in milliseconds
      * @throws RuntimeException
      *             when <code>useNanoTime</code> is <code>true</code> but
      *             <code>nanoTimeOffset</code> is not set
      */
     public long currentTimeInMillis() {
         if (useNanoTime){
             if (nanoTimeOffset == Long.MIN_VALUE){
                 throw new RuntimeException("Invalid call; nanoTimeOffset as not been set");
             }
             return sampleNsClockInMs() + nanoTimeOffset;            
         }
         return System.currentTimeMillis();
     }
 
     // Helper method to maintain timestamp relationships
     private void stampAndTime(long stamp, long elapsed) {
         if (startTimeStamp) {
             startTime = stamp;
             endTime = stamp + elapsed;
         } else {
             startTime = stamp - elapsed;
             endTime = stamp;
         }
         timeStamp = stamp;
         elapsedTime = elapsed;
     }
 
     /**
      * For use by SaveService only.
      * 
      * @param stamp
      *            this may be a start time or an end time (both in milliseconds)
      * @param elapsed
      *            time in milliseconds
      * @throws RuntimeException
      *             when <code>startTime</code> or <code>endTime</code> has been
      *             set already
      */
     public void setStampAndTime(long stamp, long elapsed) {
         if (startTime != 0 || endTime != 0){
             throw new RuntimeException("Calling setStampAndTime() after start/end times have been set");
         }
         stampAndTime(stamp, elapsed);
     }
 
     /**
      * Set the "marked" flag to show that the result has been written to the file.
      *
      * @param filename the name of the file
      * @return <code>true</code> if the result was previously marked
      */
     public synchronized boolean markFile(String filename) {
         return !files.add(filename);
     }
 
     public String getResponseCode() {
         return responseCode;
     }
 
     private static final String OK_CODE = Integer.toString(HttpURLConnection.HTTP_OK);
     private static final String OK_MSG = "OK"; // $NON-NLS-1$
 
     /**
      * Set response code to OK, i.e. "200"
      *
      */
     public void setResponseCodeOK(){
         responseCode=OK_CODE;
     }
 
     public void setResponseCode(String code) {
         responseCode = code;
     }
 
     public boolean isResponseCodeOK(){
         return responseCode.equals(OK_CODE);
     }
     public String getResponseMessage() {
         return responseMessage;
     }
 
     public void setResponseMessage(String msg) {
         responseMessage = msg;
     }
 
     public void setResponseMessageOK() {
         responseMessage = OK_MSG;
     }
 
     /**
      * Set result statuses OK - shorthand method to set:
      * <ul>
      * <li>ResponseCode</li>
      * <li>ResponseMessage</li>
      * <li>Successful status</li>
      * </ul>
      */
     public void setResponseOK(){
         setResponseCodeOK();
         setResponseMessageOK();
         setSuccessful(true);
     }
 
     public String getThreadName() {
         return threadName;
     }
 
     public void setThreadName(String threadName) {
         this.threadName = threadName;
     }
 
     /**
      * Get the sample timestamp, which may be either the start time or the end time.
      *
      * @see #getStartTime()
      * @see #getEndTime()
      *
      * @return timeStamp in milliseconds
      */
     public long getTimeStamp() {
         return timeStamp;
     }
 
     public String getSampleLabel() {
         return label;
     }
 
     /**
      * Get the sample label for use in summary reports etc.
      *
      * @param includeGroup whether to include the thread group name
      * @return the label
      */
     public String getSampleLabel(boolean includeGroup) {
         if (includeGroup) {
             StringBuilder sb = new StringBuilder(threadName.substring(0,threadName.lastIndexOf(' '))); //$NON-NLS-1$
             return sb.append(":").append(label).toString(); //$NON-NLS-1$
         }
         return label;
     }
 
     public void setSampleLabel(String label) {
         this.label = label;
     }
 
     public void addAssertionResult(AssertionResult assertResult) {
         if (assertionResults == null) {
             assertionResults = new ArrayList<>();
         }
         assertionResults.add(assertResult);
     }
 
     /**
      * Gets the assertion results associated with this sample.
      *
      * @return an array containing the assertion results for this sample.
      *         Returns empty array if there are no assertion results.
      */
     public AssertionResult[] getAssertionResults() {
         if (assertionResults == null) {
             return EMPTY_AR;
         }
         return assertionResults.toArray(new AssertionResult[assertionResults.size()]);
     }
 
     /**
      * Add a subresult and adjust the parent byte count and end-time.
      * 
      * @param subResult
      *            the {@link SampleResult} to be added
      */
     public void addSubResult(SampleResult subResult) {
         if(subResult == null) {
             // see https://bz.apache.org/bugzilla/show_bug.cgi?id=54778
             return;
         }
         String tn = getThreadName();
         if (tn.length()==0) {
             tn=Thread.currentThread().getName();//TODO do this more efficiently
             this.setThreadName(tn);
         }
         subResult.setThreadName(tn); // TODO is this really necessary?
 
         // Extend the time to the end of the added sample
         setEndTime(Math.max(getEndTime(), subResult.getEndTime() + nanoTimeOffset - subResult.nanoTimeOffset)); // Bug 51855
         // Include the byte count for the added sample
         setBytes(getBytesAsLong() + subResult.getBytesAsLong());
         setSentBytes(getSentBytes() + subResult.getSentBytes());
         setHeadersSize(getHeadersSize() + subResult.getHeadersSize());
         setBodySize(getBodySizeAsLong() + subResult.getBodySizeAsLong());
         addRawSubResult(subResult);
     }
     
     /**
      * Add a subresult to the collection without updating any parent fields.
      * 
      * @param subResult
      *            the {@link SampleResult} to be added
      */
     public void addRawSubResult(SampleResult subResult){
         storeSubResult(subResult);
     }
 
     /**
      * Add a subresult read from a results file.
      * <p>
      * As for {@link SampleResult#addSubResult(SampleResult)
      * addSubResult(SampleResult)}, except that the fields don't need to be
      * accumulated
      *
      * @param subResult
      *            the {@link SampleResult} to be added
      */
     public void storeSubResult(SampleResult subResult) {
         if (subResults == null) {
             subResults = new ArrayList<>();
         }
         subResults.add(subResult);
         subResult.setParent(this);
     }
 
     /**
      * Gets the subresults associated with this sample.
      *
      * @return an array containing the subresults for this sample. Returns an
      *         empty array if there are no subresults.
      */
     public SampleResult[] getSubResults() {
         if (subResults == null) {
             return EMPTY_SR;
         }
         return subResults.toArray(new SampleResult[subResults.size()]);
     }
 
     /**
      * Sets the responseData attribute of the SampleResult object.
      *
      * If the parameter is null, then the responseData is set to an empty byte array.
      * This ensures that getResponseData() can never be null.
      *
      * @param response
      *            the new responseData value
      */
     public void setResponseData(byte[] response) {
         responseDataAsString = null;
         responseData = response == null ? EMPTY_BA : response;
     }
 
     /**
      * Sets the responseData attribute of the SampleResult object.
      * Should only be called after setting the dataEncoding (if necessary)
      *
      * @param response
      *            the new responseData value (String)
      *
      * @deprecated - only intended for use from BeanShell code
      */
     @Deprecated
     public void setResponseData(String response) {
         responseDataAsString = null;
         try {
             responseData = response.getBytes(getDataEncodingWithDefault());
         } catch (UnsupportedEncodingException e) {
             log.warn("Could not convert string, using default encoding. "+e.getLocalizedMessage());
             responseData = response.getBytes(); // N.B. default charset is used deliberately here
         }
     }
 
     /**
      * Sets the encoding and responseData attributes of the SampleResult object.
      *
      * @param response the new responseData value (String)
      * @param encoding the encoding to set and then use (if null, use platform default)
      *
      */
     public void setResponseData(final String response, final String encoding) {
         responseDataAsString = null;
         String encodeUsing = encoding != null? encoding : DEFAULT_CHARSET;
         try {
             responseData = response.getBytes(encodeUsing);
             setDataEncoding(encodeUsing);
         } catch (UnsupportedEncodingException e) {
             log.warn("Could not convert string using '"+encodeUsing+
                     "', using default encoding: "+DEFAULT_CHARSET,e);
             responseData = response.getBytes(); // N.B. default charset is used deliberately here
             setDataEncoding(DEFAULT_CHARSET);
         }
     }
 
     /**
      * Gets the responseData attribute of the SampleResult object.
      * <p>
      * Note that some samplers may not store all the data, in which case
      * getResponseData().length will be incorrect.
      *
      * Instead, always use {@link #getBytes()} to obtain the sample result byte count.
      * </p>
      * @return the responseData value (cannot be null)
      */
     public byte[] getResponseData() {
         return responseData;
     }
 
     /**
      * Gets the responseData of the SampleResult object as a String
      *
      * @return the responseData value as a String, converted according to the encoding
      */
     public String getResponseDataAsString() {
         try {
             if(responseDataAsString == null) {
                 responseDataAsString= new String(responseData,getDataEncodingWithDefault());
             }
             return responseDataAsString;
         } catch (UnsupportedEncodingException e) {
             log.warn("Using platform default as "+getDataEncodingWithDefault()+" caused "+e);
             return new String(responseData); // N.B. default charset is used deliberately here
         }
     }
 
     public void setSamplerData(String s) {
         samplerData = s;
     }
 
     public String getSamplerData() {
         return samplerData;
     }
 
     /**
      * Get the time it took this sample to occur.
      *
      * @return elapsed time in milliseonds
      *
      */
     public long getTime() {
         return elapsedTime;
     }
 
     public boolean isSuccessful() {
         return success;
     }
 
     /**
      * Sets the data type of the sample.
      * @param dataType String containing {@link #BINARY} or {@link #TEXT}
      * @see #BINARY
      * @see #TEXT
      */
     public void setDataType(String dataType) {
         this.dataType = dataType;
     }
 
     /**
      * Returns the data type of the sample.
      * 
      * @return String containing {@link #BINARY} or {@link #TEXT} or the empty string
      * @see #BINARY
      * @see #TEXT
      */
     public String getDataType() {
         return dataType;
     }
 
     /**
      * Extract and save the DataEncoding and DataType from the parameter provided.
      * Does not save the full content Type.
      * @see #setContentType(String) which should be used to save the full content-type string
      *
      * @param ct - content type (may be null)
      */
     public void setEncodingAndType(String ct){
         if (ct != null) {
             // Extract charset and store as DataEncoding
             // N.B. The meta tag:
             // <META http-equiv="content-type" content="text/html; charset=foobar">
             // is now processed by HTTPSampleResult#getDataEncodingWithDefault
             final String CS_PFX = "charset="; // $NON-NLS-1$
             int cset = ct.toLowerCase(java.util.Locale.ENGLISH).indexOf(CS_PFX);
             if (cset >= 0) {
                 String charSet = ct.substring(cset + CS_PFX.length());
                 // handle: ContentType: text/plain; charset=ISO-8859-1; format=flowed
                 int semiColon = charSet.indexOf(';');
                 if (semiColon >= 0) {
                     charSet=charSet.substring(0, semiColon);
                 }
                 // Check for quoted string
                 if (charSet.startsWith("\"")||charSet.startsWith("\'")){ // $NON-NLS-1$
                     setDataEncoding(charSet.substring(1, charSet.length()-1)); // remove quotes
                 } else {
                     setDataEncoding(charSet);
                 }
             }
             if (isBinaryType(ct)) {
                 setDataType(BINARY);
             } else {
                 setDataType(TEXT);
             }
         }
     }
 
     // List of types that are known to be binary
     private static final String[] BINARY_TYPES = {
         "image/",       //$NON-NLS-1$
         "audio/",       //$NON-NLS-1$
         "video/",       //$NON-NLS-1$
         };
 
     // List of types that are known to be ascii, although they may appear to be binary
     private static final String[] NON_BINARY_TYPES = {
         "audio/x-mpegurl",  //$NON-NLS-1$ (HLS Media Manifest)
         "video/f4m"         //$NON-NLS-1$ (Flash Media Manifest)
         };
 
     /*
      * Determine if content-type is known to be binary, i.e. not displayable as text.
      *
      * @param ct content type
      * @return true if content-type is of type binary.
      */
     private static boolean isBinaryType(String ct){
         for (String entry : NON_BINARY_TYPES){
             if (ct.startsWith(entry)){
                 return false;
             }
         }
         for (String binaryType : BINARY_TYPES) {
             if (ct.startsWith(binaryType)) {
                 return true;
             }
         }
         return false;
     }
 
     /**
      * Sets the successful attribute of the SampleResult object.
      *
      * @param success
      *            the new successful value
      */
     public void setSuccessful(boolean success) {
         this.success = success;
     }
 
     /**
      * Returns the display name.
      *
      * @return display name of this sample result
      */
     @Override
     public String toString() {
         return getSampleLabel();
     }
 
     /**
      * Returns the dataEncoding or the default if no dataEncoding was provided.
      * 
      * @return the value of the dataEncoding or DEFAULT_ENCODING
      */
     public String getDataEncodingWithDefault() {
         return getDataEncodingWithDefault(DEFAULT_ENCODING);
     }
 
     /**
      * Returns the dataEncoding or the default if no dataEncoding was provided.
      * 
      * @param defaultEncoding the default to be applied
      * @return the value of the dataEncoding or the provided default
      */
     protected String getDataEncodingWithDefault(String defaultEncoding) {
         if (dataEncoding != null && dataEncoding.length() > 0) {
             return dataEncoding;
         }
         return defaultEncoding;
     }
 
     /**
      * Returns the dataEncoding. May be null or the empty String.
      * @return the value of the dataEncoding
      */
     public String getDataEncodingNoDefault() {
         return dataEncoding;
     }
 
     /**
      * Sets the dataEncoding.
      *
      * @param dataEncoding
      *            the dataEncoding to set, e.g. ISO-8895-1, UTF-8
      */
     public void setDataEncoding(String dataEncoding) {
         this.dataEncoding = dataEncoding;
     }
 
     /**
      * @return whether to stop the test
      */
     public boolean isStopTest() {
         return stopTest;
     }
 
     /**
      * @return whether to stop the test now
      */
     public boolean isStopTestNow() {
         return stopTestNow;
     }
 
     /**
      * @return whether to stop this thread
      */
     public boolean isStopThread() {
         return stopThread;
     }
 
     public void setStopTest(boolean b) {
         stopTest = b;
     }
 
     public void setStopTestNow(boolean b) {
         stopTestNow = b;
     }
 
     public void setStopThread(boolean b) {
         stopThread = b;
     }
 
     /**
      * @return the request headers
      */
     public String getRequestHeaders() {
         return requestHeaders;
     }
 
     /**
      * @return the response headers
      */
     public String getResponseHeaders() {
         return responseHeaders;
     }
 
     /**
      * @param string -
      *            request headers
      */
     public void setRequestHeaders(String string) {
         requestHeaders = string;
     }
 
     /**
      * @param string -
      *            response headers
      */
     public void setResponseHeaders(String string) {
         responseHeaders = string;
     }
 
     /**
      * @return the full content type - e.g. text/html [;charset=utf-8 ]
      */
     public String getContentType() {
         return contentType;
     }
 
     /**
      * Get the media type from the Content Type
      * @return the media type - e.g. text/html (without charset, if any)
      */
     public String getMediaType() {
         return JOrphanUtils.trim(contentType," ;").toLowerCase(java.util.Locale.ENGLISH);
     }
 
     /**
      * Stores the content-type string, e.g. <code>text/xml; charset=utf-8</code>
      * @see #setEncodingAndType(String) which can be used to extract the charset.
      *
      * @param string the content-type to be set
      */
     public void setContentType(String string) {
         contentType = string;
     }
 
     /**
      * @return idleTime
      */
     public long getIdleTime() {
         return idleTime;
     }
 
     /**
      * @return the end time
      */
     public long getEndTime() {
         return endTime;
     }
 
     /**
      * @return the start time
      */
     public long getStartTime() {
         return startTime;
     }
 
     /*
      * Helper methods N.B. setStartTime must be called before setEndTime
      *
      * setStartTime is used by HTTPSampleResult to clone the parent sampler and
      * allow the original start time to be kept
      */
     protected final void setStartTime(long start) {
         startTime = start;
         if (startTimeStamp) {
             timeStamp = startTime;
         }
     }
 
     public void setEndTime(long end) {
         endTime = end;
         if (!startTimeStamp) {
             timeStamp = endTime;
         }
         if (startTime == 0) {
             log.error("setEndTime must be called after setStartTime", new Throwable("Invalid call sequence"));
             // TODO should this throw an error?
         } else {
             elapsedTime = endTime - startTime - idleTime;
         }
     }
 
     /**
      * Set idle time pause.
      * For use by SampleResultConverter/CSVSaveService.
      * @param idle long
      */
     public void setIdleTime(long idle) {
         idleTime = idle;
     }
 
     private void setTimes(long start, long end) {
         setStartTime(start);
         setEndTime(end);
     }
 
     /**
      * Record the start time of a sample
      *
      */
     public void sampleStart() {
         if (startTime == 0) {
             setStartTime(currentTimeInMillis());
         } else {
             log.error("sampleStart called twice", new Throwable("Invalid call sequence"));
         }
     }
 
     /**
      * Record the end time of a sample and calculate the elapsed time
      *
      */
     public void sampleEnd() {
         if (endTime == 0) {
             setEndTime(currentTimeInMillis());
         } else {
             log.error("sampleEnd called twice", new Throwable("Invalid call sequence"));
         }
     }
 
     /**
      * Pause a sample
      *
      */
     public void samplePause() {
         if (pauseTime != 0) {
             log.error("samplePause called twice", new Throwable("Invalid call sequence"));
         }
         pauseTime = currentTimeInMillis();
     }
 
     /**
      * Resume a sample
      *
      */
     public void sampleResume() {
         if (pauseTime == 0) {
             log.error("sampleResume without samplePause", new Throwable("Invalid call sequence"));
         }
         idleTime += currentTimeInMillis() - pauseTime;
         pauseTime = 0;
     }
 
     /**
      * When a Sampler is working as a monitor
      *
      * @param monitor
      *            flag whether this sampler is working as a monitor
+     *            
+     * @deprecated since 3.2 NOOP
      */
+    @Deprecated
     public void setMonitor(boolean monitor) {
-        isMonitor = monitor;
+        // NOOP
     }
 
     /**
      * If the sampler is a monitor, method will return true.
      *
      * @return true if the sampler is a monitor
+     * @deprecated since 3.2 always return false
      */
+    @Deprecated
     public boolean isMonitor() {
-        return isMonitor;
+        return false;
     }
 
     /**
      * The statistical sample sender aggregates several samples to save on
      * transmission costs.
      * 
      * @param count number of samples represented by this instance
      */
     public void setSampleCount(int count) {
         sampleCount = count;
     }
 
     /**
      * return the sample count. by default, the value is 1.
      *
      * @return the sample count
      */
     public int getSampleCount() {
         return sampleCount;
     }
 
     /**
      * Returns the count of errors.
      *
      * @return 0 - or 1 if the sample failed
      * 
      * TODO do we need allow for nested samples?
      */
     public int getErrorCount(){
         return success ? 0 : 1;
     }
 
     public void setErrorCount(int i){// for reading from CSV files
         // ignored currently
     }
 
     /*
      * TODO: error counting needs to be sorted out.
      *
      * At present the Statistical Sampler tracks errors separately
      * It would make sense to move the error count here, but this would
      * mean lots of changes.
      * It's also tricky maintaining the count - it can't just be incremented/decremented
      * when the success flag is set as this may be done multiple times.
      * The work-round for now is to do the work in the StatisticalSampleResult,
      * which overrides this method.
      * Note that some JMS samplers also create samples with > 1 sample count
      * Also the Transaction Controller probably needs to be changed to do
      * proper sample and error accounting.
      * The purpose of this work-round is to allow at least minimal support for
      * errors in remote statistical batch mode.
      *
      */
     
     /**
      * In the event the sampler does want to pass back the actual contents, we
      * still want to calculate the throughput. The bytes are the bytes of the
      * response data.
      *
      * @param length
      *            the number of bytes of the response data for this sample
      */
     public void setBytes(long length) {
         bytes = length;
     }
     
     /**
      * In the event the sampler does want to pass back the actual contents, we
      * still want to calculate the throughput. The bytes are the bytes of the
      * response data.
      *
      * @param length
      *            the number of bytes of the response data for this sample
      * @deprecated use setBytes(long)
      */
     @Deprecated 
     public void setBytes(int length) {
         setBytes((long) length);
     }
     
     /**
      * 
      * @param sentBytesCount long sent bytes
      */
     public void setSentBytes(long sentBytesCount) {
         sentBytes = sentBytesCount;
     }
 
     /**
      * @return the sentBytes
      */
     public long getSentBytes() {
         return sentBytes;
     }
     
     /**
      * return the bytes returned by the response.
      *
      * @return byte count
      * @deprecated use getBytesAsLong 
      */
     @Deprecated
     public int getBytes() {
         return (int) getBytesAsLong();
     }
 
     /**
      * return the bytes returned by the response.
      *
      * @return byte count
      */
     public long getBytesAsLong() {
         if (GETBYTES_NETWORK_SIZE) {
             long tmpSum = this.getHeadersSize() + this.getBodySizeAsLong();
             return tmpSum == 0 ? bytes : tmpSum;
         } else if (GETBYTES_HEADERS_SIZE) {
             return this.getHeadersSize();
         } else if (GETBYTES_BODY_REALSIZE) {
             return this.getBodySizeAsLong();
         }
         return bytes == 0 ? responseData.length : bytes;
     }
 
     /**
      * @return Returns the latency.
      */
     public long getLatency() {
         return latency;
     }
 
     /**
      * Set the time to the first response
      *
      */
     public void latencyEnd() {
         latency = currentTimeInMillis() - startTime - idleTime;
     }
 
     /**
      * This is only intended for use by SampleResultConverter!
      *
      * @param latency
      *            The latency to set.
      */
     public void setLatency(long latency) {
         this.latency = latency;
     }
 
     /**
      * @return Returns the connect time.
      */
     public long getConnectTime() {
         return connectTime;
     }
 
     /**
      * Set the time to the end of connecting
      */
     public void connectEnd() {
         connectTime = currentTimeInMillis() - startTime - idleTime;
     }
 
     /**
      * This is only intended for use by SampleResultConverter!
      *
      * @param time The connect time to set.
      */
     public void setConnectTime(long time) {
         this.connectTime = time;
     }
 
     /**
      * This is only intended for use by SampleResultConverter!
      *
      * @param timeStamp
      *            The timeStamp to set.
      */
     public void setTimeStamp(long timeStamp) {
         this.timeStamp = timeStamp;
     }
 
     private URL location;
 
     public void setURL(URL location) {
         this.location = location;
     }
 
     public URL getURL() {
         return location;
     }
 
     /**
      * Get a String representation of the URL (if defined).
      *
      * @return ExternalForm of URL, or empty string if url is null
      */
     public String getUrlAsString() {
         return location == null ? "" : location.toExternalForm();
     }
 
     /**
      * @return Returns the parent.
      */
     public SampleResult getParent() {
         return parent;
     }
 
     /**
      * @param parent
      *            The parent to set.
      */
     public void setParent(SampleResult parent) {
         this.parent = parent;
     }
 
     public String getResultFileName() {
         return resultFileName;
     }
 
     public void setResultFileName(String resultFileName) {
         this.resultFileName = resultFileName;
     }
 
     public int getGroupThreads() {
         return groupThreads;
     }
 
     public void setGroupThreads(int n) {
         this.groupThreads = n;
     }
 
     public int getAllThreads() {
         return allThreads;
     }
 
     public void setAllThreads(int n) {
         this.allThreads = n;
     }
 
     // Bug 47394
     /**
      * Allow custom SampleSenders to drop unwanted assertionResults
      */
     public void removeAssertionResults() {
         this.assertionResults = null;
     }
 
     /**
      * Allow custom SampleSenders to drop unwanted subResults
      */
     public void removeSubResults() {
         this.subResults = null;
     }
     
     /**
      * Set the headers size in bytes
      * 
      * @param size
      *            the number of bytes of the header
      */
     public void setHeadersSize(int size) {
         this.headersSize = size;
     }
     
     /**
      * Get the headers size in bytes
      * 
      * @return the headers size
      */
     public int getHeadersSize() {
         return headersSize;
     }
 
     /**
      * @return the body size in bytes
      */
     @Deprecated
     public int getBodySize() {
         return (int) getBodySizeAsLong();
     }
     
     /**
      * @return the body size in bytes
      */
     public long getBodySizeAsLong() {
         return bodySize == 0 ? responseData.length : bodySize;
     }
 
     /**
      * @param bodySize the body size to set
      */
     public void setBodySize(long bodySize) {
         this.bodySize = bodySize;
     }
     
     /**
      * @param bodySize the body size to set
      * @deprecated use setBodySize(long)
      */
     @Deprecated
     public void setBodySize(int bodySize) {
         this.bodySize = bodySize;
     }
 
     private static class NanoOffset extends Thread {
 
         private static volatile long nanoOffset; 
 
         static long getNanoOffset() {
             return nanoOffset;
         }
 
         @Override
         public void run() {
             // Wait longer than a clock pulse (generally 10-15ms)
             getOffset(30L); // Catch an early clock pulse to reduce slop.
             while(true) {
                 getOffset(NANOTHREAD_SLEEP); // Can now afford to wait a bit longer between checks
             }
             
         }
 
         private void getOffset(long wait) {
             try {
                 TimeUnit.MILLISECONDS.sleep(wait);
                 long clock = System.currentTimeMillis();
                 long nano = SampleResult.sampleNsClockInMs();
                 nanoOffset = clock - nano;
             } catch (InterruptedException ignore) {
                 // ignored
             }
         }
         
     }
 
     /**
      * @return the startNextThreadLoop
      */
     public boolean isStartNextThreadLoop() {
         return startNextThreadLoop;
     }
 
     /**
      * @param startNextThreadLoop the startNextLoop to set
      */
     public void setStartNextThreadLoop(boolean startNextThreadLoop) {
         this.startNextThreadLoop = startNextThreadLoop;
     }
 
     /**
      * Clean up cached data
      */
     public void cleanAfterSample() {
         this.responseDataAsString = null;
     }
 
     @Override
     public Object clone() {
         try {
             return super.clone();
         } catch (CloneNotSupportedException e) {
             throw new IllegalStateException("This should not happen");
         }
     }
 
     @Override
     public List<String> getSearchableTokens() throws Exception {
         List<String> datasToSearch = new ArrayList<>(4);
         datasToSearch.add(getSampleLabel());
         datasToSearch.add(getResponseDataAsString());
         datasToSearch.add(getRequestHeaders());
         datasToSearch.add(getResponseHeaders());
         return datasToSearch;
     }
 }
diff --git a/src/core/org/apache/jmeter/save/SaveService.java b/src/core/org/apache/jmeter/save/SaveService.java
index 7956fe7c0..7a2d1be28 100644
--- a/src/core/org/apache/jmeter/save/SaveService.java
+++ b/src/core/org/apache/jmeter/save/SaveService.java
@@ -1,638 +1,638 @@
 /*
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
  */
 
 package org.apache.jmeter.save;
 
 import java.io.BufferedInputStream;
 import java.io.BufferedReader;
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileReader;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.io.OutputStream;
 import java.io.OutputStreamWriter;
 import java.io.Writer;
 import java.lang.reflect.InvocationTargetException;
 import java.nio.charset.Charset;
 import java.security.MessageDigest;
 import java.security.NoSuchAlgorithmException;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
 import java.util.Properties;
 
 import org.apache.commons.lang3.builder.ToStringBuilder;
 import org.apache.jmeter.reporters.ResultCollectorHelper;
 import org.apache.jmeter.samplers.SampleEvent;
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jmeter.util.NameUpdater;
 import org.apache.jorphan.collections.HashTree;
 import org.apache.jorphan.logging.LoggingManager;
 import org.apache.jorphan.util.JMeterError;
 import org.apache.jorphan.util.JOrphanUtils;
 import org.apache.log.Logger;
 
 import com.thoughtworks.xstream.XStream;
 import com.thoughtworks.xstream.converters.ConversionException;
 import com.thoughtworks.xstream.converters.Converter;
 import com.thoughtworks.xstream.converters.DataHolder;
 import com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider;
 import com.thoughtworks.xstream.converters.reflection.ReflectionProvider;
 import com.thoughtworks.xstream.io.xml.XppDriver;
 import com.thoughtworks.xstream.mapper.CannotResolveClassException;
 import com.thoughtworks.xstream.mapper.Mapper;
 import com.thoughtworks.xstream.mapper.MapperWrapper;
 
 /**
  * Handles setting up XStream serialisation.
  * The class reads alias definitions from saveservice.properties.
  *
  */
 public class SaveService {
 
     private static final Logger log = LoggingManager.getLoggerForClass();
 
     // Names of DataHolder entries for JTL processing
     public static final String SAMPLE_EVENT_OBJECT = "SampleEvent"; // $NON-NLS-1$
     public static final String RESULTCOLLECTOR_HELPER_OBJECT = "ResultCollectorHelper"; // $NON-NLS-1$
 
     // Names of DataHolder entries for JMX processing
     public static final String TEST_CLASS_NAME = "TestClassName"; // $NON-NLS-1$
 
     private static final class XStreamWrapper extends XStream {
         private XStreamWrapper(ReflectionProvider reflectionProvider) {
             super(reflectionProvider);
         }
 
         // Override wrapMapper in order to insert the Wrapper in the chain
         @Override
         protected MapperWrapper wrapMapper(MapperWrapper next) {
             // Provide our own aliasing using strings rather than classes
             return new MapperWrapper(next){
             // Translate alias to classname and then delegate to wrapped class
             @Override
             public Class<?> realClass(String alias) {
                 String fullName = aliasToClass(alias);
                 if (fullName != null) {
                     fullName = NameUpdater.getCurrentName(fullName);
                 }
                 return super.realClass(fullName == null ? alias : fullName);
             }
             // Translate to alias and then delegate to wrapped class
             @Override
             public String serializedClass(@SuppressWarnings("rawtypes") // superclass does not use types 
                     Class type) {
                 if (type == null) {
                     return super.serializedClass(null); // was type, but that caused FindBugs warning
                 }
                 String alias = classToAlias(type.getName());
                 return alias == null ? super.serializedClass(type) : alias ;
                 }
             };
         }
     }
 
     private static final XStream JMXSAVER = new XStreamWrapper(new PureJavaReflectionProvider());
     private static final XStream JTLSAVER = new XStreamWrapper(new PureJavaReflectionProvider());
     static {
         JTLSAVER.setMode(XStream.NO_REFERENCES); // This is needed to stop XStream keeping copies of each class
     }
 
     // The XML header, with placeholder for encoding, since that is controlled by property
     private static final String XML_HEADER = "<?xml version=\"1.0\" encoding=\"<ph>\"?>"; // $NON-NLS-1$
 
     // Default file name
     private static final String SAVESERVICE_PROPERTIES_FILE = "/bin/saveservice.properties"; // $NON-NLS-1$
 
     // Property name used to define file name
     private static final String SAVESERVICE_PROPERTIES = "saveservice_properties"; // $NON-NLS-1$
 
     // Define file format versions
     private static final String VERSION_2_2 = "2.2";  // $NON-NLS-1$
 
     // Holds the mappings from the saveservice properties file
     // Key: alias Entry: full class name
     // There may be multiple aliases which map to the same class
     private static final Properties aliasToClass = new Properties();
 
     // Holds the reverse mappings
     // Key: full class name Entry: primary alias
     private static final Properties classToAlias = new Properties();
 
     // Version information for test plan header
     // This is written to JMX files by ScriptWrapperConverter
     // Also to JTL files by ResultCollector
     private static final String VERSION = "1.2"; // $NON-NLS-1$
 
     // This is written to JMX files by ScriptWrapperConverter
     private static String propertiesVersion = "";// read from properties file; written to JMX files
     
     // Must match _version property value in saveservice.properties
     // used to ensure saveservice.properties and SaveService are updated simultaneously
-    static final String PROPVERSION = "3.1";// Expected version $NON-NLS-1$
+    static final String PROPVERSION = "3.2";// Expected version $NON-NLS-1$
 
     // Internal information only
     private static String fileVersion = ""; // computed from saveservice.properties file// $NON-NLS-1$
     // Must match the sha1 checksum of the file saveservice.properties (without newline character),
     // used to ensure saveservice.properties and SaveService are updated simultaneously
-    static final String FILEVERSION = "687b9fce95500ae04102444b9bf40ddd970c62aa"; // Expected value $NON-NLS-1$
+    static final String FILEVERSION = "69ec07ad15d0082f9aed0376963134f4ed583a81"; // Expected value $NON-NLS-1$
 
     private static String fileEncoding = ""; // read from properties file// $NON-NLS-1$
 
     static {
         log.info("Testplan (JMX) version: "+VERSION_2_2+". Testlog (JTL) version: "+VERSION_2_2);
         initProps();
         checkVersions();
     }
 
     // Helper method to simplify alias creation from properties
     private static void makeAlias(String aliasList, String clazz) {
         String[] aliases = aliasList.split(","); // Can have multiple aliases for same target classname
         String alias = aliases[0];
         for (String a : aliases){
             Object old = aliasToClass.setProperty(a,clazz);
             if (old != null){
                 log.error("Duplicate class detected for "+alias+": "+clazz+" & "+old);                
             }
         }
         Object oldval=classToAlias.setProperty(clazz,alias);
         if (oldval != null) {
             log.error("Duplicate alias detected for "+clazz+": "+alias+" & "+oldval);
         }
     }
 
     public static Properties loadProperties() throws IOException{
         Properties nameMap = new Properties();
         try (FileInputStream fis = new FileInputStream(JMeterUtils.getJMeterHome()
                 + JMeterUtils.getPropDefault(SAVESERVICE_PROPERTIES, SAVESERVICE_PROPERTIES_FILE))){
             nameMap.load(fis);
         }
         return nameMap;
     }
 
     private static String getChecksumForPropertiesFile()
             throws NoSuchAlgorithmException, IOException {
         MessageDigest md = MessageDigest.getInstance("SHA1");
         try (FileReader fileReader = new FileReader(
                     JMeterUtils.getJMeterHome()
                     + JMeterUtils.getPropDefault(SAVESERVICE_PROPERTIES,
                     SAVESERVICE_PROPERTIES_FILE));
                 BufferedReader reader = new BufferedReader(fileReader)) {
             String line = null;
             while ((line = reader.readLine()) != null) {
                 md.update(line.getBytes());
             }
         }
         return JOrphanUtils.baToHexString(md.digest());
     }
     private static void initProps() {
         // Load the alias properties
         try {
             fileVersion = getChecksumForPropertiesFile();
         } catch (IOException | NoSuchAlgorithmException e) {
             log.fatalError("Can't compute checksum for saveservice properties file", e);
             throw new JMeterError("JMeter requires the checksum of saveservice properties file to continue", e);
         }
         try {
             Properties nameMap = loadProperties();
             // now create the aliases
             for (Map.Entry<Object, Object> me : nameMap.entrySet()) {
                 String key = (String) me.getKey();
                 String val = (String) me.getValue();
                 if (!key.startsWith("_")) { // $NON-NLS-1$
                     makeAlias(key, val);
                 } else {
                     // process special keys
                     if (key.equalsIgnoreCase("_version")) { // $NON-NLS-1$
                         propertiesVersion = val;
                         log.info("Using SaveService properties version " + propertiesVersion);
                     } else if (key.equalsIgnoreCase("_file_version")) { // $NON-NLS-1$
                         log.info("SaveService properties file version is now computed by a checksum,"
                                 + "the property _file_version is not used anymore and can be removed.");
                     } else if (key.equalsIgnoreCase("_file_encoding")) { // $NON-NLS-1$
                         fileEncoding = val;
                         log.info("Using SaveService properties file encoding " + fileEncoding);
                     } else {
                         key = key.substring(1);// Remove the leading "_"
                         try {
                             final String trimmedValue = val.trim();
                             if (trimmedValue.equals("collection") // $NON-NLS-1$
                              || trimmedValue.equals("mapping")) { // $NON-NLS-1$
                                 registerConverter(key, JMXSAVER, true);
                                 registerConverter(key, JTLSAVER, true);
                             } else {
                                 registerConverter(key, JMXSAVER, false);
                                 registerConverter(key, JTLSAVER, false);
                             }
                         } catch (IllegalAccessException | InstantiationException | ClassNotFoundException | IllegalArgumentException|
                                 SecurityException | InvocationTargetException | NoSuchMethodException e1) {
                             log.warn("Can't register a converter: " + key, e1);
                         }
                     }
                 }
             }
         } catch (IOException e) {
             log.fatalError("Bad saveservice properties file", e);
             throw new JMeterError("JMeter requires the saveservice properties file to continue");
         }
     }
 
     /**
      * Register converter.
      * @param key
      * @param jmxsaver
      * @param useMapper
      *
      * @throws InstantiationException
      * @throws IllegalAccessException
      * @throws InvocationTargetException
      * @throws NoSuchMethodException
      * @throws ClassNotFoundException
      */
     private static void registerConverter(String key, XStream jmxsaver, boolean useMapper)
             throws InstantiationException, IllegalAccessException,
             InvocationTargetException, NoSuchMethodException,
             ClassNotFoundException {
         if (useMapper){
             jmxsaver.registerConverter((Converter) Class.forName(key).getConstructor(
                     new Class[] { Mapper.class }).newInstance(
                             new Object[] { jmxsaver.getMapper() }));
         } else {
             jmxsaver.registerConverter((Converter) Class.forName(key).newInstance());
         }
     }
 
     // For converters to use
     public static String aliasToClass(String s){
         String r = aliasToClass.getProperty(s);
         return r == null ? s : r;
     }
 
     // For converters to use
     public static String classToAlias(String s){
         String r = classToAlias.getProperty(s);
         return r == null ? s : r;
     }
 
     // Called by Save function
     public static void saveTree(HashTree tree, OutputStream out) throws IOException {
         // Get the OutputWriter to use
         OutputStreamWriter outputStreamWriter = getOutputStreamWriter(out);
         writeXmlHeader(outputStreamWriter);
         // Use deprecated method, to avoid duplicating code
         ScriptWrapper wrapper = new ScriptWrapper();
         wrapper.testPlan = tree;
         JMXSAVER.toXML(wrapper, outputStreamWriter);
         outputStreamWriter.write('\n');// Ensure terminated properly
         outputStreamWriter.close();
     }
 
     // Used by Test code
     public static void saveElement(Object el, OutputStream out) throws IOException {
         // Get the OutputWriter to use
         OutputStreamWriter outputStreamWriter = getOutputStreamWriter(out);
         writeXmlHeader(outputStreamWriter);
         // Use deprecated method, to avoid duplicating code
         JMXSAVER.toXML(el, outputStreamWriter);
         outputStreamWriter.close();
     }
 
     // Used by Test code
     public static Object loadElement(InputStream in) throws IOException {
         // Get the InputReader to use
         InputStreamReader inputStreamReader = getInputStreamReader(in);
         // Use deprecated method, to avoid duplicating code
         Object element = JMXSAVER.fromXML(inputStreamReader);
         inputStreamReader.close();
         return element;
     }
 
     /**
      * Save a sampleResult to an XML output file using XStream.
      *
      * @param evt sampleResult wrapped in a sampleEvent
      * @param writer output stream which must be created using {@link #getFileEncoding(String)}
      * @throws IOException when writing data to output fails
      */
     // Used by ResultCollector.sampleOccurred(SampleEvent event)
     public synchronized static void saveSampleResult(SampleEvent evt, Writer writer) throws IOException {
         DataHolder dh = JTLSAVER.newDataHolder();
         dh.put(SAMPLE_EVENT_OBJECT, evt);
         // This is effectively the same as saver.toXML(Object, Writer) except we get to provide the DataHolder
         // Don't know why there is no method for this in the XStream class
         try {
             JTLSAVER.marshal(evt.getResult(), new XppDriver().createWriter(writer), dh);
         } catch(RuntimeException e) {
             throw new IllegalArgumentException("Failed marshalling:"+(evt.getResult() != null ? showDebuggingInfo(evt.getResult()) : "null"), e);
         }
         writer.write('\n');
     }
 
     /**
      * 
      * @param result SampleResult
      * @return String debugging information
      */
     private static String showDebuggingInfo(SampleResult result) {
         try {
             return "class:"+result.getClass()+",content:"+ToStringBuilder.reflectionToString(result);
         } catch(Exception e) {
             return "Exception occured creating debug from event, message:"+e.getMessage();
         }
     }
 
     /**
      * @param elem test element
      * @param writer output stream which must be created using {@link #getFileEncoding(String)}
      * @throws IOException when writing data to output fails
      */
     // Used by ResultCollector#recordStats()
     public synchronized static void saveTestElement(TestElement elem, Writer writer) throws IOException {
         JMXSAVER.toXML(elem, writer); // TODO should this be JTLSAVER? Only seems to be called by MonitorHealthVisualzer
         writer.write('\n');
     }
 
     private static boolean versionsOK = true;
 
 //  private static void checkVersion(Class clazz, String expected) {
 //
 //      String actual = "*NONE*"; // $NON-NLS-1$
 //      try {
 //          actual = (String) clazz.getMethod("getVersion", null).invoke(null, null);
 //          actual = extractVersion(actual);
 //      } catch (Exception ignored) {
 //          // Not needed
 //      }
 //      if (0 != actual.compareTo(expected)) {
 //          versionsOK = false;
 //          log.warn("Version mismatch: expected '" + expected + "' found '" + actual + "' in " + clazz.getName());
 //      }
 //  }
 
     // Routines for TestSaveService
     static String getPropertyVersion(){
         return SaveService.propertiesVersion;
     }
 
     static String getFileVersion(){
         return SaveService.fileVersion;
     }
 
     // Allow test code to check for spurious class references
     static List<String> checkClasses(){
         final ClassLoader classLoader = SaveService.class.getClassLoader();
         List<String> missingClasses = new ArrayList<>();
         //boolean OK = true;
         for (Object clazz : classToAlias.keySet()) {
             String name = (String) clazz;
             if (!NameUpdater.isMapped(name)) {// don't bother checking class is present if it is to be updated
                 try {
                     Class.forName(name, false, classLoader);
                 } catch (ClassNotFoundException e) {
                         log.error("Unexpected entry in saveservice.properties; class does not exist and is not upgraded: "+name);              
                         missingClasses.add(name);
                 }
             }
         }
         return missingClasses;
     }
 
     static boolean checkVersions() {
         versionsOK = true;
         // Disable converter version checks as they are more of a nuisance than helpful
 //      checkVersion(BooleanPropertyConverter.class, "493779"); // $NON-NLS-1$
 //      checkVersion(HashTreeConverter.class, "514283"); // $NON-NLS-1$
 //      checkVersion(IntegerPropertyConverter.class, "493779"); // $NON-NLS-1$
 //      checkVersion(LongPropertyConverter.class, "493779"); // $NON-NLS-1$
 //      checkVersion(MultiPropertyConverter.class, "514283"); // $NON-NLS-1$
 //      checkVersion(SampleResultConverter.class, "571992"); // $NON-NLS-1$
 //
 //        // Not built until later, so need to use this method:
 //        try {
 //            checkVersion(
 //                    Class.forName("org.apache.jmeter.protocol.http.util.HTTPResultConverter"), // $NON-NLS-1$
 //                    "514283"); // $NON-NLS-1$
 //        } catch (ClassNotFoundException e) {
 //            versionsOK = false;
 //            log.warn(e.getLocalizedMessage());
 //        }
 //      checkVersion(StringPropertyConverter.class, "493779"); // $NON-NLS-1$
 //      checkVersion(TestElementConverter.class, "549987"); // $NON-NLS-1$
 //      checkVersion(TestElementPropertyConverter.class, "549987"); // $NON-NLS-1$
 //      checkVersion(ScriptWrapperConverter.class, "514283"); // $NON-NLS-1$
 //      checkVersion(TestResultWrapperConverter.class, "514283"); // $NON-NLS-1$
 //        checkVersion(SampleSaveConfigurationConverter.class,"549936"); // $NON-NLS-1$
 
         if (!PROPVERSION.equalsIgnoreCase(propertiesVersion)) {
             log.warn("Bad _version - expected " + PROPVERSION + ", found " + propertiesVersion + ".");
         }
 //        if (!FILEVERSION.equalsIgnoreCase(fileVersion)) {
 //            log.warn("Bad _file_version - expected " + FILEVERSION + ", found " + fileVersion +".");
 //        }
         if (versionsOK) {
             log.info("All converter versions present and correct");
         }
         return versionsOK;
     }
 
     /**
      * Read results from JTL file.
      *
      * @param reader of the file
      * @param resultCollectorHelper helper class to enable TestResultWrapperConverter to deliver the samples
      * @throws IOException if an I/O error occurs
      */
     public static void loadTestResults(InputStream reader, ResultCollectorHelper resultCollectorHelper) throws IOException {
         // Get the InputReader to use
         InputStreamReader inputStreamReader = getInputStreamReader(reader);
         DataHolder dh = JTLSAVER.newDataHolder();
         dh.put(RESULTCOLLECTOR_HELPER_OBJECT, resultCollectorHelper); // Allow TestResultWrapper to feed back the samples
         // This is effectively the same as saver.fromXML(InputStream) except we get to provide the DataHolder
         // Don't know why there is no method for this in the XStream class
         JTLSAVER.unmarshal(new XppDriver().createReader(reader), null, dh);
         inputStreamReader.close();
     }
 
     /**
      * Load a Test tree (JMX file)
      * @param inputStream the JMX file as an {@link InputStream}
      * @return the loaded tree or null if an error occurs
      * @throws IOException if there is a problem reading the file or processing it
      * @deprecated use {@link SaveService}{@link #loadTree(File)}
      */
     @Deprecated
     public static HashTree loadTree(InputStream inputStream) throws IOException {
         try {
             return readTree(inputStream, null);
         } catch(IllegalArgumentException e) {
             log.error("Problem loading XML, message:"+e.getMessage(), e);
             return null;
         } finally {
             JOrphanUtils.closeQuietly(inputStream);
         }
     }
     
     /**
      * Load a Test tree (JMX file)
      * @param file the JMX file
      * @return the loaded tree
      * @throws IOException if there is a problem reading the file or processing it
      */
     public static HashTree loadTree(File file) throws IOException {
         log.info("Loading file: " + file);
         try (InputStream inputStream = new FileInputStream(file);
                 BufferedInputStream bufferedInputStream = 
                     new BufferedInputStream(inputStream)){
             return readTree(bufferedInputStream, file);
         }
     }
 
     /**
      * 
      * @param inputStream {@link InputStream} 
      * @param file the JMX file used only for debug, can be null
      * @return the loaded tree
      * @throws IOException if there is a problem reading the file or processing it
      */
     private static HashTree readTree(InputStream inputStream, File file)
             throws IOException {
         ScriptWrapper wrapper = null;
         try {
             // Get the InputReader to use
             InputStreamReader inputStreamReader = getInputStreamReader(inputStream);
             wrapper = (ScriptWrapper) JMXSAVER.fromXML(inputStreamReader);
             inputStreamReader.close();
             if (wrapper == null){
                 log.error("Problem loading XML: see above.");
                 return null;
             }
             return wrapper.testPlan;
         } catch (CannotResolveClassException e) {
             if(file != null) {
                 throw new IllegalArgumentException("Problem loading XML from:'"+file.getAbsolutePath()+"', cannot determine class for element: " + e, e);
             } else {
                 throw new IllegalArgumentException("Problem loading XML, cannot determine class for element: " + e, e);
             }
         } catch (ConversionException | NoClassDefFoundError e) {
             if(file != null) {
                 throw new IllegalArgumentException("Problem loading XML from:'"+file.getAbsolutePath()+"', missing class "+e , e);
             } else {
                 throw new IllegalArgumentException("Problem loading XML, missing class "+e , e);
             }
         }
 
     }
     private static InputStreamReader getInputStreamReader(InputStream inStream) {
         // Check if we have a encoding to use from properties
         Charset charset = getFileEncodingCharset();
         if(charset != null) {
             return new InputStreamReader(inStream, charset);
         }
         else {
             // We use the default character set encoding of the JRE
             return new InputStreamReader(inStream);
         }
     }
 
     private static OutputStreamWriter getOutputStreamWriter(OutputStream outStream) {
         // Check if we have a encoding to use from properties
         Charset charset = getFileEncodingCharset();
         if(charset != null) {
             return new OutputStreamWriter(outStream, charset);
         }
         else {
             // We use the default character set encoding of the JRE
             return new OutputStreamWriter(outStream);
         }
     }
 
     /**
      * Returns the file Encoding specified in saveservice.properties or the default
      * @param dflt value to return if file encoding was not provided
      *
      * @return file encoding or default
      */
     // Used by ResultCollector when creating output files
     public static String getFileEncoding(String dflt){
         if(fileEncoding != null && fileEncoding.length() > 0) {
             return fileEncoding;
         }
         else {
             return dflt;
         }
     }
 
     private static Charset getFileEncodingCharset() {
         // Check if we have a encoding to use from properties
         if(fileEncoding != null && fileEncoding.length() > 0) {
             return Charset.forName(fileEncoding);
         }
         else {
             // We use the default character set encoding of the JRE
             return null;
         }
     }
 
     private static void writeXmlHeader(OutputStreamWriter writer) throws IOException {
         // Write XML header if we have the charset to use for encoding
         Charset charset = getFileEncodingCharset();
         if(charset != null) {
             // We do not use getEncoding method of Writer, since that returns
             // the historical name
             String header = XML_HEADER.replaceAll("<ph>", charset.name());
             writer.write(header);
             writer.write('\n');
         }
     }
 
 //  Normal output
 //  ---- Debugging information ----
 //  required-type       : org.apache.jorphan.collections.ListedHashTree
 //  cause-message       : WebServiceSampler : WebServiceSampler
 //  class               : org.apache.jmeter.save.ScriptWrapper
 //  message             : WebServiceSampler : WebServiceSampler
 //  line number         : 929
 //  path                : /jmeterTestPlan/hashTree/hashTree/hashTree[4]/hashTree[5]/WebServiceSampler
 //  cause-exception     : com.thoughtworks.xstream.alias.CannotResolveClassException
 //  -------------------------------
 
     /**
      * Simplify getMessage() output from XStream ConversionException
      * @param ce - ConversionException to analyse
      * @return string with details of error
      */
     public static String CEtoString(ConversionException ce){
         String msg =
             "XStream ConversionException at line: " + ce.get("line number")
             + "\n" + ce.get("message")
             + "\nPerhaps a missing jar? See log file.";
         return msg;
     }
 
     public static String getPropertiesVersion() {
         return propertiesVersion;
     }
 
     public static String getVERSION() {
         return VERSION;
     }
 }
diff --git a/src/protocol/http/org/apache/jmeter/protocol/http/control/gui/HttpTestSampleGui.java b/src/protocol/http/org/apache/jmeter/protocol/http/control/gui/HttpTestSampleGui.java
index d397e28da..d6aede380 100644
--- a/src/protocol/http/org/apache/jmeter/protocol/http/control/gui/HttpTestSampleGui.java
+++ b/src/protocol/http/org/apache/jmeter/protocol/http/control/gui/HttpTestSampleGui.java
@@ -1,285 +1,276 @@
 /*
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
  */
 
 package org.apache.jmeter.protocol.http.control.gui;
 
 import java.awt.BorderLayout;
 import java.awt.Dimension;
 import java.awt.event.ItemEvent;
 import java.awt.event.ItemListener;
 
 import javax.swing.BorderFactory;
 import javax.swing.JCheckBox;
 import javax.swing.JComboBox;
 import javax.swing.JPanel;
 import javax.swing.JTabbedPane;
 import javax.swing.JTextField;
 
 import org.apache.jmeter.gui.util.HorizontalPanel;
 import org.apache.jmeter.gui.util.VerticalPanel;
 import org.apache.jmeter.protocol.http.config.gui.UrlConfigGui;
 import org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase;
 import org.apache.jmeter.protocol.http.sampler.HTTPSamplerProxy;
 import org.apache.jmeter.samplers.gui.AbstractSamplerGui;
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jorphan.gui.JLabeledTextField;
 
 //For unit tests, @see TestHttpTestSampleGui
 
 /**
  * HTTP Sampler GUI
  *
  */
 public class HttpTestSampleGui extends AbstractSamplerGui {
     
     private static final long serialVersionUID = 241L;
     
     private UrlConfigGui urlConfigGui;
 
     private JCheckBox retrieveEmbeddedResources;
     
     private JCheckBox concurrentDwn;
     
     private JTextField concurrentPool; 
 
-    private JCheckBox isMon;
-
     private JCheckBox useMD5;
 
     private JLabeledTextField embeddedRE; // regular expression used to match against embedded resource URLs
 
     private JTextField sourceIpAddr; // does not apply to Java implementation
     
     private JComboBox<String> sourceIpType = new JComboBox<>(HTTPSamplerBase.getSourceTypeList());
 
     private final boolean isAJP;
     
     public HttpTestSampleGui() {
         isAJP = false;
         init();
     }
 
     // For use by AJP
     protected HttpTestSampleGui(boolean ajp) {
         isAJP = ajp;
         init();
     }
 
     /**
      * {@inheritDoc}
      */
     @Override
     public void configure(TestElement element) {
         super.configure(element);
         final HTTPSamplerBase samplerBase = (HTTPSamplerBase) element;
         urlConfigGui.configure(element);
         retrieveEmbeddedResources.setSelected(samplerBase.isImageParser());
         concurrentDwn.setSelected(samplerBase.isConcurrentDwn());
         concurrentPool.setText(samplerBase.getConcurrentPool());
-        isMon.setSelected(samplerBase.isMonitor());
         useMD5.setSelected(samplerBase.useMD5());
         embeddedRE.setText(samplerBase.getEmbeddedUrlRE());
         if (!isAJP) {
             sourceIpAddr.setText(samplerBase.getIpSource());
             sourceIpType.setSelectedIndex(samplerBase.getIpSourceType());
         }
     }
     
     /**
      * {@inheritDoc}
      */
     @Override
     public TestElement createTestElement() {
         HTTPSamplerBase sampler = new HTTPSamplerProxy();
         modifyTestElement(sampler);
         return sampler;
     }
 
     /**
      * Modifies a given TestElement to mirror the data in the gui components.
      * <p>
      * {@inheritDoc}
      */
     @Override
     public void modifyTestElement(TestElement sampler) {
         sampler.clear();
         urlConfigGui.modifyTestElement(sampler);
         final HTTPSamplerBase samplerBase = (HTTPSamplerBase) sampler;
         samplerBase.setImageParser(retrieveEmbeddedResources.isSelected());
         enableConcurrentDwn(retrieveEmbeddedResources.isSelected());
         samplerBase.setConcurrentDwn(concurrentDwn.isSelected());
         samplerBase.setConcurrentPool(concurrentPool.getText());
-        samplerBase.setMonitor(isMon.isSelected());
         samplerBase.setMD5(useMD5.isSelected());
         samplerBase.setEmbeddedUrlRE(embeddedRE.getText());
         if (!isAJP) {
             samplerBase.setIpSource(sourceIpAddr.getText());
             samplerBase.setIpSourceType(sourceIpType.getSelectedIndex());
         }
         super.configureTestElement(sampler);
     }
 
     /**
      * {@inheritDoc}
      */
     @Override
     public String getLabelResource() {
         return "web_testing_title"; // $NON-NLS-1$
     }
 
     private void init() {// called from ctor, so must not be overridable
         setLayout(new BorderLayout(0, 5));
         setBorder(makeBorder());
 
         // URL CONFIG
         urlConfigGui = new UrlConfigGui(true, !isAJP, true, true);
         
         // AdvancedPanel (embedded resources, source address and optional tasks)
         JPanel advancedPanel = new VerticalPanel();
         advancedPanel.add(createEmbeddedRsrcPanel());
         advancedPanel.add(createSourceAddrPanel());
         advancedPanel.add(createOptionalTasksPanel());
         
         JTabbedPane tabbedPane = new JTabbedPane();
         tabbedPane.add(JMeterUtils
                 .getResString("web_testing_basic"), urlConfigGui);
         tabbedPane.add(JMeterUtils
                 .getResString("web_testing_advanced"), advancedPanel);
 
         JPanel emptyPanel = new JPanel();
         emptyPanel.setMaximumSize(new Dimension());
 
         add(makeTitlePanel(), BorderLayout.NORTH);
         add(tabbedPane, BorderLayout.CENTER);
         add(emptyPanel, BorderLayout.SOUTH);
     }
 
     protected JPanel createEmbeddedRsrcPanel() {
         // retrieve Embedded resources
         retrieveEmbeddedResources = new JCheckBox(JMeterUtils.getResString("web_testing_retrieve_images")); // $NON-NLS-1$
         // add a listener to activate or not concurrent dwn.
         retrieveEmbeddedResources.addItemListener(new ItemListener() {
             @Override
             public void itemStateChanged(final ItemEvent e) {
                 if (e.getStateChange() == ItemEvent.SELECTED) { enableConcurrentDwn(true); }
                 else { enableConcurrentDwn(false); }
             }
         });
         // Download concurrent resources
         concurrentDwn = new JCheckBox(JMeterUtils.getResString("web_testing_concurrent_download")); // $NON-NLS-1$
         concurrentDwn.addItemListener(new ItemListener() {
             @Override
             public void itemStateChanged(final ItemEvent e) {
                 if (retrieveEmbeddedResources.isSelected() && e.getStateChange() == ItemEvent.SELECTED) { concurrentPool.setEnabled(true); }
                 else { concurrentPool.setEnabled(false); }
             }
         });
         concurrentPool = new JTextField(2); // 2 column size
         concurrentPool.setMinimumSize(new Dimension(10, (int) concurrentPool.getPreferredSize().getHeight()));
         concurrentPool.setMaximumSize(new Dimension(30, (int) concurrentPool.getPreferredSize().getHeight()));
 
         final JPanel embeddedRsrcPanel = new HorizontalPanel();
         embeddedRsrcPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), JMeterUtils
                 .getResString("web_testing_retrieve_title"))); // $NON-NLS-1$
         embeddedRsrcPanel.add(retrieveEmbeddedResources);
         embeddedRsrcPanel.add(concurrentDwn);
         embeddedRsrcPanel.add(concurrentPool);
 
         // Embedded URL match regex
         embeddedRE = new JLabeledTextField(JMeterUtils.getResString("web_testing_embedded_url_pattern"),20); // $NON-NLS-1$
         embeddedRsrcPanel.add(embeddedRE);
         
         return embeddedRsrcPanel;
     }
 
     protected JPanel createOptionalTasksPanel() {
         // OPTIONAL TASKS
         final JPanel checkBoxPanel = new VerticalPanel();
         checkBoxPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), JMeterUtils
                 .getResString("optional_tasks"))); // $NON-NLS-1$
 
         // Use MD5
         useMD5 = new JCheckBox(JMeterUtils.getResString("response_save_as_md5")); // $NON-NLS-1$
-
-        // Is monitor
-        isMon = new JCheckBox(JMeterUtils.getResString("monitor_is_title")); // $NON-NLS-1$
         checkBoxPanel.add(useMD5);
-        checkBoxPanel.add(isMon);
 
         return checkBoxPanel;
     }
     
     protected JPanel createSourceAddrPanel() {
         final JPanel sourceAddrPanel = new HorizontalPanel();
         sourceAddrPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), JMeterUtils
                 .getResString("web_testing_source_ip"))); // $NON-NLS-1$
 
         if (!isAJP) {
             // Add a new field source ip address (for HC implementations only)
             sourceIpType.setSelectedIndex(HTTPSamplerBase.SourceType.HOSTNAME.ordinal()); //default: IP/Hostname
             sourceAddrPanel.add(sourceIpType);
 
             sourceIpAddr = new JTextField();
             sourceAddrPanel.add(sourceIpAddr);
         }
         return sourceAddrPanel;
     }
 
     /**
      * {@inheritDoc}
      */
     @Override
     public Dimension getPreferredSize() {
         return getMinimumSize();
     }
     
     /**
      * {@inheritDoc}
      */
     @Override
     public void clearGui() {
         super.clearGui();
         retrieveEmbeddedResources.setSelected(false);
         concurrentDwn.setSelected(false);
         concurrentPool.setText(String.valueOf(HTTPSamplerBase.CONCURRENT_POOL_SIZE));
         enableConcurrentDwn(false);
-        isMon.setSelected(false);
         useMD5.setSelected(false);
         urlConfigGui.clear();
         embeddedRE.setText(""); // $NON-NLS-1$
         if (!isAJP) {
             sourceIpAddr.setText(""); // $NON-NLS-1$
             sourceIpType.setSelectedIndex(HTTPSamplerBase.SourceType.HOSTNAME.ordinal()); //default: IP/Hostname
         }
     }
     
     private void enableConcurrentDwn(boolean enable) {
         if (enable) {
             concurrentDwn.setEnabled(true);
             embeddedRE.setEnabled(true);
             if (concurrentDwn.isSelected()) {
                 concurrentPool.setEnabled(true);
             }
         } else {
             concurrentDwn.setEnabled(false);
             concurrentPool.setEnabled(false);
             embeddedRE.setEnabled(false);
         }
     }
 }
diff --git a/src/protocol/http/org/apache/jmeter/protocol/http/sampler/AjpSampler.java b/src/protocol/http/org/apache/jmeter/protocol/http/sampler/AjpSampler.java
index 736b8658e..93a5e27be 100644
--- a/src/protocol/http/org/apache/jmeter/protocol/http/sampler/AjpSampler.java
+++ b/src/protocol/http/org/apache/jmeter/protocol/http/sampler/AjpSampler.java
@@ -1,523 +1,522 @@
 /*
  *  Licensed to the Apache Software Foundation (ASF) under one or more
  *  contributor license agreements.  See the NOTICE file distributed with
  *  this work for additional information regarding copyright ownership.
  *  The ASF licenses this file to You under the Apache License, Version 2.0
  *  (the "License"); you may not use this file except in compliance with
  *  the License.  You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0
  *
  *  Unless required by applicable law or agreed to in writing, software
  *  distributed under the License is distributed on an "AS IS" BASIS,
  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
 package org.apache.jmeter.protocol.http.sampler;
 
 import java.io.BufferedInputStream;
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
 import java.net.Socket;
 import java.net.URL;
 
 import org.apache.jmeter.protocol.http.control.AuthManager;
 import org.apache.jmeter.protocol.http.control.Cookie;
 import org.apache.jmeter.protocol.http.control.CookieManager;
 import org.apache.jmeter.protocol.http.control.Header;
 import org.apache.jmeter.protocol.http.control.HeaderManager;
 import org.apache.jmeter.protocol.http.util.HTTPConstants;
 import org.apache.jmeter.protocol.http.util.HTTPFileArg;
 import org.apache.jmeter.samplers.Interruptible;
 import org.apache.jmeter.testelement.property.JMeterProperty;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jorphan.logging.LoggingManager;
 import org.apache.jorphan.util.JOrphanUtils;
 import org.apache.log.Logger;
 
 /**
  * Selector for the AJP/1.3 protocol
  * (i.e. what Tomcat uses with mod_jk)
  * It allows you to test Tomcat in AJP mode without
  * actually having Apache installed and configured
  *
  */
 public class AjpSampler extends HTTPSamplerBase implements Interruptible {
 
     private static final long serialVersionUID = 233L;
 
     private static final Logger log= LoggingManager.getLoggerForClass();
 
     private static final char NEWLINE = '\n';
     private static final String COLON_SPACE = ": ";//$NON-NLS-1$
 
     /**
      *  Translates integer codes to request header names
      */
     private static final String[] HEADER_TRANS_ARRAY = {
         "accept",               //$NON-NLS-1$
         "accept-charset",       //$NON-NLS-1$
         "accept-encoding",      //$NON-NLS-1$
         "accept-language",      //$NON-NLS-1$
         "authorization",        //$NON-NLS-1$
         "connection",           //$NON-NLS-1$
         "content-type",         //$NON-NLS-1$
         "content-length",       //$NON-NLS-1$
         "cookie",               //$NON-NLS-1$
         "cookie2",              //$NON-NLS-1$
         "host",                 //$NON-NLS-1$
         "pragma",               //$NON-NLS-1$
         "referer",              //$NON-NLS-1$
         "user-agent"            //$NON-NLS-1$
     };
 
     /**
      * Base value for translated headers
      */
     static final int AJP_HEADER_BASE = 0xA000;
 
     static final int MAX_SEND_SIZE = 8*1024 - 4 - 4;
 
     private transient Socket channel = null;
     private transient Socket activeChannel = null;
     private int lastPort = -1;
     private String lastHost = null;
     private String localName = null;
     private String localAddress = null;
     private final byte [] inbuf = new byte[8*1024];
     private final byte [] outbuf = new byte[8*1024];
     private final transient ByteArrayOutputStream responseData = new ByteArrayOutputStream();
     private int inpos = 0;
     private int outpos = 0;
     private transient String stringBody = null;
     private transient InputStream body = null;
 
     public AjpSampler() {
     }
 
     @Override
     protected HTTPSampleResult sample(URL url,
                        String method,
                        boolean frd,
                        int fd) {
         HTTPSampleResult res = new HTTPSampleResult();
-        res.setMonitor(false);
         res.setSampleLabel(url.toExternalForm());
         res.sampleStart();
         try {
             setupConnection(url, method, res);
             activeChannel = channel;
             execute(method, res);
             res.sampleEnd();
             res.setResponseData(responseData.toByteArray());
             return res;
         } catch(IOException iex) {
             res.sampleEnd();
             lastPort = -1; // force reopen on next sample
             channel = null;
             return errorResult(iex, res);
         } finally {
             activeChannel = null;
             JOrphanUtils.closeQuietly(body);
             body = null;
         }
     }
 
     @Override
     public void threadFinished() {
         if(channel != null) {
             try {
                 channel.close();
             } catch(IOException iex) {
             log.debug("Error closing channel",iex);
             }
         }
         channel = null;
         JOrphanUtils.closeQuietly(body);
         body = null;
         stringBody = null;
     }
 
     private void setupConnection(URL url,
                  String method,
                  HTTPSampleResult res) throws IOException {
 
         String host = url.getHost();
         int port = url.getPort();
         if(port <= 0 || port == url.getDefaultPort()) {
             port = 8009;
         }
         String scheme = url.getProtocol();
         if(channel == null || !host.equals(lastHost) || port != lastPort) {
             if(channel != null) {
             channel.close();
             }
             channel = new Socket(host, port);
             int timeout = JMeterUtils.getPropDefault("httpclient.timeout",0);//$NON-NLS-1$
             if(timeout > 0) {
                 channel.setSoTimeout(timeout);
             }
             localAddress = channel.getLocalAddress().getHostAddress();
             localName = channel.getLocalAddress().getHostName();
             lastHost = host;
             lastPort = port;
         }
         res.setURL(url);
         res.setHTTPMethod(method);
         outpos = 4;
         setByte((byte)2);
         if(method.equals(HTTPConstants.POST)) {
             setByte((byte)4);
         } else {
             setByte((byte)2);
         }
         if(JMeterUtils.getPropDefault("httpclient.version","1.1").equals("1.0")) {//$NON-NLS-1$//$NON-NLS-2$//$NON-NLS-3$
             setString("HTTP/1.0");//$NON-NLS-1$
         } else {
             setString(HTTPConstants.HTTP_1_1);
         }
         setString(url.getPath());
         setString(localAddress);
         setString(localName);
         setString(host);
         setInt(url.getDefaultPort());
         setByte(HTTPConstants.PROTOCOL_HTTPS.equalsIgnoreCase(scheme) ? (byte)1 : (byte)0);
         setInt(getHeaderSize(method, url));
         String hdr = setConnectionHeaders(url, host, method);
         res.setRequestHeaders(hdr);
         res.setCookies(setConnectionCookies(url, getCookieManager()));
         String query = url.getQuery();
         if (query != null) {
             setByte((byte)0x05); // Marker for query string attribute
             setString(query);
         }
         setByte((byte)0xff); // More general attributes not supported
     }
 
     private int getHeaderSize(String method, URL url) {
         HeaderManager headers = getHeaderManager();
         CookieManager cookies = getCookieManager();
         AuthManager auth = getAuthManager();
         int hsz = 1; // Host always
         if(method.equals(HTTPConstants.POST)) {
             HTTPFileArg[] hfa = getHTTPFiles();
             if(hfa.length > 0) {
                 hsz += 3;
             } else {
                 hsz += 2;
             }
         }
         if(headers != null) {
             hsz += headers.size();
         }
         if(cookies != null) {
             hsz += cookies.getCookieCount();
         }
         if(auth != null) {
                 String authHeader = auth.getAuthHeaderForURL(url);
             if(authHeader != null) {
             ++hsz;
             }
         }
         return hsz;
     }
 
 
     private String setConnectionHeaders(URL url, String host, String method)
     throws IOException {
         HeaderManager headers = getHeaderManager();
         AuthManager auth = getAuthManager();
         StringBuilder hbuf = new StringBuilder();
         // Allow Headers to override Host setting
         hbuf.append("Host").append(COLON_SPACE).append(host).append(NEWLINE);//$NON-NLS-1$
         setInt(0xA00b); //Host
         setString(host);
         if(headers != null) {
             for (JMeterProperty jMeterProperty : headers.getHeaders()) {
                 Header header = (Header) jMeterProperty.getObjectValue();
                 String n = header.getName();
                 String v = header.getValue();
                 hbuf.append(n).append(COLON_SPACE).append(v).append(NEWLINE);
                 int hc = translateHeader(n);
                 if(hc > 0) {
                     setInt(hc+AJP_HEADER_BASE);
                 } else {
                     setString(n);
                 }
                 setString(v);
             }
         }
         if(method.equals(HTTPConstants.POST)) {
             int cl = -1;
             HTTPFileArg[] hfa = getHTTPFiles();
             if(hfa.length > 0) {
                 HTTPFileArg fa = hfa[0];
                 String fn = fa.getPath();
                 File input = new File(fn);
                 cl = (int)input.length();
                 if(body != null) {
                     JOrphanUtils.closeQuietly(body);
                     body = null;
                 }
                 body = new BufferedInputStream(new FileInputStream(input));
                 setString(HTTPConstants.HEADER_CONTENT_DISPOSITION);
                 setString("form-data; name=\""+encode(fa.getParamName())+
                       "\"; filename=\"" + encode(fn) +"\""); //$NON-NLS-1$ //$NON-NLS-2$
                 String mt = fa.getMimeType();
                 hbuf.append(HTTPConstants.HEADER_CONTENT_TYPE).append(COLON_SPACE).append(mt).append(NEWLINE);
                 setInt(0xA007); // content-type
                 setString(mt);
             } else {
                 hbuf.append(HTTPConstants.HEADER_CONTENT_TYPE).append(COLON_SPACE).append(HTTPConstants.APPLICATION_X_WWW_FORM_URLENCODED).append(NEWLINE);
                 setInt(0xA007); // content-type
                 setString(HTTPConstants.APPLICATION_X_WWW_FORM_URLENCODED);
                 StringBuilder sb = new StringBuilder();
                 boolean first = true;
                 for (JMeterProperty arg : getArguments()) {
                     if (first) {
                         first = false;
                     } else {
                         sb.append('&');
                     }
                     sb.append(arg.getStringValue());
                 }
                 stringBody = sb.toString();
                 byte [] sbody = stringBody.getBytes(); // TODO - charset?
                 cl = sbody.length;
                 body = new ByteArrayInputStream(sbody);
             }
             hbuf.append(HTTPConstants.HEADER_CONTENT_LENGTH).append(COLON_SPACE).append(String.valueOf(cl)).append(NEWLINE);
             setInt(0xA008); // Content-length
             setString(String.valueOf(cl));
         }
         if(auth != null) {
             String authHeader = auth.getAuthHeaderForURL(url);
             if(authHeader != null) {
                 setInt(0xA005); // Authorization
                 setString(authHeader);
                 hbuf.append(HTTPConstants.HEADER_AUTHORIZATION).append(COLON_SPACE).append(authHeader).append(NEWLINE);
             }
         }
         return hbuf.toString();
     }
 
     private String encode(String value)  {
         StringBuilder newValue = new StringBuilder();
         char[] chars = value.toCharArray();
         for (char c : chars) {
             if (c == '\\')//$NON-NLS-1$
             {
                 newValue.append("\\\\");//$NON-NLS-1$
             } else {
                 newValue.append(c);
             }
         }
         return newValue.toString();
     }
 
     private String setConnectionCookies(URL url, CookieManager cookies) {
         String cookieHeader = null;
         if(cookies != null) {
             cookieHeader = cookies.getCookieHeaderForURL(url);
             for (JMeterProperty jMeterProperty : cookies.getCookies()) {
                 Cookie cookie = (Cookie)(jMeterProperty.getObjectValue());
                 setInt(0xA009); // Cookie
                 setString(cookie.getName()+"="+cookie.getValue());//$NON-NLS-1$
             }
         }
         return cookieHeader;
     }
 
     private int translateHeader(String n) {
         for(int i=0; i < HEADER_TRANS_ARRAY.length; i++) {
             if(HEADER_TRANS_ARRAY[i].equalsIgnoreCase(n)) {
                 return i+1;
             }
         }
         return -1;
     }
 
     private void setByte(byte b) {
         outbuf[outpos++] = b;
     }
 
     private void setInt(int n) {
         outbuf[outpos++] = (byte)((n >> 8)&0xff);
         outbuf[outpos++] = (byte) (n&0xff);
     }
 
     private void setString(String s) {
         if( s == null ) {
             setInt(0xFFFF);
         } else {
             int len = s.length();
             setInt(len);
             for(int i=0; i < len; i++) {
                 setByte((byte)s.charAt(i));
             }
             setByte((byte)0);
         }
     }
 
     private void send() throws IOException {
         OutputStream os = channel.getOutputStream();
         int len = outpos;
         outpos = 0;
         setInt(0x1234);
         setInt(len-4);
         os.write(outbuf, 0, len);
     }
 
     private void execute(String method, HTTPSampleResult res)
     throws IOException {
         send();
         if(method.equals(HTTPConstants.POST)) {
             res.setQueryString(stringBody);
             sendPostBody();
         }
         handshake(res);
     }
 
     private void handshake(HTTPSampleResult res) throws IOException {
         responseData.reset();
         int msg = getMessage();
         while(msg != 5) {
             if(msg == 3) {
             int len = getInt();
                 responseData.write(inbuf, inpos, len);
             } else if(msg == 4) {
                 parseHeaders(res);
             } else if(msg == 6) {
                 setNextBodyChunk();
                 send();
             }
             msg = getMessage();
         }
     }
 
 
     private void sendPostBody() throws IOException {
         setNextBodyChunk();
         send();
     }
 
     private void setNextBodyChunk() throws IOException {
         int nr = 0;
         if(body != null) {
             int len = body.available();
             if(len < 0) {
                 len = 0;
             } else if(len > MAX_SEND_SIZE) {
                 len = MAX_SEND_SIZE;
             }
             outpos = 4;
             if(len > 0) {
                 nr = body.read(outbuf, outpos+2, len);
             }
         } else {
             outpos = 4;
         }
         setInt(nr);
         outpos += nr;
     }
 
 
     private void parseHeaders(HTTPSampleResult res)
     throws IOException {
         int status = getInt();
         res.setResponseCode(Integer.toString(status));
         res.setSuccessful(200 <= status && status <= 399);
         String msg = getString();
         res.setResponseMessage(msg);
         int nh = getInt();
         StringBuilder sb = new StringBuilder();
         sb.append(HTTPConstants.HTTP_1_1 ).append(status).append(" ").append(msg).append(NEWLINE);//$NON-NLS-1$//$NON-NLS-2$
         for(int i=0; i < nh; i++) {
             String name;
             int thn = peekInt();
             if((thn & 0xff00) == AJP_HEADER_BASE) {
                 name = HEADER_TRANS_ARRAY[(thn&0xff)-1];
                 getInt(); // we need to use up the int now
             } else {
                 name = getString();
             }
             String value = getString();
             if(HTTPConstants.HEADER_CONTENT_TYPE.equalsIgnoreCase(name)) {
                 res.setContentType(value);
                 res.setEncodingAndType(value);
             } else if(HTTPConstants.HEADER_SET_COOKIE.equalsIgnoreCase(name)) {
                 CookieManager cookies = getCookieManager();
                 if(cookies != null) {
                     cookies.addCookieFromHeader(value, res.getURL());
                 }
             }
             sb.append(name).append(COLON_SPACE).append(value).append(NEWLINE);
         }
         res.setResponseHeaders(sb.toString());
     }
 
 
     private int getMessage() throws IOException {
         InputStream is = channel.getInputStream();
         inpos = 0;
         int nr = is.read(inbuf, inpos, 4);
         if(nr != 4) {
             channel.close();
             channel = null;
             throw new IOException("Connection Closed: "+nr);
         }
         getInt();
         int len = getInt();
         int toRead = len;
         int cpos = inpos;
         while(toRead > 0) {
             nr = is.read(inbuf, cpos, toRead);
             cpos += nr;
             toRead -= nr;
         }
         return getByte();
     }
 
     private byte getByte() {
         return inbuf[inpos++];
     }
 
     private int getInt() {
         int res = (inbuf[inpos++]<<8)&0xff00;
         res += inbuf[inpos++]&0xff;
         return res;
     }
 
     private int peekInt() {
         int res = (inbuf[inpos]<<8)&0xff00;
         res += inbuf[inpos+1]&0xff;
         return res;
     }
 
     private String getString() throws IOException {
         int len = getInt();
         String s = new String(inbuf, inpos, len, "iso-8859-1");//$NON-NLS-1$
         inpos+= len+1;
         return s;
     }
 
     @Override
     public boolean interrupt() {
         Socket chan = activeChannel;
         if (chan != null) {
             activeChannel = null;
             try {
                 chan.close();
             } catch (Exception e) {
                 // Ignored
             }
         }
         return chan != null;
     }
 }
diff --git a/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPAbstractImpl.java b/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPAbstractImpl.java
index df2ea6725..1bfe33497 100644
--- a/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPAbstractImpl.java
+++ b/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPAbstractImpl.java
@@ -1,566 +1,568 @@
 /*
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  * 
  */
 
 package org.apache.jmeter.protocol.http.sampler;
 
 import java.io.BufferedInputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.net.Inet4Address;
 import java.net.Inet6Address;
 import java.net.InetAddress;
 import java.net.InterfaceAddress;
 import java.net.NetworkInterface;
 import java.net.SocketException;
 import java.net.URL;
 import java.net.UnknownHostException;
 
 import org.apache.jmeter.config.Arguments;
 import org.apache.jmeter.protocol.http.control.AuthManager;
 import org.apache.jmeter.protocol.http.control.CacheManager;
 import org.apache.jmeter.protocol.http.control.CookieManager;
 import org.apache.jmeter.protocol.http.control.HeaderManager;
 import org.apache.jmeter.protocol.http.sampler.HTTPSamplerBase.SourceType;
 import org.apache.jmeter.protocol.http.util.HTTPConstantsInterface;
 import org.apache.jmeter.protocol.http.util.HTTPFileArg;
 import org.apache.jmeter.samplers.Interruptible;
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.util.JMeterUtils;
 
 /**
  * Base class for HTTP implementations used by the HTTPSamplerProxy sampler.
  */
 public abstract class HTTPAbstractImpl implements Interruptible, HTTPConstantsInterface {
     private enum CachedResourceMode {
         RETURN_200_CACHE(),
         RETURN_NO_SAMPLE(),
         RETURN_CUSTOM_STATUS()
     }
 
     /**
      * If true create a SampleResult with emply content and 204 response code 
      */
     private static final CachedResourceMode CACHED_RESOURCE_MODE = 
             CachedResourceMode.valueOf(
                     JMeterUtils.getPropDefault("cache_manager.cached_resource_mode", //$NON-NLS-1$
                     CachedResourceMode.RETURN_NO_SAMPLE.toString()));
     
     /**
      * SampleResult message when resource was in cache and mode is RETURN_200_CACHE
      */
     private static final String RETURN_200_CACHE_MESSAGE =
             JMeterUtils.getPropDefault("RETURN_200_CACHE.message","(ex cache)");//$NON-NLS-1$ $NON-NLS-2$
 
     /**
      * Custom response code for cached resource
      */
     private static final String RETURN_CUSTOM_STATUS_CODE = 
             JMeterUtils.getProperty("RETURN_CUSTOM_STATUS.code");//$NON-NLS-1$
 
     /**
      * Custom response message for cached resource
      */
     private static final String RETURN_CUSTOM_STATUS_MESSAGE = 
             JMeterUtils.getProperty("RETURN_CUSTOM_STATUS.message"); //$NON-NLS-1$
 
     protected final HTTPSamplerBase testElement;
 
     protected HTTPAbstractImpl(HTTPSamplerBase testElement){
         this.testElement = testElement;
     }
 
     protected abstract HTTPSampleResult sample(URL url, String method, boolean areFollowingRedirect, int frameDepth);
 
     // Allows HTTPSamplerProxy to call threadFinished; subclasses can override if necessary
     protected void threadFinished() {
     }
 
     // Allows HTTPSamplerProxy to call notifyFirstSampleAfterLoopRestart; subclasses can override if necessary
     protected void notifyFirstSampleAfterLoopRestart() {
     }
 
     // Provide access to HTTPSamplerBase methods
     
     /**
      * Populates the provided HTTPSampleResult with details from the Exception.
      * Does not create a new instance, so should not be used directly to add a
      * subsample.
      * <p>
      * See {@link HTTPSamplerBase#errorResult(Throwable, HTTPSampleResult)}
      * 
      * @param t
      *            Exception representing the error.
      * @param res
      *            SampleResult to be modified
      * @return the modified sampling result containing details of the Exception.
      *         Invokes
      */
     protected HTTPSampleResult errorResult(Throwable t, HTTPSampleResult res) {
         return testElement.errorResult(t, res);
     }
 
     /**
      * Invokes {@link HTTPSamplerBase#getArguments()}
      *
      * @return the arguments of the associated test element
      */
     protected Arguments getArguments() {
         return testElement.getArguments();
     }
 
     /**
      * Invokes {@link HTTPSamplerBase#getAuthManager()}
      *
      * @return the {@link AuthManager} of the associated test element
      */
     protected AuthManager getAuthManager() {
         return testElement.getAuthManager();
     }
 
     /**
      * Invokes {@link HTTPSamplerBase#getAutoRedirects()}
      *
      * @return flag whether to do auto redirects
      */
     protected boolean getAutoRedirects() {
         return testElement.getAutoRedirects();
     }
 
     /**
      * Invokes {@link HTTPSamplerBase#getCacheManager()}
      *
      * @return the {@link CacheManager} of the associated test element
      */
     protected CacheManager getCacheManager() {
         return testElement.getCacheManager();
     }
 
     /**
      * Invokes {@link HTTPSamplerBase#getConnectTimeout()}
      *
      * @return the connect timeout of the associated test element
      */
     protected int getConnectTimeout() {
         return testElement.getConnectTimeout();
     }
 
     /**
      * Invokes {@link HTTPSamplerBase#getContentEncoding()}
      * @return the encoding of the content, i.e. its charset name
      */
     protected String getContentEncoding() {
         return testElement.getContentEncoding();
     }
 
     /**
      * Invokes {@link HTTPSamplerBase#getCookieManager()}
      *
      * @return the {@link CookieManager} of the associated test element
      */
     protected CookieManager getCookieManager() {
         return testElement.getCookieManager();
     }
 
     /**
      * Invokes {@link HTTPSamplerBase#getHeaderManager()}
      *
      * @return the {@link HeaderManager} of the associated test element
      */
     protected HeaderManager getHeaderManager() {
         return testElement.getHeaderManager();
     }
 
     /**
      * 
      * Get the collection of files as a list.
      * The list is built up from the filename/filefield/mimetype properties,
      * plus any additional entries saved in the FILE_ARGS property.
      * <p>
      * If there are no valid file entries, then an empty list is returned.
      * <p>
      * Invokes {@link HTTPSamplerBase#getHTTPFiles()}
      *
      * @return an array of file arguments (never <code>null</code>)
      */
     protected HTTPFileArg[] getHTTPFiles() {
         return testElement.getHTTPFiles();
     }
 
     /**
      * Invokes {@link HTTPSamplerBase#getIpSource()}
      *
      * @return the configured ip source for the associated test element
      */
     protected String getIpSource() {
         return testElement.getIpSource();
     }
 
     /**
      * Gets the IP source address (IP spoofing) if one has been provided.
      * 
      * @return the IP source address to use (or <code>null</code>, if none provided or the device address could not be found)
      * @throws UnknownHostException if the hostname/ip for {@link #getIpSource()} could not be resolved or not interface was found for it
      * @throws SocketException if an I/O error occurs
      */
     protected InetAddress getIpSourceAddress() throws UnknownHostException, SocketException {
         final String ipSource = getIpSource();
         if (ipSource.trim().length() > 0) {
             Class<? extends InetAddress> ipClass = null;
             final SourceType sourceType = HTTPSamplerBase.SourceType.values()[testElement.getIpSourceType()];
             switch (sourceType) {
             case DEVICE:
                 ipClass = InetAddress.class;
                 break;
             case DEVICE_IPV4:
                 ipClass = Inet4Address.class;
                 break;
             case DEVICE_IPV6:
                 ipClass = Inet6Address.class;
                 break;
             case HOSTNAME:
             default:
                 return InetAddress.getByName(ipSource);
             }
 
             NetworkInterface net = NetworkInterface.getByName(ipSource);
             if (net != null) {
                 for (InterfaceAddress ia : net.getInterfaceAddresses()) {
                     final InetAddress inetAddr = ia.getAddress();
                     if (ipClass.isInstance(inetAddr)) {
                         return inetAddr;
                     }
                 }
                 throw new UnknownHostException("Interface " + ipSource
                         + " does not have address of type " + ipClass.getSimpleName());
             }
             throw new UnknownHostException("Cannot find interface " + ipSource);
         }
         return null; // did not want to spoof the IP address
     }
 
     /**
      * Invokes {@link HTTPSamplerBase#getProxyHost()}
      *
      * @return the configured host to use as a proxy
      */
     protected String getProxyHost() {
         return testElement.getProxyHost();
     }
 
     /**
      * Invokes {@link HTTPSamplerBase#getProxyPass()}
      *
      * @return the configured password to use for the proxy
      */
     protected String getProxyPass() {
         return testElement.getProxyPass();
     }
 
     /**
      * Invokes {@link HTTPSamplerBase#getProxyPortInt()}
      *
      * @return the configured port to use for the proxy
      */
     protected int getProxyPortInt() {
         return testElement.getProxyPortInt();
     }
 
     /**
      * Invokes {@link HTTPSamplerBase#getProxyUser()}
      *
      * @return the configured user to use for the proxy
      */
     protected String getProxyUser() {
         return testElement.getProxyUser();
     }
 
     /**
      * Invokes {@link HTTPSamplerBase#getResponseTimeout()}
      *
      * @return the configured timeout for responses
      */
     protected int getResponseTimeout() {
         return testElement.getResponseTimeout();
     }
 
     /**
      * Determine whether to send a file as the entire body of an
      * entity enclosing request such as POST, PUT or PATCH.
      * 
      * Invokes {@link HTTPSamplerBase#getSendFileAsPostBody()}
      *
      * @return flag whether to send a file as POST, PUT or PATCH
      */
     protected boolean getSendFileAsPostBody() {
         return testElement.getSendFileAsPostBody();
     }
 
     /**
      * Determine whether to send concatenated parameters as the entire body of an
      * entity enclosing request such as POST, PUT or PATCH.
      * 
      * Invokes {@link HTTPSamplerBase#getSendParameterValuesAsPostBody()}
      *
      * @return flag whether to send concatenated parameters as the entire body
      */
     protected boolean getSendParameterValuesAsPostBody() {
         return testElement.getSendParameterValuesAsPostBody();
     }
 
     /**
      * Invokes {@link HTTPSamplerBase#getUseKeepAlive()}
      *
      * @return flag whether to use keep-alive for requests
      */
     protected boolean getUseKeepAlive() {
         return testElement.getUseKeepAlive();
     }
 
     /**
      * Determine if we should use <code>multipart/form-data</code> or
      * <code>application/x-www-form-urlencoded</code> for the post
      * <p>
      * Invokes {@link HTTPSamplerBase#getUseMultipartForPost()}
      *
      * @return <code>true</code> if <code>multipart/form-data</code> should be
      *         used and method is POST
      */
     protected boolean getUseMultipartForPost() {
         return testElement.getUseMultipartForPost();
     }
 
     /**
      * Invokes {@link HTTPSamplerBase#getDoBrowserCompatibleMultipart()}
      *
      * @return flag whether we should do browser compatible multiparts
      */
     protected boolean getDoBrowserCompatibleMultipart() {
         return testElement.getDoBrowserCompatibleMultipart();
     }
 
     /**
      * Invokes {@link HTTPSamplerBase#hasArguments()}
      *
      * @return flag whether we have arguments to send
      */
     protected boolean hasArguments() {
         return testElement.hasArguments();
     }
 
     /**
      * Invokes {@link HTTPSamplerBase#isMonitor()}
      *
      * @return flag whether monitor is enabled
+     * @deprecated since 3.2 always return false
      */
+    @Deprecated
     protected boolean isMonitor() {
-        return testElement.isMonitor();
+        return false;
     }
 
     /**
      * Determine if the HTTP status code is successful or not i.e. in range 200
      * to 399 inclusive
      * <p>
      * Invokes {@link HTTPSamplerBase#isSuccessCode(int)}
      *
      * @param errorLevel
      *            status code to check
      * @return whether in range 200-399 or not
      */
     protected boolean isSuccessCode(int errorLevel) {
         return testElement.isSuccessCode(errorLevel);
     }
 
     /**
      * Read response from the input stream, converting to MD5 digest if the
      * useMD5 property is set.
      * <p>
      * For the MD5 case, the result byte count is set to the size of the
      * original response.
      * <p>
      * Closes the inputStream
      * <p>
      * Invokes
      * {@link HTTPSamplerBase#readResponse(SampleResult, InputStream, long)}
      * 
      * @param res
      *            sample to store information about the response into
      * @param instream
      *            input stream from which to read the response
      * @param responseContentLength
      *            expected input length or zero
      * @return the response or the MD5 of the response
      * @throws IOException
      *             if reading the result fails
      */
     protected byte[] readResponse(SampleResult res, InputStream instream,
             int responseContentLength) throws IOException {
         return readResponse(res, instream, (long)responseContentLength);
     }
     /**
      * Read response from the input stream, converting to MD5 digest if the
      * useMD5 property is set.
      * <p>
      * For the MD5 case, the result byte count is set to the size of the
      * original response.
      * <p>
      * Closes the inputStream
      * <p>
      * Invokes
      * {@link HTTPSamplerBase#readResponse(SampleResult, InputStream, long)}
      * 
      * @param res
      *            sample to store information about the response into
      * @param instream
      *            input stream from which to read the response
      * @param responseContentLength
      *            expected input length or zero
      * @return the response or the MD5 of the response
      * @throws IOException
      *             if reading the result fails
      */
     protected byte[] readResponse(SampleResult res, InputStream instream,
             long responseContentLength) throws IOException {
         return testElement.readResponse(res, instream, responseContentLength);
     }
 
     /**
      * Read response from the input stream, converting to MD5 digest if the
      * useMD5 property is set.
      * <p>
      * For the MD5 case, the result byte count is set to the size of the
      * original response.
      * <p>
      * Closes the inputStream
      * <p>
      * Invokes {@link HTTPSamplerBase#readResponse(SampleResult, InputStream, long)}
      * 
      * @param res
      *            sample to store information about the response into
      * @param in
      *            input stream from which to read the response
      * @param contentLength
      *            expected input length or zero
      * @return the response or the MD5 of the response
      * @throws IOException
      *             when reading the result fails
      * @deprecated use {@link HTTPAbstractImpl#readResponse(SampleResult, BufferedInputStream, long)}
      */
     @Deprecated
     protected byte[] readResponse(SampleResult res, BufferedInputStream in,
             int contentLength) throws IOException {
         return testElement.readResponse(res, in, contentLength);
     }
     
     /**
      * Read response from the input stream, converting to MD5 digest if the
      * useMD5 property is set.
      * <p>
      * For the MD5 case, the result byte count is set to the size of the
      * original response.
      * <p>
      * Closes the inputStream
      * <p>
      * Invokes {@link HTTPSamplerBase#readResponse(SampleResult, InputStream, long)}
      * 
      * @param res
      *            sample to store information about the response into
      * @param in
      *            input stream from which to read the response
      * @param contentLength
      *            expected input length or zero
      * @return the response or the MD5 of the response
      * @throws IOException
      *             when reading the result fails
      */
     protected byte[] readResponse(SampleResult res, BufferedInputStream in,
             long contentLength) throws IOException {
         return testElement.readResponse(res, in, contentLength);
     }
 
     /**
      * Follow redirects and download page resources if appropriate. this works,
      * but the container stuff here is what's doing it. followRedirects() is
      * actually doing the work to make sure we have only one container to make
      * this work more naturally, I think this method - sample() - needs to take
      * an HTTPSamplerResult container parameter instead of a
      * boolean:areFollowingRedirect.
      * <p>
      * Invokes
      * {@link HTTPSamplerBase#resultProcessing(boolean, int, HTTPSampleResult)}
      *
      * @param areFollowingRedirect
      *            flag whether we are getting a redirect target
      * @param frameDepth
      *            Depth of this target in the frame structure. Used only to
      *            prevent infinite recursion.
      * @param res
      *            sample result to process
      * @return the sample result
      */
     protected HTTPSampleResult resultProcessing(boolean areFollowingRedirect,
             int frameDepth, HTTPSampleResult res) {
         return testElement.resultProcessing(areFollowingRedirect, frameDepth, res);
     }
 
     /**
      * Invokes {@link HTTPSamplerBase#setUseKeepAlive(boolean)}
      *
      * @param b flag whether to use keep-alive for requests
      */
     protected void setUseKeepAlive(boolean b) {
         testElement.setUseKeepAlive(b);
     }
 
     /**
      * Called by testIterationStart if the SSL Context was reset.
      * 
      * This implementation does nothing.
      * @deprecated ** unused since r1489189. **
      */
     @Deprecated
     protected void notifySSLContextWasReset() {
         // NOOP
     }
     
     /**
      * Update HTTPSampleResult for a resource in cache
      * @param res {@link HTTPSampleResult}
      * @return HTTPSampleResult
      */
     protected HTTPSampleResult updateSampleResultForResourceInCache(HTTPSampleResult res) {
         switch (CACHED_RESOURCE_MODE) {
             case RETURN_NO_SAMPLE:
                 return null;
             case RETURN_200_CACHE:
                 res.sampleEnd();
                 res.setResponseCodeOK();
                 res.setResponseMessage(RETURN_200_CACHE_MESSAGE);
                 res.setSuccessful(true);
                 return res;
             case RETURN_CUSTOM_STATUS:
                 res.sampleEnd();
                 res.setResponseCode(RETURN_CUSTOM_STATUS_CODE);
                 res.setResponseMessage(RETURN_CUSTOM_STATUS_MESSAGE);
                 res.setSuccessful(true);
                 return res;
             default:
                 // Cannot happen
                 throw new IllegalStateException("Unknown CACHED_RESOURCE_MODE");
         }
     }
 }
diff --git a/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC3Impl.java b/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC3Impl.java
index ee72e1bf5..35e687371 100644
--- a/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC3Impl.java
+++ b/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC3Impl.java
@@ -1,1143 +1,1142 @@
 /*
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 package org.apache.jmeter.protocol.http.sampler;
 
 import java.io.ByteArrayOutputStream;
 import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
 import java.net.InetAddress;
 import java.net.URL;
 import java.net.URLDecoder;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.zip.GZIPInputStream;
 
 import org.apache.commons.httpclient.DefaultHttpMethodRetryHandler;
 import org.apache.commons.httpclient.Header;
 import org.apache.commons.httpclient.HostConfiguration;
 import org.apache.commons.httpclient.HttpClient;
 import org.apache.commons.httpclient.HttpConnectionManager;
 import org.apache.commons.httpclient.HttpMethod;
 import org.apache.commons.httpclient.HttpMethodBase;
 import org.apache.commons.httpclient.HttpState;
 import org.apache.commons.httpclient.HttpVersion;
 import org.apache.commons.httpclient.NTCredentials;
 import org.apache.commons.httpclient.ProtocolException;
 import org.apache.commons.httpclient.SimpleHttpConnectionManager;
 import org.apache.commons.httpclient.auth.AuthScope;
 import org.apache.commons.httpclient.cookie.CookiePolicy;
 import org.apache.commons.httpclient.methods.EntityEnclosingMethod;
 import org.apache.commons.httpclient.methods.FileRequestEntity;
 import org.apache.commons.httpclient.methods.GetMethod;
 import org.apache.commons.httpclient.methods.HeadMethod;
 import org.apache.commons.httpclient.methods.OptionsMethod;
 import org.apache.commons.httpclient.methods.PostMethod;
 import org.apache.commons.httpclient.methods.PutMethod;
 import org.apache.commons.httpclient.methods.StringRequestEntity;
 import org.apache.commons.httpclient.methods.TraceMethod;
 import org.apache.commons.httpclient.methods.multipart.FilePart;
 import org.apache.commons.httpclient.methods.multipart.MultipartRequestEntity;
 import org.apache.commons.httpclient.methods.multipart.Part;
 import org.apache.commons.httpclient.methods.multipart.PartBase;
 import org.apache.commons.httpclient.methods.multipart.StringPart;
 import org.apache.commons.httpclient.params.DefaultHttpParams;
 import org.apache.commons.httpclient.params.HttpClientParams;
 import org.apache.commons.httpclient.params.HttpMethodParams;
 import org.apache.commons.httpclient.params.HttpParams;
 import org.apache.commons.httpclient.protocol.Protocol;
 import org.apache.commons.io.input.CountingInputStream;
 import org.apache.jmeter.protocol.http.control.AuthManager;
 import org.apache.jmeter.protocol.http.control.Authorization;
 import org.apache.jmeter.protocol.http.control.CacheManager;
 import org.apache.jmeter.protocol.http.control.CookieManager;
 import org.apache.jmeter.protocol.http.control.HeaderManager;
 import org.apache.jmeter.protocol.http.util.EncoderCache;
 import org.apache.jmeter.protocol.http.util.HTTPArgument;
 import org.apache.jmeter.protocol.http.util.HTTPConstants;
 import org.apache.jmeter.protocol.http.util.HTTPFileArg;
 import org.apache.jmeter.protocol.http.util.LoopbackHttpClientSocketFactory;
 import org.apache.jmeter.protocol.http.util.SlowHttpClientSocketFactory;
 import org.apache.jmeter.services.FileServer;
 import org.apache.jmeter.testelement.property.CollectionProperty;
 import org.apache.jmeter.testelement.property.JMeterProperty;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jmeter.util.JsseSSLManager;
 import org.apache.jmeter.util.SSLManager;
 import org.apache.jorphan.logging.LoggingManager;
 import org.apache.jorphan.util.JOrphanUtils;
 import org.apache.log.Logger;
 
 /**
  * HTTP sampler using Apache (Jakarta) Commons HttpClient 3.1.
  * @deprecated since 3.0, will be removed in next version
  */
 @Deprecated
 public class HTTPHC3Impl extends HTTPHCAbstractImpl {
 
     private static final Logger log = LoggingManager.getLoggerForClass();
 
     /** retry count to be used (default 1); 0 = disable retries */
     private static final int RETRY_COUNT = JMeterUtils.getPropDefault("httpclient3.retrycount", 0);
 
     private static final String HTTP_AUTHENTICATION_PREEMPTIVE = "http.authentication.preemptive"; // $NON-NLS-1$
 
     private static final boolean canSetPreEmptive; // OK to set pre-emptive auth?
 
     private static final ThreadLocal<Map<HostConfiguration, HttpClient>> httpClients = 
         new ThreadLocal<Map<HostConfiguration, HttpClient>>(){
         @Override
         protected Map<HostConfiguration, HttpClient> initialValue() {
             return new HashMap<>();
         }
     };
 
     // Needs to be accessible by HTTPSampler2
     volatile HttpClient savedClient;
 
     private volatile boolean resetSSLContext;
 
     static {
         log.info("HTTP request retry count = "+RETRY_COUNT);
         if (CPS_HTTP > 0) {
             log.info("Setting up HTTP SlowProtocol, cps="+CPS_HTTP);
             Protocol.registerProtocol(HTTPConstants.PROTOCOL_HTTP,
                     new Protocol(HTTPConstants.PROTOCOL_HTTP,new SlowHttpClientSocketFactory(CPS_HTTP),HTTPConstants.DEFAULT_HTTP_PORT));
         }
 
         // Now done in JsseSSLManager (which needs to register the protocol)
 //        cps =
 //            JMeterUtils.getPropDefault("httpclient.socket.https.cps", 0); // $NON-NLS-1$
 //
 //        if (cps > 0) {
 //            log.info("Setting up HTTPS SlowProtocol, cps="+cps);
 //            Protocol.registerProtocol(PROTOCOL_HTTPS,
 //                    new Protocol(PROTOCOL_HTTPS,new SlowHttpClientSocketFactory(cps),DEFAULT_HTTPS_PORT));
 //        }
 
         // Set default parameters as needed
         HttpParams params = DefaultHttpParams.getDefaultParams();
         params.setIntParameter("http.protocol.max-redirects", HTTPSamplerBase.MAX_REDIRECTS); //$NON-NLS-1$
         // Process Commons HttpClient parameters file
         String file=JMeterUtils.getProperty("httpclient.parameters.file"); // $NON-NLS-1$
         if (file != null) {
             HttpClientDefaultParameters.load(file, params);
         }
 
         // If the pre-emptive parameter is undefined, then we can set it as needed
         // otherwise we should do what the user requested.
         canSetPreEmptive =  params.getParameter(HTTP_AUTHENTICATION_PREEMPTIVE) == null;
 
         // Handle old-style JMeter properties
         try {
             params.setParameter(HttpMethodParams.PROTOCOL_VERSION, HttpVersion.parse("HTTP/"+HTTP_VERSION));
         } catch (ProtocolException e) {
             log.warn("Problem setting protocol version "+e.getLocalizedMessage());
         }
 
         if (SO_TIMEOUT >= 0){
             params.setIntParameter(HttpMethodParams.SO_TIMEOUT, SO_TIMEOUT);
         }
 
         // This must be done last, as must not be overridden
         params.setParameter(HttpMethodParams.COOKIE_POLICY,CookiePolicy.IGNORE_COOKIES);
         // We do our own cookie handling
 
         if (USE_LOOPBACK){
             LoopbackHttpClientSocketFactory.setup();
         }
     }
 
     protected HTTPHC3Impl(HTTPSamplerBase base) {
         super(base);
     }
 
 
     /**
      * Samples the URL passed in and stores the result in
      * <code>HTTPSampleResult</code>, following redirects and downloading
      * page resources as appropriate.
      * <p>
      * When getting a redirect target, redirects are not followed and resources
      * are not downloaded. The caller will take care of this.
      *
      * @param url
      *            URL to sample
      * @param method
      *            HTTP method: GET, POST,...
      * @param areFollowingRedirect
      *            whether we're getting a redirect target
      * @param frameDepth
      *            Depth of this target in the frame structure. Used only to
      *            prevent infinite recursion.
      * @return results of the sampling
      */
     @Override
     protected HTTPSampleResult sample(URL url, String method, boolean areFollowingRedirect, int frameDepth) {
 
         String urlStr = url.toString();
 
         if (log.isDebugEnabled()) {
             log.debug("Start : sample " + urlStr);
             log.debug("method " + method+ " followingRedirect " + areFollowingRedirect + " depth " + frameDepth);            
         }
 
         HttpMethodBase httpMethod = null;
 
         HTTPSampleResult res = new HTTPSampleResult();
-        res.setMonitor(isMonitor());
 
         res.setSampleLabel(urlStr); // May be replaced later
         res.setHTTPMethod(method);
         res.setURL(url);
 
         res.sampleStart(); // Count the retries as well in the time
         try {
             // May generate IllegalArgumentException
             if (method.equals(HTTPConstants.POST)) {
                 httpMethod = new PostMethod(urlStr);
             } else if (method.equals(HTTPConstants.GET)){
                 httpMethod = new GetMethod(urlStr);
             } else if (method.equals(HTTPConstants.PUT)){
                 httpMethod = new PutMethod(urlStr);
             } else if (method.equals(HTTPConstants.HEAD)){
                 httpMethod = new HeadMethod(urlStr);
             } else if (method.equals(HTTPConstants.TRACE)){
                 httpMethod = new TraceMethod(urlStr);
             } else if (method.equals(HTTPConstants.OPTIONS)){
                 httpMethod = new OptionsMethod(urlStr);
             } else if (method.equals(HTTPConstants.DELETE)){
                 httpMethod = new EntityEnclosingMethod(urlStr) {
                     @Override
                     public String getName() { // HC3.1 does not have the method
                         return HTTPConstants.DELETE;
                     }
                 };
             } else if (method.equals(HTTPConstants.PATCH)){
                 httpMethod = new EntityEnclosingMethod(urlStr) {
                     @Override
                     public String getName() { // HC3.1 does not have the method
                         return HTTPConstants.PATCH;
                     }
                 };
             } else {
                 throw new IllegalArgumentException("Unexpected method: '"+method+"'");
             }
 
             final CacheManager cacheManager = getCacheManager();
             if (cacheManager != null && HTTPConstants.GET.equalsIgnoreCase(method)) {
                if (cacheManager.inCache(url)) {
                    return updateSampleResultForResourceInCache(res);
                }
             }
 
             // Set any default request headers
             setDefaultRequestHeaders(httpMethod);
 
             // Setup connection
             HttpClient client = setupConnection(url, httpMethod, res);
             savedClient = client;
 
             // Handle the various methods
             if (method.equals(HTTPConstants.POST)) {
                 String postBody = sendPostData((PostMethod)httpMethod);
                 res.setQueryString(postBody);
             } else if (method.equals(HTTPConstants.PUT) || method.equals(HTTPConstants.PATCH) 
                     || method.equals(HTTPConstants.DELETE)) {
                 String putBody = sendEntityData((EntityEnclosingMethod) httpMethod);
                 res.setQueryString(putBody);
             }
 
             int statusCode = client.executeMethod(httpMethod);
 
             // We've finished with the request, so we can add the LocalAddress to it for display
             final InetAddress localAddr = client.getHostConfiguration().getLocalAddress();
             if (localAddr != null) {
                 httpMethod.addRequestHeader(HEADER_LOCAL_ADDRESS, localAddr.toString());
             }
             // Needs to be done after execute to pick up all the headers
             res.setRequestHeaders(getConnectionHeaders(httpMethod));
 
             // Request sent. Now get the response:
             InputStream instream = httpMethod.getResponseBodyAsStream();
 
             if (instream != null) {// will be null for HEAD
                 instream = new CountingInputStream(instream);
                 try {
                     Header responseHeader = httpMethod.getResponseHeader(HTTPConstants.HEADER_CONTENT_ENCODING);
                     if (responseHeader!= null && HTTPConstants.ENCODING_GZIP.equals(responseHeader.getValue())) {
                         InputStream tmpInput = new GZIPInputStream(instream); // tmp inputstream needs to have a good counting
                         res.setResponseData(readResponse(res, tmpInput, httpMethod.getResponseContentLength()));                        
                     } else {
                         res.setResponseData(readResponse(res, instream, httpMethod.getResponseContentLength()));
                     }
                 } finally {
                     JOrphanUtils.closeQuietly(instream);
                 }
             }
 
             res.sampleEnd();
             // Done with the sampling proper.
 
             // Now collect the results into the HTTPSampleResult:
 
             res.setSampleLabel(httpMethod.getURI().toString());
             // Pick up Actual path (after redirects)
 
             res.setResponseCode(Integer.toString(statusCode));
             res.setSuccessful(isSuccessCode(statusCode));
 
             res.setResponseMessage(httpMethod.getStatusText());
 
             String ct = null;
             Header h = httpMethod.getResponseHeader(HTTPConstants.HEADER_CONTENT_TYPE);
             if (h != null)// Can be missing, e.g. on redirect
             {
                 ct = h.getValue();
                 res.setContentType(ct);// e.g. text/html; charset=ISO-8859-1
                 res.setEncodingAndType(ct);
             }
 
             res.setResponseHeaders(getResponseHeaders(httpMethod));
             if (res.isRedirect()) {
                 final Header headerLocation = httpMethod.getResponseHeader(HTTPConstants.HEADER_LOCATION);
                 if (headerLocation == null) { // HTTP protocol violation, but avoids NPE
                     throw new IllegalArgumentException("Missing location header");
                 }
                 String redirectLocation = headerLocation.getValue();
                 res.setRedirectLocation(redirectLocation); // in case sanitising fails
             }
 
             // record some sizes to allow HTTPSampleResult.getBytes() with different options
             if (instream != null) {
                 res.setBodySize(((CountingInputStream) instream).getByteCount());
             }
             res.setHeadersSize(calculateHeadersSize(httpMethod));
             if (log.isDebugEnabled()) {
                 log.debug("Response headersSize=" + res.getHeadersSize() + " bodySize=" + res.getBodySizeAsLong()
                         + " Total=" + (res.getHeadersSize() + res.getBodySizeAsLong()));
             }
             
             // If we redirected automatically, the URL may have changed
             if (getAutoRedirects()){
                 res.setURL(new URL(httpMethod.getURI().toString()));
             }
 
             // Store any cookies received in the cookie manager:
             saveConnectionCookies(httpMethod, res.getURL(), getCookieManager());
 
             // Save cache information
             if (cacheManager != null){
                 cacheManager.saveDetails(httpMethod, res);
             }
 
             // Follow redirects and download page resources if appropriate:
             res = resultProcessing(areFollowingRedirect, frameDepth, res);
 
             log.debug("End : sample");
             return res;
         } catch (IllegalArgumentException // e.g. some kinds of invalid URL
                 | IOException e) { 
             res.sampleEnd();
             // pick up headers if failed to execute the request
             // httpMethod can be null if method is unexpected
             if(httpMethod != null) {
                 res.setRequestHeaders(getConnectionHeaders(httpMethod));
             }
             errorResult(e, res);
             return res;
         } finally {
             savedClient = null;
             if (httpMethod != null) {
                 httpMethod.releaseConnection();
             }
         }
     }
     
     /**
      * Calculate response headers size
      * 
      * @return the size response headers (in bytes)
      */
     private static int calculateHeadersSize(HttpMethodBase httpMethod) {
         int headerSize = httpMethod.getStatusLine().toString().length()+2; // add a \r\n
         Header[] rh = httpMethod.getResponseHeaders();
         for (Header responseHeader : rh) {
             headerSize += responseHeader.toString().length(); // already include the \r\n
         }
         headerSize += 2; // last \r\n before response data
         return headerSize;
     }
 
     /**
      * Returns an <code>HttpConnection</code> fully ready to attempt
      * connection. This means it sets the request method (GET or POST), headers,
      * cookies, and authorization for the URL request.
      * <p>
      * The request infos are saved into the sample result if one is provided.
      *
      * @param u
      *            <code>URL</code> of the URL request
      * @param httpMethod
      *            GET/PUT/HEAD etc
      * @param res
      *            sample result to save request infos to
      * @return <code>HttpConnection</code> ready for .connect
      * @exception IOException
      *                if an I/O Exception occurs
      */
     protected HttpClient setupConnection(URL u, HttpMethodBase httpMethod, HTTPSampleResult res) throws IOException {
 
         String urlStr = u.toString();
 
         org.apache.commons.httpclient.URI uri = new org.apache.commons.httpclient.URI(urlStr,false);
 
         String schema = uri.getScheme();
         if ((schema == null) || (schema.length()==0)) {
             schema = HTTPConstants.PROTOCOL_HTTP;
         }
 
         final boolean isHTTPS = HTTPConstants.PROTOCOL_HTTPS.equalsIgnoreCase(schema);
         if (isHTTPS){
             SSLManager.getInstance(); // ensure the manager is initialised
             // we don't currently need to do anything further, as this sets the default https protocol
         }
 
         Protocol protocol = Protocol.getProtocol(schema);
 
         String host = uri.getHost();
         int port = uri.getPort();
 
         /*
          *  We use the HostConfiguration as the key to retrieve the HttpClient,
          *  so need to ensure that any items used in its equals/hashcode methods are
          *  not changed after use, i.e.:
          *  host, port, protocol, localAddress, proxy
          *
         */
         HostConfiguration hc = new HostConfiguration();
         hc.setHost(host, port, protocol); // All needed to ensure re-usablility
 
         // Set up the local address if one exists
         final InetAddress inetAddr = getIpSourceAddress();
         if (inetAddr != null) {// Use special field ip source address (for pseudo 'ip spoofing')
             hc.setLocalAddress(inetAddr);
         } else {
             hc.setLocalAddress(localAddress); // null means use the default
         }
 
         final String proxyHost = getProxyHost();
         final int proxyPort = getProxyPortInt();
 
         boolean useStaticProxy = isStaticProxy(host);
         boolean useDynamicProxy = isDynamicProxy(proxyHost, proxyPort);
 
         if (useDynamicProxy){
             hc.setProxy(proxyHost, proxyPort);
             useStaticProxy = false; // Dynamic proxy overrules static proxy
         } else if (useStaticProxy) {
             if (log.isDebugEnabled()){
                 log.debug("Setting proxy: "+PROXY_HOST+":"+PROXY_PORT);
             }
             hc.setProxy(PROXY_HOST, PROXY_PORT);
         }
 
         Map<HostConfiguration, HttpClient> map = httpClients.get();
         // N.B. HostConfiguration.equals() includes proxy settings in the compare.
         HttpClient httpClient = map.get(hc);
 
         if (httpClient != null && resetSSLContext && isHTTPS) {
             httpClient.getHttpConnectionManager().closeIdleConnections(-1000);
             httpClient = null;
             JsseSSLManager sslMgr = (JsseSSLManager) SSLManager.getInstance();
             sslMgr.resetContext();
             resetSSLContext = false;
         }
 
         if ( httpClient == null )
         {
             httpClient = new HttpClient(new SimpleHttpConnectionManager());
             httpClient.getParams().setParameter(HttpMethodParams.RETRY_HANDLER, 
                     new DefaultHttpMethodRetryHandler(RETRY_COUNT, false));
             if (log.isDebugEnabled()) {
                 log.debug("Created new HttpClient: @"+System.identityHashCode(httpClient));
             }
             httpClient.setHostConfiguration(hc);
             map.put(hc, httpClient);
         } else {
             if (log.isDebugEnabled()) {
                 log.debug("Reusing the HttpClient: @"+System.identityHashCode(httpClient));
             }
         }
 
         // Set up any required Proxy credentials
         if (useDynamicProxy){
             String user = getProxyUser();
             if (user.length() > 0){
                 httpClient.getState().setProxyCredentials(
                         new AuthScope(proxyHost,proxyPort,null,AuthScope.ANY_SCHEME),
                         new NTCredentials(user,getProxyPass(),localHost,PROXY_DOMAIN)
                     );
             } else {
                 httpClient.getState().clearProxyCredentials();
             }
         } else {
             if (useStaticProxy) {
                 if (PROXY_USER.length() > 0){
                     httpClient.getState().setProxyCredentials(
                         new AuthScope(PROXY_HOST,PROXY_PORT,null,AuthScope.ANY_SCHEME),
                         new NTCredentials(PROXY_USER,PROXY_PASS,localHost,PROXY_DOMAIN)
                     );
                 }
             } else {
                 httpClient.getState().clearProxyCredentials();
             }
         }
 
         int rto = getResponseTimeout();
         if (rto > 0){
             httpMethod.getParams().setSoTimeout(rto);
         }
 
         int cto = getConnectTimeout();
         if (cto > 0){
             httpClient.getHttpConnectionManager().getParams().setConnectionTimeout(cto);
         }
 
 
         // Allow HttpClient to handle the redirects:
         httpMethod.setFollowRedirects(getAutoRedirects());
 
         // a well-behaved browser is supposed to send 'Connection: close'
         // with the last request to an HTTP server. Instead, most browsers
         // leave it to the server to close the connection after their
         // timeout period. Leave it to the JMeter user to decide.
         if (getUseKeepAlive()) {
             httpMethod.setRequestHeader(HTTPConstants.HEADER_CONNECTION, HTTPConstants.KEEP_ALIVE);
         } else {
             httpMethod.setRequestHeader(HTTPConstants.HEADER_CONNECTION, HTTPConstants.CONNECTION_CLOSE);
         }
 
         setConnectionHeaders(httpMethod, u, getHeaderManager(), getCacheManager());
         String cookies = setConnectionCookie(httpMethod, u, getCookieManager());
 
         setConnectionAuthorization(httpClient, u, getAuthManager());
 
         if (res != null) {
             res.setCookies(cookies);
         }
 
         return httpClient;
     }
 
     /**
      * Set any default request headers to include
      *
      * @param httpMethod the HttpMethod used for the request
      */
     protected void setDefaultRequestHeaders(HttpMethod httpMethod) {
         // Method left empty here, but allows subclasses to override
     }
 
     /**
      * Gets the ResponseHeaders
      *
      * @param method the method used to perform the request
      * @return string containing the headers, one per line
      */
     protected String getResponseHeaders(HttpMethod method) {
         StringBuilder headerBuf = new StringBuilder();
         org.apache.commons.httpclient.Header[] rh = method.getResponseHeaders();
         headerBuf.append(method.getStatusLine());// header[0] is not the status line...
         headerBuf.append("\n"); // $NON-NLS-1$
 
         for (Header responseHeader : rh) {
             String key = responseHeader.getName();
             headerBuf.append(key);
             headerBuf.append(": "); // $NON-NLS-1$
             headerBuf.append(responseHeader.getValue());
             headerBuf.append("\n"); // $NON-NLS-1$
         }
         return headerBuf.toString();
     }
 
     /**
      * Extracts all the required cookies for that particular URL request and
      * sets them in the <code>HttpMethod</code> passed in.
      *
      * @param method <code>HttpMethod</code> for the request
      * @param u <code>URL</code> of the request
      * @param cookieManager the <code>CookieManager</code> containing all the cookies
      * @return a String containing the cookie details (for the response)
      * May be null
      */
     private String setConnectionCookie(HttpMethod method, URL u, CookieManager cookieManager) {
         String cookieHeader = null;
         if (cookieManager != null) {
             cookieHeader = cookieManager.getCookieHeaderForURL(u);
             if (cookieHeader != null) {
                 method.setRequestHeader(HTTPConstants.HEADER_COOKIE, cookieHeader);
             }
         }
         return cookieHeader;
     }
 
     /**
      * Extracts all the required non-cookie headers for that particular URL request and
      * sets them in the <code>HttpMethod</code> passed in
      *
      * @param method
      *            <code>HttpMethod</code> which represents the request
      * @param u
      *            <code>URL</code> of the URL request
      * @param headerManager
      *            the <code>HeaderManager</code> containing all the cookies
      *            for this <code>UrlConfig</code>
      * @param cacheManager the CacheManager (may be null)
      */
     private void setConnectionHeaders(HttpMethod method, URL u, HeaderManager headerManager, CacheManager cacheManager) {
         // Set all the headers from the HeaderManager
         if (headerManager != null) {
             CollectionProperty headers = headerManager.getHeaders();
             if (headers != null) {
                 for (JMeterProperty jMeterProperty : headers) {
                     org.apache.jmeter.protocol.http.control.Header header
                     = (org.apache.jmeter.protocol.http.control.Header)
                             jMeterProperty.getObjectValue();
                     String n = header.getName();
                     // Don't allow override of Content-Length
                     // This helps with SoapSampler hack too
                     // TODO - what other headers are not allowed?
                     if (! HTTPConstants.HEADER_CONTENT_LENGTH.equalsIgnoreCase(n)){
                         String v = header.getValue();
                         if (HTTPConstants.HEADER_HOST.equalsIgnoreCase(n)) {
                             v = v.replaceFirst(":\\d+$",""); // remove any port specification // $NON-NLS-1$ $NON-NLS-2$
                             method.getParams().setVirtualHost(v);
                         } else {
                             method.addRequestHeader(n, v);
                         }
                     }
                 }
             }
         }
         if (cacheManager != null){
             cacheManager.setHeaders(u, method);
         }
     }
 
     /**
      * Get all the request headers for the <code>HttpMethod</code>
      *
      * @param method
      *            <code>HttpMethod</code> which represents the request
      * @return the headers as a string
      */
     protected String getConnectionHeaders(HttpMethod method) {
         // Get all the request headers
         StringBuilder hdrs = new StringBuilder(100);
         Header[] requestHeaders = method.getRequestHeaders();
         for (Header requestHeader : requestHeaders) {
             // Exclude the COOKIE header, since cookie is reported separately in the sample
             if (!HTTPConstants.HEADER_COOKIE.equalsIgnoreCase(requestHeader.getName())) {
                 hdrs.append(requestHeader.getName());
                 hdrs.append(": "); // $NON-NLS-1$
                 hdrs.append(requestHeader.getValue());
                 hdrs.append("\n"); // $NON-NLS-1$
             }
         }
 
         return hdrs.toString();
     }
 
 
     /**
      * Extracts all the required authorization for that particular URL request
      * and sets it in the <code>HttpMethod</code> passed in.
      *
      * @param client the HttpClient object
      *
      * @param u
      *            <code>URL</code> of the URL request
      * @param authManager
      *            the <code>AuthManager</code> containing all the authorisations for
      *            this <code>UrlConfig</code>
      */
     private void setConnectionAuthorization(HttpClient client, URL u, AuthManager authManager) {
         HttpState state = client.getState();
         if (authManager != null) {
             HttpClientParams params = client.getParams();
             Authorization auth = authManager.getAuthForURL(u);
             if (auth != null) {
                     String username = auth.getUser();
                     String realm = auth.getRealm();
                     String domain = auth.getDomain();
                     if (log.isDebugEnabled()){
                         log.debug(username + " >  D="+ username + " D="+domain+" R="+realm);
                     }
                     state.setCredentials(
                             new AuthScope(u.getHost(),u.getPort(),
                                     realm.length()==0 ? null : realm //"" is not the same as no realm
                                     ,AuthScope.ANY_SCHEME),
                             // NT Includes other types of Credentials
                             new NTCredentials(
                                     username,
                                     auth.getPass(),
                                     localHost,
                                     domain
                             ));
                     // We have credentials - should we set pre-emptive authentication?
                     if (canSetPreEmptive){
                         log.debug("Setting Pre-emptive authentication");
                         params.setAuthenticationPreemptive(true);
                     }
             } else {
                 state.clearCredentials();
                 if (canSetPreEmptive){
                     params.setAuthenticationPreemptive(false);
                 }
             }
         } else {
             state.clearCredentials();
         }
     }
 
 
     /*
      * Send POST data from <code>Entry</code> to the open connection.
      *
      * @param connection
      *            <code>URLConnection</code> where POST data should be sent
      * @return a String show what was posted. Will not contain actual file upload content
      * @exception IOException
      *                if an I/O exception occurs
      */
     private String sendPostData(PostMethod post) throws IOException {
         // Buffer to hold the post body, except file content
         StringBuilder postedBody = new StringBuilder(1000);
         HTTPFileArg[] files = getHTTPFiles();
         // Check if we should do a multipart/form-data or an
         // application/x-www-form-urlencoded post request
         if(getUseMultipartForPost()) {
             // If a content encoding is specified, we use that as the
             // encoding of any parameter values
             String contentEncoding = getContentEncoding();
             if(isNullOrEmptyTrimmed(contentEncoding)) {
                 contentEncoding = null;
             }
 
             final boolean browserCompatible = getDoBrowserCompatibleMultipart();
             // We don't know how many entries will be skipped
             List<PartBase> partlist = new ArrayList<>();
             // Create the parts
             // Add any parameters
             for (JMeterProperty jMeterProperty : getArguments()) {
                 HTTPArgument arg = (HTTPArgument) jMeterProperty.getObjectValue();
                 String parameterName = arg.getName();
                 if (arg.isSkippable(parameterName)) {
                     continue;
                 }
                 StringPart part = new StringPart(arg.getName(), arg.getValue(), contentEncoding);
                 if (browserCompatible) {
                     part.setTransferEncoding(null);
                     part.setContentType(null);
                 }
                 partlist.add(part);
             }
 
             // Add any files
             for (HTTPFileArg file : files) {
                 File inputFile = FileServer.getFileServer().getResolvedFile(file.getPath());
                 // We do not know the char set of the file to be uploaded, so we set it to null
                 ViewableFilePart filePart = new ViewableFilePart(file.getParamName(), inputFile, file.getMimeType(), null);
                 filePart.setCharSet(null); // We do not know what the char set of the file is
                 partlist.add(filePart);
             }
 
             // Set the multipart for the post
             int partNo = partlist.size();
             Part[] parts = partlist.toArray(new Part[partNo]);
             MultipartRequestEntity multiPart = new MultipartRequestEntity(parts, post.getParams());
             post.setRequestEntity(multiPart);
 
             // Set the content type
             String multiPartContentType = multiPart.getContentType();
             post.setRequestHeader(HTTPConstants.HEADER_CONTENT_TYPE, multiPartContentType);
 
             // If the Multipart is repeatable, we can send it first to
             // our own stream, without the actual file content, so we can return it
             if(multiPart.isRepeatable()) {
                 // For all the file multiparts, we must tell it to not include
                 // the actual file content
                 for(int i = 0; i < partNo; i++) {
                     if(parts[i] instanceof ViewableFilePart) {
                         ((ViewableFilePart) parts[i]).setHideFileData(true); // .sendMultipartWithoutFileContent(bos);
                     }
                 }
                 // Write the request to our own stream
                 ByteArrayOutputStream bos = new ByteArrayOutputStream();
                 multiPart.writeRequest(bos);
                 bos.flush();
                 // We get the posted bytes using the encoding used to create it
                 postedBody.append(new String(bos.toByteArray(),
                         contentEncoding == null ? "US-ASCII" // $NON-NLS-1$ this is the default used by HttpClient
                         : contentEncoding));
                 bos.close();
 
                 // For all the file multiparts, we must revert the hiding of
                 // the actual file content
                 for(int i = 0; i < partNo; i++) {
                     if(parts[i] instanceof ViewableFilePart) {
                         ((ViewableFilePart) parts[i]).setHideFileData(false);
                     }
                 }
             }
             else {
                 postedBody.append("<Multipart was not repeatable, cannot view what was sent>"); // $NON-NLS-1$
             }
         }
         else {
             // Check if the header manager had a content type header
             // This allows the user to specify his own content-type for a POST request
             Header contentTypeHeader = post.getRequestHeader(HTTPConstants.HEADER_CONTENT_TYPE);
             boolean hasContentTypeHeader = contentTypeHeader != null && contentTypeHeader.getValue() != null && contentTypeHeader.getValue().length() > 0;
             // If there are no arguments, we can send a file as the body of the request
             // TODO: needs a multiple file upload scenerio
             if(!hasArguments() && getSendFileAsPostBody()) {
                 // If getSendFileAsPostBody returned true, it's sure that file is not null
                 HTTPFileArg file = files[0];
                 if(!hasContentTypeHeader) {
                     // Allow the mimetype of the file to control the content type
                     if(file.getMimeType() != null && file.getMimeType().length() > 0) {
                         post.setRequestHeader(HTTPConstants.HEADER_CONTENT_TYPE, file.getMimeType());
                     }
                     else {
                         post.setRequestHeader(HTTPConstants.HEADER_CONTENT_TYPE, HTTPConstants.APPLICATION_X_WWW_FORM_URLENCODED);
                     }
                 }
 
                 FileRequestEntity fileRequestEntity = new FileRequestEntity(new File(file.getPath()),null);
                 post.setRequestEntity(fileRequestEntity);
 
                 // We just add placeholder text for file content
                 postedBody.append("<actual file content, not shown here>");
             }
             else {
                 // In a post request which is not multipart, we only support
                 // parameters, no file upload is allowed
 
                 // If a content encoding is specified, we set it as http parameter, so that
                 // the post body will be encoded in the specified content encoding
                 String contentEncoding = getContentEncoding();
                 boolean haveContentEncoding = false;
                 if(isNullOrEmptyTrimmed(contentEncoding)) {
                     contentEncoding=null;                    
                 } else {
                     post.getParams().setContentCharset(contentEncoding);
                     haveContentEncoding = true;                    
                 }
 
                 // If none of the arguments have a name specified, we
                 // just send all the values as the post body
                 if(getSendParameterValuesAsPostBody()) {
                     // Allow the mimetype of the file to control the content type
                     // This is not obvious in GUI if you are not uploading any files,
                     // but just sending the content of nameless parameters
                     // TODO: needs a multiple file upload scenerio
                     if(!hasContentTypeHeader) {
                         HTTPFileArg file = files.length > 0? files[0] : null;
                         if(file != null && file.getMimeType() != null && file.getMimeType().length() > 0) {
                             post.setRequestHeader(HTTPConstants.HEADER_CONTENT_TYPE, file.getMimeType());
                         }
                         else {
                              // TODO - is this the correct default?
                             post.setRequestHeader(HTTPConstants.HEADER_CONTENT_TYPE, HTTPConstants.APPLICATION_X_WWW_FORM_URLENCODED);
                         }
                     }
 
                     // Just append all the parameter values, and use that as the post body
                     StringBuilder postBody = new StringBuilder();
                     for (JMeterProperty jMeterProperty : getArguments()) {
                         HTTPArgument arg = (HTTPArgument) jMeterProperty.getObjectValue();
                         String value;
                         if (haveContentEncoding) {
                             value = arg.getEncodedValue(contentEncoding);
                         } else {
                             value = arg.getEncodedValue();
                         }
                         postBody.append(value);
                     }
                     StringRequestEntity requestEntity = new StringRequestEntity(postBody.toString(), post.getRequestHeader(HTTPConstants.HEADER_CONTENT_TYPE).getValue(), contentEncoding);
                     post.setRequestEntity(requestEntity);
                 }
                 else {
                     // It is a normal post request, with parameter names and values
 
                     // Set the content type
                     if(!hasContentTypeHeader) {
                         post.setRequestHeader(HTTPConstants.HEADER_CONTENT_TYPE, HTTPConstants.APPLICATION_X_WWW_FORM_URLENCODED);
                     }
                     // Add the parameters
                     for (JMeterProperty jMeterProperty : getArguments()) {
                         HTTPArgument arg = (HTTPArgument) jMeterProperty.getObjectValue();
                         // The HTTPClient always urlencodes both name and value,
                         // so if the argument is already encoded, we have to decode
                         // it before adding it to the post request
                         String parameterName = arg.getName();
                         if (arg.isSkippable(parameterName)) {
                             continue;
                         }
                         String parameterValue = arg.getValue();
                         if (!arg.isAlwaysEncoded()) {
                             // The value is already encoded by the user
                             // Must decode the value now, so that when the
                             // httpclient encodes it, we end up with the same value
                             // as the user had entered.
                             String urlContentEncoding = contentEncoding;
                             if (urlContentEncoding == null || urlContentEncoding.length() == 0) {
                                 // Use the default encoding for urls
                                 urlContentEncoding = EncoderCache.URL_ARGUMENT_ENCODING;
                             }
                             parameterName = URLDecoder.decode(parameterName, urlContentEncoding);
                             parameterValue = URLDecoder.decode(parameterValue, urlContentEncoding);
                         }
                         // Add the parameter, httpclient will urlencode it
                         post.addParameter(parameterName, parameterValue);
                     }
 
 /*
 //                    // Alternative implementation, to make sure that HTTPSampler and HTTPSampler2
 //                    // sends the same post body.
 //
 //                    // Only include the content char set in the content-type header if it is not
 //                    // an APPLICATION_X_WWW_FORM_URLENCODED content type
 //                    String contentCharSet = null;
 //                    if(!post.getRequestHeader(HEADER_CONTENT_TYPE).getValue().equals(APPLICATION_X_WWW_FORM_URLENCODED)) {
 //                        contentCharSet = post.getRequestCharSet();
 //                    }
 //                    StringRequestEntity requestEntity = new StringRequestEntity(getQueryString(contentEncoding), post.getRequestHeader(HEADER_CONTENT_TYPE).getValue(), contentCharSet);
 //                    post.setRequestEntity(requestEntity);
 */
                 }
 
                 // If the request entity is repeatable, we can send it first to
                 // our own stream, so we can return it
                 if(post.getRequestEntity().isRepeatable()) {
                     ByteArrayOutputStream bos = new ByteArrayOutputStream();
                     post.getRequestEntity().writeRequest(bos);
                     bos.flush();
                     // We get the posted bytes using the encoding used to create it
                     postedBody.append(new String(bos.toByteArray(),post.getRequestCharSet()));
                     bos.close();
                 }
                 else {
                     postedBody.append("<RequestEntity was not repeatable, cannot view what was sent>");
                 }
             }
         }
         // Set the content length
         post.setRequestHeader(HTTPConstants.HEADER_CONTENT_LENGTH, Long.toString(post.getRequestEntity().getContentLength()));
 
         return postedBody.toString();
     }
 
     /**
      * Set up the PUT/PATCH/DELETE data
      */
     private String sendEntityData(EntityEnclosingMethod put) throws IOException {
         // Buffer to hold the put body, except file content
         StringBuilder putBody = new StringBuilder(1000);
         boolean hasPutBody = false;
 
         // Check if the header manager had a content type header
         // This allows the user to specify his own content-type for a POST request
         Header contentTypeHeader = put.getRequestHeader(HTTPConstants.HEADER_CONTENT_TYPE);
         boolean hasContentTypeHeader = contentTypeHeader != null && contentTypeHeader.getValue() != null && contentTypeHeader.getValue().length() > 0;
         HTTPFileArg[] files = getHTTPFiles();
 
         // If there are no arguments, we can send a file as the body of the request
 
         if(!hasArguments() && getSendFileAsPostBody()) {
             hasPutBody = true;
 
             // If getSendFileAsPostBody returned true, it's sure that file is not null
             File reservedFile = FileServer.getFileServer().getResolvedFile(files[0].getPath());
             FileRequestEntity fileRequestEntity = new FileRequestEntity(reservedFile,null);
             put.setRequestEntity(fileRequestEntity);
         }
         // If none of the arguments have a name specified, we
         // just send all the values as the put body
         else if(getSendParameterValuesAsPostBody()) {
             hasPutBody = true;
 
             // If a content encoding is specified, we set it as http parameter, so that
             // the post body will be encoded in the specified content encoding
             String contentEncoding = getContentEncoding();
             boolean haveContentEncoding = false;
             if(isNullOrEmptyTrimmed(contentEncoding)) {
                 contentEncoding = null;
             } else {
                 put.getParams().setContentCharset(contentEncoding);
                 haveContentEncoding = true;
             }
 
             // Just append all the parameter values, and use that as the post body
             StringBuilder putBodyContent = new StringBuilder();
             for (JMeterProperty jMeterProperty : getArguments()) {
                 HTTPArgument arg = (HTTPArgument) jMeterProperty.getObjectValue();
                 String value = null;
                 if (haveContentEncoding) {
                     value = arg.getEncodedValue(contentEncoding);
                 } else {
                     value = arg.getEncodedValue();
                 }
                 putBodyContent.append(value);
             }
             String contentTypeValue = null;
             if(hasContentTypeHeader) {
                 contentTypeValue = put.getRequestHeader(HTTPConstants.HEADER_CONTENT_TYPE).getValue();
             }
             StringRequestEntity requestEntity = new StringRequestEntity(putBodyContent.toString(), contentTypeValue, put.getRequestCharSet());
             put.setRequestEntity(requestEntity);
         }
         // Check if we have any content to send for body
         if(hasPutBody) {
             // If the request entity is repeatable, we can send it first to
             // our own stream, so we can return it
             if(put.getRequestEntity().isRepeatable()) {
                 putBody.append("<actual file content, not shown here>");
             }
             else {
                 putBody.append("<RequestEntity was not repeatable, cannot view what was sent>");
             }
             if(!hasContentTypeHeader) {
                 // Allow the mimetype of the file to control the content type
                 // This is not obvious in GUI if you are not uploading any files,
                 // but just sending the content of nameless parameters
                 // TODO: needs a multiple file upload scenerio
                 HTTPFileArg file = files.length > 0? files[0] : null;
                 if(file != null && file.getMimeType() != null && file.getMimeType().length() > 0) {
                     put.setRequestHeader(HTTPConstants.HEADER_CONTENT_TYPE, file.getMimeType());
                 }
             }
             // Set the content length
             put.setRequestHeader(HTTPConstants.HEADER_CONTENT_LENGTH, Long.toString(put.getRequestEntity().getContentLength()));
         }
         return putBody.toString();
     }
 
     /**
      * Class extending FilePart, so that we can send placeholder text
      * instead of the actual file content
      */
     private static class ViewableFilePart extends FilePart {
         private boolean hideFileData;
 
         public ViewableFilePart(String name, File file, String contentType, String charset) throws FileNotFoundException {
             super(name, file, contentType, charset);
             this.hideFileData = false;
         }
 
         public void setHideFileData(boolean hideFileData) {
             this.hideFileData = hideFileData;
         }
 
         @Override
         protected void sendData(OutputStream out) throws IOException {
             // Check if we should send only placeholder text for the
             // file content, or the real file content
             if(hideFileData) {
                 out.write("<actual file content, not shown here>".getBytes());// encoding does not really matter here
             }
             else {
                 super.sendData(out);
             }
         }
     }
 
     /**
      * From the <code>HttpMethod</code>, store all the "set-cookie" key-pair
      * values in the cookieManager of the <code>UrlConfig</code>.
      *
      * @param method
      *            <code>HttpMethod</code> which represents the request
      * @param u
      *            <code>URL</code> of the URL request
      * @param cookieManager
      *            the <code>CookieManager</code> containing all the cookies
      */
     protected void saveConnectionCookies(HttpMethod method, URL u, CookieManager cookieManager) {
         if (cookieManager != null) {
             Header[] hdr = method.getResponseHeaders(HTTPConstants.HEADER_SET_COOKIE);
             for (Header responseHeader : hdr) {
                 cookieManager.addCookieFromHeader(responseHeader.getValue(), u);
             }
         }
     }
 
 
     @Override
     protected void threadFinished() {
         log.debug("Thread Finished");
 
         closeThreadLocalConnections();
     }
 
     @Override
     protected void notifyFirstSampleAfterLoopRestart() {
         log.debug("notifyFirstSampleAfterLoopRestart");
         resetSSLContext = !USE_CACHED_SSL_CONTEXT;
     }
 
     /**
      * 
      */
     private void closeThreadLocalConnections() {
         // Does not need to be synchronised, as all access is from same thread
         Map<HostConfiguration, HttpClient> map = httpClients.get();
 
         if ( map != null ) {
             for (HttpClient cl : map.values())
             {
                 // Can cause NPE in HttpClient 3.1
                 //((SimpleHttpConnectionManager)cl.getHttpConnectionManager()).shutdown();// Closes the connection
                 // Revert to original method:
                 cl.getHttpConnectionManager().closeIdleConnections(-1000);// Closes the connection
             }
             map.clear();
         }
     }
 
     /** {@inheritDoc} */
     @Override
     public boolean interrupt() {
         HttpClient client = savedClient;
         if (client != null) {
             savedClient = null;
             // TODO - not sure this is the best method
             final HttpConnectionManager httpConnectionManager = client.getHttpConnectionManager();
             if (httpConnectionManager instanceof SimpleHttpConnectionManager) {// Should be true
                 ((SimpleHttpConnectionManager)httpConnectionManager).shutdown();
             }
         }
         return client != null;
     }
 
 }
diff --git a/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java b/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
index 1769062d4..dfcb39bec 100644
--- a/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
+++ b/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPHC4Impl.java
@@ -1,1566 +1,1565 @@
 /*
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  * 
  */
 
 package org.apache.jmeter.protocol.http.sampler;
 
 import java.io.ByteArrayOutputStream;
 import java.io.File;
 import java.io.IOException;
 import java.io.OutputStream;
 import java.io.UnsupportedEncodingException;
 import java.net.InetAddress;
 import java.net.URI;
 import java.net.URL;
 import java.net.URLDecoder;
 import java.nio.charset.Charset;
 import java.security.PrivilegedActionException;
 import java.security.PrivilegedExceptionAction;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.TimeUnit;
 import java.util.regex.Pattern;
 
 import javax.security.auth.Subject;
 
 import org.apache.commons.io.IOUtils;
 import org.apache.commons.io.input.BoundedInputStream;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.http.Header;
 import org.apache.http.HttpConnection;
 import org.apache.http.HttpConnectionMetrics;
 import org.apache.http.HttpEntity;
 import org.apache.http.HttpException;
 import org.apache.http.HttpHost;
 import org.apache.http.HttpRequest;
 import org.apache.http.HttpRequestInterceptor;
 import org.apache.http.HttpResponse;
 import org.apache.http.HttpResponseInterceptor;
 import org.apache.http.NameValuePair;
 import org.apache.http.StatusLine;
 import org.apache.http.auth.AuthScope;
 import org.apache.http.auth.Credentials;
 import org.apache.http.auth.NTCredentials;
 import org.apache.http.client.ClientProtocolException;
 import org.apache.http.client.CredentialsProvider;
 import org.apache.http.client.HttpClient;
 import org.apache.http.client.HttpRequestRetryHandler;
 import org.apache.http.client.config.CookieSpecs;
 import org.apache.http.client.config.RequestConfig;
 import org.apache.http.client.entity.UrlEncodedFormEntity;
 import org.apache.http.client.methods.HttpEntityEnclosingRequestBase;
 import org.apache.http.client.methods.HttpGet;
 import org.apache.http.client.methods.HttpHead;
 import org.apache.http.client.methods.HttpOptions;
 import org.apache.http.client.methods.HttpPatch;
 import org.apache.http.client.methods.HttpPost;
 import org.apache.http.client.methods.HttpPut;
 import org.apache.http.client.methods.HttpRequestBase;
 import org.apache.http.client.methods.HttpTrace;
 import org.apache.http.client.methods.HttpUriRequest;
 import org.apache.http.client.params.ClientPNames;
 import org.apache.http.client.protocol.HttpClientContext;
 import org.apache.http.client.protocol.ResponseContentEncoding;
 import org.apache.http.conn.ConnectionKeepAliveStrategy;
 import org.apache.http.conn.DnsResolver;
 import org.apache.http.conn.params.ConnRoutePNames;
 import org.apache.http.conn.scheme.PlainSocketFactory;
 import org.apache.http.conn.scheme.Scheme;
 import org.apache.http.conn.scheme.SchemeRegistry;
 import org.apache.http.entity.ContentType;
 import org.apache.http.entity.FileEntity;
 import org.apache.http.entity.StringEntity;
 import org.apache.http.entity.mime.FormBodyPart;
 import org.apache.http.entity.mime.FormBodyPartBuilder;
 import org.apache.http.entity.mime.MIME;
 import org.apache.http.entity.mime.MultipartEntityBuilder;
 import org.apache.http.entity.mime.content.FileBody;
 import org.apache.http.entity.mime.content.StringBody;
 import org.apache.http.impl.client.AbstractHttpClient;
 import org.apache.http.impl.client.DefaultClientConnectionReuseStrategy;
 import org.apache.http.impl.client.DefaultConnectionKeepAliveStrategy;
 import org.apache.http.impl.client.DefaultHttpClient;
 import org.apache.http.impl.client.DefaultHttpRequestRetryHandler;
 import org.apache.http.impl.conn.SystemDefaultDnsResolver;
 import org.apache.http.message.BasicNameValuePair;
 import org.apache.http.message.BufferedHeader;
 import org.apache.http.params.BasicHttpParams;
 import org.apache.http.params.CoreConnectionPNames;
 import org.apache.http.params.CoreProtocolPNames;
 import org.apache.http.params.DefaultedHttpParams;
 import org.apache.http.params.HttpParams;
 import org.apache.http.params.SyncBasicHttpParams;
 import org.apache.http.protocol.BasicHttpContext;
 import org.apache.http.protocol.HTTP;
 import org.apache.http.protocol.HttpContext;
 import org.apache.http.protocol.HttpCoreContext;
 import org.apache.http.util.CharArrayBuffer;
 import org.apache.jmeter.config.Arguments;
 import org.apache.jmeter.protocol.http.control.AuthManager;
 import org.apache.jmeter.protocol.http.control.CacheManager;
 import org.apache.jmeter.protocol.http.control.CookieManager;
 import org.apache.jmeter.protocol.http.control.HeaderManager;
 import org.apache.jmeter.protocol.http.util.EncoderCache;
 import org.apache.jmeter.protocol.http.util.HTTPArgument;
 import org.apache.jmeter.protocol.http.util.HTTPConstants;
 import org.apache.jmeter.protocol.http.util.HTTPFileArg;
 import org.apache.jmeter.protocol.http.util.SlowHC4SocketFactory;
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.services.FileServer;
 import org.apache.jmeter.testelement.property.CollectionProperty;
 import org.apache.jmeter.testelement.property.JMeterProperty;
 import org.apache.jmeter.testelement.property.PropertyIterator;
 import org.apache.jmeter.threads.JMeterContextService;
 import org.apache.jmeter.threads.JMeterVariables;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jmeter.util.JsseSSLManager;
 import org.apache.jmeter.util.SSLManager;
 import org.apache.jorphan.logging.LoggingManager;
 import org.apache.log.Logger;
 
 /**
  * HTTP Sampler using Apache HttpClient 4.x.
  *
  */
 public class HTTPHC4Impl extends HTTPHCAbstractImpl {
 
     private static final int MAX_BODY_RETAIN_SIZE = JMeterUtils.getPropDefault("httpclient4.max_body_retain_size", 32 * 1024);
 
     private static final Logger log = LoggingManager.getLoggerForClass();
 
     /** retry count to be used (default 0); 0 = disable retries */
     private static final int RETRY_COUNT = JMeterUtils.getPropDefault("httpclient4.retrycount", 0);
 
     /** Idle timeout to be applied to connections if no Keep-Alive header is sent by the server (default 0 = disable) */
     private static final int IDLE_TIMEOUT = JMeterUtils.getPropDefault("httpclient4.idletimeout", 0);
     
     private static final int VALIDITY_AFTER_INACTIVITY_TIMEOUT = JMeterUtils.getPropDefault("httpclient4.validate_after_inactivity", 2000);
     
     private static final int TIME_TO_LIVE = JMeterUtils.getPropDefault("httpclient4.time_to_live", 2000);
 
     private static final String CONTEXT_METRICS = "jmeter_metrics"; // TODO hack for metrics related to HTTPCLIENT-1081, to be removed later
     
     private static final Pattern PORT_PATTERN = Pattern.compile("\\d+"); // only used in .matches(), no need for anchors
 
     private static final ConnectionKeepAliveStrategy IDLE_STRATEGY = new DefaultConnectionKeepAliveStrategy(){
         @Override
         public long getKeepAliveDuration(HttpResponse response, HttpContext context) {
             long duration = super.getKeepAliveDuration(response, context);
             if (duration <= 0 && IDLE_TIMEOUT > 0) {// none found by the superclass
                 if(log.isDebugEnabled()) {
                     log.debug("Setting keepalive to " + IDLE_TIMEOUT);
                 }
                 return IDLE_TIMEOUT;
             } 
             return duration; // return the super-class value
         }
         
     };
 
     /**
      * Special interceptor made to keep metrics when connection is released for some method like HEAD
      * Otherwise calling directly ((HttpConnection) localContext.getAttribute(HttpCoreContext.HTTP_CONNECTION)).getMetrics();
      * would throw org.apache.http.impl.conn.ConnectionShutdownException
      * See <a href="https://bz.apache.org/jira/browse/HTTPCLIENT-1081">HTTPCLIENT-1081</a>
      */
     private static final HttpResponseInterceptor METRICS_SAVER = new HttpResponseInterceptor(){
         @Override
         public void process(HttpResponse response, HttpContext context)
                 throws HttpException, IOException {
             HttpConnectionMetrics metrics = ((HttpConnection) context.getAttribute(HttpCoreContext.HTTP_CONNECTION)).getMetrics();
             context.setAttribute(CONTEXT_METRICS, metrics);
         }
     };
     private static final HttpRequestInterceptor METRICS_RESETTER = new HttpRequestInterceptor() {
         @Override
         public void process(HttpRequest request, HttpContext context)
                 throws HttpException, IOException {
             HttpConnectionMetrics metrics = ((HttpConnection) context.getAttribute(HttpCoreContext.HTTP_CONNECTION)).getMetrics();
             metrics.reset();
         }
     };
 
 
     /**
      * Headers to save
      */
     private static final String[] HEADERS_TO_SAVE = new String[]{
                     "content-length",
                     "content-encoding",
                     "content-md5"
             };
     
     /**
      * Custom implementation that backups headers related to Compressed responses 
      * that HC core {@link ResponseContentEncoding} removes after uncompressing
      * See Bug 59401
      */
     private static final HttpResponseInterceptor RESPONSE_CONTENT_ENCODING = new ResponseContentEncoding() {
         @Override
         public void process(HttpResponse response, HttpContext context)
                 throws HttpException, IOException {
             ArrayList<Header[]> headersToSave = null;
             
             final HttpEntity entity = response.getEntity();
             final HttpClientContext clientContext = HttpClientContext.adapt(context);
             final RequestConfig requestConfig = clientContext.getRequestConfig();
             // store the headers if necessary
             if (requestConfig.isContentCompressionEnabled() && entity != null && entity.getContentLength() != 0) {
                 final Header ceheader = entity.getContentEncoding();
                 if (ceheader != null) {
                     headersToSave = new ArrayList<>(3);
                     for(String name : HEADERS_TO_SAVE) {
                         Header[] hdr = response.getHeaders(name); // empty if none
                         headersToSave.add(hdr);
                     }
                 }
             }
 
             // Now invoke original parent code
             super.process(response, clientContext);
             // Should this be in a finally ? 
             if(headersToSave != null) {
                 for (Header[] headers : headersToSave) {
                     for (Header headerToRestore : headers) {
                         if (response.containsHeader(headerToRestore.getName())) {
                             break;
                         }
                         response.addHeader(headerToRestore);
                     }
                 }
             }
         }
     };
     
     /**
      * 1 HttpClient instance per combination of (HttpClient,HttpClientKey)
      */
     private static final ThreadLocal<Map<HttpClientKey, HttpClient>> HTTPCLIENTS_CACHE_PER_THREAD_AND_HTTPCLIENTKEY = 
         new InheritableThreadLocal<Map<HttpClientKey, HttpClient>>(){
         @Override
         protected Map<HttpClientKey, HttpClient> initialValue() {
             return new HashMap<>();
         }
     };
 
     // Scheme used for slow HTTP sockets. Cannot be set as a default, because must be set on an HttpClient instance.
     private static final Scheme SLOW_HTTP;
     
     /*
      * Create a set of default parameters from the ones initially created.
      * This allows the defaults to be overridden if necessary from the properties file.
      */
     private static final HttpParams DEFAULT_HTTP_PARAMS;
 
     private static final String USER_TOKEN = "__jmeter.USER_TOKEN__"; //$NON-NLS-1$
     
     static final String SAMPLER_RESULT_TOKEN = "__jmeter.SAMPLER_RESULT__"; //$NON-NLS-1$
     
     private static final String HTTPCLIENT_TOKEN = "__jmeter.HTTPCLIENT_TOKEN__";
 
     static {
         log.info("HTTP request retry count = "+RETRY_COUNT);
 
         DEFAULT_HTTP_PARAMS = new SyncBasicHttpParams(); // Could we drop the Sync here?
         DEFAULT_HTTP_PARAMS.setBooleanParameter(CoreConnectionPNames.STALE_CONNECTION_CHECK, false);
         DEFAULT_HTTP_PARAMS.setIntParameter(ClientPNames.MAX_REDIRECTS, HTTPSamplerBase.MAX_REDIRECTS);
         DefaultHttpClient.setDefaultHttpParams(DEFAULT_HTTP_PARAMS);
         
         // Process Apache HttpClient parameters file
         String file=JMeterUtils.getProperty("hc.parameters.file"); // $NON-NLS-1$
         if (file != null) {
             HttpClientDefaultParameters.load(file, DEFAULT_HTTP_PARAMS);
         }
 
         // Set up HTTP scheme override if necessary
         if (CPS_HTTP > 0) {
             log.info("Setting up HTTP SlowProtocol, cps="+CPS_HTTP);
             SLOW_HTTP = new Scheme(HTTPConstants.PROTOCOL_HTTP, HTTPConstants.DEFAULT_HTTP_PORT, new SlowHC4SocketFactory(CPS_HTTP));
         } else {
             SLOW_HTTP = null;
         }
         
         if (localAddress != null){
             DEFAULT_HTTP_PARAMS.setParameter(ConnRoutePNames.LOCAL_ADDRESS, localAddress);
         }
         
     }
 
     private volatile HttpUriRequest currentRequest; // Accessed from multiple threads
 
     private volatile boolean resetSSLContext;
 
     protected HTTPHC4Impl(HTTPSamplerBase testElement) {
         super(testElement);
     }
     
     /**
      * Implementation that allows GET method to have a body
      */
     public static final class HttpGetWithEntity extends HttpEntityEnclosingRequestBase {
 
         public HttpGetWithEntity(final URI uri) {
             super();
             setURI(uri);
         }
 
         @Override
         public String getMethod() {
             return HTTPConstants.GET;
         }
     }
 
     public static final class HttpDelete extends HttpEntityEnclosingRequestBase {
 
         public HttpDelete(final URI uri) {
             super();
             setURI(uri);
         }
 
         @Override
         public String getMethod() {
             return HTTPConstants.DELETE;
         }
     }
     
     @Override
     protected HTTPSampleResult sample(URL url, String method,
             boolean areFollowingRedirect, int frameDepth) {
 
         if (log.isDebugEnabled()) {
             log.debug("Start : sample " + url.toString());
             log.debug("method " + method+ " followingRedirect " + areFollowingRedirect + " depth " + frameDepth);            
         }
 
         HTTPSampleResult res = createSampleResult(url, method);
 
         HttpClient httpClient = setupClient(url, res);
 
         HttpRequestBase httpRequest = null;
         try {
             URI uri = url.toURI();
             if (method.equals(HTTPConstants.POST)) {
                 httpRequest = new HttpPost(uri);
             } else if (method.equals(HTTPConstants.GET)) {
                 // Some servers fail if Content-Length is equal to 0
                 // so to avoid this we use HttpGet when there is no body (Content-Length will not be set)
                 // otherwise we use HttpGetWithEntity
                 if ( (!hasArguments() && getSendFileAsPostBody()) 
                         || getSendParameterValuesAsPostBody() ) {
                     httpRequest = new HttpGetWithEntity(uri);
                 } else {
                     httpRequest = new HttpGet(uri);
                 }
             } else if (method.equals(HTTPConstants.PUT)) {
                 httpRequest = new HttpPut(uri);
             } else if (method.equals(HTTPConstants.HEAD)) {
                 httpRequest = new HttpHead(uri);
             } else if (method.equals(HTTPConstants.TRACE)) {
                 httpRequest = new HttpTrace(uri);
             } else if (method.equals(HTTPConstants.OPTIONS)) {
                 httpRequest = new HttpOptions(uri);
             } else if (method.equals(HTTPConstants.DELETE)) {
                 httpRequest = new HttpDelete(uri);
             } else if (method.equals(HTTPConstants.PATCH)) {
                 httpRequest = new HttpPatch(uri);
             } else if (HttpWebdav.isWebdavMethod(method)) {
                 httpRequest = new HttpWebdav(method, uri);
             } else {
                 throw new IllegalArgumentException("Unexpected method: '"+method+"'");
             }
             setupRequest(url, httpRequest, res); // can throw IOException
         } catch (Exception e) {
             res.sampleStart();
             res.sampleEnd();
             errorResult(e, res);
             return res;
         }
 
         HttpContext localContext = new BasicHttpContext();
         setupClientContextBeforeSample(localContext);
         
         res.sampleStart();
 
         final CacheManager cacheManager = getCacheManager();
         if (cacheManager != null && HTTPConstants.GET.equalsIgnoreCase(method)) {
            if (cacheManager.inCache(url)) {
                return updateSampleResultForResourceInCache(res);
            }
         }
 
         try {
             currentRequest = httpRequest;
             handleMethod(method, res, httpRequest, localContext);
             // store the SampleResult in LocalContext to compute connect time
             localContext.setAttribute(SAMPLER_RESULT_TOKEN, res);
             // perform the sample
             HttpResponse httpResponse = 
                     executeRequest(httpClient, httpRequest, localContext, url);
 
             // Needs to be done after execute to pick up all the headers
             final HttpRequest request = (HttpRequest) localContext.getAttribute(HttpCoreContext.HTTP_REQUEST);
             extractClientContextAfterSample(localContext);
             // We've finished with the request, so we can add the LocalAddress to it for display
             final InetAddress localAddr = (InetAddress) httpRequest.getParams().getParameter(ConnRoutePNames.LOCAL_ADDRESS);
             if (localAddr != null) {
                 request.addHeader(HEADER_LOCAL_ADDRESS, localAddr.toString());
             }
             res.setRequestHeaders(getConnectionHeaders(request));
 
             Header contentType = httpResponse.getLastHeader(HTTPConstants.HEADER_CONTENT_TYPE);
             if (contentType != null){
                 String ct = contentType.getValue();
                 res.setContentType(ct);
                 res.setEncodingAndType(ct);                    
             }
             HttpEntity entity = httpResponse.getEntity();
             if (entity != null) {
                 res.setResponseData(readResponse(res, entity.getContent(), entity.getContentLength()));
             }
             
             res.sampleEnd(); // Done with the sampling proper.
             currentRequest = null;
 
             // Now collect the results into the HTTPSampleResult:
             StatusLine statusLine = httpResponse.getStatusLine();
             int statusCode = statusLine.getStatusCode();
             res.setResponseCode(Integer.toString(statusCode));
             res.setResponseMessage(statusLine.getReasonPhrase());
             res.setSuccessful(isSuccessCode(statusCode));
 
             res.setResponseHeaders(getResponseHeaders(httpResponse, localContext));
             if (res.isRedirect()) {
                 final Header headerLocation = httpResponse.getLastHeader(HTTPConstants.HEADER_LOCATION);
                 if (headerLocation == null) { // HTTP protocol violation, but avoids NPE
                     throw new IllegalArgumentException("Missing location header in redirect for " + httpRequest.getRequestLine());
                 }
                 String redirectLocation = headerLocation.getValue();
                 res.setRedirectLocation(redirectLocation);
             }
 
             // record some sizes to allow HTTPSampleResult.getBytes() with different options
             HttpConnectionMetrics  metrics = (HttpConnectionMetrics) localContext.getAttribute(CONTEXT_METRICS);
             long headerBytes = 
                 res.getResponseHeaders().length()   // condensed length (without \r)
               + httpResponse.getAllHeaders().length // Add \r for each header
               + 1 // Add \r for initial header
               + 2; // final \r\n before data
             long totalBytes = metrics.getReceivedBytesCount();
             res.setHeadersSize((int)headerBytes);
             res.setBodySize(totalBytes - headerBytes);
             res.setSentBytes(metrics.getSentBytesCount());
             if (log.isDebugEnabled()) {
                 log.debug("ResponseHeadersSize=" + res.getHeadersSize() + " Content-Length=" + res.getBodySizeAsLong()
                         + " Total=" + (res.getHeadersSize() + res.getBodySizeAsLong()));
             }
 
             // If we redirected automatically, the URL may have changed
             if (getAutoRedirects()){
                 HttpUriRequest req = (HttpUriRequest) localContext.getAttribute(HttpCoreContext.HTTP_REQUEST);
                 HttpHost target = (HttpHost) localContext.getAttribute(HttpCoreContext.HTTP_TARGET_HOST);
                 URI redirectURI = req.getURI();
                 if (redirectURI.isAbsolute()){
                     res.setURL(redirectURI.toURL());
                 } else {
                     res.setURL(new URL(new URL(target.toURI()),redirectURI.toString()));
                 }
             }
 
             // Store any cookies received in the cookie manager:
             saveConnectionCookies(httpResponse, res.getURL(), getCookieManager());
 
             // Save cache information
             if (cacheManager != null){
                 cacheManager.saveDetails(httpResponse, res);
             }
 
             // Follow redirects and download page resources if appropriate:
             res = resultProcessing(areFollowingRedirect, frameDepth, res);
 
         } catch (IOException e) {
             log.debug("IOException", e);
             if (res.getEndTime() == 0) {
                 res.sampleEnd();
             }
            // pick up headers if failed to execute the request
             if (res.getRequestHeaders() != null) {
                 log.debug("Overwriting request old headers: " + res.getRequestHeaders());
             }
             res.setRequestHeaders(getConnectionHeaders((HttpRequest) localContext.getAttribute(HttpCoreContext.HTTP_REQUEST)));
             errorResult(e, res);
             return res;
         } catch (RuntimeException e) {
             log.debug("RuntimeException", e);
             if (res.getEndTime() == 0) {
                 res.sampleEnd();
             }
             errorResult(e, res);
             return res;
         } finally {
             currentRequest = null;
             JMeterContextService.getContext().getSamplerContext().remove(HTTPCLIENT_TOKEN);
         }
         return res;
     }
 
     /**
      * Store in JMeter Variables the UserToken so that the SSL context is reused
      * See <a href="https://bz.apache.org/bugzilla/show_bug.cgi?id=57804">Bug 57804</a>
      * @param localContext {@link HttpContext}
      */
     private void extractClientContextAfterSample(HttpContext localContext) {
         Object userToken = localContext.getAttribute(HttpClientContext.USER_TOKEN);
         if(userToken != null) {
             if(log.isDebugEnabled()) {
                 log.debug("Extracted from HttpContext user token:"+userToken+", storing it as JMeter variable:"+USER_TOKEN);
             }
             // During recording JMeterContextService.getContext().getVariables() is null
             JMeterVariables jMeterVariables = JMeterContextService.getContext().getVariables();
             if (jMeterVariables != null) {
                 jMeterVariables.putObject(USER_TOKEN, userToken); 
             }
         }
     }
 
     /**
      * Configure the UserToken so that the SSL context is reused
      * See <a href="https://bz.apache.org/bugzilla/show_bug.cgi?id=57804">Bug 57804</a>
      * @param localContext {@link HttpContext}
      */
     private void setupClientContextBeforeSample(HttpContext localContext) {
         Object userToken = null;
         // During recording JMeterContextService.getContext().getVariables() is null
         JMeterVariables jMeterVariables = JMeterContextService.getContext().getVariables();
         if(jMeterVariables != null) {
             userToken = jMeterVariables.getObject(USER_TOKEN);            
         }
         if(userToken != null) {
             if(log.isDebugEnabled()) {
                 log.debug("Found user token:"+userToken+" as JMeter variable:"+USER_TOKEN+", storing it in HttpContext");
             }
             localContext.setAttribute(HttpClientContext.USER_TOKEN, userToken);
         } else {
             // It would be better to create a ClientSessionManager that would compute this value
             // for now it can be Thread.currentThread().getName() but must be changed when we would change 
             // the Thread per User model
             String userId = Thread.currentThread().getName();
             if(log.isDebugEnabled()) {
                 log.debug("Storing in HttpContext the user token:"+userId);
             }
             localContext.setAttribute(HttpClientContext.USER_TOKEN, userId);
         }
     }
 
     /**
      * Calls {@link #sendPostData(HttpPost)} if method is <code>POST</code> and
      * {@link #sendEntityData(HttpEntityEnclosingRequestBase)} if method is
      * <code>PUT</code> or <code>PATCH</code>
      * <p>
      * Field HTTPSampleResult#queryString of result is modified in the 2 cases
      * 
      * @param method
      *            String HTTP method
      * @param result
      *            {@link HTTPSampleResult}
      * @param httpRequest
      *            {@link HttpRequestBase}
      * @param localContext
      *            {@link HttpContext}
      * @throws IOException
      *             when posting data fails due to I/O
      */
     protected void handleMethod(String method, HTTPSampleResult result,
             HttpRequestBase httpRequest, HttpContext localContext) throws IOException {
         // Handle the various methods
         if (httpRequest instanceof HttpPost) {
             String postBody = sendPostData((HttpPost)httpRequest);
             result.setQueryString(postBody);
         } else if (httpRequest instanceof HttpEntityEnclosingRequestBase) {
             String entityBody = sendEntityData((HttpEntityEnclosingRequestBase) httpRequest);
             result.setQueryString(entityBody);
         }
     }
 
     /**
      * Create HTTPSampleResult filling url, method and SampleLabel.
      * Monitor field is computed calling isMonitor()
      * @param url URL
      * @param method HTTP Method
      * @return {@link HTTPSampleResult}
      */
     protected HTTPSampleResult createSampleResult(URL url, String method) {
         HTTPSampleResult res = new HTTPSampleResult();
-        res.setMonitor(isMonitor());
 
         res.setSampleLabel(url.toString()); // May be replaced later
         res.setHTTPMethod(method);
         res.setURL(url);
         
         return res;
     }
 
     /**
      * Execute request either as is or under PrivilegedAction 
      * if a Subject is available for url
      * @param httpClient the {@link HttpClient} to be used to execute the httpRequest
      * @param httpRequest the {@link HttpRequest} to be executed
      * @param localContext th {@link HttpContext} to be used for execution
      * @param url the target url (will be used to look up a possible subject for the execution)
      * @return the result of the execution of the httpRequest
      * @throws IOException
      * @throws ClientProtocolException
      */
     private HttpResponse executeRequest(final HttpClient httpClient,
             final HttpRequestBase httpRequest, final HttpContext localContext, final URL url)
             throws IOException, ClientProtocolException {
         AuthManager authManager = getAuthManager();
         if (authManager != null) {
             Subject subject = authManager.getSubjectForUrl(url);
             if(subject != null) {
                 try {
                     return Subject.doAs(subject,
                             new PrivilegedExceptionAction<HttpResponse>() {
     
                                 @Override
                                 public HttpResponse run() throws Exception {
                                     return httpClient.execute(httpRequest,
                                             localContext);
                                 }
                             });
                 } catch (PrivilegedActionException e) {
                     log.error(
                             "Can't execute httpRequest with subject:"+subject,
                             e);
                     throw new RuntimeException("Can't execute httpRequest with subject:"+subject, e);
                 }
             }
         }
         return httpClient.execute(httpRequest, localContext);
     }
 
     /**
      * Holder class for all fields that define an HttpClient instance;
      * used as the key to the ThreadLocal map of HttpClient instances.
      */
     private static final class HttpClientKey {
 
         private final String target; // protocol://[user:pass@]host:[port]
         private final boolean hasProxy;
         private final String proxyHost;
         private final int proxyPort;
         private final String proxyUser;
         private final String proxyPass;
         
         private final int hashCode; // Always create hash because we will always need it
 
         /**
          * @param url URL Only protocol and url authority are used (protocol://[user:pass@]host:[port])
          * @param hasProxy has proxy
          * @param proxyHost proxy host
          * @param proxyPort proxy port
          * @param proxyUser proxy user
          * @param proxyPass proxy password
          */
         public HttpClientKey(URL url, boolean hasProxy, String proxyHost,
                 int proxyPort, String proxyUser, String proxyPass) {
             // N.B. need to separate protocol from authority otherwise http://server would match https://erver (<= sic, not typo error)
             // could use separate fields, but simpler to combine them
             this.target = url.getProtocol()+"://"+url.getAuthority();
             this.hasProxy = hasProxy;
             this.proxyHost = proxyHost;
             this.proxyPort = proxyPort;
             this.proxyUser = proxyUser;
             this.proxyPass = proxyPass;
             this.hashCode = getHash();
         }
         
         private int getHash() {
             int hash = 17;
             hash = hash*31 + (hasProxy ? 1 : 0);
             if (hasProxy) {
                 hash = hash*31 + getHash(proxyHost);
                 hash = hash*31 + proxyPort;
                 hash = hash*31 + getHash(proxyUser);
                 hash = hash*31 + getHash(proxyPass);
             }
             hash = hash*31 + target.hashCode();
             return hash;
         }
 
         // Allow for null strings
         private int getHash(String s) {
             return s == null ? 0 : s.hashCode(); 
         }
         
         @Override
         public boolean equals (Object obj){
             if (this == obj) {
                 return true;
             }
             if (!(obj instanceof HttpClientKey)) {
                 return false;
             }
             HttpClientKey other = (HttpClientKey) obj;
             if (this.hasProxy) { // otherwise proxy String fields may be null
                 return 
                 this.hasProxy == other.hasProxy &&
                 this.proxyPort == other.proxyPort &&
                 this.proxyHost.equals(other.proxyHost) &&
                 this.proxyUser.equals(other.proxyUser) &&
                 this.proxyPass.equals(other.proxyPass) &&
                 this.target.equals(other.target);
             }
             // No proxy, so don't check proxy fields
             return 
                 this.hasProxy == other.hasProxy &&
                 this.target.equals(other.target);
         }
 
         @Override
         public int hashCode(){
             return hashCode;
         }
 
         // For debugging
         @Override
         public String toString() {
             StringBuilder sb = new StringBuilder();
             sb.append(target);
             if (hasProxy) {
                 sb.append(" via ");
                 sb.append(proxyUser);
                 sb.append('@');
                 sb.append(proxyHost);
                 sb.append(':');
                 sb.append(proxyPort);
             }
             return sb.toString();
         }
     }
 
     private HttpClient setupClient(URL url, SampleResult res) {
 
         Map<HttpClientKey, HttpClient> mapHttpClientPerHttpClientKey = HTTPCLIENTS_CACHE_PER_THREAD_AND_HTTPCLIENTKEY.get();
         
         final String host = url.getHost();
         String proxyHost = getProxyHost();
         int proxyPort = getProxyPortInt();
         String proxyPass = getProxyPass();
         String proxyUser = getProxyUser();
 
         // static proxy is the globally define proxy eg command line or properties
         boolean useStaticProxy = isStaticProxy(host);
         // dynamic proxy is the proxy defined for this sampler
         boolean useDynamicProxy = isDynamicProxy(proxyHost, proxyPort);
         boolean useProxy = useStaticProxy || useDynamicProxy;
         
         // if both dynamic and static are used, the dynamic proxy has priority over static
         if(!useDynamicProxy) {
             proxyHost = PROXY_HOST;
             proxyPort = PROXY_PORT;
             proxyUser = PROXY_USER;
             proxyPass = PROXY_PASS;
         }
 
         // Lookup key - must agree with all the values used to create the HttpClient.
         HttpClientKey key = new HttpClientKey(url, useProxy, proxyHost, proxyPort, proxyUser, proxyPass);
         
         HttpClient httpClient = null;
         boolean concurrentDwn = this.testElement.isConcurrentDwn();
         if(concurrentDwn) {
             httpClient = (HttpClient) JMeterContextService.getContext().getSamplerContext().get(HTTPCLIENT_TOKEN);
         }
         
         if (httpClient == null) {
             httpClient = mapHttpClientPerHttpClientKey.get(key);
         }
 
         if (httpClient != null && resetSSLContext && HTTPConstants.PROTOCOL_HTTPS.equalsIgnoreCase(url.getProtocol())) {
             ((AbstractHttpClient) httpClient).clearRequestInterceptors(); 
             ((AbstractHttpClient) httpClient).clearResponseInterceptors(); 
             httpClient.getConnectionManager().closeIdleConnections(1L, TimeUnit.MICROSECONDS);
             httpClient = null;
             JsseSSLManager sslMgr = (JsseSSLManager) SSLManager.getInstance();
             sslMgr.resetContext();
             resetSSLContext = false;
         }
 
         if (httpClient == null) { // One-time init for this client
 
             HttpParams clientParams = new DefaultedHttpParams(new BasicHttpParams(), DEFAULT_HTTP_PARAMS);
 
             DnsResolver resolver = this.testElement.getDNSResolver();
             if (resolver == null) {
                 resolver = SystemDefaultDnsResolver.INSTANCE;
             }
             MeasuringConnectionManager connManager = new MeasuringConnectionManager(
                     createSchemeRegistry(), 
                     resolver, 
                     TIME_TO_LIVE,
                     VALIDITY_AFTER_INACTIVITY_TIMEOUT);
             
             // Modern browsers use more connections per host than the current httpclient default (2)
             // when using parallel download the httpclient and connection manager are shared by the downloads threads
             // to be realistic JMeter must set an higher value to DefaultMaxPerRoute
             if(concurrentDwn) {
                 try {
                     int maxConcurrentDownloads = Integer.parseInt(this.testElement.getConcurrentPool());
                     connManager.setDefaultMaxPerRoute(Math.max(maxConcurrentDownloads, connManager.getDefaultMaxPerRoute()));                
                 } catch (NumberFormatException nfe) {
                    // no need to log -> will be done by the sampler
                 }
             }
             
             httpClient = new DefaultHttpClient(connManager, clientParams) {
                 @Override
                 protected HttpRequestRetryHandler createHttpRequestRetryHandler() {
                     return new DefaultHttpRequestRetryHandler(RETRY_COUNT, false); // set retry count
                 }
             };
             
             if (IDLE_TIMEOUT > 0) {
                 ((AbstractHttpClient) httpClient).setKeepAliveStrategy(IDLE_STRATEGY );
             }
             // see https://issues.apache.org/jira/browse/HTTPCORE-397
             ((AbstractHttpClient) httpClient).setReuseStrategy(DefaultClientConnectionReuseStrategy.INSTANCE);
             ((AbstractHttpClient) httpClient).addResponseInterceptor(RESPONSE_CONTENT_ENCODING);
             ((AbstractHttpClient) httpClient).addResponseInterceptor(METRICS_SAVER); // HACK
             ((AbstractHttpClient) httpClient).addRequestInterceptor(METRICS_RESETTER); 
             
             // Override the default schemes as necessary
             SchemeRegistry schemeRegistry = httpClient.getConnectionManager().getSchemeRegistry();
 
             if (SLOW_HTTP != null){
                 schemeRegistry.register(SLOW_HTTP);
             }
 
             // Set up proxy details
             if(useProxy) {
 
                 HttpHost proxy = new HttpHost(proxyHost, proxyPort);
                 clientParams.setParameter(ConnRoutePNames.DEFAULT_PROXY, proxy);
                 
                 if (proxyUser.length() > 0) {                   
                     ((AbstractHttpClient) httpClient).getCredentialsProvider().setCredentials(
                             new AuthScope(proxyHost, proxyPort),
                             new NTCredentials(proxyUser, proxyPass, localHost, PROXY_DOMAIN));
                 }
             }
 
             // Bug 52126 - we do our own cookie handling
             clientParams.setParameter(ClientPNames.COOKIE_POLICY, CookieSpecs.IGNORE_COOKIES);
 
             if (log.isDebugEnabled()) {
                 log.debug("Created new HttpClient: @"+System.identityHashCode(httpClient) + " " + key.toString());
             }
 
             mapHttpClientPerHttpClientKey.put(key, httpClient); // save the agent for next time round
         } else {
             if (log.isDebugEnabled()) {
                 log.debug("Reusing the HttpClient: @"+System.identityHashCode(httpClient) + " " + key.toString());
             }
         }
 
         if(concurrentDwn) {
             JMeterContextService.getContext().getSamplerContext().put(HTTPCLIENT_TOKEN, httpClient);
         }
 
         // TODO - should this be done when the client is created?
         // If so, then the details need to be added as part of HttpClientKey
         setConnectionAuthorization(httpClient, url, getAuthManager(), key);
 
         return httpClient;
     }
 
     /**
      * Setup LazySchemeSocketFactory
      * @see "https://bz.apache.org/bugzilla/show_bug.cgi?id=58099"
      */
     private static SchemeRegistry createSchemeRegistry() {
         final SchemeRegistry registry = new SchemeRegistry();
         registry.register(
                 new Scheme("http", 80, PlainSocketFactory.getSocketFactory())); //$NON-NLS-1$
         registry.register(
                 new Scheme("https", 443, new LazySchemeSocketFactory())); //$NON-NLS-1$
         return registry;
     }
 
     /**
      * Setup following elements on httpRequest:
      * <ul>
      * <li>ConnRoutePNames.LOCAL_ADDRESS enabling IP-SPOOFING</li>
      * <li>Socket and connection timeout</li>
      * <li>Redirect handling</li>
      * <li>Keep Alive header or Connection Close</li>
      * <li>Calls setConnectionHeaders to setup headers</li>
      * <li>Calls setConnectionCookie to setup Cookie</li>
      * </ul>
      * 
      * @param url
      *            {@link URL} of the request
      * @param httpRequest
      *            http request for the request
      * @param res
      *            sample result to set cookies on
      * @throws IOException
      *             if hostname/ip to use could not be figured out
      */
     protected void setupRequest(URL url, HttpRequestBase httpRequest, HTTPSampleResult res)
         throws IOException {
 
     HttpParams requestParams = httpRequest.getParams();
     
     // Set up the local address if one exists
     final InetAddress inetAddr = getIpSourceAddress();
     if (inetAddr != null) {// Use special field ip source address (for pseudo 'ip spoofing')
         requestParams.setParameter(ConnRoutePNames.LOCAL_ADDRESS, inetAddr);
     } else if (localAddress != null){
         requestParams.setParameter(ConnRoutePNames.LOCAL_ADDRESS, localAddress);
     } else { // reset in case was set previously
         requestParams.removeParameter(ConnRoutePNames.LOCAL_ADDRESS);
     }
 
     int rto = getResponseTimeout();
     if (rto > 0){
         requestParams.setIntParameter(CoreConnectionPNames.SO_TIMEOUT, rto);
     }
 
     int cto = getConnectTimeout();
     if (cto > 0){
         requestParams.setIntParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, cto);
     }
 
     requestParams.setBooleanParameter(ClientPNames.HANDLE_REDIRECTS, getAutoRedirects());
     
     // a well-behaved browser is supposed to send 'Connection: close'
     // with the last request to an HTTP server. Instead, most browsers
     // leave it to the server to close the connection after their
     // timeout period. Leave it to the JMeter user to decide.
     if (getUseKeepAlive()) {
         httpRequest.setHeader(HTTPConstants.HEADER_CONNECTION, HTTPConstants.KEEP_ALIVE);
     } else {
         httpRequest.setHeader(HTTPConstants.HEADER_CONNECTION, HTTPConstants.CONNECTION_CLOSE);
     }
 
     setConnectionHeaders(httpRequest, url, getHeaderManager(), getCacheManager());
 
     String cookies = setConnectionCookie(httpRequest, url, getCookieManager());
 
     if (res != null) {
         res.setCookies(cookies);
     }
 
 }
 
     
     /**
      * Set any default request headers to include
      *
      * @param request the HttpRequest to be used
      */
     protected void setDefaultRequestHeaders(HttpRequest request) {
      // Method left empty here, but allows subclasses to override
     }
 
     /**
      * Gets the ResponseHeaders
      *
      * @param response
      *            containing the headers
      * @param localContext {@link HttpContext}
      * @return string containing the headers, one per line
      */
     private String getResponseHeaders(HttpResponse response, HttpContext localContext) {
         Header[] rh = response.getAllHeaders();
 
         StringBuilder headerBuf = new StringBuilder(40 * (rh.length+1));
         headerBuf.append(response.getStatusLine());// header[0] is not the status line...
         headerBuf.append("\n"); // $NON-NLS-1$
 
         for (Header responseHeader : rh) {
             writeResponseHeader(headerBuf, responseHeader);
         }
         return headerBuf.toString();
     }
 
     /**
      * Write responseHeader to headerBuffer in an optimized way
      * @param headerBuffer {@link StringBuilder}
      * @param responseHeader {@link Header}
      */
     private void writeResponseHeader(StringBuilder headerBuffer, Header responseHeader) {
         if(responseHeader instanceof BufferedHeader) {
             CharArrayBuffer buffer = ((BufferedHeader)responseHeader).getBuffer();
             headerBuffer.append(buffer.buffer(), 0, buffer.length()).append('\n'); // $NON-NLS-1$;
         }
         else {
             headerBuffer.append(responseHeader.getName())
             .append(": ") // $NON-NLS-1$
             .append(responseHeader.getValue())
             .append('\n'); // $NON-NLS-1$
         }
     }
 
     /**
      * Extracts all the required cookies for that particular URL request and
      * sets them in the <code>HttpMethod</code> passed in.
      *
      * @param request <code>HttpRequest</code> for the request
      * @param url <code>URL</code> of the request
      * @param cookieManager the <code>CookieManager</code> containing all the cookies
      * @return a String containing the cookie details (for the response)
      * May be null
      */
     protected String setConnectionCookie(HttpRequest request, URL url, CookieManager cookieManager) {
         String cookieHeader = null;
         if (cookieManager != null) {
             cookieHeader = cookieManager.getCookieHeaderForURL(url);
             if (cookieHeader != null) {
                 request.setHeader(HTTPConstants.HEADER_COOKIE, cookieHeader);
             }
         }
         return cookieHeader;
     }
     
     /**
      * Extracts all the required non-cookie headers for that particular URL request and
      * sets them in the <code>HttpMethod</code> passed in
      *
      * @param request
      *            <code>HttpRequest</code> which represents the request
      * @param url
      *            <code>URL</code> of the URL request
      * @param headerManager
      *            the <code>HeaderManager</code> containing all the cookies
      *            for this <code>UrlConfig</code>
      * @param cacheManager the CacheManager (may be null)
      */
     protected void setConnectionHeaders(HttpRequestBase request, URL url, HeaderManager headerManager, CacheManager cacheManager) {
         if (headerManager != null) {
             CollectionProperty headers = headerManager.getHeaders();
             if (headers != null) {
                 for (JMeterProperty jMeterProperty : headers) {
                     org.apache.jmeter.protocol.http.control.Header header
                     = (org.apache.jmeter.protocol.http.control.Header)
                             jMeterProperty.getObjectValue();
                     String n = header.getName();
                     // Don't allow override of Content-Length
                     // TODO - what other headers are not allowed?
                     if (! HTTPConstants.HEADER_CONTENT_LENGTH.equalsIgnoreCase(n)){
                         String v = header.getValue();
                         if (HTTPConstants.HEADER_HOST.equalsIgnoreCase(n)) {
                             int port = getPortFromHostHeader(v, url.getPort());
                             v = v.replaceFirst(":\\d+$",""); // remove any port specification // $NON-NLS-1$ $NON-NLS-2$
                             if (port != -1) {
                                 if (port == url.getDefaultPort()) {
                                     port = -1; // no need to specify the port if it is the default
                                 }
                             }
                             request.getParams().setParameter(ClientPNames.VIRTUAL_HOST, new HttpHost(v, port));
                         } else {
                             request.addHeader(n, v);
                         }
                     }
                 }
             }
         }
         if (cacheManager != null){
             cacheManager.setHeaders(url, request);
         }
     }
 
     /**
      * Get port from the value of the Host header, or return the given
      * defaultValue
      *
      * @param hostHeaderValue
      *            value of the http Host header
      * @param defaultValue
      *            value to be used, when no port could be extracted from
      *            hostHeaderValue
      * @return integer representing the port for the host header
      */
     private int getPortFromHostHeader(String hostHeaderValue, int defaultValue) {
         String[] hostParts = hostHeaderValue.split(":");
         if (hostParts.length > 1) {
             String portString = hostParts[hostParts.length - 1];
             if (PORT_PATTERN.matcher(portString).matches()) {
                 return Integer.parseInt(portString);
             }
         }
         return defaultValue;
     }
 
     /**
      * Get all the request headers for the <code>HttpMethod</code>
      *
      * @param method
      *            <code>HttpMethod</code> which represents the request
      * @return the headers as a string
      */
     private String getConnectionHeaders(HttpRequest method) {
         if(method != null) {
             // Get all the request headers
             StringBuilder hdrs = new StringBuilder(150);
             Header[] requestHeaders = method.getAllHeaders();
             for (Header requestHeader : requestHeaders) {
                 // Exclude the COOKIE header, since cookie is reported separately in the sample
                 if (!HTTPConstants.HEADER_COOKIE.equalsIgnoreCase(requestHeader.getName())) {
                     writeResponseHeader(hdrs, requestHeader);
                 }
             }
     
             return hdrs.toString();
         }
         return ""; ////$NON-NLS-1$
     }
 
     /**
      * Setup credentials for url AuthScope but keeps Proxy AuthScope credentials
      * @param client HttpClient
      * @param url URL
      * @param authManager {@link AuthManager}
      * @param key key
      */
     private void setConnectionAuthorization(HttpClient client, URL url, AuthManager authManager, HttpClientKey key) {
         CredentialsProvider credentialsProvider = 
             ((AbstractHttpClient) client).getCredentialsProvider();
         if (authManager != null) {
             if(authManager.hasAuthForURL(url)) {
                 authManager.setupCredentials(client, url, credentialsProvider, localHost);
             } else {
                 credentialsProvider.clear();
             }
         } else {
             Credentials credentials = null;
             AuthScope authScope = null;
             if(key.hasProxy && !StringUtils.isEmpty(key.proxyUser)) {
                 authScope = new AuthScope(key.proxyHost, key.proxyPort);
                 credentials = credentialsProvider.getCredentials(authScope);
             }
             credentialsProvider.clear(); 
             if(credentials != null) {
                 credentialsProvider.setCredentials(authScope, credentials);
             }
         }
     }
 
     // Helper class so we can generate request data without dumping entire file contents
     private static class ViewableFileBody extends FileBody {
         private boolean hideFileData;
         
         public ViewableFileBody(File file, String mimeType) {
             super(file, mimeType);
             hideFileData = false;
         }
 
         @Override
         public void writeTo(final OutputStream out) throws IOException {
             if (hideFileData) {
                 out.write("<actual file content, not shown here>".getBytes());// encoding does not really matter here
             } else {
                 super.writeTo(out);
             }
         }
     }
 
     // TODO needs cleaning up
     /**
      * 
      * @param post {@link HttpPost}
      * @return String posted body if computable
      * @throws IOException if sending the data fails due to I/O
      */
     protected String sendPostData(HttpPost post)  throws IOException {
         // Buffer to hold the post body, except file content
         StringBuilder postedBody = new StringBuilder(1000);
         HTTPFileArg[] files = getHTTPFiles();
 
         final String contentEncoding = getContentEncodingOrNull();
         final boolean haveContentEncoding = contentEncoding != null;
 
         // Check if we should do a multipart/form-data or an
         // application/x-www-form-urlencoded post request
         if(getUseMultipartForPost()) {
             // If a content encoding is specified, we use that as the
             // encoding of any parameter values
             Charset charset = null;
             if(haveContentEncoding) {
                 charset = Charset.forName(contentEncoding);
             } else {
                 charset = MIME.DEFAULT_CHARSET;
             }
             
             if(log.isDebugEnabled()) {
                 log.debug("Building multipart with:getDoBrowserCompatibleMultipart():"+
                         getDoBrowserCompatibleMultipart()+
                         ", with charset:"+charset+
                         ", haveContentEncoding:"+haveContentEncoding);
             }
             // Write the request to our own stream
             MultipartEntityBuilder multipartEntityBuilder = MultipartEntityBuilder.create()
                     .setCharset(charset);
             if(getDoBrowserCompatibleMultipart()) {
                 multipartEntityBuilder.setLaxMode();
             } else {
                 multipartEntityBuilder.setStrictMode();
             }
             // Create the parts
             // Add any parameters
             for (JMeterProperty jMeterProperty : getArguments()) {
                 HTTPArgument arg = (HTTPArgument) jMeterProperty.getObjectValue();
                 String parameterName = arg.getName();
                 if (arg.isSkippable(parameterName)) {
                     continue;
                 }
                 StringBody stringBody = new StringBody(arg.getValue(), ContentType.create("text/plain", charset));
                 FormBodyPart formPart = FormBodyPartBuilder.create(
                         parameterName, stringBody).build();
                 multipartEntityBuilder.addPart(formPart);
             }
 
             // Add any files
             // Cannot retrieve parts once added to the MultiPartEntity, so have to save them here.
             ViewableFileBody[] fileBodies = new ViewableFileBody[files.length];
             for (int i=0; i < files.length; i++) {
                 HTTPFileArg file = files[i];
                 
                 File reservedFile = FileServer.getFileServer().getResolvedFile(file.getPath());
                 fileBodies[i] = new ViewableFileBody(reservedFile, file.getMimeType());
                 multipartEntityBuilder.addPart(file.getParamName(), fileBodies[i] );
             }
 
             HttpEntity entity = multipartEntityBuilder.build();
             post.setEntity(entity);
 
             if (entity.isRepeatable()){
                 ByteArrayOutputStream bos = new ByteArrayOutputStream();
                 for(ViewableFileBody fileBody : fileBodies){
                     fileBody.hideFileData = true;
                 }
                 entity.writeTo(bos);
                 for(ViewableFileBody fileBody : fileBodies){
                     fileBody.hideFileData = false;
                 }
                 bos.flush();
                 // We get the posted bytes using the encoding used to create it
                 postedBody.append(bos.toString(
                         contentEncoding == null ? "US-ASCII" // $NON-NLS-1$ this is the default used by HttpClient
                         : contentEncoding));
                 bos.close();
             } else {
                 postedBody.append("<Multipart was not repeatable, cannot view what was sent>"); // $NON-NLS-1$
             }
 
 //            // Set the content type TODO - needed?
 //            String multiPartContentType = multiPart.getContentType().getValue();
 //            post.setHeader(HEADER_CONTENT_TYPE, multiPartContentType);
 
         } else { // not multipart
             // Check if the header manager had a content type header
             // This allows the user to specify his own content-type for a POST request
             Header contentTypeHeader = post.getFirstHeader(HTTPConstants.HEADER_CONTENT_TYPE);
             boolean hasContentTypeHeader = contentTypeHeader != null && contentTypeHeader.getValue() != null && contentTypeHeader.getValue().length() > 0;
             // If there are no arguments, we can send a file as the body of the request
             // TODO: needs a multiple file upload scenerio
             if(!hasArguments() && getSendFileAsPostBody()) {
                 // If getSendFileAsPostBody returned true, it's sure that file is not null
                 HTTPFileArg file = files[0];
                 if(!hasContentTypeHeader) {
                     // Allow the mimetype of the file to control the content type
                     if(file.getMimeType() != null && file.getMimeType().length() > 0) {
                         post.setHeader(HTTPConstants.HEADER_CONTENT_TYPE, file.getMimeType());
                     }
                     else {
                         post.setHeader(HTTPConstants.HEADER_CONTENT_TYPE, HTTPConstants.APPLICATION_X_WWW_FORM_URLENCODED);
                     }
                 }
 
                 FileEntity fileRequestEntity = new FileEntity(new File(file.getPath()),(ContentType) null);// TODO is null correct?
                 post.setEntity(fileRequestEntity);
 
                 // We just add placeholder text for file content
                 postedBody.append("<actual file content, not shown here>");
             } else {
                 // In a post request which is not multipart, we only support
                 // parameters, no file upload is allowed
 
                 // If a content encoding is specified, we set it as http parameter, so that
                 // the post body will be encoded in the specified content encoding
                 if(haveContentEncoding) {
                     post.getParams().setParameter(CoreProtocolPNames.HTTP_CONTENT_CHARSET, contentEncoding);
                 }
 
                 // If none of the arguments have a name specified, we
                 // just send all the values as the post body
                 if(getSendParameterValuesAsPostBody()) {
                     // Allow the mimetype of the file to control the content type
                     // This is not obvious in GUI if you are not uploading any files,
                     // but just sending the content of nameless parameters
                     // TODO: needs a multiple file upload scenerio
                     if(!hasContentTypeHeader) {
                         HTTPFileArg file = files.length > 0? files[0] : null;
                         if(file != null && file.getMimeType() != null && file.getMimeType().length() > 0) {
                             post.setHeader(HTTPConstants.HEADER_CONTENT_TYPE, file.getMimeType());
                         }
                         else {
                              // TODO - is this the correct default?
                             post.setHeader(HTTPConstants.HEADER_CONTENT_TYPE, HTTPConstants.APPLICATION_X_WWW_FORM_URLENCODED);
                         }
                     }
 
                     // Just append all the parameter values, and use that as the post body
                     StringBuilder postBody = new StringBuilder();
                     for (JMeterProperty jMeterProperty : getArguments()) {
                         HTTPArgument arg = (HTTPArgument) jMeterProperty.getObjectValue();
                         // Note: if "Encoded?" is not selected, arg.getEncodedValue is equivalent to arg.getValue
                         if (haveContentEncoding) {
                             postBody.append(arg.getEncodedValue(contentEncoding));
                         } else {
                             postBody.append(arg.getEncodedValue());
                         }
                     }
                     // Let StringEntity perform the encoding
                     StringEntity requestEntity = new StringEntity(postBody.toString(), contentEncoding);
                     post.setEntity(requestEntity);
                     postedBody.append(postBody.toString());
                 } else {
                     // It is a normal post request, with parameter names and values
 
                     // Set the content type
                     if(!hasContentTypeHeader) {
                         post.setHeader(HTTPConstants.HEADER_CONTENT_TYPE, HTTPConstants.APPLICATION_X_WWW_FORM_URLENCODED);
                     }
                     // Add the parameters
                     PropertyIterator args = getArguments().iterator();
                     List <NameValuePair> nvps = new ArrayList<>();
                     String urlContentEncoding = contentEncoding;
                     if(urlContentEncoding == null || urlContentEncoding.length() == 0) {
                         // Use the default encoding for urls
                         urlContentEncoding = EncoderCache.URL_ARGUMENT_ENCODING;
                     }
                     while (args.hasNext()) {
                         HTTPArgument arg = (HTTPArgument) args.next().getObjectValue();
                         // The HTTPClient always urlencodes both name and value,
                         // so if the argument is already encoded, we have to decode
                         // it before adding it to the post request
                         String parameterName = arg.getName();
                         if (arg.isSkippable(parameterName)){
                             continue;
                         }
                         String parameterValue = arg.getValue();
                         if(!arg.isAlwaysEncoded()) {
                             // The value is already encoded by the user
                             // Must decode the value now, so that when the
                             // httpclient encodes it, we end up with the same value
                             // as the user had entered.
                             parameterName = URLDecoder.decode(parameterName, urlContentEncoding);
                             parameterValue = URLDecoder.decode(parameterValue, urlContentEncoding);
                         }
                         // Add the parameter, httpclient will urlencode it
                         nvps.add(new BasicNameValuePair(parameterName, parameterValue));
                     }
                     UrlEncodedFormEntity entity = new UrlEncodedFormEntity(nvps, urlContentEncoding);
                     post.setEntity(entity);
                     if (entity.isRepeatable()){
                         ByteArrayOutputStream bos = new ByteArrayOutputStream();
                         post.getEntity().writeTo(bos);
                         bos.flush();
                         // We get the posted bytes using the encoding used to create it
                         postedBody.append(bos.toString(contentEncoding != null?contentEncoding:SampleResult.DEFAULT_HTTP_ENCODING));
                         
                         bos.close();
                     }  else {
                         postedBody.append("<RequestEntity was not repeatable, cannot view what was sent>");
                     }
                 }
             }
         }
         return postedBody.toString();
     }
 
     // TODO merge put and post methods as far as possible.
     // e.g. post checks for multipart form/files, and if not, invokes sendData(HttpEntityEnclosingRequestBase)
 
 
     /**
      * Creates the entity data to be sent.
      * <p>
      * If there is a file entry with a non-empty MIME type we use that to
      * set the request Content-Type header, otherwise we default to whatever
      * header is present from a Header Manager.
      * <p>
      * If the content charset {@link #getContentEncoding()} is null or empty 
      * we use the HC4 default provided by {@link HTTP#DEF_CONTENT_CHARSET} which is
      * ISO-8859-1.
      * 
      * @param entity to be processed, e.g. PUT or PATCH
      * @return the entity content, may be empty
      * @throws  UnsupportedEncodingException for invalid charset name
      * @throws IOException cannot really occur for ByteArrayOutputStream methods
      */
     protected String sendEntityData( HttpEntityEnclosingRequestBase entity) throws IOException {
         boolean hasEntityBody = false;
 
         final HTTPFileArg[] files = getHTTPFiles();
         // Allow the mimetype of the file to control the content type
         // This is not obvious in GUI if you are not uploading any files,
         // but just sending the content of nameless parameters
         final HTTPFileArg file = files.length > 0? files[0] : null;
         String contentTypeValue = null;
         if(file != null && file.getMimeType() != null && file.getMimeType().length() > 0) {
             contentTypeValue = file.getMimeType();
             entity.setHeader(HEADER_CONTENT_TYPE, contentTypeValue); // we provide the MIME type here
         }
 
         // Check for local contentEncoding (charset) override; fall back to default for content body
         // we do this here rather so we can use the same charset to retrieve the data
         final String charset = getContentEncoding(HTTP.DEF_CONTENT_CHARSET.name());
 
         // Only create this if we are overriding whatever default there may be
         // If there are no arguments, we can send a file as the body of the request
 
         if(!hasArguments() && getSendFileAsPostBody()) {
             hasEntityBody = true;
 
             // If getSendFileAsPostBody returned true, it's sure that file is not null
             File reservedFile = FileServer.getFileServer().getResolvedFile(files[0].getPath());
             FileEntity fileRequestEntity = new FileEntity(reservedFile); // no need for content-type here
             entity.setEntity(fileRequestEntity);
         }
         // If none of the arguments have a name specified, we
         // just send all the values as the entity body
         else if(getSendParameterValuesAsPostBody()) {
             hasEntityBody = true;
 
             // Just append all the parameter values, and use that as the entity body
             Arguments arguments = getArguments();
             StringBuilder entityBodyContent = new StringBuilder(arguments.getArgumentCount()*15);
             for (JMeterProperty jMeterProperty : arguments) {
                 HTTPArgument arg = (HTTPArgument) jMeterProperty.getObjectValue();
                 // Note: if "Encoded?" is not selected, arg.getEncodedValue is equivalent to arg.getValue
                 if (charset != null) {
                     entityBodyContent.append(arg.getEncodedValue(charset));
                 } else {
                     entityBodyContent.append(arg.getEncodedValue());
                 }
             }
             StringEntity requestEntity = new StringEntity(entityBodyContent.toString(), charset);
             entity.setEntity(requestEntity);
         }
         // Check if we have any content to send for body
         if(hasEntityBody) {
             // If the request entity is repeatable, we can send it first to
             // our own stream, so we can return it
             final HttpEntity entityEntry = entity.getEntity();
             // Buffer to hold the entity body
             StringBuilder entityBody = null;
             if(entityEntry.isRepeatable()) {
                 entityBody = new StringBuilder(1000);
                 // FIXME Charset
                 entityBody.append(IOUtils.toString(new BoundedInputStream(
                         entityEntry.getContent(), MAX_BODY_RETAIN_SIZE)));
                 if (entityEntry.getContentLength() > MAX_BODY_RETAIN_SIZE) {
                     entityBody.append("<actual file content shortened>");
                 }
             }
             else { 
                 entityBody = new StringBuilder(65);
                 // this probably cannot happen
                 entityBody.append("<RequestEntity was not repeatable, cannot view what was sent>");
             }
             return entityBody.toString();
         }
         return ""; // may be the empty string
     }
 
     /**
      * 
      * @return the value of {@link #getContentEncoding()}; forced to null if empty
      */
     private String getContentEncodingOrNull() {
         return getContentEncoding(null);
     }
 
     /**
      * @param dflt the default to be used
      * @return the value of {@link #getContentEncoding()}; default if null or empty
      */
     private String getContentEncoding(String dflt) {
         String ce = getContentEncoding();
         if (isNullOrEmptyTrimmed(ce)) {
             return dflt;
         } else {
             return ce;
         }
     }
 
     private void saveConnectionCookies(HttpResponse method, URL u, CookieManager cookieManager) {
         if (cookieManager != null) {
             Header[] hdrs = method.getHeaders(HTTPConstants.HEADER_SET_COOKIE);
             for (Header hdr : hdrs) {
                 cookieManager.addCookieFromHeader(hdr.getValue(),u);
             }
         }
     }
 
     @Override
     protected void notifyFirstSampleAfterLoopRestart() {
         log.debug("notifyFirstSampleAfterLoopRestart");
         resetSSLContext = !USE_CACHED_SSL_CONTEXT;
     }
 
     @Override
     protected void threadFinished() {
         log.debug("Thread Finished");
         closeThreadLocalConnections();
     }
 
     /**
      * 
      */
     private void closeThreadLocalConnections() {
         // Does not need to be synchronised, as all access is from same thread
         Map<HttpClientKey, HttpClient> mapHttpClientPerHttpClientKey = HTTPCLIENTS_CACHE_PER_THREAD_AND_HTTPCLIENTKEY.get();
         if ( mapHttpClientPerHttpClientKey != null ) {
             for ( HttpClient cl : mapHttpClientPerHttpClientKey.values() ) {
                 ((AbstractHttpClient) cl).clearRequestInterceptors(); 
                 ((AbstractHttpClient) cl).clearResponseInterceptors();
                 ((AbstractHttpClient) cl).close();
                 cl.getConnectionManager().shutdown();
             }
             mapHttpClientPerHttpClientKey.clear();
         }
     }
 
     @Override
     public boolean interrupt() {
         HttpUriRequest request = currentRequest;
         if (request != null) {
             currentRequest = null; // don't try twice
             try {
                 request.abort();
             } catch (UnsupportedOperationException e) {
                 log.warn("Could not abort pending request", e);
             }
         }
         return request != null;
     }
     
 }
diff --git a/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPJavaImpl.java b/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPJavaImpl.java
index 40f3e8d21..7b31db563 100644
--- a/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPJavaImpl.java
+++ b/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPJavaImpl.java
@@ -1,652 +1,651 @@
 /*
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 package org.apache.jmeter.protocol.http.sampler;
 
 import java.io.BufferedInputStream;
 import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.io.InputStream;
 import java.net.BindException;
 import java.net.HttpURLConnection;
 import java.net.InetSocketAddress;
 import java.net.Proxy;
 import java.net.URL;
 import java.net.URLConnection;
 import java.util.List;
 import java.util.Map;
 import java.util.zip.GZIPInputStream;
 
 import org.apache.commons.io.input.CountingInputStream;
 import org.apache.jmeter.protocol.http.control.AuthManager;
 import org.apache.jmeter.protocol.http.control.Authorization;
 import org.apache.jmeter.protocol.http.control.CacheManager;
 import org.apache.jmeter.protocol.http.control.CookieManager;
 import org.apache.jmeter.protocol.http.control.Header;
 import org.apache.jmeter.protocol.http.control.HeaderManager;
 import org.apache.jmeter.protocol.http.util.HTTPConstants;
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.testelement.property.CollectionProperty;
 import org.apache.jmeter.testelement.property.JMeterProperty;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jmeter.util.SSLManager;
 import org.apache.jorphan.logging.LoggingManager;
 import org.apache.log.Logger;
 
 /**
  * A sampler which understands all the parts necessary to read statistics about
  * HTTP requests, including cookies and authentication.
  *
  */
 public class HTTPJavaImpl extends HTTPAbstractImpl {
     private static final boolean OBEY_CONTENT_LENGTH =
         JMeterUtils.getPropDefault("httpsampler.obey_contentlength", false); // $NON-NLS-1$
 
     private static final Logger log = LoggingManager.getLoggerForClass();
 
     private static final int MAX_CONN_RETRIES =
         JMeterUtils.getPropDefault("http.java.sampler.retries" // $NON-NLS-1$
                 ,0); // Maximum connection retries
 
     static {
         log.info("Maximum connection retries = "+MAX_CONN_RETRIES); // $NON-NLS-1$
         // Temporary copies, so can set the final ones
     }
 
     private static final byte[] NULL_BA = new byte[0];// can share these
 
     /** Handles writing of a post or put request */
     private transient PostWriter postOrPutWriter;
 
     private volatile HttpURLConnection savedConn;
 
     protected HTTPJavaImpl(HTTPSamplerBase base) {
         super(base);
     }
 
     /**
      * Set request headers in preparation to opening a connection.
      *
      * @param conn
      *            <code>URLConnection</code> to set headers on
      * @exception IOException
      *                if an I/O exception occurs
      */
     protected void setPostHeaders(URLConnection conn) throws IOException {
         postOrPutWriter = new PostWriter();
         postOrPutWriter.setHeaders(conn, testElement);
     }
 
     private void setPutHeaders(URLConnection conn) throws IOException {
         postOrPutWriter = new PutWriter();
         postOrPutWriter.setHeaders(conn, testElement);
     }
 
     /**
      * Send POST data from <code>Entry</code> to the open connection.
      * This also handles sending data for PUT requests
      *
      * @param connection
      *            <code>URLConnection</code> where POST data should be sent
      * @return a String show what was posted. Will not contain actual file upload content
      * @exception IOException
      *                if an I/O exception occurs
      */
     protected String sendPostData(URLConnection connection) throws IOException {
         return postOrPutWriter.sendPostData(connection, testElement);
     }
 
     private String sendPutData(URLConnection connection) throws IOException {
         return postOrPutWriter.sendPostData(connection, testElement);
     }
 
     /**
      * Returns an <code>HttpURLConnection</code> fully ready to attempt
      * connection. This means it sets the request method (GET or POST), headers,
      * cookies, and authorization for the URL request.
      * <p>
      * The request infos are saved into the sample result if one is provided.
      *
      * @param u
      *            <code>URL</code> of the URL request
      * @param method
      *            GET, POST etc
      * @param res
      *            sample result to save request infos to
      * @return <code>HttpURLConnection</code> ready for .connect
      * @exception IOException
      *                if an I/O Exception occurs
      */
     protected HttpURLConnection setupConnection(URL u, String method, HTTPSampleResult res) throws IOException {
         SSLManager sslmgr = null;
         if (HTTPConstants.PROTOCOL_HTTPS.equalsIgnoreCase(u.getProtocol())) {
             try {
                 sslmgr=SSLManager.getInstance(); // N.B. this needs to be done before opening the connection
             } catch (Exception e) {
                 log.warn("Problem creating the SSLManager: ", e);
             }
         }
 
         final HttpURLConnection conn;
         final String proxyHost = getProxyHost();
         final int proxyPort = getProxyPortInt();
         if (proxyHost.length() > 0 && proxyPort > 0){
             Proxy proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(proxyHost, proxyPort));
             //TODO - how to define proxy authentication for a single connection?
             // It's not clear if this is possible
 //            String user = getProxyUser();
 //            if (user.length() > 0){
 //                Authenticator auth = new ProxyAuthenticator(user, getProxyPass());
 //            }
             conn = (HttpURLConnection) u.openConnection(proxy);
         } else {
             conn = (HttpURLConnection) u.openConnection();
         }
 
         // Update follow redirects setting just for this connection
         conn.setInstanceFollowRedirects(getAutoRedirects());
 
         int cto = getConnectTimeout();
         if (cto > 0){
             conn.setConnectTimeout(cto);
         }
 
         int rto = getResponseTimeout();
         if (rto > 0){
             conn.setReadTimeout(rto);
         }
 
         if (HTTPConstants.PROTOCOL_HTTPS.equalsIgnoreCase(u.getProtocol())) {
             try {
                 if (null != sslmgr){
                     sslmgr.setContext(conn); // N.B. must be done after opening connection
                 }
             } catch (Exception e) {
                 log.warn("Problem setting the SSLManager for the connection: ", e);
             }
         }
 
         // a well-behaved browser is supposed to send 'Connection: close'
         // with the last request to an HTTP server. Instead, most browsers
         // leave it to the server to close the connection after their
         // timeout period. Leave it to the JMeter user to decide.
         if (getUseKeepAlive()) {
             conn.setRequestProperty(HTTPConstants.HEADER_CONNECTION, HTTPConstants.KEEP_ALIVE);
         } else {
             conn.setRequestProperty(HTTPConstants.HEADER_CONNECTION, HTTPConstants.CONNECTION_CLOSE);
         }
 
         conn.setRequestMethod(method);
         setConnectionHeaders(conn, u, getHeaderManager(), getCacheManager());
         String cookies = setConnectionCookie(conn, u, getCookieManager());
 
         setConnectionAuthorization(conn, u, getAuthManager());
 
         if (method.equals(HTTPConstants.POST)) {
             setPostHeaders(conn);
         } else if (method.equals(HTTPConstants.PUT)) {
             setPutHeaders(conn);
         }
 
         if (res != null) {
             res.setRequestHeaders(getConnectionHeaders(conn));
             res.setCookies(cookies);
         }
 
         return conn;
     }
 
     /**
      * Reads the response from the URL connection.
      *
      * @param conn
      *            URL from which to read response
      * @param res
      *            {@link SampleResult} to read response into
      * @return response content
      * @exception IOException
      *                if an I/O exception occurs
      */
     protected byte[] readResponse(HttpURLConnection conn, SampleResult res) throws IOException {
         BufferedInputStream in;
 
         final long contentLength = conn.getContentLength();
         if ((contentLength == 0)
             && OBEY_CONTENT_LENGTH) {
             log.info("Content-Length: 0, not reading http-body");
             res.setResponseHeaders(getResponseHeaders(conn));
             res.latencyEnd();
             return NULL_BA;
         }
 
         // works OK even if ContentEncoding is null
         boolean gzipped = HTTPConstants.ENCODING_GZIP.equals(conn.getContentEncoding());
         InputStream instream = null;
         try {
             instream = new CountingInputStream(conn.getInputStream());
             if (gzipped) {
                 in = new BufferedInputStream(new GZIPInputStream(instream));
             } else {
                 in = new BufferedInputStream(instream);
             }
         } catch (IOException e) {
             if (! (e.getCause() instanceof FileNotFoundException))
             {
                 log.error("readResponse: "+e.toString());
                 Throwable cause = e.getCause();
                 if (cause != null){
                     log.error("Cause: "+cause);
                     if(cause instanceof Error) {
                         throw (Error)cause;
                     }
                 }
             }
             // Normal InputStream is not available
             InputStream errorStream = conn.getErrorStream();
             if (errorStream == null) {
                 log.info("Error Response Code: "+conn.getResponseCode()+", Server sent no Errorpage");
                 res.setResponseHeaders(getResponseHeaders(conn));
                 res.latencyEnd();
                 return NULL_BA;
             }
 
             log.info("Error Response Code: "+conn.getResponseCode());
 
             if (gzipped) {
                 in = new BufferedInputStream(new GZIPInputStream(errorStream));
             } else {
                 in = new BufferedInputStream(errorStream);
             }
         } catch (Exception e) {
             log.error("readResponse: "+e.toString());
             Throwable cause = e.getCause();
             if (cause != null){
                 log.error("Cause: "+cause);
                 if(cause instanceof Error) {
                     throw (Error)cause;
                 }
             }
             in = new BufferedInputStream(conn.getErrorStream());
         }
         // N.B. this closes 'in'
         byte[] responseData = readResponse(res, in, contentLength);
         if (instream != null) {
             res.setBodySize(((CountingInputStream) instream).getByteCount());
             instream.close();
         }
         return responseData;
     }
 
     /**
      * Gets the ResponseHeaders from the URLConnection
      *
      * @param conn
      *            connection from which the headers are read
      * @return string containing the headers, one per line
      */
     protected String getResponseHeaders(HttpURLConnection conn) {
         StringBuilder headerBuf = new StringBuilder();
         headerBuf.append(conn.getHeaderField(0));// Leave header as is
         // headerBuf.append(conn.getHeaderField(0).substring(0, 8));
         // headerBuf.append(" ");
         // headerBuf.append(conn.getResponseCode());
         // headerBuf.append(" ");
         // headerBuf.append(conn.getResponseMessage());
         headerBuf.append("\n"); //$NON-NLS-1$
 
         String hfk;
         for (int i = 1; (hfk=conn.getHeaderFieldKey(i)) != null; i++) {
             headerBuf.append(hfk);
             headerBuf.append(": "); // $NON-NLS-1$
             headerBuf.append(conn.getHeaderField(i));
             headerBuf.append("\n"); // $NON-NLS-1$
         }
         return headerBuf.toString();
     }
 
     /**
      * Extracts all the required cookies for that particular URL request and
      * sets them in the <code>HttpURLConnection</code> passed in.
      *
      * @param conn
      *            <code>HttpUrlConnection</code> which represents the URL
      *            request
      * @param u
      *            <code>URL</code> of the URL request
      * @param cookieManager
      *            the <code>CookieManager</code> containing all the cookies
      *            for this <code>UrlConfig</code>
      */
     private String setConnectionCookie(HttpURLConnection conn, URL u, CookieManager cookieManager) {
         String cookieHeader = null;
         if (cookieManager != null) {
             cookieHeader = cookieManager.getCookieHeaderForURL(u);
             if (cookieHeader != null) {
                 conn.setRequestProperty(HTTPConstants.HEADER_COOKIE, cookieHeader);
             }
         }
         return cookieHeader;
     }
 
     /**
      * Extracts all the required headers for that particular URL request and
      * sets them in the <code>HttpURLConnection</code> passed in
      *
      * @param conn
      *            <code>HttpUrlConnection</code> which represents the URL
      *            request
      * @param u
      *            <code>URL</code> of the URL request
      * @param headerManager
      *            the <code>HeaderManager</code> containing all the cookies
      *            for this <code>UrlConfig</code>
      * @param cacheManager the CacheManager (may be null)
      */
     private void setConnectionHeaders(HttpURLConnection conn, URL u, HeaderManager headerManager, CacheManager cacheManager) {
         // Add all the headers from the HeaderManager
         if (headerManager != null) {
             CollectionProperty headers = headerManager.getHeaders();
             if (headers != null) {
                 for (JMeterProperty jMeterProperty : headers) {
                     Header header = (Header) jMeterProperty.getObjectValue();
                     String n = header.getName();
                     String v = header.getValue();
                     conn.addRequestProperty(n, v);
                 }
             }
         }
         if (cacheManager != null){
             cacheManager.setHeaders(conn, u);
         }
     }
 
     /**
      * Get all the headers for the <code>HttpURLConnection</code> passed in
      *
      * @param conn
      *            <code>HttpUrlConnection</code> which represents the URL
      *            request
      * @return the headers as a string
      */
     private String getConnectionHeaders(HttpURLConnection conn) {
         // Get all the request properties, which are the headers set on the connection
         StringBuilder hdrs = new StringBuilder(100);
         Map<String, List<String>> requestHeaders = conn.getRequestProperties();
         for(Map.Entry<String, List<String>> entry : requestHeaders.entrySet()) {
             String headerKey=entry.getKey();
             // Exclude the COOKIE header, since cookie is reported separately in the sample
             if(!HTTPConstants.HEADER_COOKIE.equalsIgnoreCase(headerKey)) {
                 // value is a List of Strings
                 for (String value : entry.getValue()){
                     hdrs.append(headerKey);
                     hdrs.append(": "); // $NON-NLS-1$
                     hdrs.append(value);
                     hdrs.append("\n"); // $NON-NLS-1$
                 }
             }
         }
         return hdrs.toString();
     }
 
     /**
      * Extracts all the required authorization for that particular URL request
      * and sets it in the <code>HttpURLConnection</code> passed in.
      *
      * @param conn
      *            <code>HttpUrlConnection</code> which represents the URL
      *            request
      * @param u
      *            <code>URL</code> of the URL request
      * @param authManager
      *            the <code>AuthManager</code> containing all the cookies for
      *            this <code>UrlConfig</code>
      */
     private void setConnectionAuthorization(HttpURLConnection conn, URL u, AuthManager authManager) {
         if (authManager != null) {
             Authorization auth = authManager.getAuthForURL(u);
             if (auth != null) {
                 conn.setRequestProperty(HTTPConstants.HEADER_AUTHORIZATION, auth.toBasicHeader());
             }
         }
     }
 
     /**
      * Samples the URL passed in and stores the result in
      * <code>HTTPSampleResult</code>, following redirects and downloading
      * page resources as appropriate.
      * <p>
      * When getting a redirect target, redirects are not followed and resources
      * are not downloaded. The caller will take care of this.
      *
      * @param url
      *            URL to sample
      * @param method
      *            HTTP method: GET, POST,...
      * @param areFollowingRedirect
      *            whether we're getting a redirect target
      * @param frameDepth
      *            Depth of this target in the frame structure. Used only to
      *            prevent infinite recursion.
      * @return results of the sampling
      */
     @Override
     protected HTTPSampleResult sample(URL url, String method, boolean areFollowingRedirect, int frameDepth) {
         HttpURLConnection conn = null;
 
         String urlStr = url.toString();
         if (log.isDebugEnabled()) {
             log.debug("Start : sample " + urlStr);
             log.debug("method " + method+ " followingRedirect " + areFollowingRedirect + " depth " + frameDepth);            
         }
 
         HTTPSampleResult res = new HTTPSampleResult();
-        res.setMonitor(isMonitor());
 
         res.setSampleLabel(urlStr);
         res.setURL(url);
         res.setHTTPMethod(method);
 
         res.sampleStart(); // Count the retries as well in the time
 
         // Check cache for an entry with an Expires header in the future
         final CacheManager cacheManager = getCacheManager();
         if (cacheManager != null && HTTPConstants.GET.equalsIgnoreCase(method)) {
            if (cacheManager.inCache(url)) {
                return updateSampleResultForResourceInCache(res);
            }
         }
 
         try {
             // Sampling proper - establish the connection and read the response:
             // Repeatedly try to connect:
             int retry = -1;
             // Start with -1 so tries at least once, and retries at most MAX_CONN_RETRIES times
             for (; retry < MAX_CONN_RETRIES; retry++) {
                 try {
                     conn = setupConnection(url, method, res);
                     // Attempt the connection:
                     savedConn = conn;
                     conn.connect();
                     break;
                 } catch (BindException e) {
                     if (retry >= MAX_CONN_RETRIES) {
                         log.error("Can't connect after "+retry+" retries, "+e);
                         throw e;
                     }
                     log.debug("Bind exception, try again");
                     if (conn!=null) {
                         savedConn = null; // we don't want interrupt to try disconnection again
                         conn.disconnect();
                     }
                     setUseKeepAlive(false);
                 } catch (IOException e) {
                     log.debug("Connection failed, giving up");
                     throw e;
                 }
             }
             if (retry > MAX_CONN_RETRIES) {
                 // This should never happen, but...
                 throw new BindException();
             }
             // Nice, we've got a connection. Finish sending the request:
             if (method.equals(HTTPConstants.POST)) {
                 String postBody = sendPostData(conn);
                 res.setQueryString(postBody);
             } else if (method.equals(HTTPConstants.PUT)) {
                 String putBody = sendPutData(conn);
                 res.setQueryString(putBody);
             }
             // Request sent. Now get the response:
             byte[] responseData = readResponse(conn, res);
 
             res.sampleEnd();
             // Done with the sampling proper.
 
             // Now collect the results into the HTTPSampleResult:
 
             res.setResponseData(responseData);
 
             int errorLevel = conn.getResponseCode();
             String respMsg = conn.getResponseMessage();
             String hdr=conn.getHeaderField(0);
             if (hdr == null) {
                 hdr="(null)";  // $NON-NLS-1$
             }
             if (errorLevel == -1){// Bug 38902 - sometimes -1 seems to be returned unnecessarily
                 if (respMsg != null) {// Bug 41902 - NPE
                     try {
                         errorLevel = Integer.parseInt(respMsg.substring(0, 3));
                         log.warn("ResponseCode==-1; parsed "+respMsg+ " as "+errorLevel);
                       } catch (NumberFormatException e) {
                         log.warn("ResponseCode==-1; could not parse "+respMsg+" hdr: "+hdr);
                       }
                 } else {
                     respMsg=hdr; // for result
                     log.warn("ResponseCode==-1 & null ResponseMessage. Header(0)= "+hdr);
                 }
             }
             if (errorLevel == -1) {
                 res.setResponseCode("(null)"); // $NON-NLS-1$
             } else {
                 res.setResponseCode(Integer.toString(errorLevel));
             }
             res.setSuccessful(isSuccessCode(errorLevel));
 
             if (respMsg == null) {// has been seen in a redirect
                 respMsg=hdr; // use header (if possible) if no message found
             }
             res.setResponseMessage(respMsg);
 
             String ct = conn.getContentType();
             if (ct != null){
                 res.setContentType(ct);// e.g. text/html; charset=ISO-8859-1
                 res.setEncodingAndType(ct);
             }
 
             String responseHeaders = getResponseHeaders(conn);
             res.setResponseHeaders(responseHeaders);
             if (res.isRedirect()) {
                 res.setRedirectLocation(conn.getHeaderField(HTTPConstants.HEADER_LOCATION));
             }
             
             // record headers size to allow HTTPSampleResult.getBytes() with different options
             res.setHeadersSize(responseHeaders.replaceAll("\n", "\r\n") // $NON-NLS-1$ $NON-NLS-2$
                     .length() + 2); // add 2 for a '\r\n' at end of headers (before data) 
             if (log.isDebugEnabled()) {
                 log.debug("Response headersSize=" + res.getHeadersSize() + " bodySize=" + res.getBodySizeAsLong()
                         + " Total=" + (res.getHeadersSize() + res.getBodySizeAsLong()));
             }
             
             // If we redirected automatically, the URL may have changed
             if (getAutoRedirects()){
                 res.setURL(conn.getURL());
             }
 
             // Store any cookies received in the cookie manager:
             saveConnectionCookies(conn, url, getCookieManager());
 
             // Save cache information
             if (cacheManager != null){
                 cacheManager.saveDetails(conn, res);
             }
 
             res = resultProcessing(areFollowingRedirect, frameDepth, res);
 
             log.debug("End : sample");
             return res;
         } catch (IOException e) {
             res.sampleEnd();
             savedConn = null; // we don't want interrupt to try disconnection again
             // We don't want to continue using this connection, even if KeepAlive is set
             if (conn != null) { // May not exist
                 conn.disconnect();
             }
             conn=null; // Don't process again
             return errorResult(e, res);
         } finally {
             // calling disconnect doesn't close the connection immediately,
             // but indicates we're through with it. The JVM should close
             // it when necessary.
             savedConn = null; // we don't want interrupt to try disconnection again
             disconnect(conn); // Disconnect unless using KeepAlive
         }
     }
 
     protected void disconnect(HttpURLConnection conn) {
         if (conn != null) {
             String connection = conn.getHeaderField(HTTPConstants.HEADER_CONNECTION);
             String protocol = conn.getHeaderField(0);
             if ((connection == null && (protocol == null || !protocol.startsWith(HTTPConstants.HTTP_1_1)))
                     || (connection != null && connection.equalsIgnoreCase(HTTPConstants.CONNECTION_CLOSE))) {
                 conn.disconnect();
             } // TODO ? perhaps note connection so it can be disconnected at end of test?
         }
     }
 
     /**
      * From the <code>HttpURLConnection</code>, store all the "set-cookie"
      * key-pair values in the cookieManager of the <code>UrlConfig</code>.
      *
      * @param conn
      *            <code>HttpUrlConnection</code> which represents the URL
      *            request
      * @param u
      *            <code>URL</code> of the URL request
      * @param cookieManager
      *            the <code>CookieManager</code> containing all the cookies
      *            for this <code>UrlConfig</code>
      */
     private void saveConnectionCookies(HttpURLConnection conn, URL u, CookieManager cookieManager) {
         if (cookieManager != null) {
             for (int i = 1; conn.getHeaderFieldKey(i) != null; i++) {
                 if (conn.getHeaderFieldKey(i).equalsIgnoreCase(HTTPConstants.HEADER_SET_COOKIE)) {
                     cookieManager.addCookieFromHeader(conn.getHeaderField(i), u);
                 }
             }
         }
     }
 
     /** {@inheritDoc} */
     @Override
     public boolean interrupt() {
         HttpURLConnection conn = savedConn;
         if (conn != null) {
             savedConn = null;
             conn.disconnect();
         }
         return conn != null;
     }
 }
diff --git a/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java b/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java
index 9100886fc..21ffe81e7 100644
--- a/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java
+++ b/src/protocol/http/org/apache/jmeter/protocol/http/sampler/HTTPSamplerBase.java
@@ -1,1924 +1,1931 @@
 /*
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 package org.apache.jmeter.protocol.http.sampler;
 
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
 import java.io.PrintStream;
 import java.io.UnsupportedEncodingException;
 import java.net.MalformedURLException;
 import java.net.URISyntaxException;
 import java.net.URL;
 import java.security.MessageDigest;
 import java.security.NoSuchAlgorithmException;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
 import java.util.concurrent.Callable;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.Future;
 
 import org.apache.commons.io.IOUtils;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.jmeter.config.Argument;
 import org.apache.jmeter.config.Arguments;
 import org.apache.jmeter.config.ConfigTestElement;
 import org.apache.jmeter.engine.event.LoopIterationEvent;
 import org.apache.jmeter.protocol.http.control.AuthManager;
 import org.apache.jmeter.protocol.http.control.CacheManager;
 import org.apache.jmeter.protocol.http.control.Cookie;
 import org.apache.jmeter.protocol.http.control.CookieManager;
 import org.apache.jmeter.protocol.http.control.DNSCacheManager;
 import org.apache.jmeter.protocol.http.control.HeaderManager;
 import org.apache.jmeter.protocol.http.parser.BaseParser;
 import org.apache.jmeter.protocol.http.parser.LinkExtractorParseException;
 import org.apache.jmeter.protocol.http.parser.LinkExtractorParser;
 import org.apache.jmeter.protocol.http.sampler.ResourcesDownloader.AsynSamplerResultHolder;
 import org.apache.jmeter.protocol.http.util.ConversionUtils;
 import org.apache.jmeter.protocol.http.util.DirectAccessByteArrayOutputStream;
 import org.apache.jmeter.protocol.http.util.EncoderCache;
 import org.apache.jmeter.protocol.http.util.HTTPArgument;
 import org.apache.jmeter.protocol.http.util.HTTPConstants;
 import org.apache.jmeter.protocol.http.util.HTTPConstantsInterface;
 import org.apache.jmeter.protocol.http.util.HTTPFileArg;
 import org.apache.jmeter.protocol.http.util.HTTPFileArgs;
 import org.apache.jmeter.samplers.AbstractSampler;
 import org.apache.jmeter.samplers.Entry;
 import org.apache.jmeter.samplers.SampleResult;
 import org.apache.jmeter.testelement.TestElement;
 import org.apache.jmeter.testelement.TestIterationListener;
 import org.apache.jmeter.testelement.TestStateListener;
 import org.apache.jmeter.testelement.ThreadListener;
 import org.apache.jmeter.testelement.property.BooleanProperty;
 import org.apache.jmeter.testelement.property.CollectionProperty;
 import org.apache.jmeter.testelement.property.IntegerProperty;
 import org.apache.jmeter.testelement.property.JMeterProperty;
 import org.apache.jmeter.testelement.property.PropertyIterator;
 import org.apache.jmeter.testelement.property.StringProperty;
 import org.apache.jmeter.testelement.property.TestElementProperty;
 import org.apache.jmeter.threads.JMeterContext;
 import org.apache.jmeter.threads.JMeterContextService;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jorphan.logging.LoggingManager;
 import org.apache.jorphan.util.JOrphanUtils;
 import org.apache.log.Logger;
 import org.apache.oro.text.MalformedCachePatternException;
 import org.apache.oro.text.regex.Pattern;
 import org.apache.oro.text.regex.Perl5Matcher;
 
 /**
  * Common constants and methods for HTTP samplers
  *
  */
 public abstract class HTTPSamplerBase extends AbstractSampler
     implements TestStateListener, TestIterationListener, ThreadListener, HTTPConstantsInterface {
 
     private static final long serialVersionUID = 241L;
 
     private static final Logger log = LoggingManager.getLoggerForClass();
 
     private static final Set<String> APPLIABLE_CONFIG_CLASSES = new HashSet<>(
             Arrays.asList(
                     "org.apache.jmeter.config.gui.LoginConfigGui",
                     "org.apache.jmeter.protocol.http.config.gui.HttpDefaultsGui",
                     "org.apache.jmeter.config.gui.SimpleConfigGui",
                     "org.apache.jmeter.protocol.http.gui.HeaderPanel",
                     "org.apache.jmeter.protocol.http.control.DNSCacheManager",
                     "org.apache.jmeter.protocol.http.gui.DNSCachePanel",
                     "org.apache.jmeter.protocol.http.gui.AuthPanel",
                     "org.apache.jmeter.protocol.http.gui.CacheManagerGui",
                     "org.apache.jmeter.protocol.http.gui.CookiePanel"
             ));
 
     //+ JMX names - do not change
     public static final String ARGUMENTS = "HTTPsampler.Arguments"; // $NON-NLS-1$
 
     public static final String AUTH_MANAGER = "HTTPSampler.auth_manager"; // $NON-NLS-1$
 
     public static final String COOKIE_MANAGER = "HTTPSampler.cookie_manager"; // $NON-NLS-1$
 
     public static final String CACHE_MANAGER = "HTTPSampler.cache_manager"; // $NON-NLS-1$
 
     public static final String HEADER_MANAGER = "HTTPSampler.header_manager"; // $NON-NLS-1$
 
     public static final String DNS_CACHE_MANAGER = "HTTPSampler.dns_cache_manager"; // $NON-NLS-1$
 
     public static final String DOMAIN = "HTTPSampler.domain"; // $NON-NLS-1$
 
     public static final String PORT = "HTTPSampler.port"; // $NON-NLS-1$
 
     public static final String PROXYHOST = "HTTPSampler.proxyHost"; // $NON-NLS-1$
 
     public static final String PROXYPORT = "HTTPSampler.proxyPort"; // $NON-NLS-1$
 
     public static final String PROXYUSER = "HTTPSampler.proxyUser"; // $NON-NLS-1$
 
     public static final String PROXYPASS = "HTTPSampler.proxyPass"; // $NON-NLS-1$
 
     public static final String CONNECT_TIMEOUT = "HTTPSampler.connect_timeout"; // $NON-NLS-1$
 
     public static final String RESPONSE_TIMEOUT = "HTTPSampler.response_timeout"; // $NON-NLS-1$
 
     public static final String METHOD = "HTTPSampler.method"; // $NON-NLS-1$
 
     /** This is the encoding used for the content, i.e. the charset name, not the header "Content-Encoding" */
     public static final String CONTENT_ENCODING = "HTTPSampler.contentEncoding"; // $NON-NLS-1$
 
     public static final String IMPLEMENTATION = "HTTPSampler.implementation"; // $NON-NLS-1$
 
     public static final String PATH = "HTTPSampler.path"; // $NON-NLS-1$
 
     public static final String FOLLOW_REDIRECTS = "HTTPSampler.follow_redirects"; // $NON-NLS-1$
 
     public static final String AUTO_REDIRECTS = "HTTPSampler.auto_redirects"; // $NON-NLS-1$
 
     public static final String PROTOCOL = "HTTPSampler.protocol"; // $NON-NLS-1$
 
     static final String PROTOCOL_FILE = "file"; // $NON-NLS-1$
 
     private static final String DEFAULT_PROTOCOL = HTTPConstants.PROTOCOL_HTTP;
 
     public static final String URL = "HTTPSampler.URL"; // $NON-NLS-1$
 
     /**
      * IP source to use - does not apply to Java HTTP implementation currently
      */
     public static final String IP_SOURCE = "HTTPSampler.ipSource"; // $NON-NLS-1$
 
     public static final String IP_SOURCE_TYPE = "HTTPSampler.ipSourceType"; // $NON-NLS-1$
 
     public static final String USE_KEEPALIVE = "HTTPSampler.use_keepalive"; // $NON-NLS-1$
 
     public static final String DO_MULTIPART_POST = "HTTPSampler.DO_MULTIPART_POST"; // $NON-NLS-1$
 
     public static final String BROWSER_COMPATIBLE_MULTIPART  = "HTTPSampler.BROWSER_COMPATIBLE_MULTIPART"; // $NON-NLS-1$
 
     public static final String CONCURRENT_DWN = "HTTPSampler.concurrentDwn"; // $NON-NLS-1$
 
     public static final String CONCURRENT_POOL = "HTTPSampler.concurrentPool"; // $NON-NLS-1$
 
     public static final int CONCURRENT_POOL_SIZE = 6; // Default concurrent pool size for download embedded resources
 
     private static final String CONCURRENT_POOL_DEFAULT = Integer.toString(CONCURRENT_POOL_SIZE); // default for concurrent pool
 
     private static final String USER_AGENT = "User-Agent"; // $NON-NLS-1$
 
     //- JMX names
 
     public static final boolean BROWSER_COMPATIBLE_MULTIPART_MODE_DEFAULT = false; // The default setting to be used (i.e. historic)
 
     private static final int MAX_BYTES_TO_STORE_PER_REQUEST =
             JMeterUtils.getPropDefault("httpsampler.max_bytes_to_store_per_request", 10 * 1024 *1024); // $NON-NLS-1$ // default value: 10MB
 
     private static final int MAX_BUFFER_SIZE = 
             JMeterUtils.getPropDefault("httpsampler.max_buffer_size", 65 * 1024); // $NON-NLS-1$
 
     private static final boolean IGNORE_FAILED_EMBEDDED_RESOURCES =
             JMeterUtils.getPropDefault("httpsampler.ignore_failed_embedded_resources", false); // $NON-NLS-1$ // default value: false
 
     private static final boolean IGNORE_EMBEDDED_RESOURCES_DATA =
             JMeterUtils.getPropDefault("httpsampler.embedded_resources_use_md5", false); // $NON-NLS-1$ // default value: false
 
     public enum SourceType {
         HOSTNAME("web_testing_source_ip_hostname"), //$NON-NLS-1$
         DEVICE("web_testing_source_ip_device"), //$NON-NLS-1$
         DEVICE_IPV4("web_testing_source_ip_device_ipv4"), //$NON-NLS-1$
         DEVICE_IPV6("web_testing_source_ip_device_ipv6"); //$NON-NLS-1$
 
         public final String propertyName;
         SourceType(String propertyName) {
             this.propertyName = propertyName;
         }
     }
 
     public static final int SOURCE_TYPE_DEFAULT = HTTPSamplerBase.SourceType.HOSTNAME.ordinal();
 
     // Use for ComboBox Source Address Type. Preserve order (specially with localization)
     public static String[] getSourceTypeList() {
         final SourceType[] types = SourceType.values();
         final String[] displayStrings = new String[types.length];
         for(int i = 0; i < types.length; i++) {
             displayStrings[i] = JMeterUtils.getResString(types[i].propertyName);
         }
         return displayStrings;
     }
 
     public static final String DEFAULT_METHOD = HTTPConstants.GET; // $NON-NLS-1$
 
     private static final List<String> METHODLIST;
     static {
         List<String> defaultMethods = new ArrayList<>(Arrays.asList(
             DEFAULT_METHOD, // i.e. GET
             HTTPConstants.POST,
             HTTPConstants.HEAD,
             HTTPConstants.PUT,
             HTTPConstants.OPTIONS,
             HTTPConstants.TRACE,
             HTTPConstants.DELETE,
             HTTPConstants.PATCH,
             HTTPConstants.PROPFIND,
             HTTPConstants.PROPPATCH,
             HTTPConstants.MKCOL,
             HTTPConstants.COPY,
             HTTPConstants.MOVE,
             HTTPConstants.LOCK,
             HTTPConstants.UNLOCK,
             HTTPConstants.REPORT,
             HTTPConstants.MKCALENDAR,
             HTTPConstants.SEARCH
         ));
         String userDefinedMethods = JMeterUtils.getPropDefault(
                 "httpsampler.user_defined_methods", "");
         if (StringUtils.isNotBlank(userDefinedMethods)) {
             defaultMethods.addAll(Arrays.asList(userDefinedMethods.split("\\s*,\\s*")));
         }
         METHODLIST = Collections.unmodifiableList(defaultMethods);
     }
 
     // @see mergeFileProperties
     // Must be private, as the file list needs special handling
     private static final String FILE_ARGS = "HTTPsampler.Files"; // $NON-NLS-1$
     // MIMETYPE is kept for backward compatibility with old test plans
     private static final String MIMETYPE = "HTTPSampler.mimetype"; // $NON-NLS-1$
     // FILE_NAME is kept for backward compatibility with old test plans
     private static final String FILE_NAME = "HTTPSampler.FILE_NAME"; // $NON-NLS-1$
     /* Shown as Parameter Name on the GUI */
     // FILE_FIELD is kept for backward compatibility with old test plans
     private static final String FILE_FIELD = "HTTPSampler.FILE_FIELD"; // $NON-NLS-1$
 
     public static final String CONTENT_TYPE = "HTTPSampler.CONTENT_TYPE"; // $NON-NLS-1$
 
     // IMAGE_PARSER now really means EMBEDDED_PARSER
     public static final String IMAGE_PARSER = "HTTPSampler.image_parser"; // $NON-NLS-1$
 
     // Embedded URLs must match this RE (if provided)
     public static final String EMBEDDED_URL_RE = "HTTPSampler.embedded_url_re"; // $NON-NLS-1$
 
     public static final String MONITOR = "HTTPSampler.monitor"; // $NON-NLS-1$
 
     // Store MD5 hash instead of storing response
     public static final String MD5 = "HTTPSampler.md5"; // $NON-NLS-1$
 
     /** A number to indicate that the port has not been set. */
     public static final int UNSPECIFIED_PORT = 0;
     public static final String UNSPECIFIED_PORT_AS_STRING = "0"; // $NON-NLS-1$
     // TODO - change to use URL version? Will this affect test plans?
 
     /** If the port is not present in a URL, getPort() returns -1 */
     public static final int URL_UNSPECIFIED_PORT = -1;
     public static final String URL_UNSPECIFIED_PORT_AS_STRING = "-1"; // $NON-NLS-1$
 
     protected static final String NON_HTTP_RESPONSE_CODE = "Non HTTP response code";
 
     protected static final String NON_HTTP_RESPONSE_MESSAGE = "Non HTTP response message";
 
     public static final String POST_BODY_RAW = "HTTPSampler.postBodyRaw"; // TODO - belongs elsewhere
 
     public static final boolean POST_BODY_RAW_DEFAULT = false;
 
     private static final String ARG_VAL_SEP = "="; // $NON-NLS-1$
 
     private static final String QRY_SEP = "&"; // $NON-NLS-1$
 
     private static final String QRY_PFX = "?"; // $NON-NLS-1$
 
     protected static final int MAX_REDIRECTS = JMeterUtils.getPropDefault("httpsampler.max_redirects", 20); // $NON-NLS-1$
 
     protected static final int MAX_FRAME_DEPTH = JMeterUtils.getPropDefault("httpsampler.max_frame_depth", 5); // $NON-NLS-1$
 
 
     // Derive the mapping of content types to parsers
     private static final Map<String, String> PARSERS_FOR_CONTENT_TYPE = new HashMap<>();
     // Not synch, but it is not modified after creation
 
     private static final String RESPONSE_PARSERS = // list of parsers
             JMeterUtils.getProperty("HTTPResponse.parsers");//$NON-NLS-1$
 
     static {
         String[] parsers = JOrphanUtils.split(RESPONSE_PARSERS, " " , true);// returns empty array for null
         for (final String parser : parsers) {
             String classname = JMeterUtils.getProperty(parser + ".className");//$NON-NLS-1$
             if (classname == null) {
                 log.error("Cannot find .className property for " + parser+", ensure you set property:'" + parser + ".className'");
                 continue;
             }
             String typeList = JMeterUtils.getProperty(parser + ".types");//$NON-NLS-1$
             if (typeList != null) {
                 String[] types = JOrphanUtils.split(typeList, " ", true);
                 for (final String type : types) {
                     log.info("Parser for " + type + " is " + classname);
                     PARSERS_FOR_CONTENT_TYPE.put(type, classname);
                 }
             } else {
                 log.warn("Cannot find .types property for " + parser
                         + ", as a consequence parser will not be used, to make it usable, define property:'"
                         + parser + ".types'");
             }
         }
     }
 
     // Bug 49083
     /** Whether to remove '/pathsegment/..' from redirects; default true */
     private static final boolean REMOVESLASHDOTDOT =
             JMeterUtils.getPropDefault("httpsampler.redirect.removeslashdotdot", true);
 
     ////////////////////// Code ///////////////////////////
 
     public HTTPSamplerBase() {
         setArguments(new Arguments());
     }
 
     /**
      * Determine if the file should be sent as the entire Content body,
      * i.e. without any additional wrapping.
      *
      * @return true if specified file is to be sent as the body,
      * i.e. there is a single file entry which has a non-empty path and
      * an empty Parameter name.
      */
     public boolean getSendFileAsPostBody() {
         // If there is one file with no parameter name, the file will
         // be sent as post body.
         HTTPFileArg[] files = getHTTPFiles();
         return (files.length == 1)
                 && (files[0].getPath().length() > 0)
                 && (files[0].getParamName().length() == 0);
     }
 
     /**
      * Determine if none of the parameters have a name, and if that
      * is the case, it means that the parameter values should be sent
      * as the entity body
      *
      * @return true if none of the parameters have a name specified
      */
     public boolean getSendParameterValuesAsPostBody() {
         if (getPostBodyRaw()) {
             return true;
         } else {
             boolean noArgumentsHasName = true;
             for (JMeterProperty jMeterProperty : getArguments()) {
                 HTTPArgument arg = (HTTPArgument) jMeterProperty.getObjectValue();
                 if (arg.getName() != null && arg.getName().length() > 0) {
                     noArgumentsHasName = false;
                     break;
                 }
             }
             return noArgumentsHasName;
         }
     }
 
     /**
      * Determine if we should use multipart/form-data or
      * application/x-www-form-urlencoded for the post
      *
      * @return true if multipart/form-data should be used and method is POST
      */
     public boolean getUseMultipartForPost() {
         // We use multipart if we have been told so, or files are present
         // and the files should not be send as the post body
         HTTPFileArg[] files = getHTTPFiles();
         return HTTPConstants.POST.equals(getMethod())
                 && (getDoMultipartPost() || (files.length > 0 && !getSendFileAsPostBody()));
     }
 
     public void setProtocol(String value) {
         setProperty(PROTOCOL, value.toLowerCase(java.util.Locale.ENGLISH));
     }
 
     /**
      * Gets the protocol, with default.
      *
      * @return the protocol
      */
     public String getProtocol() {
         String protocol = getPropertyAsString(PROTOCOL);
         if (protocol == null || protocol.length() == 0) {
             return DEFAULT_PROTOCOL;
         }
         return protocol;
     }
 
     /**
      * Sets the Path attribute of the UrlConfig object Also calls parseArguments
      * to extract and store any query arguments
      *
      * @param path
      *            The new Path value
      */
     public void setPath(String path) {
         // We know that URL arguments should always be encoded in UTF-8 according to spec
         setPath(path, EncoderCache.URL_ARGUMENT_ENCODING);
     }
 
     /**
      * Sets the PATH property; if the request is a GET or DELETE (and the path
      * does not start with http[s]://) it also calls {@link #parseArguments(String, String)}
      * to extract and store any query arguments.
      *
      * @param path
      *            The new Path value
      * @param contentEncoding
      *            The encoding used for the querystring parameter values
      */
     public void setPath(String path, String contentEncoding) {
         boolean fullUrl = path.startsWith(HTTP_PREFIX) || path.startsWith(HTTPS_PREFIX);
         boolean getOrDelete = HTTPConstants.GET.equals(getMethod()) || HTTPConstants.DELETE.equals(getMethod());
         if (!fullUrl && getOrDelete) {
             int index = path.indexOf(QRY_PFX);
             if (index > -1) {
                 setProperty(PATH, path.substring(0, index));
                 // Parse the arguments in querystring, assuming specified encoding for values
                 parseArguments(path.substring(index + 1), contentEncoding);
             } else {
                 setProperty(PATH, path);
             }
         } else {
             setProperty(PATH, path);
         }
     }
 
     public String getPath() {
         String p = getPropertyAsString(PATH);
         return encodeSpaces(p);
     }
 
     public void setFollowRedirects(boolean value) {
         setProperty(new BooleanProperty(FOLLOW_REDIRECTS, value));
     }
 
     public boolean getFollowRedirects() {
         return getPropertyAsBoolean(FOLLOW_REDIRECTS);
     }
 
     public void setAutoRedirects(boolean value) {
         setProperty(new BooleanProperty(AUTO_REDIRECTS, value));
     }
 
     public boolean getAutoRedirects() {
         return getPropertyAsBoolean(AUTO_REDIRECTS);
     }
 
     public void setMethod(String value) {
         setProperty(METHOD, value);
     }
 
     public String getMethod() {
         return getPropertyAsString(METHOD);
     }
 
     /**
      * Sets the value of the encoding to be used for the content.
      *
      * @param charsetName the name of the encoding to be used
      */
     public void setContentEncoding(String charsetName) {
         setProperty(CONTENT_ENCODING, charsetName);
     }
 
     /**
      *
      * @return the encoding of the content, i.e. its charset name
      */
     public String getContentEncoding() {
         return getPropertyAsString(CONTENT_ENCODING);
     }
 
     public void setUseKeepAlive(boolean value) {
         setProperty(new BooleanProperty(USE_KEEPALIVE, value));
     }
 
     public boolean getUseKeepAlive() {
         return getPropertyAsBoolean(USE_KEEPALIVE);
     }
 
     public void setDoMultipartPost(boolean value) {
         setProperty(new BooleanProperty(DO_MULTIPART_POST, value));
     }
 
     public boolean getDoMultipartPost() {
         return getPropertyAsBoolean(DO_MULTIPART_POST, false);
     }
 
     public void setDoBrowserCompatibleMultipart(boolean value) {
         setProperty(BROWSER_COMPATIBLE_MULTIPART, value, BROWSER_COMPATIBLE_MULTIPART_MODE_DEFAULT);
     }
 
     public boolean getDoBrowserCompatibleMultipart() {
         return getPropertyAsBoolean(BROWSER_COMPATIBLE_MULTIPART, BROWSER_COMPATIBLE_MULTIPART_MODE_DEFAULT);
     }
 
     public void setMonitor(String value) {
         this.setProperty(MONITOR, value);
     }
 
     public void setMonitor(boolean truth) {
         this.setProperty(MONITOR, truth);
     }
 
+    /**
+     * @deprecated since 3.2 always returns false
+     */
+    @Deprecated
     public String getMonitor() {
-        return this.getPropertyAsString(MONITOR);
+        return "false";
     }
 
+    /**
+     * @deprecated since 3.2 always returns false
+     */
+    @Deprecated
     public boolean isMonitor() {
-        return this.getPropertyAsBoolean(MONITOR);
+        return false;
     }
-
+    
     public void setImplementation(String value) {
         this.setProperty(IMPLEMENTATION, value);
     }
 
     public String getImplementation() {
         return this.getPropertyAsString(IMPLEMENTATION);
     }
 
     public boolean useMD5() {
         return this.getPropertyAsBoolean(MD5, false);
     }
 
     public void setMD5(boolean truth) {
         this.setProperty(MD5, truth, false);
     }
 
     /**
      * Add an argument which has already been encoded
      *
      * @param name name of the argument
      * @param value value of the argument
      */
     public void addEncodedArgument(String name, String value) {
         this.addEncodedArgument(name, value, ARG_VAL_SEP);
     }
 
     /**
      * Creates an HTTPArgument and adds it to the current set {@link #getArguments()} of arguments.
      *
      * @param name - the parameter name
      * @param value - the parameter value
      * @param metaData - normally just '='
      * @param contentEncoding - the encoding, may be null
      */
     public void addEncodedArgument(String name, String value, String metaData, String contentEncoding) {
         if (log.isDebugEnabled()) {
             log.debug("adding argument: name: " + name + " value: " + value + " metaData: " + metaData + " contentEncoding: " + contentEncoding);
         }
 
         HTTPArgument arg;
         final boolean nonEmptyEncoding = !StringUtils.isEmpty(contentEncoding);
         if (nonEmptyEncoding) {
             arg = new HTTPArgument(name, value, metaData, true, contentEncoding);
         } else {
             arg = new HTTPArgument(name, value, metaData, true);
         }
 
         // Check if there are any difference between name and value and their encoded name and value
         String valueEncoded;
         if (nonEmptyEncoding) {
             try {
                 valueEncoded = arg.getEncodedValue(contentEncoding);
             } catch (UnsupportedEncodingException e) {
                 log.warn("Unable to get encoded value using encoding " + contentEncoding);
                 valueEncoded = arg.getEncodedValue();
             }
         } else {
             valueEncoded = arg.getEncodedValue();
         }
         // If there is no difference, we mark it as not needing encoding
         if (arg.getName().equals(arg.getEncodedName())
                 && arg.getValue().equals(valueEncoded)) {
             arg.setAlwaysEncoded(false);
         }
         this.getArguments().addArgument(arg);
     }
 
     public void addEncodedArgument(String name, String value, String metaData) {
         this.addEncodedArgument(name, value, metaData, null);
     }
 
     public void addNonEncodedArgument(String name, String value, String metadata) {
         HTTPArgument arg = new HTTPArgument(name, value, metadata, false);
         arg.setAlwaysEncoded(false);
         this.getArguments().addArgument(arg);
     }
 
     public void addArgument(String name, String value) {
         this.getArguments().addArgument(new HTTPArgument(name, value));
     }
 
     public void addArgument(String name, String value, String metadata) {
         this.getArguments().addArgument(new HTTPArgument(name, value, metadata));
     }
 
     public boolean hasArguments() {
         return getArguments().getArgumentCount() > 0;
     }
 
     @Override
     public void addTestElement(TestElement el) {
         if (el instanceof CookieManager) {
             setCookieManager((CookieManager) el);
         } else if (el instanceof CacheManager) {
             setCacheManager((CacheManager) el);
         } else if (el instanceof HeaderManager) {
             setHeaderManager((HeaderManager) el);
         } else if (el instanceof AuthManager) {
             setAuthManager((AuthManager) el);
         } else if (el instanceof DNSCacheManager) {
             setDNSResolver((DNSCacheManager) el);
         } else {
             super.addTestElement(el);
         }
     }
 
     /**
      * {@inheritDoc}
      * <p>
      * Clears the Header Manager property so subsequent loops don't keep merging more elements
      */
     @Override
     public void clearTestElementChildren() {
         removeProperty(HEADER_MANAGER);
     }
 
     public void setPort(int value) {
         setProperty(new IntegerProperty(PORT, value));
     }
 
     /**
      * Get the port number for a URL, applying defaults if necessary.
      * (Called by CookieManager.)
      * @param protocol from {@link URL#getProtocol()}
      * @param port number from {@link URL#getPort()}
      * @return the default port for the protocol
      */
     public static int getDefaultPort(String protocol, int port) {
         if (port == URL_UNSPECIFIED_PORT) {
             if (protocol.equalsIgnoreCase(HTTPConstants.PROTOCOL_HTTP)) {
                 return HTTPConstants.DEFAULT_HTTP_PORT;
             } else if (protocol.equalsIgnoreCase(HTTPConstants.PROTOCOL_HTTPS)) {
                 return HTTPConstants.DEFAULT_HTTPS_PORT;
             }
         }
         return port;
     }
 
     /**
      * Get the port number from the port string, allowing for trailing blanks.
      *
      * @return port number or UNSPECIFIED_PORT (== 0)
      */
     public int getPortIfSpecified() {
         String portAsString = getPropertyAsString(PORT);
         if(portAsString == null || portAsString.isEmpty()) {
             return UNSPECIFIED_PORT;
         }
         
         try {
             return Integer.parseInt(portAsString.trim());
         } catch (NumberFormatException e) {
             return UNSPECIFIED_PORT;
         }
     }
 
     /**
      * Tell whether the default port for the specified protocol is used
      *
      * @return true if the default port number for the protocol is used, false otherwise
      */
     public boolean isProtocolDefaultPort() {
         final int port = getPortIfSpecified();
         final String protocol = getProtocol();
         boolean isDefaultHTTPPort = HTTPConstants.PROTOCOL_HTTP
                 .equalsIgnoreCase(protocol)
                 && port == HTTPConstants.DEFAULT_HTTP_PORT;
         boolean isDefaultHTTPSPort = HTTPConstants.PROTOCOL_HTTPS
                 .equalsIgnoreCase(protocol)
                 && port == HTTPConstants.DEFAULT_HTTPS_PORT;
         return port == UNSPECIFIED_PORT ||
                 isDefaultHTTPPort ||
                 isDefaultHTTPSPort;
     }
 
     /**
      * Get the port; apply the default for the protocol if necessary.
      *
      * @return the port number, with default applied if required.
      */
     public int getPort() {
         final int port = getPortIfSpecified();
         if (port == UNSPECIFIED_PORT) {
             String prot = getProtocol();
             if (HTTPConstants.PROTOCOL_HTTPS.equalsIgnoreCase(prot)) {
                 return HTTPConstants.DEFAULT_HTTPS_PORT;
             }
             if (!HTTPConstants.PROTOCOL_HTTP.equalsIgnoreCase(prot)) {
                 log.warn("Unexpected protocol: " + prot);
                 // TODO - should this return something else?
             }
             return HTTPConstants.DEFAULT_HTTP_PORT;
         }
         return port;
     }
 
     public void setDomain(String value) {
         setProperty(DOMAIN, value);
     }
 
     public String getDomain() {
         return getPropertyAsString(DOMAIN);
     }
 
     public void setConnectTimeout(String value) {
         setProperty(CONNECT_TIMEOUT, value, "");
     }
 
     public int getConnectTimeout() {
         return getPropertyAsInt(CONNECT_TIMEOUT, 0);
     }
 
     public void setResponseTimeout(String value) {
         setProperty(RESPONSE_TIMEOUT, value, "");
     }
 
     public int getResponseTimeout() {
         return getPropertyAsInt(RESPONSE_TIMEOUT, 0);
     }
 
     public String getProxyHost() {
         return getPropertyAsString(PROXYHOST);
     }
 
     public int getProxyPortInt() {
         return getPropertyAsInt(PROXYPORT, 0);
     }
 
     public String getProxyUser() {
         return getPropertyAsString(PROXYUSER);
     }
 
     public String getProxyPass() {
         return getPropertyAsString(PROXYPASS);
     }
 
     // gets called from ctor, so has to be final
     public final void setArguments(Arguments value) {
         setProperty(new TestElementProperty(ARGUMENTS, value));
     }
 
     public Arguments getArguments() {
         return (Arguments) getProperty(ARGUMENTS).getObjectValue();
     }
 
     /**
      * @param value Boolean that indicates body will be sent as is
      */
     public void setPostBodyRaw(boolean value) {
         setProperty(POST_BODY_RAW, value, POST_BODY_RAW_DEFAULT);
     }
 
     /**
      * @return boolean that indicates body will be sent as is
      */
     public boolean getPostBodyRaw() {
         return getPropertyAsBoolean(POST_BODY_RAW, POST_BODY_RAW_DEFAULT);
     }
 
     public void setAuthManager(AuthManager value) {
         AuthManager mgr = getAuthManager();
         if (mgr != null) {
             log.warn("Existing AuthManager " + mgr.getName() + " superseded by " + value.getName());
         }
         setProperty(new TestElementProperty(AUTH_MANAGER, value));
     }
 
     public AuthManager getAuthManager() {
         return (AuthManager) getProperty(AUTH_MANAGER).getObjectValue();
     }
 
     public void setHeaderManager(HeaderManager value) {
         HeaderManager mgr = getHeaderManager();
         if (mgr != null) {
             value = mgr.merge(value, true);
             if (log.isDebugEnabled()) {
                 log.debug("Existing HeaderManager '" + mgr.getName() + "' merged with '" + value.getName() + "'");
                 for (int i = 0; i < value.getHeaders().size(); i++) {
                     log.debug("    " + value.getHeader(i).getName() + "=" + value.getHeader(i).getValue());
                 }
             }
         }
         setProperty(new TestElementProperty(HEADER_MANAGER, value));
     }
 
     public HeaderManager getHeaderManager() {
         return (HeaderManager) getProperty(HEADER_MANAGER).getObjectValue();
     }
 
     // private method to allow AsyncSample to reset the value without performing checks
     private void setCookieManagerProperty(CookieManager value) {
         setProperty(new TestElementProperty(COOKIE_MANAGER, value));
     }
 
     public void setCookieManager(CookieManager value) {
         CookieManager mgr = getCookieManager();
         if (mgr != null) {
             log.warn("Existing CookieManager " + mgr.getName() + " superseded by " + value.getName());
         }
         setCookieManagerProperty(value);
     }
 
     public CookieManager getCookieManager() {
         return (CookieManager) getProperty(COOKIE_MANAGER).getObjectValue();
     }
 
     // private method to allow AsyncSample to reset the value without performing checks
     private void setCacheManagerProperty(CacheManager value) {
         setProperty(new TestElementProperty(CACHE_MANAGER, value));
     }
 
     public void setCacheManager(CacheManager value) {
         CacheManager mgr = getCacheManager();
         if (mgr != null) {
             log.warn("Existing CacheManager " + mgr.getName() + " superseded by " + value.getName());
         }
         setCacheManagerProperty(value);
     }
 
     public CacheManager getCacheManager() {
         return (CacheManager) getProperty(CACHE_MANAGER).getObjectValue();
     }
 
     public DNSCacheManager getDNSResolver() {
         return (DNSCacheManager) getProperty(DNS_CACHE_MANAGER).getObjectValue();
     }
 
     public void setDNSResolver(DNSCacheManager cacheManager) {
         DNSCacheManager mgr = getDNSResolver();
         if (mgr != null) {
             log.warn("Existing DNSCacheManager " + mgr.getName() + " superseded by " + cacheManager.getName());
         }
         setProperty(new TestElementProperty(DNS_CACHE_MANAGER, cacheManager));
     }
 
     public boolean isImageParser() {
         return getPropertyAsBoolean(IMAGE_PARSER, false);
     }
 
     public void setImageParser(boolean parseImages) {
         setProperty(IMAGE_PARSER, parseImages, false);
     }
 
     /**
      * Get the regular expression URLs must match.
      *
      * @return regular expression (or empty) string
      */
     public String getEmbeddedUrlRE() {
         return getPropertyAsString(EMBEDDED_URL_RE, "");
     }
 
     public void setEmbeddedUrlRE(String regex) {
         setProperty(new StringProperty(EMBEDDED_URL_RE, regex));
     }
 
     /**
      * Populates the provided HTTPSampleResult with details from the Exception.
      * Does not create a new instance, so should not be used directly to add a subsample.
      *
      * @param e
      *            Exception representing the error.
      * @param res
      *            SampleResult to be modified
      * @return the modified sampling result containing details of the Exception.
      */
     protected HTTPSampleResult errorResult(Throwable e, HTTPSampleResult res) {
         res.setSampleLabel(res.getSampleLabel());
         res.setDataType(SampleResult.TEXT);
         ByteArrayOutputStream text = new ByteArrayOutputStream(200);
         e.printStackTrace(new PrintStream(text));
         res.setResponseData(text.toByteArray());
         res.setResponseCode(NON_HTTP_RESPONSE_CODE+": " + e.getClass().getName());
         res.setResponseMessage(NON_HTTP_RESPONSE_MESSAGE+": " + e.getMessage());
         res.setSuccessful(false);
-        res.setMonitor(this.isMonitor());
         return res;
     }
 
     private static final String HTTP_PREFIX = HTTPConstants.PROTOCOL_HTTP+"://"; // $NON-NLS-1$
     private static final String HTTPS_PREFIX = HTTPConstants.PROTOCOL_HTTPS+"://"; // $NON-NLS-1$
 
     // Bug 51939
     private static final boolean SEPARATE_CONTAINER =
             JMeterUtils.getPropDefault("httpsampler.separate.container", true); // $NON-NLS-1$
 
 
     /**
      * Get the URL, built from its component parts.
      *
      * <p>
      * As a special case, if the path starts with "http[s]://",
      * then the path is assumed to be the entire URL.
      * </p>
      *
      * @return The URL to be requested by this sampler.
      * @throws MalformedURLException if url is malformed
      */
     public URL getUrl() throws MalformedURLException {
         StringBuilder pathAndQuery = new StringBuilder(100);
         String path = this.getPath();
         // Hack to allow entire URL to be provided in host field
         if (path.startsWith(HTTP_PREFIX)
                 || path.startsWith(HTTPS_PREFIX)) {
             return new URL(path);
         }
         String domain = getDomain();
         String protocol = getProtocol();
         if (PROTOCOL_FILE.equalsIgnoreCase(protocol)) {
             domain = null; // allow use of relative file URLs
         } else {
             // HTTP URLs must be absolute, allow file to be relative
             if (!path.startsWith("/")) { // $NON-NLS-1$
                 pathAndQuery.append('/'); // $NON-NLS-1$
             }
         }
         pathAndQuery.append(path);
 
         // Add the query string if it is a HTTP GET or DELETE request
         if (HTTPConstants.GET.equals(getMethod()) || HTTPConstants.DELETE.equals(getMethod())) {
             // Get the query string encoded in specified encoding
             // If no encoding is specified by user, we will get it
             // encoded in UTF-8, which is what the HTTP spec says
             String queryString = getQueryString(getContentEncoding());
             if (queryString.length() > 0) {
                 if (path.contains(QRY_PFX)) {// Already contains a prefix
                     pathAndQuery.append(QRY_SEP);
                 } else {
                     pathAndQuery.append(QRY_PFX);
                 }
                 pathAndQuery.append(queryString);
             }
         }
         // If default port for protocol is used, we do not include port in URL
         if (isProtocolDefaultPort()) {
             return new URL(protocol, domain, pathAndQuery.toString());
         }
         return new URL(protocol, domain, getPort(), pathAndQuery.toString());
     }
 
     /**
      * Gets the QueryString attribute of the UrlConfig object, using
      * UTF-8 to encode the URL
      *
      * @return the QueryString value
      */
     public String getQueryString() {
         // We use the encoding which should be used according to the HTTP spec, which is UTF-8
         return getQueryString(EncoderCache.URL_ARGUMENT_ENCODING);
     }
 
     /**
      * Gets the QueryString attribute of the UrlConfig object, using the
      * specified encoding to encode the parameter values put into the URL
      *
      * @param contentEncoding the encoding to use for encoding parameter values
      * @return the QueryString value
      */
     public String getQueryString(String contentEncoding) {
         
         CollectionProperty arguments = getArguments().getArguments();
         // Optimisation : avoid building useless objects if empty arguments
         if(arguments.size() == 0) {
             return "";
         }
         
         // Check if the sampler has a specified content encoding
         if (JOrphanUtils.isBlank(contentEncoding)) {
             // We use the encoding which should be used according to the HTTP spec, which is UTF-8
             contentEncoding = EncoderCache.URL_ARGUMENT_ENCODING;
         }
         
         StringBuilder buf = new StringBuilder(arguments.size() * 15);
         PropertyIterator iter = arguments.iterator();
         boolean first = true;
         while (iter.hasNext()) {
             HTTPArgument item = null;
             /*
              * N.B. Revision 323346 introduced the ClassCast check, but then used iter.next()
              * to fetch the item to be cast, thus skipping the element that did not cast.
              * Reverted to work more like the original code, but with the check in place.
              * Added a warning message so can track whether it is necessary
              */
             Object objectValue = iter.next().getObjectValue();
             try {
                 item = (HTTPArgument) objectValue;
             } catch (ClassCastException e) {
                 log.warn("Unexpected argument type: " + objectValue.getClass().getName());
                 item = new HTTPArgument((Argument) objectValue);
             }
             final String encodedName = item.getEncodedName();
             if (encodedName.length() == 0) {
                 continue; // Skip parameters with a blank name (allows use of optional variables in parameter lists)
             }
             if (!first) {
                 buf.append(QRY_SEP);
             } else {
                 first = false;
             }
             buf.append(encodedName);
             if (item.getMetaData() == null) {
                 buf.append(ARG_VAL_SEP);
             } else {
                 buf.append(item.getMetaData());
             }
 
             // Encode the parameter value in the specified content encoding
             try {
                 buf.append(item.getEncodedValue(contentEncoding));
             } catch(UnsupportedEncodingException e) {
                 log.warn("Unable to encode parameter in encoding " + contentEncoding + ", parameter value not included in query string");
             }
         }
         return buf.toString();
     }
 
     // Mark Walsh 2002-08-03, modified to also parse a parameter name value
     // string, where string contains only the parameter name and no equal sign.
     /**
      * This method allows a proxy server to send over the raw text from a
      * browser's output stream to be parsed and stored correctly into the
      * UrlConfig object.
      *
      * For each name found, addArgument() is called
      *
      * @param queryString -
      *            the query string, might be the post body of a http post request.
      * @param contentEncoding -
      *            the content encoding of the query string;
      *            if non-null then it is used to decode the
      */
     public void parseArguments(String queryString, String contentEncoding) {
         String[] args = JOrphanUtils.split(queryString, QRY_SEP);
         final boolean isDebug = log.isDebugEnabled();
         for (String arg : args) {
             if (isDebug) {
                 log.debug("Arg: " + arg);
             }
             // need to handle four cases:
             // - string contains name=value
             // - string contains name=
             // - string contains name
             // - empty string
 
             String metaData; // records the existence of an equal sign
             String name;
             String value;
             int length = arg.length();
             int endOfNameIndex = arg.indexOf(ARG_VAL_SEP);
             if (endOfNameIndex != -1) {// is there a separator?
                 // case of name=value, name=
                 metaData = ARG_VAL_SEP;
                 name = arg.substring(0, endOfNameIndex);
                 value = arg.substring(endOfNameIndex + 1, length);
             } else {
                 metaData = "";
                 name = arg;
                 value = "";
             }
             if (name.length() > 0) {
                 if (isDebug) {
                     log.debug("Name: " + name + " Value: " + value + " Metadata: " + metaData);
                 }
                 // If we know the encoding, we can decode the argument value,
                 // to make it easier to read for the user
                 if (!StringUtils.isEmpty(contentEncoding)) {
                     addEncodedArgument(name, value, metaData, contentEncoding);
                 } else {
                     // If we do not know the encoding, we just use the encoded value
                     // The browser has already done the encoding, so save the values as is
                     addNonEncodedArgument(name, value, metaData);
                 }
             }
         }
     }
 
     public void parseArguments(String queryString) {
         // We do not know the content encoding of the query string
         parseArguments(queryString, null);
     }
 
     @Override
     public String toString() {
         try {
             StringBuilder stringBuffer = new StringBuilder();
             stringBuffer.append(this.getUrl().toString());
             // Append body if it is a post or put
             if (HTTPConstants.POST.equals(getMethod()) || HTTPConstants.PUT.equals(getMethod())) {
                 stringBuffer.append("\nQuery Data: ");
                 stringBuffer.append(getQueryString());
             }
             return stringBuffer.toString();
         } catch (MalformedURLException e) {
             return "";
         }
     }
 
     /**
      * Do a sampling and return its results.
      *
      * @param e
      *            <code>Entry</code> to be sampled
      * @return results of the sampling
      */
     @Override
     public SampleResult sample(Entry e) {
         return sample();
     }
 
     /**
      * Perform a sample, and return the results
      *
      * @return results of the sampling
      */
     public SampleResult sample() {
         SampleResult res = null;
         try {
             res = sample(getUrl(), getMethod(), false, 0);
             if (res != null) {
                 res.setSampleLabel(getName());
             }
             return res;
         } catch (Exception e) {
             return errorResult(e, new HTTPSampleResult());
         }
     }
 
     /**
      * Samples the URL passed in and stores the result in
      * <code>HTTPSampleResult</code>, following redirects and downloading
      * page resources as appropriate.
      * <p>
      * When getting a redirect target, redirects are not followed and resources
      * are not downloaded. The caller will take care of this.
      *
      * @param u
      *            URL to sample
      * @param method
      *            HTTP method: GET, POST,...
      * @param areFollowingRedirect
      *            whether we're getting a redirect target
      * @param depth
      *            Depth of this target in the frame structure. Used only to
      *            prevent infinite recursion.
      * @return results of the sampling, can be null if u is in CacheManager
      */
     protected abstract HTTPSampleResult sample(URL u,
             String method, boolean areFollowingRedirect, int depth);
 
     /**
      * Download the resources of an HTML page.
      *
      * @param res
      *            result of the initial request - must contain an HTML response
      * @param container
      *            for storing the results, if any
      * @param frameDepth
      *            Depth of this target in the frame structure. Used only to
      *            prevent infinite recursion.
      * @return res if no resources exist, otherwise the "Container" result with one subsample per request issued
      */
     protected HTTPSampleResult downloadPageResources(HTTPSampleResult res, HTTPSampleResult container, int frameDepth) {
         Iterator<URL> urls = null;
         try {
             final byte[] responseData = res.getResponseData();
             if (responseData.length > 0) {  // Bug 39205
                 final LinkExtractorParser parser = getParser(res);
                 if (parser != null) {
                     String userAgent = getUserAgent(res);
                     urls = parser.getEmbeddedResourceURLs(userAgent, responseData, res.getURL(), res.getDataEncodingWithDefault());
                 }
             }
         } catch (LinkExtractorParseException e) {
             // Don't break the world just because this failed:
             res.addSubResult(errorResult(e, new HTTPSampleResult(res)));
             setParentSampleSuccess(res, false);
         }
 
         // Iterate through the URLs and download each image:
         if (urls != null && urls.hasNext()) {
             if (container == null) {
                 container = new HTTPSampleResult(res);
                 container.addRawSubResult(res);
             }
             res = container;
 
             // Get the URL matcher
             String re = getEmbeddedUrlRE();
             Perl5Matcher localMatcher = null;
             Pattern pattern = null;
             if (re.length() > 0) {
                 try {
                     pattern = JMeterUtils.getPattern(re);
                     localMatcher = JMeterUtils.getMatcher();// don't fetch unless pattern compiles
                 } catch (MalformedCachePatternException e) {
                     log.warn("Ignoring embedded URL match string: " + e.getMessage());
                 }
             }
 
             // For concurrent get resources
             final List<Callable<AsynSamplerResultHolder>> list = new ArrayList<>();
 
             int maxConcurrentDownloads = CONCURRENT_POOL_SIZE; // init with default value
             boolean isConcurrentDwn = isConcurrentDwn();
             if (isConcurrentDwn) {
                 try {
                     maxConcurrentDownloads = Integer.parseInt(getConcurrentPool());
                 } catch (NumberFormatException nfe) {
                     log.warn("Concurrent download resources selected, "// $NON-NLS-1$
                             + "but pool size value is bad. Use default value");// $NON-NLS-1$
                 }
 
                 // if the user choose a number of parallel downloads of 1
                 // no need to use another thread, do the sample on the current thread
                 if (maxConcurrentDownloads == 1) {
                     log.warn("Number of parallel downloads set to 1, (sampler name=" + getName()+")");
                     isConcurrentDwn = false;
                 }
             }
 
             while (urls.hasNext()) {
                 Object binURL = urls.next(); // See catch clause below
                 try {
                     URL url = (URL) binURL;
                     if (url == null) {
                         log.warn("Null URL detected (should not happen)");
                     } else {
                         try {
                             url = escapeIllegalURLCharacters(url);
                         } catch (Exception e) {
                             res.addSubResult(errorResult(new Exception(url.toString() + " is not a correct URI"), new HTTPSampleResult(res)));
                             setParentSampleSuccess(res, false);
                             continue;
                         }
                         // I don't think localMatcher can be null here, but check just in case
                         if (pattern != null && localMatcher != null && !localMatcher.matches(url.toString(), pattern)) {
                             continue; // we have a pattern and the URL does not match, so skip it
                         }
                         try {
                             url = url.toURI().normalize().toURL();
                         } catch (MalformedURLException | URISyntaxException e) {
                             res.addSubResult(errorResult(new Exception(url.toString() + " URI can not be normalized", e), new HTTPSampleResult(res)));
                             setParentSampleSuccess(res, false);
                             continue;
                         }
 
                         if (isConcurrentDwn) {
                             // if concurrent download emb. resources, add to a list for async gets later
                             list.add(new ASyncSample(url, HTTPConstants.GET, false, frameDepth + 1, getCookieManager(), this));
                         } else {
                             // default: serial download embedded resources
                             HTTPSampleResult binRes = sample(url, HTTPConstants.GET, false, frameDepth + 1);
                             res.addSubResult(binRes);
                             setParentSampleSuccess(res, res.isSuccessful() && (binRes == null || binRes.isSuccessful()));
                         }
                     }
                 } catch (ClassCastException e) { // TODO can this happen?
                     res.addSubResult(errorResult(new Exception(binURL + " is not a correct URI"), new HTTPSampleResult(res)));
                     setParentSampleSuccess(res, false);
                 }
             }
 
             // IF for download concurrent embedded resources
             if (isConcurrentDwn && !list.isEmpty()) {
 
                 ResourcesDownloader resourcesDownloader = ResourcesDownloader.getInstance();
 
                 try {
                     // sample all resources
                     final List<Future<AsynSamplerResultHolder>> retExec =
                             resourcesDownloader.invokeAllAndAwaitTermination(maxConcurrentDownloads, list);
                     CookieManager cookieManager = getCookieManager();
                     // add result to main sampleResult
                     for (Future<AsynSamplerResultHolder> future : retExec) {
                         // this call will not block as the futures return by invokeAllAndAwaitTermination
                         //   are either done or cancelled
                         AsynSamplerResultHolder binRes = future.get();
                         if (cookieManager != null) {
                             CollectionProperty cookies = binRes.getCookies();
                             for (JMeterProperty jMeterProperty : cookies) {
                                 Cookie cookie = (Cookie) jMeterProperty.getObjectValue();
                                 cookieManager.add(cookie);
                             }
                         }
                         res.addSubResult(binRes.getResult());
                         setParentSampleSuccess(res, res.isSuccessful() && (binRes.getResult() != null ? binRes.getResult().isSuccessful():true));
                     }
                 } catch (InterruptedException ie) {
                     log.warn("Interrupted fetching embedded resources", ie); // $NON-NLS-1$
                 } catch (ExecutionException ee) {
                     log.warn("Execution issue when fetching embedded resources", ee); // $NON-NLS-1$
                 }
             }
         }
         return res;
     }
 
     /**
      * Gets parser from {@link HTTPSampleResult#getMediaType()}.
      * Returns null if no parser defined for it
      * @param res {@link HTTPSampleResult}
      * @return {@link LinkExtractorParser}
      * @throws LinkExtractorParseException
      */
     private LinkExtractorParser getParser(HTTPSampleResult res)
             throws LinkExtractorParseException {
         String parserClassName =
                 PARSERS_FOR_CONTENT_TYPE.get(res.getMediaType());
         if (!StringUtils.isEmpty(parserClassName)) {
             return BaseParser.getParser(parserClassName);
         }
         return null;
     }
     
     /**
      * @param url URL to escape
      * @return escaped url
      */
     private URL escapeIllegalURLCharacters(java.net.URL url) {
         if (url == null || url.getProtocol().equals("file")) {
             return url;
         }
         try {
             return ConversionUtils.sanitizeUrl(url).toURL();
         } catch (Exception e1) {
             log.error("Error escaping URL:'" + url + "', message:" + e1.getMessage());
             return url;
         }
     }
 
     /**
      * Extract User-Agent header value
      * @param sampleResult HTTPSampleResult
      * @return User Agent part
      */
     private String getUserAgent(HTTPSampleResult sampleResult) {
         String res = sampleResult.getRequestHeaders();
         int index = res.indexOf(USER_AGENT);
         if (index >= 0) {
             // see HTTPHC3Impl#getConnectionHeaders
             // see HTTPHC4Impl#getConnectionHeaders
             // see HTTPJavaImpl#getConnectionHeaders
             //': ' is used by JMeter to fill-in requestHeaders, see getConnectionHeaders
             final String userAgentPrefix = USER_AGENT+": ";
             String userAgentHdr = res.substring(
                     index+userAgentPrefix.length(),
                     res.indexOf('\n',// '\n' is used by JMeter to fill-in requestHeaders, see getConnectionHeaders
                             index+userAgentPrefix.length()+1));
             return userAgentHdr.trim();
         } else {
             if (log.isInfoEnabled()) {
                 log.info("No user agent extracted from requestHeaders:" + res);
             }
             return null;
         }
     }
 
     /**
      * Set parent successful attribute based on IGNORE_FAILED_EMBEDDED_RESOURCES parameter
      * @param res {@link HTTPSampleResult}
      * @param initialValue boolean
      */
     private void setParentSampleSuccess(HTTPSampleResult res, boolean initialValue) {
         if (!IGNORE_FAILED_EMBEDDED_RESOURCES) {
             res.setSuccessful(initialValue);
             if (!initialValue) {
                 StringBuilder detailedMessage = new StringBuilder(80);
                 detailedMessage.append("Embedded resource download error:"); //$NON-NLS-1$
                 for (SampleResult subResult : res.getSubResults()) {
                     HTTPSampleResult httpSampleResult = (HTTPSampleResult) subResult;
                     if (!httpSampleResult.isSuccessful()) {
                         detailedMessage.append(httpSampleResult.getURL())
                                 .append(" code:") //$NON-NLS-1$
                                 .append(httpSampleResult.getResponseCode())
                                 .append(" message:") //$NON-NLS-1$
                                 .append(httpSampleResult.getResponseMessage())
                                 .append(", "); //$NON-NLS-1$
                     }
                 }
                 res.setResponseMessage(detailedMessage.toString()); //$NON-NLS-1$
             }
         }
     }
 
     // TODO: make static?
     protected String encodeSpaces(String path) {
         return JOrphanUtils.replaceAllChars(path, ' ', "%20"); // $NON-NLS-1$
     }
 
     /**
      * {@inheritDoc}
      */
     @Override
     public void testEnded() {
     }
 
     /**
      * {@inheritDoc}
      */
     @Override
     public void testEnded(String host) {
         testEnded();
     }
 
     /**
      * {@inheritDoc}
      */
     @Override
     public void testStarted() {
     }
 
     /**
      * {@inheritDoc}
      */
     @Override
     public void testStarted(String host) {
         testStarted();
     }
 
     /**
      * {@inheritDoc}
      */
     @Override
     public Object clone() {
         HTTPSamplerBase base = (HTTPSamplerBase) super.clone();
         return base;
     }
 
     /**
      * Iteratively download the redirect targets of a redirect response.
      * <p>
      * The returned result will contain one subsample for each request issued,
      * including the original one that was passed in. It will be an
      * HTTPSampleResult that should mostly look as if the final destination of
      * the redirect chain had been obtained in a single shot.
      *
      * @param res
      *            result of the initial request - must be a redirect response
      * @param frameDepth
      *            Depth of this target in the frame structure. Used only to
      *            prevent infinite recursion.
      * @return "Container" result with one subsample per request issued
      */
     protected HTTPSampleResult followRedirects(HTTPSampleResult res, int frameDepth) {
         HTTPSampleResult totalRes = new HTTPSampleResult(res);
         totalRes.addRawSubResult(res);
         HTTPSampleResult lastRes = res;
 
         int redirect;
         for (redirect = 0; redirect < MAX_REDIRECTS; redirect++) {
             boolean invalidRedirectUrl = false;
             String location = lastRes.getRedirectLocation();
             if (log.isDebugEnabled()) {
                 log.debug("Initial location: " + location);
             }
             if (REMOVESLASHDOTDOT) {
                 location = ConversionUtils.removeSlashDotDot(location);
             }
             // Browsers seem to tolerate Location headers with spaces,
             // replacing them automatically with %20. We want to emulate
             // this behaviour.
             location = encodeSpaces(location);
             if (log.isDebugEnabled()) {
                 log.debug("Location after /. and space transforms: " + location);
             }
             // Change all but HEAD into GET (Bug 55450)
             String method = lastRes.getHTTPMethod();
             method = computeMethodForRedirect(method, res.getResponseCode());
 
             try {
                 URL url = ConversionUtils.makeRelativeURL(lastRes.getURL(), location);
                 url = ConversionUtils.sanitizeUrl(url).toURL();
                 if (log.isDebugEnabled()) {
                     log.debug("Location as URL: " + url.toString());
                 }
                 HTTPSampleResult tempRes = sample(url, method, true, frameDepth);
                 if (tempRes != null) {
                     lastRes = tempRes;
                 } else {
                     // Last url was in cache so tempRes is null
                     break;
                 }
             } catch (MalformedURLException | URISyntaxException e) {
                 errorResult(e, lastRes);
                 // The redirect URL we got was not a valid URL
                 invalidRedirectUrl = true;
             }
             if (lastRes.getSubResults() != null && lastRes.getSubResults().length > 0) {
                 SampleResult[] subs = lastRes.getSubResults();
                 for (SampleResult sub : subs) {
                     totalRes.addSubResult(sub);
                 }
             } else {
                 // Only add sample if it is a sample of valid url redirect, i.e. that
                 // we have actually sampled the URL
                 if (!invalidRedirectUrl) {
                     totalRes.addSubResult(lastRes);
                 }
             }
 
             if (!lastRes.isRedirect()) {
                 break;
             }
         }
         if (redirect >= MAX_REDIRECTS) {
             lastRes = errorResult(new IOException("Exceeded maximum number of redirects: " + MAX_REDIRECTS), new HTTPSampleResult(lastRes));
             totalRes.addSubResult(lastRes);
         }
 
         // Now populate the any totalRes fields that need to
         // come from lastRes:
         totalRes.setSampleLabel(totalRes.getSampleLabel() + "->" + lastRes.getSampleLabel());
         // The following three can be discussed: should they be from the
         // first request or from the final one? I chose to do it this way
         // because that's what browsers do: they show the final URL of the
         // redirect chain in the location field.
         totalRes.setURL(lastRes.getURL());
         totalRes.setHTTPMethod(lastRes.getHTTPMethod());
         totalRes.setQueryString(lastRes.getQueryString());
         totalRes.setRequestHeaders(lastRes.getRequestHeaders());
 
         totalRes.setResponseData(lastRes.getResponseData());
         totalRes.setResponseCode(lastRes.getResponseCode());
         totalRes.setSuccessful(lastRes.isSuccessful());
         totalRes.setResponseMessage(lastRes.getResponseMessage());
         totalRes.setDataType(lastRes.getDataType());
         totalRes.setResponseHeaders(lastRes.getResponseHeaders());
         totalRes.setContentType(lastRes.getContentType());
         totalRes.setDataEncoding(lastRes.getDataEncodingNoDefault());
         return totalRes;
     }
 
     /**
      * See <a href="http://tools.ietf.org/html/rfc2616#section-10.3">RFC2616#section-10.3</a>
      * JMeter conforms currently to HttpClient 4.5.2 supported RFC
      * TODO Update when migrating to HttpClient 5.X
      * @param initialMethod the initial HTTP Method
      * @param responseCode String response code
      * @return the new HTTP Method as per RFC
      */
     private String computeMethodForRedirect(String initialMethod, String responseCode) {
         if (!HTTPConstants.HEAD.equalsIgnoreCase(initialMethod)) {
             return HTTPConstants.GET;
         }
         return initialMethod;
     }
 
     /**
      * Follow redirects and download page resources if appropriate. this works,
      * but the container stuff here is what's doing it. followRedirects() is
      * actually doing the work to make sure we have only one container to make
      * this work more naturally, I think this method - sample() - needs to take
      * an HTTPSamplerResult container parameter instead of a
      * boolean:areFollowingRedirect.
      *
      * @param areFollowingRedirect flag whether we are getting a redirect target
      * @param frameDepth Depth of this target in the frame structure. Used only to prevent infinite recursion.
      * @param res sample result to process
      * @return the sample result
      */
     protected HTTPSampleResult resultProcessing(boolean areFollowingRedirect, int frameDepth, HTTPSampleResult res) {
         boolean wasRedirected = false;
         if (!areFollowingRedirect && res.isRedirect()) {
             if(log.isDebugEnabled()) {
                 log.debug("Location set to - " + res.getRedirectLocation());
             }
 
             if (getFollowRedirects()) {
                 res = followRedirects(res, frameDepth);
                 areFollowingRedirect = true;
                 wasRedirected = true;
             }
         }
         
         if (res.isSuccessful() && SampleResult.TEXT.equals(res.getDataType()) && isImageParser() ) {
             if (frameDepth > MAX_FRAME_DEPTH) {
                 HTTPSampleResult errSubResult = new HTTPSampleResult(res);
                 errSubResult.removeSubResults();
                 res.addSubResult(errorResult(new Exception("Maximum frame/iframe nesting depth exceeded."), errSubResult));
             } else {
                 // Only download page resources if we were not redirected.
                 // If we were redirected, the page resources have already been
                 // downloaded for the sample made for the redirected url
                 // otherwise, use null so the container is created if necessary unless
                 // the flag is false, in which case revert to broken 2.1 behaviour
                 // Bug 51939 -  https://bz.apache.org/bugzilla/show_bug.cgi?id=51939
                 if (!wasRedirected) {
                     HTTPSampleResult container = (HTTPSampleResult) (
                             areFollowingRedirect ? res.getParent() : SEPARATE_CONTAINER ? null : res);
                     res = downloadPageResources(res, container, frameDepth);
                 }
             }
         }
         return res;
     }
 
     /**
      * Determine if the HTTP status code is successful or not
      * i.e. in range 200 to 399 inclusive
      *
      * @param code status code to check
      * @return whether in range 200-399 or not
      */
     protected boolean isSuccessCode(int code) {
         return code >= 200 && code <= 399;
     }
 
     protected static String encodeBackSlashes(String value) {
         StringBuilder newValue = new StringBuilder();
         for (int i = 0; i < value.length(); i++) {
             char charAt = value.charAt(i);
             if (charAt == '\\') { // $NON-NLS-1$
                 newValue.append("\\\\"); // $NON-NLS-1$
             } else {
                 newValue.append(charAt);
             }
         }
         return newValue.toString();
     }
 
     /*
      * Method to set files list to be uploaded.
      *
      * @param value
      *   HTTPFileArgs object that stores file list to be uploaded.
      */
     private void setHTTPFileArgs(HTTPFileArgs value) {
         if (value.getHTTPFileArgCount() > 0) {
             setProperty(new TestElementProperty(FILE_ARGS, value));
         } else {
             removeProperty(FILE_ARGS); // no point saving an empty list
         }
     }
 
     /*
      * Method to get files list to be uploaded.
      */
     private HTTPFileArgs getHTTPFileArgs() {
         return (HTTPFileArgs) getProperty(FILE_ARGS).getObjectValue();
     }
 
     /**
      * Get the collection of files as a list.
      * The list is built up from the filename/filefield/mimetype properties,
      * plus any additional entries saved in the FILE_ARGS property.
      *
      * If there are no valid file entries, then an empty list is returned.
      *
      * @return an array of file arguments (never null)
      */
     public HTTPFileArg[] getHTTPFiles() {
         final HTTPFileArgs fileArgs = getHTTPFileArgs();
         return fileArgs == null ? new HTTPFileArg[] {} : fileArgs.asArray();
     }
 
     public int getHTTPFileCount() {
         return getHTTPFiles().length;
     }
     /**
      * Saves the list of files.
      * The first file is saved in the Filename/field/mimetype properties.
      * Any additional files are saved in the FILE_ARGS array.
      *
      * @param files list of files to save
      */
     public void setHTTPFiles(HTTPFileArg[] files) {
         HTTPFileArgs fileArgs = new HTTPFileArgs();
         // Weed out the empty files
         if (files.length > 0) {
             for (HTTPFileArg file : files) {
                 if (file.isNotEmpty()) {
                     fileArgs.addHTTPFileArg(file);
                 }
             }
         }
         setHTTPFileArgs(fileArgs);
     }
 
     public static String[] getValidMethodsAsArray() {
         return METHODLIST.toArray(new String[METHODLIST.size()]);
     }
 
     public static boolean isSecure(String protocol) {
         return HTTPConstants.PROTOCOL_HTTPS.equalsIgnoreCase(protocol);
     }
 
     public static boolean isSecure(URL url) {
         return isSecure(url.getProtocol());
     }
 
     // Implement these here, to avoid re-implementing for sub-classes
     // (previously these were implemented in all TestElements)
     @Override
     public void threadStarted() {
     }
 
     @Override
     public void threadFinished() {
     }
 
     @Override
     public void testIterationStart(LoopIterationEvent event) {
         // NOOP to provide based empty impl and avoid breaking existing implementations
     }
 
     /**
      * Read response from the input stream, converting to MD5 digest if the useMD5 property is set.
      * <p>
      * For the MD5 case, the result byte count is set to the size of the original response.
      * <p>
      * Closes the inputStream
      *
      * @param sampleResult sample to store information about the response into
      * @param in input stream from which to read the response
      * @param length expected input length or zero
      * @return the response or the MD5 of the response
      * @throws IOException if reading the result fails
      */
     public byte[] readResponse(SampleResult sampleResult, InputStream in, long length) throws IOException {
         
         OutputStream w = null;
         try {
             byte[] readBuffer = new byte[8192]; // 8kB is the (max) size to have the latency ('the first packet')
             int bufferSize = 32;// Enough for MD5
 
             MessageDigest md = null;
             boolean knownResponseLength = length > 0;// may also happen if long value > int.max
             if (useMD5()) {
                 try {
                     md = MessageDigest.getInstance("MD5"); //$NON-NLS-1$
                 } catch (NoSuchAlgorithmException e) {
                     log.error("Should not happen - could not find MD5 digest", e);
                 }
             } else {
                 if (!knownResponseLength) {
                     bufferSize = 4 * 1024;
                 } else {
                     bufferSize = (int) Math.min(MAX_BUFFER_SIZE, length);
                 }
             }
             
             
             int bytesReadInBuffer = 0;
             long totalBytes = 0;
             boolean first = true;
             boolean storeInBOS = true;
             while ((bytesReadInBuffer = in.read(readBuffer)) > -1) {
                 if (first) {
                     sampleResult.latencyEnd();
                     first = false;
                     if(md == null) {
                         if(!knownResponseLength) {
                             w = new org.apache.commons.io.output.ByteArrayOutputStream(bufferSize);
                         }
                         else {
                             w = new DirectAccessByteArrayOutputStream(bufferSize);
                         }
                     }
                 }
                 
                 if (md == null) {
                     if(storeInBOS) {
                         if(totalBytes+bytesReadInBuffer<=MAX_BYTES_TO_STORE_PER_REQUEST) {
                             w.write(readBuffer, 0, bytesReadInBuffer);
                         } else {
                             w.write(readBuffer, 0, (int)(MAX_BYTES_TO_STORE_PER_REQUEST-totalBytes));
                             storeInBOS = false;
                         }
                     }
                 } else {
                     md.update(readBuffer, 0, bytesReadInBuffer);
                 }
                 totalBytes += bytesReadInBuffer;
             }
             
             if (first) { // Bug 46838 - if there was no data, still need to set latency
                 sampleResult.latencyEnd();
                 return new byte[0];
             }
             
             if (md == null) {
                 return toByteArray(w);
             } else {
                 byte[] md5Result = md.digest();
                 sampleResult.setBytes(totalBytes);
                 return JOrphanUtils.baToHexBytes(md5Result);                
             }
             
         } finally {
             IOUtils.closeQuietly(in);
             IOUtils.closeQuietly(w);
         }
     }
 
     /**
      * Optimized method to get byte array from {@link OutputStream}
      * @param w {@link OutputStream}
      * @return byte array
      */
     private byte[] toByteArray(OutputStream w) {
         if(w instanceof DirectAccessByteArrayOutputStream) {
             return ((DirectAccessByteArrayOutputStream) w).toByteArray();
         }
         
         if(w instanceof org.apache.commons.io.output.ByteArrayOutputStream) {
             return ((org.apache.commons.io.output.ByteArrayOutputStream) w).toByteArray();
         }
         
         log.warn("Unknown stream type " + w.getClass());
         
         return null;
     }
 
     /**
      * JMeter 2.3.1 and earlier only had fields for one file on the GUI:
      * <ul>
      *   <li>FILE_NAME</li>
      *   <li>FILE_FIELD</li>
      *   <li>MIMETYPE</li>
      * </ul>
      * These were stored in their own individual properties.
      * <p>
      * Version 2.3.3 introduced a list of files, each with their own path, name and mimetype.
      * <p>
      * In order to maintain backwards compatibility of test plans, the 3 original properties
      * were retained; additional file entries are stored in an HTTPFileArgs class.
      * The HTTPFileArgs class was only present if there is more than 1 file; this means that
      * such test plans are backward compatible.
      * <p>
      * Versions after 2.3.4 dispense with the original set of 3 properties.
      * Test plans that use them are converted to use a single HTTPFileArgs list.
      *
      * @see HTTPSamplerBaseConverter
      */
     void mergeFileProperties() {
         JMeterProperty fileName = getProperty(FILE_NAME);
         JMeterProperty paramName = getProperty(FILE_FIELD);
         JMeterProperty mimeType = getProperty(MIMETYPE);
         HTTPFileArg oldStyleFile = new HTTPFileArg(fileName, paramName, mimeType);
 
         HTTPFileArgs fileArgs = getHTTPFileArgs();
 
         HTTPFileArgs allFileArgs = new HTTPFileArgs();
         if (oldStyleFile.isNotEmpty()) { // OK, we have an old-style file definition
             allFileArgs.addHTTPFileArg(oldStyleFile); // save it
             // Now deal with any additional file arguments
             if (fileArgs != null) {
                 HTTPFileArg[] infiles = fileArgs.asArray();
                 for (HTTPFileArg infile : infiles) {
                     allFileArgs.addHTTPFileArg(infile);
                 }
             }
         } else {
             if (fileArgs != null) { // for new test plans that don't have FILE/PARAM/MIME properties
                 allFileArgs = fileArgs;
             }
         }
         // Updated the property lists
         setHTTPFileArgs(allFileArgs);
         removeProperty(FILE_FIELD);
         removeProperty(FILE_NAME);
         removeProperty(MIMETYPE);
     }
 
     /**
      * set IP source to use - does not apply to Java HTTP implementation currently
      *
      * @param value IP source to use
      */
     public void setIpSource(String value) {
         setProperty(IP_SOURCE, value, "");
     }
 
     /**
      * get IP source to use - does not apply to Java HTTP implementation currently
      *
diff --git a/src/protocol/http/org/apache/jmeter/protocol/http/sampler/SoapSampler.java b/src/protocol/http/org/apache/jmeter/protocol/http/sampler/SoapSampler.java
index bead9c0b9..db808c196 100644
--- a/src/protocol/http/org/apache/jmeter/protocol/http/sampler/SoapSampler.java
+++ b/src/protocol/http/org/apache/jmeter/protocol/http/sampler/SoapSampler.java
@@ -1,375 +1,374 @@
 /*
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
  */
 
 package org.apache.jmeter.protocol.http.sampler;
 
 import java.io.BufferedInputStream;
 import java.io.ByteArrayOutputStream;
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
 import java.io.UnsupportedEncodingException;
 import java.net.MalformedURLException;
 import java.net.URL;
 import java.util.zip.GZIPInputStream;
 
 import org.apache.commons.httpclient.HttpClient;
 import org.apache.commons.httpclient.methods.PostMethod;
 import org.apache.commons.httpclient.methods.RequestEntity;
 import org.apache.commons.io.IOUtils;
 import org.apache.jmeter.protocol.http.control.CacheManager;
 import org.apache.jmeter.protocol.http.control.Header;
 import org.apache.jmeter.protocol.http.control.HeaderManager;
 import org.apache.jmeter.protocol.http.util.HTTPConstants;
 import org.apache.jmeter.samplers.Interruptible;
 import org.apache.jmeter.util.JMeterUtils;
 import org.apache.jorphan.logging.LoggingManager;
 import org.apache.jorphan.util.JOrphanUtils;
 import org.apache.log.Logger;
 
 /**
  * Commons HTTPClient based soap sampler
  * @deprecated since 3.0, will be removed in next version
  */
 @Deprecated
 public class SoapSampler extends HTTPSampler2 implements Interruptible { // Implemented by parent class
     private static final Logger log = LoggingManager.getLoggerForClass();
 
     private static final long serialVersionUID = 240L;
 
     public static final String XML_DATA = "HTTPSamper.xml_data"; //$NON-NLS-1$
 
     public static final String URL_DATA = "SoapSampler.URL_DATA"; //$NON-NLS-1$
 
     public static final String SOAP_ACTION = "SoapSampler.SOAP_ACTION"; //$NON-NLS-1$
 
     public static final String SEND_SOAP_ACTION = "SoapSampler.SEND_SOAP_ACTION"; //$NON-NLS-1$
 
     public static final String XML_DATA_FILE = "SoapSampler.xml_data_file"; //$NON-NLS-1$
 
     private static final String DOUBLE_QUOTE = "\""; //$NON-NLS-1$
 
     private static final String SOAPACTION = "SOAPAction"; //$NON-NLS-1$
 
     private static final String ENCODING = "utf-8"; //$NON-NLS-1$ TODO should this be variable?
 
     private static final String DEFAULT_CONTENT_TYPE = "text/xml"; //$NON-NLS-1$
 
     public void setXmlData(String data) {
         setProperty(XML_DATA, data);
     }
 
     public String getXmlData() {
         return getPropertyAsString(XML_DATA);
     }
 
     /**
      * it's kinda obvious, but we state it anyways. Set the xml file with a
      * string path.
      *
      * @param filename path to the xml file
      */
     public void setXmlFile(String filename) {
         setProperty(XML_DATA_FILE, filename);
     }
 
     /**
      * Get the file location of the xml file.
      *
      * @return String file path.
      */
     public String getXmlFile() {
         return getPropertyAsString(XML_DATA_FILE);
     }
 
     public String getURLData() {
         return getPropertyAsString(URL_DATA);
     }
 
     public void setURLData(String url) {
         setProperty(URL_DATA, url);
     }
 
     public String getSOAPAction() {
         return getPropertyAsString(SOAP_ACTION);
     }
 
     public String getSOAPActionQuoted() {
         String action = getSOAPAction();
         StringBuilder sb = new StringBuilder(action.length()+2);
         sb.append(DOUBLE_QUOTE);
         sb.append(action);
         sb.append(DOUBLE_QUOTE);
         return sb.toString();
     }
 
     public void setSOAPAction(String action) {
         setProperty(SOAP_ACTION, action);
     }
 
     public boolean getSendSOAPAction() {
         return getPropertyAsBoolean(SEND_SOAP_ACTION);
     }
 
     public void setSendSOAPAction(boolean action) {
         setProperty(SEND_SOAP_ACTION, String.valueOf(action));
     }
 
     protected int setPostHeaders(PostMethod post) {
         int length=0;// Take length from file
         if (getHeaderManager() != null) {
             // headerManager was set, so let's set the connection
             // to use it.
             HeaderManager mngr = getHeaderManager();
             int headerSize = mngr.size();
             for (int idx = 0; idx < headerSize; idx++) {
                 Header hd = mngr.getHeader(idx);
                 if (HTTPConstants.HEADER_CONTENT_LENGTH.equalsIgnoreCase(hd.getName())) {// Use this to override file length
                     length = Integer.parseInt(hd.getValue());
                     break;
                 }
                 // All the other headers are set up by HTTPSampler2.setupConnection()
             }
         } else {
             // otherwise we use "text/xml" as the default
             post.setRequestHeader(HTTPConstants.HEADER_CONTENT_TYPE, DEFAULT_CONTENT_TYPE); //$NON-NLS-1$
         }
         if (getSendSOAPAction()) {
             post.setRequestHeader(SOAPACTION, getSOAPActionQuoted());
         }
         return length;
     }
 
     /**
      * Send POST data from <code>Entry</code> to the open connection.
      *
      * @param post POST request to send
      * @param length the length of the content
      */
     private String sendPostData(PostMethod post, final int length) {
         // Buffer to hold the post body, except file content
         StringBuilder postedBody = new StringBuilder(1000);
         final String xmlFile = getXmlFile();
         if (xmlFile != null && xmlFile.length() > 0) {
             File xmlFileAsFile = new File(xmlFile);
             if(!(xmlFileAsFile.exists() && xmlFileAsFile.canRead())) {
                 throw new IllegalArgumentException(JMeterUtils.getResString("soap_sampler_file_invalid") // $NON-NLS-1$
                         + xmlFileAsFile.getAbsolutePath());
             }
             // We just add placeholder text for file content
             postedBody.append("Filename: ").append(xmlFile).append("\n");
             postedBody.append("<actual file content, not shown here>");
             post.setRequestEntity(new RequestEntity() {
                 @Override
                 public boolean isRepeatable() {
                     return true;
                 }
 
                 @Override
                 public void writeRequest(OutputStream out) throws IOException {
                     InputStream in = null;
                     try{
                         in = new BufferedInputStream(new FileInputStream(xmlFile));
                         IOUtils.copy(in, out);
                         out.flush();
                     } finally {
                         IOUtils.closeQuietly(in);
                     }
                 }
 
                 @Override
                 public long getContentLength() {
                     switch(length){
                         case -1:
                             return -1;
                         case 0: // No header provided
                             return new File(xmlFile).length();
                         default:
                             return length;
                         }
                 }
 
                 @Override
                 public String getContentType() {
                     // TODO do we need to add a charset for the file contents?
                     return DEFAULT_CONTENT_TYPE; // $NON-NLS-1$
                 }
             });
         } else {
             postedBody.append(getXmlData());
             post.setRequestEntity(new RequestEntity() {
                 @Override
                 public boolean isRepeatable() {
                     return true;
                 }
 
                 @Override
                 public void writeRequest(OutputStream out) throws IOException {
                     // charset must agree with content-type below
                     IOUtils.write(getXmlData(), out, ENCODING); // $NON-NLS-1$
                     out.flush();
                 }
 
                 @Override
                 public long getContentLength() {
                     try {
                         return getXmlData().getBytes(ENCODING).length; // so we don't generate chunked encoding
                     } catch (UnsupportedEncodingException e) {
                         log.warn(e.getLocalizedMessage());
                         return -1; // will use chunked encoding
                     }
                 }
 
                 @Override
                 public String getContentType() {
                     return DEFAULT_CONTENT_TYPE+"; charset="+ENCODING; // $NON-NLS-1$
                 }
             });
         }
         return postedBody.toString();
     }
 
     @Override
     protected HTTPSampleResult sample(URL url, String method, boolean areFollowingRedirect, int frameDepth) {
 
         String urlStr = url.toString();
 
         log.debug("Start : sample " + urlStr);
 
         PostMethod httpMethod;
         httpMethod = new PostMethod(urlStr);
 
         HTTPSampleResult res = new HTTPSampleResult();
-        res.setMonitor(false);
 
         res.setSampleLabel(urlStr); // May be replaced later
         res.setHTTPMethod(HTTPConstants.POST);
         res.setURL(url);
         res.sampleStart(); // Count the retries as well in the time
         HttpClient client = null;
         InputStream instream = null;
         try {
             int content_len = setPostHeaders(httpMethod);
             client = setupConnection(url, httpMethod, res);
             setSavedClient(client);
 
             res.setQueryString(sendPostData(httpMethod,content_len));
             int statusCode = client.executeMethod(httpMethod);
             // Some headers are set by executeMethod()
             res.setRequestHeaders(getConnectionHeaders(httpMethod));
 
             // Request sent. Now get the response:
             instream = httpMethod.getResponseBodyAsStream();
 
             if (instream != null) {// will be null for HEAD
 
                 org.apache.commons.httpclient.Header responseHeader = httpMethod.getResponseHeader(HTTPConstants.HEADER_CONTENT_ENCODING);
                 if (responseHeader != null && HTTPConstants.ENCODING_GZIP.equals(responseHeader.getValue())) {
                     instream = new GZIPInputStream(instream);
                 }
 
                 //int contentLength = httpMethod.getResponseContentLength();Not visible ...
                 //TODO size ouststream according to actual content length
                 ByteArrayOutputStream outstream = new ByteArrayOutputStream(4 * 1024);
                 //contentLength > 0 ? contentLength : DEFAULT_INITIAL_BUFFER_SIZE);
                 byte[] buffer = new byte[4096];
                 int len;
                 boolean first = true;// first response
                 while ((len = instream.read(buffer)) > 0) {
                     if (first) { // save the latency
                         res.latencyEnd();
                         first = false;
                     }
                     outstream.write(buffer, 0, len);
                 }
 
                 res.setResponseData(outstream.toByteArray());
                 outstream.close();
 
             }
 
             res.sampleEnd();
             // Done with the sampling proper.
 
             // Now collect the results into the HTTPSampleResult:
 
             res.setSampleLabel(httpMethod.getURI().toString());
             // Pick up Actual path (after redirects)
 
             res.setResponseCode(Integer.toString(statusCode));
             res.setSuccessful(isSuccessCode(statusCode));
 
             res.setResponseMessage(httpMethod.getStatusText());
 
             // Set up the defaults (may be overridden below)
             res.setDataEncoding(ENCODING);
             res.setContentType(DEFAULT_CONTENT_TYPE);
             String ct = null;
             org.apache.commons.httpclient.Header h
                     = httpMethod.getResponseHeader(HTTPConstants.HEADER_CONTENT_TYPE);
             if (h != null)// Can be missing, e.g. on redirect
             {
                 ct = h.getValue();
                 res.setContentType(ct);// e.g. text/html; charset=ISO-8859-1
                 res.setEncodingAndType(ct);
             }
 
             res.setResponseHeaders(getResponseHeaders(httpMethod));
             if (res.isRedirect()) {
                 res.setRedirectLocation(httpMethod.getResponseHeader(HTTPConstants.HEADER_LOCATION).getValue());
             }
 
             // If we redirected automatically, the URL may have changed
             if (getAutoRedirects()) {
                 res.setURL(new URL(httpMethod.getURI().toString()));
             }
 
             // Store any cookies received in the cookie manager:
             saveConnectionCookies(httpMethod, res.getURL(), getCookieManager());
 
             // Save cache information
             final CacheManager cacheManager = getCacheManager();
             if (cacheManager != null){
                 cacheManager.saveDetails(httpMethod, res);
             }
 
             // Follow redirects and download page resources if appropriate:
             res = resultProcessing(areFollowingRedirect, frameDepth, res);
 
             log.debug("End : sample");
             httpMethod.releaseConnection();
             return res;
         } catch (IllegalArgumentException | IOException e)// e.g. some kinds of invalid URL
         {
             res.sampleEnd();
             errorResult(e, res);
             return res;
         } finally {
             JOrphanUtils.closeQuietly(instream);
             setSavedClient(null);
             httpMethod.releaseConnection();
         }
     }
 
     @Override
     public URL getUrl() throws MalformedURLException {
         return new URL(getURLData());
     }
 }
diff --git a/xdocs/changes.xml b/xdocs/changes.xml
index 3718865a9..dff09aac6 100644
--- a/xdocs/changes.xml
+++ b/xdocs/changes.xml
@@ -1,270 +1,270 @@
 <?xml version="1.0"?>
 <!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at
 
        http://www.apache.org/licenses/LICENSE-2.0
 
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
 -->
 <!DOCTYPE document
 [
 <!ENTITY hellip   "&#x02026;" >
 <!ENTITY rarr     "&#x02192;" >
 <!ENTITY vellip   "&#x022EE;" >
 ]>
 <document>
 <properties>
     <author email="dev AT jmeter.apache.org">JMeter developers</author>
     <title>Changes</title>
 </properties>
 <body>
 <section name="Changes">
 <style type="text/css"><!--
 h2 { color: #960000; }
 h3 { color: #960000; }
 --></style>
 <note>
 <b>This page details the changes made in the current version only.</b>
 <br></br>
 Earlier changes are detailed in the <a href="changes_history.html">History of Previous Changes</a>.
 </note>
 
 
 <!--  =================== 3.2 =================== -->
 
 <h1>Version 3.2</h1>
 <p>
 Summary
 </p>
 <ul>
 <li><a href="#New and Noteworthy">New and Noteworthy</a></li>
 <li><a href="#Incompatible changes">Incompatible changes</a></li>
 <li><a href="#Bug fixes">Bug fixes</a></li>
 <li><a href="#Improvements">Improvements</a></li>
 <li><a href="#Non-functional changes">Non-functional changes</a></li>
 <li><a href="#Known problems and workarounds">Known problems and workarounds</a></li>
 <li><a href="#Thanks">Thanks</a></li>
 
 </ul>
 
 <ch_section>New and Noteworthy</ch_section>
 
 <ch_section>IMPORTANT CHANGE</ch_section>
 <p>
 Fill in some detail.
 </p>
 
 <ch_title>Core improvements</ch_title>
 <ul>
 <li>Fill in improvements</li>
 </ul>
 
 <ch_title>Documentation improvements</ch_title>
 <ul>
 <li>Documentation review and improvements for easier startup</li>
 <li>New <a href="usermanual/properties_reference.html">properties reference</a> documentation section</li>
 </ul>
 <!-- <ch_category>Sample category</ch_category> -->
 <!-- <ch_title>Sample title</ch_title> -->
 <!-- <figure width="846" height="613" image="changes/3.0/view_results_tree_search_feature.png"></figure> -->
 
 <!-- =================== Incompatible changes =================== -->
 
 <ch_section>Incompatible changes</ch_section>
 
 <ul>
-    <li>...</li>
+    <li>JMeter requires now at least a JAVA 8 version to run.</li>
 </ul>
 
 <h3>Deprecated and removed elements or functions</h3>
 <p><note>These elements do not appear anymore in the menu, if you need them modify <code>not_in_menu</code> property. The JMeter team advises not to use them anymore and migrate to their replacement.</note></p>
 <ul>
-    <li>...</li>
+    <li><bug>60423</bug>Drop Monitor Results listener </li>
 </ul>
 
 <!-- =================== Improvements =================== -->
 
 <ch_section>Improvements</ch_section>
 
 <h3>HTTP Samplers and Test Script Recorder</h3>
 <ul>
     <li><bug>59934</bug>Fix race-conditions in CssParser. Based on a patch by Jerome Loisel (loisel.jerome at gmail.com)</li>
 </ul>
 
 <h3>Other samplers</h3>
 <ul>
 </ul>
 
 <h3>Controllers</h3>
 <ul>
 </ul>
 
 <h3>Listeners</h3>
 <ul>
     <li><bug>60144</bug>View Results Tree : Add a more up to date Browser Renderer to replace old Render</li>
 </ul>
 
 <h3>Timers, Assertions, Config, Pre- &amp; Post-Processors</h3>
 <ul>
 </ul>
 
 <h3>Functions</h3>
 <ul>
 </ul>
 
 <h3>I18N</h3>
 <ul>
 </ul>
 
 <h3>Report / Dashboard</h3>
 <ul>
 </ul>
 
 <h3>General</h3>
 <ul>
   <li><bug>60415</bug>Drop support for Java 7.</li>
 </ul>
 
 <ch_section>Non-functional changes</ch_section>
 <ul>
     <li>Updated to xxx-1.1 (from 0.2)</li>
 </ul>
 
  <!-- =================== Bug fixes =================== -->
 
 <ch_section>Bug fixes</ch_section>
 
 <h3>HTTP Samplers and Test Script Recorder</h3>
 <ul>
  </ul>
 
 <h3>Other Samplers</h3>
 <ul>
 </ul>
 
 <h3>Controllers</h3>
 <ul>
 </ul>
 
 <h3>Listeners</h3>
 <ul>
 </ul>
 
 <h3>Timers, Assertions, Config, Pre- &amp; Post-Processors</h3>
 <ul>
 </ul>
 
 <h3>Functions</h3>
 <ul>
 </ul>
 
 <h3>I18N</h3>
 <ul>
 </ul>
 
 <h3>General</h3>
 <ul>
 </ul>
 
  <!--  =================== Thanks =================== -->
 
 <ch_section>Thanks</ch_section>
 <p>We thank all contributors mentioned in bug and improvement sections above:
 </p>
 <ul>
 <li>Jerome Loisel (loisel.jerome at gmail.com)</li>
 </ul>
 <p>We also thank bug reporters who helped us improve JMeter. <br/>
 For this release we want to give special thanks to the following reporters for the clear reports and tests made after our fixes:</p>
 <ul>
 </ul>
 <p>
 Apologies if we have omitted anyone else.
  </p>
  <!--  =================== Known bugs or issues related to JAVA Bugs =================== -->
 
 <ch_section>Known problems and workarounds</ch_section>
 
 <ul>
 <li>The Once Only controller behaves correctly under a Thread Group or Loop Controller,
 but otherwise its behaviour is not consistent (or clearly specified).</li>
 
 <li>
 The numbers that appear to the left of the green box are the number of active threads / total number of threads,
 the total number of threads only applies to a locally run test, otherwise it will show <code>0</code> (see <bugzilla>55510</bugzilla>).
 </li>
 
 <li>
 Note that there is a <a href="http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6396599 ">bug in Java</a>
 on some Linux systems that manifests itself as the following error when running the test cases or JMeter itself:
 <source>
  [java] WARNING: Couldn't flush user prefs:
  java.util.prefs.BackingStoreException:
  java.lang.IllegalArgumentException: Not supported: indent-number
 </source>
 This does not affect JMeter operation. This issue is fixed since Java 7b05.
 </li>
 
 <li>
 Note that under some windows systems you may have this WARNING:
 <source>
 java.util.prefs.WindowsPreferences
 WARNING: Could not open/create prefs root node Software\JavaSoft\Prefs at root 0
 x80000002. Windows RegCreateKeyEx(&hellip;) returned error code 5.
 </source>
 The fix is to run JMeter as Administrator, it will create the registry key for you, then you can restart JMeter as a normal user and you won't have the warning anymore.
 </li>
 
 <li>
 With Oracle Java 7 and Mac Book Pro Retina Display, the JMeter GUI may look blurry.
 This is a known Java bug, see Bug <a href="http://bugs.java.com/bugdatabase/view_bug.do?bug_id=8000629" >JDK-8000629</a>.
 A workaround is to use a Java 7 update 40 runtime which fixes this issue.
 </li>
 
 <li>
 You may encounter the following error:
 <source>java.security.cert.CertificateException: Certificates does not conform to algorithm constraints</source>
  if you run a HTTPS request on a web site with a SSL certificate (itself or one of SSL certificates in its chain of trust) with a signature
  algorithm using MD2 (like md2WithRSAEncryption) or with a SSL certificate with a size lower than 1024 bits.
 This error is related to increased security in Java 7 version u16 (MD2) and version u40 (Certificate size lower than 1024 bits), and Java 8 too.
 <br></br>
 To allow you to perform your HTTPS request, you can downgrade the security of your Java installation by editing
 the Java <code>jdk.certpath.disabledAlgorithms</code> property. Remove the MD2 value or the constraint on size, depending on your case.
 <br></br>
 This property is in this file:
 <source>JAVA_HOME/jre/lib/security/java.security</source>
 See  <bugzilla>56357</bugzilla> for details.
 </li>
 
 <li>
 Under Mac OSX Aggregate Graph will show wrong values due to mirroring effect on numbers.
 This is due to a known Java bug, see Bug <a href="https://bugs.openjdk.java.net/browse/JDK-8065373" >JDK-8065373</a>
 The fix is to use JDK7_u79, JDK8_u45 or later.
 </li>
 
 <li>
 View Results Tree may fail to display some HTML code under HTML renderer, see <bugzilla>54586</bugzilla>.
 This is due to a known Java bug which fails to parse "<code>px</code>" units in row/col attributes.
 See Bug <a href="https://bugs.openjdk.java.net/browse/JDK-8031109" >JDK-8031109</a>
 The fix is to use JDK9 b65 or later.
 </li>
 
 <li>
 JTable selection with keyboard (<keycombo><keysym>SHIFT</keysym><keysym>up/down</keysym></keycombo>) is totally unusable with JAVA 7 on Mac OSX.
 This is due to a known Java bug <a href="https://bugs.openjdk.java.net/browse/JDK-8025126" >JDK-8025126</a>
 The fix is to use JDK 8 b132 or later.
 </li>
 </ul>
 
 </section>
 </body>
 </document>
diff --git a/xdocs/usermanual/component_reference.xml b/xdocs/usermanual/component_reference.xml
index fa7b23e00..a601c5a02 100644
--- a/xdocs/usermanual/component_reference.xml
+++ b/xdocs/usermanual/component_reference.xml
@@ -1,1326 +1,1325 @@
 <?xml version="1.0"?>
 <!-- 
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with
  * this work for additional information regarding copyright ownership.
  * The ASF licenses this file to You under the Apache License, Version 2.0
  * (the "License"); you may not use this file except in compliance with
  * the License.  You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  * 
  -->
 <!DOCTYPE document
 [
 <!ENTITY sect-num '19'>
 <!ENTITY hellip   "&#x02026;" >
 <!ENTITY le       "&#x02264;" >
 <!ENTITY ge       "&#x02265;" >
 ]>
 <document index="yes" index-level-2="yes" index-numbers="no" colbreak="&sect-num;.4"
   prev="boss.html" next="properties_reference.html" id="$Id$">
 
 <properties>
   <title>User's Manual: Component Reference</title>
 </properties>
 
 <body>
 
 <!--
     Because this is an XML document, all tags must be properly closed, including ones
     which are passed unchanged into the HTML output, e.g. <br/>, not just <br>.
 
     Unfortunately Java does not currently allow for this - it outputs the trailing > -
     which messes up the Help display. 
     To avoid these artifacts, use the form <br></br>, which Java does seem to handle OK.
 
  -->
 <section name="&sect-num; Introduction" anchor="introduction">
 <description>
 <p>
 
 </p>
  <note>
  Several test elements use JMeter properties to control their behaviour.
  These properties are normally resolved when the class is loaded.
  This generally occurs before the test plan starts, so it's not possible to change the settings by using the <code>__setProperty()</code> function.
 </note>
 <p>
 </p>
 </description>
 </section>
  
 <section name="&sect-num;.1 Samplers" anchor="samplers">
 <description>
     <p>
     Samplers perform the actual work of JMeter.
     Each sampler (except <complink name="Test Action" />) generates one or more sample results.
     The sample results have various attributes (success/fail, elapsed time, data size etc.) and can be viewed in the various listeners.
     </p>
 </description>
 <component name="FTP Request" index="&sect-num;.1.1" width="911" height="274" screenshot="ftptest/ftp-request.png">
 <description>
 This controller lets you send an FTP "retrieve file" or "upload file" request to an FTP server.
 If you are going to send multiple requests to the same FTP server, consider
 using a <complink name="FTP Request Defaults"/> Configuration
 Element so you do not have to enter the same information for each FTP Request Generative
 Controller. When downloading a file, it can be stored on disk (Local File) or in the Response Data, or both.
 <p>
 Latency is set to the time it takes to login.
 </p>
 </description>
 <properties>
         <property name="Name" required="No">Descriptive name for this sampler that is shown in the tree.</property>
         <property name="Server Name or IP" required="Yes">Domain name or IP address of the FTP server.</property>
         <property name="Port" required="No">Port to use. If this is <code>&gt;0</code>, then this specific port is used,
            otherwise JMeter uses the default FTP port.</property>
         <property name="Remote File:" required="Yes">File to retrieve or name of destination file to upload.</property>
         <property name="Local File:" required="Yes, if uploading (*)">File to upload, or destination for downloads (defaults to remote file name).</property>
         <property name="Local File Contents:" required="Yes, if uploading (*)">Provides the contents for the upload, overrides the Local File property.</property>
         <property name="get(RETR) / put(STOR)" required="Yes">Whether to retrieve or upload a file.</property>
         <property name="Use Binary mode?" required="Yes">Check this to use Binary mode (default ASCII)</property>
         <property name="Save File in Response?" required="Yes, if downloading">
         Whether to store contents of retrieved file in response data.
         If the mode is ASCII, then the contents will be visible in the <complink name="View Results Tree"/>.
         </property>
         <property name="Username" required="Usually">FTP account username.</property>
         <property name="Password" required="Usually">FTP account password. N.B. This will be visible in the test plan.</property>
 </properties>
 <links>
         <link href="test_plan.html#assertions">Assertions</link>
         <complink name="FTP Request Defaults"/>
         <link href="build-ftp-test-plan.html">Building an FTP Test Plan</link>
 </links>
 
 </component>
 
 <component name="HTTP Request" index="&sect-num;.1.2" width="953" height="611" screenshot="http-request.png">
 
 <description>
         <p>This sampler lets you send an HTTP/HTTPS request to a web server.  It
         also lets you control whether or not JMeter parses HTML files for images and
         other embedded resources and sends HTTP requests to retrieve them.
         The following types of embedded resource are retrieved:</p>
         <ul>
         <li>images</li>
         <li>applets</li>
         <li>stylesheets (CSS) and resources referenced from those files</li>
         <li>external scripts</li>
         <li>frames, iframes</li>
         <li>background images (body, table, TD, TR)</li>
         <li>background sound</li>
         </ul>
         <p>
         The default parser is <code>org.apache.jmeter.protocol.http.parser.LagartoBasedHtmlParser</code>.
         This can be changed by using the property "<code>htmlparser.className</code>" - see <code>jmeter.properties</code> for details.
         </p>
         <p>If you are going to send multiple requests to the same web server, consider
         using an <complink name="HTTP Request Defaults"/>
         Configuration Element so you do not have to enter the same information for each
         HTTP Request.</p>
 
         <p>Or, instead of manually adding HTTP Requests, you may want to use
         JMeter's <complink name="HTTP(S) Test Script Recorder"/> to create
         them.  This can save you time if you have a lot of HTTP requests or requests with many
         parameters.</p>
 
         <p><b>There are two different test elements used to define the samplers:</b></p>
         <dl>
         <dt>AJP/1.3 Sampler</dt><dd>uses the Tomcat mod_jk protocol (allows testing of Tomcat in AJP mode without needing Apache httpd)
         The AJP Sampler does not support multiple file upload; only the first file will be used.
         </dd>
         <dt>HTTP Request</dt><dd>this has an implementation drop-down box, which selects the HTTP protocol implementation to be used:
           <dl>
             <dt><code>Java</code></dt><dd>uses the HTTP implementation provided by the JVM.
             This has some limitations in comparison with the HttpClient implementations - see below.</dd>
             <dt><code>HTTPClient3.1</code></dt><dd>(DEPRECATED SINCE 3.0) uses Apache Commons HttpClient 3.1.
             This is no longer being developed, and support for this will be dropped in a future JMeter release.</dd>
             <dt><code>HTTPClient4</code></dt><dd>uses Apache HttpComponents HttpClient 4.x.</dd>
             <dt>Blank Value</dt><dd>does not set implementation on HTTP Samplers, so relies on HTTP Request Defaults if present or on <code>jmeter.httpsampler</code> property defined in <code>jmeter.properties</code></dd>
           </dl>
         </dd>
         </dl>
          <p>The Java HTTP implementation has some limitations:</p>
          <ul>
          <li>There is no control over how connections are re-used.
          When a connection is released by JMeter, it may or may not be re-used by the same thread.</li>
          <li>The API is best suited to single-threaded usage - various settings
          are defined via system properties, and therefore apply to all connections.</li>
          <li>There is a bug in the handling of HTTPS via a Proxy (the <code>CONNECT</code> is not handled correctly).
          See Java bugs 6226610 and 6208335.
          </li>
          <li>It does not support virtual hosts.</li>
          <li>It supports only the following methods: <code>GET</code>, <code>POST</code>, <code>HEAD</code>, <code>OPTIONS</code>, <code>PUT</code>, <code>DELETE</code> and <code>TRACE</code></li>
          <li>It does not support client based certificate testing with Keystore Config.</li>
          </ul>
          <note>Note: the <code>FILE</code> protocol is intended for testing purposes only.
          It is handled by the same code regardless of which HTTP Sampler is used.</note>
         <p>If the request requires server or proxy login authorization (i.e. where a browser would create a pop-up dialog box),
          you will also have to add an <complink name="HTTP Authorization Manager"/> Configuration Element.
          For normal logins (i.e. where the user enters login information in a form), you will need to work out what the form submit button does,
          and create an HTTP request with the appropriate method (usually <code>POST</code>) 
          and the appropriate parameters from the form definition.
          If the page uses HTTP, you can use the JMeter Proxy to capture the login sequence.
         </p>
         <p>
         A separate SSL context is used for each thread.
         If you want to use a single SSL context (not the standard behaviour of browsers), set the JMeter property:</p>
 <source>
 https.sessioncontext.shared=true
 </source>
         By default, the SSL context is retained for the duration of the test.
         The SSL session can be optionally reset for each test iteration.
         To enable this, set the JMeter property:
 <source>
 https.use.cached.ssl.context=false
 </source>
         <note>
          Note: this does not apply to the Java HTTP implementation.
         </note>
         JMeter defaults to the SSL protocol level TLS.
         If the server needs a different level, e.g. <code>SSLv3</code>, change the JMeter property, for example:
 <source>
 https.default.protocol=SSLv3
 </source>
         <p>
         JMeter also allows one to enable additional protocols, by changing the property <code>https.socket.protocols</code>.
         </p>
         <p>If the request uses cookies, then you will also need an
         <complink name="HTTP Cookie Manager"/>.  You can
         add either of these elements to the Thread Group or the HTTP Request. If you have
         more than one HTTP Request that needs authorizations or cookies, then add the
         elements to the Thread Group. That way, all HTTP Request controllers will share the
         same Authorization Manager and Cookie Manager elements.</p>
 
         <p>If the request uses a technique called "URL Rewriting" to maintain sessions,
         then see section
         <a href="build-adv-web-test-plan.html#session_url_rewriting">6.1 Handling User Sessions With URL Rewriting</a>
         for additional configuration steps.</p>
 </description>
 <figure width="951" height="284" image="http-request-advanced-tab.png">HTTP Request Advanced config fields</figure>
 
 <properties>
         <property name="Name" required="No">Descriptive name for this sampler that is shown in the tree.</property>
         <property name="Server" required="Yes, unless provided by HTTP Request Defaults">
             Domain name or IP address of the web server, e.g. <code>www.example.com</code>. [Do not include the <code>http://</code> prefix.]
             Note: If the "<code>Host</code>" header is defined in a Header Manager, then this will be used
             as the virtual host name.
         </property>
         <property name="Port" required="No">Port the web server is listening to. Default: <code>80</code></property>
         <property name="Connect Timeout" required="No">Connection Timeout. Number of milliseconds to wait for a connection to open.</property>
         <property name="Response Timeout" required="No">Response Timeout. Number of milliseconds to wait for a response.
         Note that this applies to each wait for a response. If the server response is sent in several chunks, the overall
         elapsed time may be longer than the timeout.
         <p>A <complink name="Duration Assertion"/> can be used to detect responses that take too long to complete.</p>
         </property>
         <property name="Server (proxy)" required="No">Hostname or IP address of a proxy server to perform request. [Do not include the <code>http://</code> prefix.]</property>
         <property name="Port" required="No, unless proxy hostname is specified">Port the proxy server is listening to.</property>
         <property name="Username" required="No">(Optional) username for proxy server.</property>
         <property name="Password" required="No">(Optional) password for proxy server. (N.B. this is stored unencrypted in the test plan)</property>
         <property name="Implementation" required="No"><code>Java</code>, <code>HttpClient3.1 (DEPRECATED SINCE 3.0)</code>, <code>HttpClient4</code>.
         If not specified (and not defined by HTTP Request Defaults), the default depends on the value of the JMeter property
         <code>jmeter.httpsampler</code>, failing that, the HttpClient4 implementation is used.</property>
         <property name="Protocol" required="No"><code>HTTP</code>, <code>HTTPS</code> or <code>FILE</code>. Default: <code>HTTP</code></property>
         <property name="Method" required="Yes"><code>GET</code>, <code>POST</code>, <code>HEAD</code>, <code>TRACE</code>,
           <code>OPTIONS</code>, <code>PUT</code>, <code>DELETE</code>, <code>PATCH</code> (not supported for
           <code>JAVA</code> implementation). With <code>HttpClient4</code>, the following methods related to WebDav are
           also allowed: <code>COPY</code>, <code>LOCK</code>, <code>MKCOL</code>, <code>MOVE</code>,
           <code>PROPFIND</code>, <code>PROPPATCH</code>, <code>UNLOCK</code>, <code>REPORT</code>, <code>MKCALENDAR</code>,
           <code>SEARCH</code>.
           <p>More methods can be pre-defined for the HttpClient4 by using the JMeter property
             <code>httpsampler.user_defined_methods</code>.</p>
         </property>
         <property name="Content Encoding" required="No">
         Content encoding to be used (for <code>POST</code>, <code>PUT</code>, <code>PATCH</code> and <code>FILE</code>).
         This is the character encoding to be used, and is not related to the Content-Encoding HTTP header.
         </property>
         <property name="Redirect Automatically" required="No">
         Sets the underlying http protocol handler to automatically follow redirects,
         so they are not seen by JMeter, and thus will not appear as samples.
         Should only be used for <code>GET</code> and <code>HEAD</code> requests.
         The HttpClient sampler will reject attempts to use it for <code>POST</code> or <code>PUT</code>.
         <note>Warning: see below for information on cookie and header handling.</note>
         </property>
         <property name="Follow Redirects" required="No">
         This only has any effect if "<code>Redirect Automatically</code>" is not enabled.
         If set, the JMeter sampler will check if the response is a redirect and follow it if so.
         The initial redirect and further responses will appear as additional samples.
         The URL and data fields of the parent sample will be taken from the final (non-redirected)
         sample, but the parent byte count and elapsed time include all samples.
         The latency is taken from the initial response.
         Note that the HttpClient sampler may log the following message:
         <source>"Redirect requested but followRedirects is disabled"</source>
         This can be ignored.
         <br/>
         JMeter will collapse paths of the form '<code>/../segment</code>' in
         both absolute and relative redirect URLs. For example <code>http://host/one/../two</code> will be collapsed into <code>http://host/two</code>.
         If necessary, this behaviour can be suppressed by setting the JMeter property
         <code>httpsampler.redirect.removeslashdotdot=false</code>
         </property>
         <property name="Use KeepAlive" required="No">JMeter sets the Connection: <code>keep-alive</code> header. This does not work properly with the default HTTP implementation, as connection re-use is not under user-control.
                   It does work with the Apache HttpComponents HttpClient implementations.</property>
         <property name="Use multipart/form-data for HTTP POST" required="No">
         Use a <code>multipart/form-data</code> or <code>application/x-www-form-urlencoded</code> post request
         </property>
         <property name="Browser-compatible headers" required="No">
         When using <code>multipart/form-data</code>, this suppresses the <code>Content-Type</code> and
         <code>Content-Transfer-Encoding</code> headers; only the <code>Content-Disposition</code> header is sent.
         </property>
         <property name="Path" required="Yes">The path to resource (for example, <code>/servlets/myServlet</code>). If the
 resource requires query string parameters, add them below in the
 "Send Parameters With the Request" section.
 <note>
 As a special case, if the path starts with "<code>http://</code>" or "<code>https://</code>" then this is used as the full URL.
 </note>
 In this case, the server, port and protocol fields are ignored; parameters are also ignored for <code>GET</code> and <code>DELETE</code> methods.
 Also please note that the path is not encoded - apart from replacing spaces with <code>%20</code> -
 so unsafe characters may need to be encoded to avoid errors such as <code>URISyntaxException</code>.
 </property>
         <property name="Send Parameters With the Request" required="No">The query string will
         be generated from the list of parameters you provide.  Each parameter has a <code>name</code> and
         <code>value</code>, the options to encode the parameter, and an option to include or exclude an equals sign (some applications
         don't expect an equals sign when the value is the empty string).  The query string will be generated in the correct fashion, depending on
         the choice of "Method" you made (i.e. if you chose <code>GET</code> or <code>DELETE</code>, the query string will be
         appended to the URL, if <code>POST</code> or <code>PUT</code>, then it will be sent separately).  Also, if you are
         sending a file using a multipart form, the query string will be created using the
         multipart form specifications.
         <b>See below for some further information on parameter handling.</b>
         <p>
         Additionally, you can specify whether each parameter should be URL encoded.  If you are not sure what this
         means, it is probably best to select it.  If your values contain characters such as the following then encoding is usually required.:
         </p>
         <ul>
             <li>ASCII Control Chars</li>
             <li>Non-ASCII characters</li>
             <li>Reserved characters:URLs use some characters for special use in defining their syntax. When these characters are not used in their special role inside a URL, they need to be encoded, example : '<code>$</code>', '<code>&amp;</code>', '<code>+</code>', '<code>,</code>' , '<code>/</code>', '<code>:</code>', '<code>;</code>', '<code>=</code>', '<code>?</code>', '<code>@</code>'</li>
             <li>Unsafe characters: Some characters present the possibility of being misunderstood within URLs for various reasons. These characters should also always be encoded, example : '<code> </code>', '<code>&lt;</code>', '<code>&gt;</code>', '<code>#</code>', '<code>%</code>', &hellip;</li>
         </ul>
         </property>
         <property name="File Path:" required="No">Name of the file to send.  If left blank, JMeter
         does not send a file, if filled in, JMeter automatically sends the request as
         a multipart form request.
         <p>
         If it is a <code>POST</code> or <code>PUT</code> or <code>PATCH</code> request and there is a single file whose 'Parameter name' attribute (below) is omitted, 
         then the file is sent as the entire body
         of the request, i.e. no wrappers are added. This allows arbitrary bodies to be sent. This functionality is present for <code>POST</code> requests, 
         and also for <code>PUT</code> requests.
         <b>See below for some further information on parameter handling.</b>
         </p>
         </property>
         <property name="Parameter name:" required="No">Value of the "<code>name</code>" web request parameter.</property>
         <property name="MIME Type" required="No">MIME type (for example, <code>text/plain</code>).
         If it is a <code>POST</code> or <code>PUT</code> or <code>PATCH</code> request and either the '<code>name</code>' attribute (below) are omitted or the request body is
         constructed from parameter values only, then the value of this field is used as the value of the
         <code>content-type</code> request header.
         </property>
         <property name="Retrieve All Embedded Resources from HTML Files" required="No">Tell JMeter to parse the HTML file
 and send HTTP/HTTPS requests for all images, Java applets, JavaScript files, CSSs, etc. referenced in the file.
         See below for more details.
         </property>
-        <property name="Use as monitor" required="No">For use with the <complink name="Monitor Results"/> listener. DEPRECATED</property>
        <property name="Save response as MD5 hash?" required="No">
        If this is selected, then the response is not stored in the sample result.
        Instead, the 32 character MD5 hash of the data is calculated and stored instead.
        This is intended for testing large amounts of data.
        </property>
         <property name="Embedded URLs must match:" required="No">
         If present, this must be a regular expression that is used to match against any embedded URLs found.
         So if you only want to download embedded resources from <code>http://example.com/</code>, use the expression:
         <code>http://example\.com/.*</code>
         </property>
         <property name="Use concurrent pool" required="No">Use a pool of concurrent connections to get embedded resources.</property>
         <property name="Size" required="No">Pool size for concurrent connections used to get embedded resources.</property>
         <property name="Source address type" required="No">
         <i>[Only for HTTP Request with HTTPClient implementation]</i> <br></br>
         To distinguish the source address value, select the type of these:
         <ul>
         <li>Select <i>IP/Hostname</i> to use a specific IP address or a (local) hostname</li>
         <li>Select <i>Device</i> to pick the first available address for that interface which
         this may be either IPv4 or IPv6</li>
         <li>Select <i>Device IPv4</i> to select the IPv4 address of the device name (like <code>eth0</code>, <code>lo</code>, <code>em0</code>, etc.)</li>
         <li>Select <i>Device IPv6</i> to select the IPv6 address of the device name (like <code>eth0</code>, <code>lo</code>, <code>em0</code>, etc.)</li>
         </ul>
         </property>
         <property name="Source address field" required="No">
         <i>[Only for HTTP Request with HTTPClient implementation]</i> <br></br>
         This property is used to enable IP Spoofing.
         It overrides the default local IP address for this sample.
         The JMeter host must have multiple IP addresses (i.e. IP aliases, network interfaces, devices).
         The value can be a host name, IP address, or a network interface device such as "<code>eth0</code>" or "<code>lo</code>" or "<code>wlan0</code>".<br></br>
         If the property <code>httpclient.localaddress</code> is defined, that is used for all HttpClient requests.
         </property>
 </properties>
 <note>
 When using Automatic Redirection, cookies are only sent for the initial URL.
 This can cause unexpected behaviour for web-sites that redirect to a local server.
 E.g. if <code>www.example.com</code> redirects to <code>www.example.co.uk</code>.
 In this case the server will probably return cookies for both URLs, but JMeter will only see the cookies for the last
 host, i.e. <code>www.example.co.uk</code>. If the next request in the test plan uses <code>www.example.com</code>,
 rather than <code>www.example.co.uk</code>, it will not get the correct cookies.
 Likewise, Headers are sent for the initial request, and won't be sent for the redirect.
 This is generally only a problem for manually created test plans,
 as a test plan created using a recorder would continue from the redirected URL.
 </note>
 <p>
 <b>Parameter Handling:</b><br></br>
 For the <code>POST</code> and <code>PUT</code> method, if there is no file to send, and the name(s) of the parameter(s) are omitted,
 then the body is created by concatenating all the value(s) of the parameters.
 Note that the values are concatenated without adding any end-of-line characters.
 These can be added by using the <code>__char()</code> function in the value fields.
 This allows arbitrary bodies to be sent.
 The values are encoded if the encoding flag is set.
 See also the MIME Type above how you can control the <code>content-type</code> request header that is sent.
 <br></br>
 For other methods, if the name of the parameter is missing,
 then the parameter is ignored. This allows the use of optional parameters defined by variables.
 </p>
 <br/>
 <p>You have the option to switch to <code>Body Data</code> tab when a request has only unnamed parameters
 (or no parameters at all).
 This option is useful in the following cases (amongst others):</p>
 <ul>
 <li>GWT RPC HTTP Request</li>
 <li>JSON REST HTTP Request</li>
 <li>XML REST HTTP Request</li>
 <li>SOAP HTTP Request</li>
 </ul>
 <note>
 Note that once you leave the Tree node, you cannot switch back to the parameter tab unless you clear the <code>Body Data</code> tab from its data.
 </note>
 <p>
 In <code>Body Data</code> mode, each line will be sent with <code>CRLF</code> appended, apart from the last line.
 To send a <code>CRLF</code> after the last line of data, just ensure that there is an empty line following it.
 (This cannot be seen, except by noting whether the cursor can be placed on the subsequent line.)
 </p>
 <figure width="902" height="421" image="http-request-raw-single-parameter.png">Figure 1 - HTTP Request with one unnamed parameter</figure>
 <figure width="908" height="212" image="http-request-confirm-raw-body.png">Figure 2 - Confirm dialog to switch</figure>
 <figure width="905" height="423" image="http-request-raw-body.png">Figure 3 - HTTP Request using Body Data</figure>
 
 <p>
 <b>Method Handling:</b><br></br>
 The <code>GET</code>, <code>DELETE</code>, <code>POST</code>, <code>PUT</code> and <code>PATCH</code> request methods work similarly, except that as of 3.1, only <code>POST</code> method supports multipart requests
 or file upload.
 The <code>PUT</code> and <code>PATCH</code> method body must be provided as one of the following:</p>
 <ul>
 <li>define the body as a file with empty Parameter name field; in which case the MIME Type is used as the Content-Type</li>
 <li>define the body as parameter value(s) with no name</li>
 <li>use the <code>Body Data</code> tab</li>
 </ul>
 
 The <code>GET</code>, <code>DELETE</code> and <code>POST</code> methods have an additional way of passing parameters by using the <code>Parameters</code> tab.
 <p>
 <code>GET</code>, <code>DELETE</code>, <code>PUT</code> and <code>PATCH</code> require a Content-Type.
 If not using a file, attach a Header Manager to the sampler and define the Content-Type there.
 </p>
 <p>JMeter scan responses from embedded resources. It uses the property <code>HTTPResponse.parsers</code>, which is a list of parser ids,
  e.g. <code>htmlParser</code>, <code>cssParser</code> and <code>wmlParser</code>. For each id found, JMeter checks two further properties:</p>
  <ul>
  <li><code>id.types</code> - a list of content types</li>
  <li><code>id.className</code> - the parser to be used to extract the embedded resources</li>
  </ul>
  <p>See <code>jmeter.properties</code> file for the details of the settings.
  If the <code>HTTPResponse.parser</code> property is not set, JMeter reverts to the previous behaviour,
  i.e. only <code>text/html</code> responses will be scanned</p>
 <b>Emulating slow connections:</b><br></br>
 <code>HttpClient31</code>, <code>HttpClient4</code> and <code>Java</code> Sampler support emulation of slow connections; see the following entries in <code>jmeter.properties</code>:
 <source>
 # Define characters per second &gt; 0 to emulate slow connections
 #httpclient.socket.http.cps=0
 #httpclient.socket.https.cps=0
 </source>
 <p><b>Response size calculation</b><br></br>
 Optional properties to allow change the method to get response size:<br></br></p>
 <ul><li>Gets the real network size in bytes for the body response
 <source>sampleresult.getbytes.body_real_size=true</source></li>
 <li>Add HTTP headers to full response size
 <source>sampleresult.getbytes.headers_size=true</source></li></ul>
 
 <note>
 The <code>Java</code> and <code>HttpClient3</code> implementations do not include transport overhead such as
 chunk headers in the response body size.<br></br>
 The <code>HttpClient4</code> implementation does include the overhead in the response body size,
 so the value may be greater than the number of bytes in the response content.
 </note>
 
 <note>When those two properties are set  <code>false</code>, JMeter returns only data response size (uncompressed if request uses gzip/deflate mode).</note>
 <p>
 <b>Retry handling</b><br></br>
 For HttpClient4 and Commons HttpClient 3.1 samplers, the retry count has been set to <code>0</code>, meaning not retry is attempted. 
 Note that the Java implementation appears to retry 1 time.
 The retry count can be overridden by setting the relevant JMeter property, for example:
 </p>
 <source>
 httpclient4.retrycount=3
 httpclient3.retrycount=3
 </source>
 <p>
 <b>Note: Certificates does not conform to algorithm constraints</b><br></br>
 You may encounter the following error: <code>java.security.cert.CertificateException: Certificates does not conform to algorithm constraints</code>
  if you run a HTTPS request on a web site with a SSL certificate (itself or one of SSL certificates in its chain of trust) with a signature
  algorithm using MD2 (like <code>md2WithRSAEncryption</code>) or with a SSL certificate with a size lower than 1024 bits.
 </p><p>
 This error is related to increased security in Java 8.
 </p><p>
 To allow you to perform your HTTPS request, you can downgrade the security of your Java installation by editing
 the Java <code>jdk.certpath.disabledAlgorithms</code> property. Remove the MD2 value or the constraint on size, depending on your case.
 </p><p>
 This property is in this file:</p>
 <source>JAVA_HOME/jre/lib/security/java.security</source>
 <p>See  <bugzilla>56357</bugzilla> for details.
 </p>
 <links>
         <link href="test_plan.html#assertions">Assertion</link>
         <link href="build-web-test-plan.html">Building a Web Test Plan</link>
         <link href="build-adv-web-test-plan.html">Building an Advanced Web Test Plan</link>
         <complink name="HTTP Authorization Manager"/>
         <complink name="HTTP Cookie Manager"/>
         <complink name="HTTP Header Manager"/>
         <complink name="HTML Link Parser"/>
         <complink name="HTTP(S) Test Script Recorder"/>
         <complink name="HTTP Request Defaults"/>
         <link href="build-adv-web-test-plan.html#session_url_rewriting">HTTP Requests and Session ID's: URL Rewriting</link>
 </links>
 
 </component>
 
 <component name="JDBC Request" index="&sect-num;.1.3"  width="710" height="629" screenshot="jdbctest/jdbc-request.png">
 
 <description><p>This sampler lets you send a JDBC Request (an SQL query) to a database.</p>
 <p>Before using this you need to set up a
 <complink name="JDBC Connection Configuration"/> Configuration element
 </p>
 <p>
 If the Variable Names list is provided, then for each row returned by a Select statement, the variables are set up
 with the value of the corresponding column (if a variable name is provided), and the count of rows is also set up.
 For example, if the Select statement returns 2 rows of 3 columns, and the variable list is <code>A,,C</code>,
 then the following variables will be set up:</p>
 <source>
 A_#=2 (number of rows)
 A_1=column 1, row 1
 A_2=column 1, row 2
 C_#=2 (number of rows)
 C_1=column 3, row 1
 C_2=column 3, row 2
 </source>
 <p>
 If the Select statement returns zero rows, then the <code>A_#</code> and <code>C_#</code> variables would be set to <code>0</code>, and no other variables would be set.
 </p>
 <p>
 Old variables are cleared if necessary - e.g. if the first select retrieves six rows and a second select returns only three rows,
 the additional variables for rows four, five and six will be removed.
 </p>
 <note>The latency time is set from the time it took to acquire a connection.</note>
 </description>
 
 <properties>
         <property name="Name" required="No">Descriptive name for this sampler that is shown in the tree.</property>
         <property name="Variable Name" required="Yes">
         Name of the JMeter variable that the connection pool is bound to.
         This must agree with the '<code>Variable Name</code>' field of a <complink name="JDBC Connection Configuration"/>.
         </property>
         <property name="Query Type" required="Yes">Set this according to the statement type:
             <ul>
             <li>Select Statement</li>
             <li>Update Statement - use this for Inserts and Deletes as well</li>
             <li>Callable Statement</li>
             <li>Prepared Select Statement</li>
             <li>Prepared Update Statement - use this for Inserts and Deletes as well</li>
             <li>Commit</li>
             <li>Rollback</li>
             <li>Autocommit(false)</li>
             <li>Autocommit(true)</li>
             <li>Edit - this should be a variable reference that evaluates to one of the above</li>
             </ul>
         </property>
         <property name="SQL Query" required="Yes">
         SQL query.
         <note>Do not enter a trailing semi-colon.</note>
         There is generally no need to use <code>{</code> and <code>}</code> to enclose Callable statements;
         however they may be used if the database uses a non-standard syntax.
         <note>The JDBC driver automatically converts the statement if necessary when it is enclosed in <code>{}</code>.</note>
         For example:
         <ul>
         <li><code>select * from t_customers where id=23</code></li>
         <li><code>CALL SYSCS_UTIL.SYSCS_EXPORT_TABLE (null, ?, ?, null, null, null)</code>
         <ul>
         <li>Parameter values: <code>tablename</code>,<code>filename</code></li>
         <li>Parameter types:  <code>VARCHAR</code>,<code>VARCHAR</code></li>
         </ul>
         </li>
         </ul>
         The second example assumes you are using Apache Derby.
         </property>
         <property name="Parameter values" required="Yes, if a prepared or callable statement has parameters">
         Comma-separated list of parameter values. Use <code>]NULL[</code> to indicate a <code>NULL</code> parameter.
         (If required, the null string can be changed by defining the property "<code>jdbcsampler.nullmarker</code>".)
         <br></br>
         The list must be enclosed in double-quotes if any of the values contain a comma or double-quote,
         and any embedded double-quotes must be doubled-up, for example:
         <source>"Dbl-Quote: "" and Comma: ,"</source>
         <note>There must be as many values as there are placeholders in the statement even if your parameters are <code>OUT</code> ones.
         Be sure to set a value even if the value will not be used (for example in a CallableStatement).</note>
         </property>
         <property name="Parameter types" required="Yes, if a prepared or callable statement has parameters">
         Comma-separated list of SQL parameter types (e.g. <code>INTEGER</code>, <code>DATE</code>, <code>VARCHAR</code>, <code>DOUBLE</code>) or integer values of Constants. Those integer values can be used, when you use custom database types proposed by driver (For example <code>OracleTypes.CURSOR</code> could be represented by its integer value <code>-10</code>).<br/>
         These are defined as fields in the class <code>java.sql.Types</code>, see for example:<br/>
         <a href="http://docs.oracle.com/javase/8/docs/api/java/sql/Types.html">Javadoc for java.sql.Types</a>.<br/>
         <note>Note: JMeter will use whatever types are defined by the runtime JVM,
         so if you are running on a different JVM, be sure to check the appropriate documentation</note>
         <b>If the callable statement has <code>INOUT</code> or <code>OUT</code> parameters, then these must be indicated by prefixing the
         appropriate parameter types, e.g. instead of "<code>INTEGER</code>", use "<code>INOUT INTEGER</code>".</b> <br/>
         If not specified, "<code>IN</code>" is assumed, i.e. "<code>DATE</code>" is the same as "<code>IN DATE</code>".
         <br></br>
         If the type is not one of the fields found in <code>java.sql.Types</code>, JMeter also
         accepts the corresponding integer number, e.g. since <code>OracleTypes.CURSOR == -10</code>, you can use "<code>INOUT -10</code>".
         <br></br>
         There must be as many types as there are placeholders in the statement.
         </property>
         <property name="Variable Names" required="No">Comma-separated list of variable names to hold values returned by Select statements, Prepared Select Statements or CallableStatement. 
         Note that when used with CallableStatement, list of variables must be in the same sequence as the <code>OUT</code> parameters returned by the call.
         If there are less variable names than <code>OUT</code> parameters only as many results shall be stored in the thread-context variables as variable names were supplied.
         If more variable names than <code>OUT</code> parameters exist, the additional variables will be ignored</property>
         <property name="Result Variable Name" required="No">
         If specified, this will create an Object variable containing a list of row maps.
         Each map contains the column name as the key and the column data as the value. Usage:<br></br>
         <source>columnValue = vars.getObject("resultObject").get(0).get("Column Name");</source>
         </property>
         <property name="Handle ResultSet" required="No">Defines how ResultSet returned from callable statements be handled:
             <ul>
                 <li><code>Store As String</code> (default) - All variables on Variable Names list are stored as strings, will not iterate through a <code>ResultSet</code> when present on the list. <code>CLOB</code>s will be converted to Strings. <code>BLOB</code>s will be converted to Strings as if they were an UTF-8 encoded byte-array. Both <code>CLOB</code>s and <code>BLOB</code>s will be cut off after <code>jdbcsampler.max_retain_result_size</code> bytes.</li>
                 <li><code>Store As Object</code> - Variables of <code>ResultSet</code> type on Variables Names list will be stored as Object and can be accessed in subsequent tests/scripts and iterated, will not iterate through the <code>ResultSet</code>. <code>CLOB</code>s will be handled as if <code>Store As String</code> was selected. <code>BLOBs</code> will be stored as a byte array. Both <code>CLOB</code>s and <code>BLOB</code>s will be cut off after <code>jdbcsampler.max_retain_result_size</code> bytes.</li>
                 <li><code>Count Records</code> - Variables of <code>ResultSet</code> types will be iterated through showing the count of records as result. Variables will be stored as Strings. For <code>BLOB</code>s the size of the object will be stored.</li>
             </ul>
         </property>
 </properties>
 
 <links>
         <link href="build-db-test-plan.html">Building a Database Test Plan</link>
         <complink name="JDBC Connection Configuration"/>
 </links>
 <note>Current Versions of JMeter use UTF-8 as the character encoding. Previously the platform default was used.</note>
 <note>Ensure Variable Name is unique across Test Plan.</note>
 </component>
 
 <component name="Java Request" index="&sect-num;.1.4"  width="628" height="365" screenshot="java_request.png">
 
 <description><p>This sampler lets you control a java class that implements the
 <code>org.apache.jmeter.protocol.java.sampler.JavaSamplerClient</code> interface.
 By writing your own implementation of this interface,
 you can use JMeter to harness multiple threads, input parameter control, and
 data collection.</p>
 <p>The pull-down menu provides the list of all such implementations found by
 JMeter in its classpath.  The parameters can then be specified in the
 table below - as defined by your implementation.  Two simple examples (<code>JavaTest</code> and <code>SleepTest</code>) are provided.
 </p>
 <p>
 The <code>JavaTest</code> example sampler can be useful for checking test plans, because it allows one to set
 values in almost all the fields. These can then be used by Assertions, etc.
 The fields allow variables to be used, so the values of these can readily be seen.
 </p>
 </description>
 
 <note>If the method <code>teardownTest</code> is not overridden by a subclass of <code><a href="../api/org/apache/jmeter/protocol/java/sampler/AbstractJavaSamplerClient.html">AbstractJavaSamplerClient</a></code>, its <code>teardownTest</code> method will not be called.
 This reduces JMeter memory requirements.
 This will not have any impact on existing Test plans.
 </note>
 <note>The Add/Delete buttons don't serve any purpose at present.</note>
 
     <properties>
         <property name="Name" required="No">Descriptive name for this sampler
          that is shown in the tree.</property>
         <property name="Classname" required="Yes">The specific implementation of
         the JavaSamplerClient interface to be sampled.</property>
         <property name="Send Parameters with Request" required="No">A list of
         arguments that will be passed to the sampled class.  All arguments
         are sent as Strings. See below for specific settings.</property>
     </properties>
 
     <p>The following parameters apply to the <code>SleepTest</code> and <code>JavaTest</code> implementations:</p>
 
     <properties>
         <property name="Sleep_time" required="Yes">How long to sleep for (ms)</property>
         <property name="Sleep_mask" required="Yes">How much "randomness" to add:<br></br>
             The sleep time is calculated as follows:
             <source>totalSleepTime = SleepTime + (System.currentTimeMillis() % SleepMask)</source>
         </property>
     </properties>
 
     <p>The following parameters apply additionally to the <code>JavaTest</code> implementation:</p>
 
     <properties>
         <property name="Label" required="No">The label to use. If provided, overrides <code>Name</code></property>
         <property name="ResponseCode" required="No">If provided, sets the SampleResult ResponseCode.</property>
         <property name="ResponseMessage" required="No">If provided, sets the SampleResult ResponseMessage.</property>
         <property name="Status" required="No">If provided, sets the SampleResult Status. If this equals "<code>OK</code>" (ignoring case) then the status is set to success, otherwise the sample is marked as failed.</property>
         <property name="SamplerData" required="No">If provided, sets the SampleResult SamplerData.</property>
         <property name="ResultData" required="No">If provided, sets the SampleResult ResultData.</property>
     </properties>
 </component>
 
 <component name="SOAP/XML-RPC Request" index="&sect-num;.1.5"  width="426" height="276" screenshot="soap_sampler.png">
 <note>
 See <a href="build-ws-test-plan.html">Building a WebService Test Plan</a> for up to date way of test SOAP and REST Webservices
 </note>
 <description><p>This sampler lets you send a SOAP request to a webservice.  It can also be
 used to send XML-RPC over HTTP.  It creates an HTTP POST request, with the specified XML as the
 POST content.
 To change the "<code>Content-type</code>" from the default of "<code>text/xml</code>", use a <complink name="HTTP Header Manager" />.
 Note that the sampler will use all the headers from the <complink name="HTTP Header Manager"/>.
 If a SOAP action is specified, that will override any <code>SOAPaction</code> in the <complink name="HTTP Header Manager"/>.
 The primary difference between the soap sampler and
 webservice sampler, is the soap sampler uses raw post and does not require conformance to
 SOAP 1.1.</p>
 <note>The sampler no longer uses chunked encoding by default.<br/>
 For screen input, it now always uses the size of the data.<br/>
 File input uses the file length as determined by Java.<br/>
 On some OSes this may not work for all files, in which case add a child <complink name="HTTP Header Manager"/>
 with <code>Content-Length</code> set to the actual length of the file.<br/>
 Or set <code>Content-Length</code> to <code>-1</code> to force chunked encoding.
 </note>
 </description>
 
 <properties>
         <property name="Name" required="No">Descriptive name for this sampler
          that is shown in the tree.</property>
         <property name="URL" required="Yes">The URL to direct the SOAP request to.</property>
         <property name="Send SOAP action" required="No">Send a SOAP action header? (overrides the <complink name="HTTP Header Manager"/>)</property>
         <property name="Use KeepAlive" required="No">If set, sends <code>Connection: keep-alive</code>, else sends <code>Connection: close</code></property>
         <property name="Soap/XML-RPC Data" required="No">The Soap XML message, or XML-RPC instructions.
         Not used if the filename is provided.
         </property>
         <property name="Filename" required="No">If specified, then the contents of the file are sent, and the Data field is ignored</property>
         </properties>
 </component>
 
 <component name="LDAP Request" index="&sect-num;.1.7" width="621" height="462" screenshot="ldap_request.png">
   <description>This Sampler lets you send a different Ldap request(<code>Add</code>, <code>Modify</code>, <code>Delete</code> and <code>Search</code>) to an LDAP server.
     <p>If you are going to send multiple requests to the same LDAP server, consider
       using an <complink name="LDAP Request Defaults"/>
       Configuration Element so you do not have to enter the same information for each
       LDAP Request.</p> The same way the <complink name="Login Config Element"/> also using for Login and password.
   </description>
 
   <p>There are two ways to create test cases for testing an LDAP Server.</p>
   <ol>
     <li>Inbuilt Test cases.</li>
     <li>User defined Test cases.</li>
   </ol>
 
   <p>There are four test scenarios of testing LDAP. The tests are given below:</p>
   <ol>
     <li>Add Test
       <ol>
         <li>Inbuilt test:
           <p>This will add a pre-defined entry in the LDAP Server and calculate
           the execution time. After execution of the test, the created entry will be
           deleted from the LDAP
           Server.</p>
         </li>
         <li>User defined test:
           <p>This will add the entry in the LDAP Server. User has to enter all the
           attributes in the table.The entries are collected from the table to add. The
           execution time is calculated. The created entry will not be deleted after the
           test.</p>
         </li>
       </ol>
     </li>
     <li>Modify Test
       <ol>
         <li>Inbuilt test:
           <p>This will create a pre-defined entry first, then will modify the
           created entry in the LDAP Server.And calculate the execution time. After
           execution
           of the test, the created entry will be deleted from the LDAP Server.</p>
         </li>
         <li>User defined test:
           <p>This will modify the entry in the LDAP Server. User has to enter all the
           attributes in the table. The entries are collected from the table to modify.
           The execution time is calculated. The entry will not be deleted from the LDAP
           Server.</p>
         </li>
       </ol>
     </li>
     <li>Search Test
       <ol>
         <li>Inbuilt test:
           <p>This will create the entry first, then will search if the attributes
           are available. It calculates the execution time of the search query. At the
           end of  the execution,created entry will be deleted from the LDAP Server.</p>
         </li>
         <li>User defined test:
           <p>This will search the user defined entry(Search filter) in the Search
           base (again, defined by the user). The entries should be available in the LDAP
           Server. The execution time is  calculated.</p>
         </li>
       </ol>
     </li>
     <li>Delete Test
       <ol>
         <li>Inbuilt test:
           <p>This will create a pre-defined entry first, then it will be deleted
           from the LDAP Server. The execution time is calculated.</p>
         </li>
         <li>User defined test:
           <p>This will delete the user-defined entry in the LDAP Server. The entries
           should be available in the LDAP Server. The execution time is calculated.</p>
         </li>
       </ol>
     </li>
   </ol>
   <properties>
     <property name="Name" required="No">Descriptive name for this sampler that is shown in the tree.</property>
     <property name="Server Name or IP" required="Yes">Domain name or IP address of the LDAP server.
       JMeter assumes the LDAP server is listening on the default port (<code>389</code>).</property>
     <property name="Port" required="Yes">Port to connect to (default is <code>389</code>).</property>
     <property name="root DN" required="Yes">Base DN to use for ldap operations</property>
     <property name="Username" required="Usually">LDAP server username.</property>
     <property name="Password" required="Usually">LDAP server password. (N.B. this is stored unencrypted in the test plan)</property>
     <property name="Entry DN" required="Yes, if User Defined Test and Add Test or Modify Test is selected">the name of the context to create or Modify; may not be empty.
      <note>You have to set the right attributes of the object yourself. So if you want to add <code>cn=apache,ou=test</code>
       you have to add in the table <code>name</code> and <code>value</code> to <code>cn</code> and <code>apache</code>.
      </note>
     </property>
     <property name="Delete" required="Yes, if User Defined Test and Delete Test is selected">the name of the context to Delete; may not be empty</property>
     <property name="Search base" required="Yes, if User Defined Test and Search Test is selected">the name of the context or object to search</property>
     <property name="Search filter" required="Yes, if User Defined Test and Search Test is selected"> the filter expression to use for the search; may not be null</property>
     <property name="add test" required="Yes, if User Defined Test and add Test is selected">Use these <code>name</code>, <code>value</code> pairs for creation of the new object in the given context</property>
     <property name="modify test" required="Yes, if User Defined Test and Modify Test is selected">Use these <code>name</code>, <code>value</code> pairs for modification of the given context object</property>
   </properties>
 
   <links>
     <link href="build-ldap-test-plan.html">Building an Ldap Test Plan</link>
     <complink name="LDAP Request Defaults"/>
   </links>
 
 </component>
 
 <component name="LDAP Extended Request" index="&sect-num;.1.8" width="619" height="371" screenshot="ldapext_request.png">
   <description>This Sampler can send all 8 different LDAP requests to an LDAP server. It is an extended version of the LDAP sampler,
   therefore it is harder to configure, but can be made much closer resembling a real LDAP session.
     <p>If you are going to send multiple requests to the same LDAP server, consider
       using an <complink name="LDAP Extended Request Defaults"/>
       Configuration Element so you do not have to enter the same information for each
       LDAP Request.</p> </description>
 
    <p>There are nine test operations defined. These operations are given below:</p>
     <dl>
       <dt><b>Thread bind</b></dt>
       <dd>
         <p>Any LDAP request is part of an LDAP session, so the first thing that should be done is starting a session to the LDAP server.
         For starting this session a thread bind is used, which is equal to the LDAP "<code>bind</code>" operation.
         The user is requested to give a <code>username</code> (Distinguished name) and <code>password</code>,
         which will be used to initiate a session.
         When no password, or the wrong password is specified, an anonymous session is started. Take care,
         omitting the password will not fail this test, a wrong password will.
         (N.B. this is stored unencrypted in the test plan)</p>
         <properties>
           <property name="Name" required="No">Descriptive name for this sampler that is shown in the tree.</property>
           <property name="Servername" required="Yes">The name (or IP-address) of the LDAP server.</property>
           <property name="Port" required="No">The port number that the LDAP server is listening to. If this is omitted
             JMeter assumes the LDAP server is listening on the default port(389).</property>
           <property name="DN" required="No">The distinguished name of the base object that will be used for any subsequent operation.
             It can be used as a starting point for all operations. You cannot start any operation on a higher level than this DN!</property>
           <property name="Username" required="No">Full distinguished name of the user as which you want to bind.</property>
           <property name="Password" required="No">Password for the above user. If omitted it will result in an anonymous bind.
             If it is incorrect, the sampler will return an error and revert to an anonymous bind. (N.B. this is stored unencrypted in the test plan)</property>
         </properties>
       </dd>
       <dt><b>Thread unbind</b></dt>
       <dd>
         <p>This is simply the operation to end a session.
         It is equal to the LDAP "<code>unbind</code>" operation.</p>
         <properties>
           <property name="Name" required="No">Descriptive name for this sampler that is shown in the tree.</property>
         </properties>
       </dd>
       <dt><b>Single bind/unbind</b></dt>
       <dd>
         <p> This is a combination of the LDAP "<code>bind</code>" and "<code>unbind</code>" operations.
         It can be used for an authentication request/password check for any user. It will open a new session, just to
         check the validity of the user/password combination, and end the session again.</p>
         <properties>
           <property name="Name" required="No">Descriptive name for this sampler that is shown in the tree.</property>
           <property name="Username" required="Yes">Full distinguished name of the user as which you want to bind.</property>
           <property name="Password" required="No">Password for the above user. If omitted it will result in an anonymous bind.
             If it is incorrect, the sampler will return an error. (N.B. this is stored unencrypted in the test plan)</property>
         </properties>
       </dd>
       <dt><b>Rename entry</b></dt>
       <dd>
        <p>This is the LDAP "<code>moddn</code>" operation. It can be used to rename an entry, but
        also for moving an entry or a complete subtree to a different place in
        the LDAP tree.</p>
        <properties>
          <property name="Name" required="No">Descriptive name for this sampler that is shown in the tree.</property>
          <property name="Old entry name" required="Yes">The current distinguished name of the object you want to rename or move,
            relative to the given DN in the thread bind operation.</property>
          <property name="New distinguished name" required="Yes">The new distinguished name of the object you want to rename or move,
            relative to the given DN in the thread bind operation.</property>
        </properties>
      </dd>
      <dt><b>Add test</b></dt>
      <dd>
        <p>This is the ldap "<code>add</code>" operation. It can be used to add any kind of
        object to the LDAP server.</p>
        <properties>
          <property name="Name" required="No">Descriptive name for this sampler that is shown in the tree.</property>
          <property name="Entry DN" required="Yes">Distinguished name of the object you want to add, relative to the given DN in the thread bind operation.</property>
          <property name="Add test" required="Yes">A list of attributes and their values you want to use for the object.
            If you need to add a multiple value attribute, you need to add the same attribute with their respective
            values several times to the list.</property>
        </properties>
      </dd>
      <dt><b>Delete test</b></dt>
      <dd>
        <p> This is the LDAP "<code>delete</code>" operation, it can be used to delete an
        object from the LDAP tree</p>
        <properties>
          <property name="Name" required="No">Descriptive name for this sampler that is shown in the tree.</property>
          <property name="Delete" required="Yes">Distinguished name of the object you want to delete, relative to the given DN in the thread bind operation.</property>
        </properties>
      </dd>
      <dt><b>Search test</b></dt>
      <dd>
        <p>This is the LDAP "<code>search</code>" operation, and will be used for defining searches.</p>
        <properties>
          <property name="Name" required="No">Descriptive name for this sampler that is shown in the tree.</property>
          <property name="Search base" required="No">Distinguished name of the subtree you want your
            search to look in, relative to the given DN in the thread bind operation.</property>
          <property name="Search Filter" required="Yes">searchfilter, must be specified in LDAP syntax.</property>
          <property name="Scope" required="No">Use <code>0</code> for baseobject-, <code>1</code> for onelevel- and <code>2</code> for a subtree search. (Default=<code>0</code>)</property>
          <property name="Size Limit" required="No">Specify the maximum number of results you want back from the server. (default=<code>0</code>, which means no limit.) When the sampler hits the maximum number of results, it will fail with errorcode <code>4</code></property>
          <property name="Time Limit" required="No">Specify the maximum amount of (cpu)time (in milliseconds) that the server can spend on your search. Take care, this does not say anything about the response time. (default is <code>0</code>, which means no limit)</property>
          <property name="Attributes" required="No">Specify the attributes you want to have returned, separated by a semicolon. An empty field will return all attributes</property>
          <property name="Return object" required="No">Whether the object will be returned (<code>true</code>) or not (<code>false</code>). Default=<code>false</code></property>
          <property name="Dereference aliases" required="No">If <code>true</code>, it will dereference aliases, if <code>false</code>, it will not follow them (default=<code>false</code>)</property>
          <property name="Parse the search results?" required="No">If <code>true</code>, the search results will be added to the response data. If <code>false</code>, a marker - whether results where found or not - will be added to the response data.</property>
        </properties>
      </dd>
      <dt><b>Modification test</b></dt>
      <dd>
        <p>This is the LDAP "<code>modify</code>" operation. It can be used to modify an object. It
        can be used to add, delete or replace values of an attribute. </p>
        <properties>
          <property name="Name" required="No">Descriptive name for this sampler that is shown in the tree.</property>
          <property name="Entry name" required="Yes">Distinguished name of the object you want to modify, relative 
            to the given DN in the thread bind operation</property>
          <property name="Modification test" required="Yes">The attribute-value-opCode triples. The opCode can be any
            valid LDAP operationCode (<code>add</code>, <code>delete</code>/<code>remove</code> or <code>replace</code>).
            If you don't specify a value with a <code>delete</code> operation,
            all values of the given attribute will be deleted. If you do specify a value in a <code>delete</code> operation, only
            the given value will be deleted. If this value is non-existent, the sampler will fail the test.</property>
        </properties>
      </dd>
      <dt><b>Compare</b></dt>
      <dd>
        <p>This is the LDAP "<code>compare</code>" operation. It can be used to compare the value
        of a given attribute with some already known value. In reality this is mostly
        used to check whether a given person is a member of some group. In such a case
        you can compare the DN of the user as a given value, with the values in the
        attribute "<code>member</code>" of an object of the type <code>groupOfNames</code>.
        If the compare operation fails, this test fails with errorcode <code>49</code>.</p>
        <properties>
          <property name="Name" required="No">Descriptive name for this sampler that is shown in the tree.</property>
          <property name="Entry DN" required="Yes">The current distinguished name of the object of
            which you want  to compare an attribute, relative to the given DN in the thread bind operation.</property>
          <property name="Compare filter" required="Yes">In the form "<code>attribute=value</code>"</property>
        </properties>
      </dd>
    </dl>
    <links>
      <link href="build-ldapext-test-plan.html">Building an LDAP Test Plan</link>
      <complink name="LDAP Extended Request Defaults"/>
    </links>
 </component>
 
 
 
 
 <component name="Access Log Sampler" index="&sect-num;.1.9"  width="702" height="305" screenshot="accesslogsampler.png">
 <center><h2>(Beta Code)</h2></center>
 <description><p>AccessLogSampler was designed to read access logs and generate http requests.
 For those not familiar with the access log, it is the log the webserver maintains of every
 request it accepted. This means every image, css file, javascript file, html file, &hellip;
 The current implementation is complete, but some features have not been enabled. 
 There is a filter for the access log parser, but I haven't figured out how to link to the pre-processor. 
 Once I do, changes to the sampler will be made to enable that functionality.</p>
 <p>Tomcat uses the common format for access logs. This means any webserver that uses the
 common log format can use the AccessLogSampler. Server that use common log format include:
 Tomcat, Resin, Weblogic, and SunOne. Common log format looks
 like this:</p>
 <source>127.0.0.1 - - [21/Oct/2003:05:37:21 -0500] "GET /index.jsp?%2Findex.jsp= HTTP/1.1" 200 8343</source>
 <note>The current implementation of the parser only looks at the text within the quotes that contains one of the HTTP protocol methods (<code>GET</code>, <code>PUT</code>, <code>POST</code>, <code>DELETE</code>, &hellip;).
 Everything else is stripped out and ignored. For example, the response code is completely
 ignored by the parser. </note>
 <p>For the future, it might be nice to filter out entries that
 do not have a response code of <code>200</code>. Extending the sampler should be fairly simple. There
 are two interfaces you have to implement:</p>
 <ul>
 <li><code>org.apache.jmeter.protocol.http.util.accesslog.LogParser</code></li>
 <li><code>org.apache.jmeter.protocol.http.util.accesslog.Generator</code></li>
 </ul>
 <p>The current implementation of AccessLogSampler uses the generator to create a new
 HTTPSampler. The servername, port and get images are set by AccessLogSampler. Next,
 the parser is called with integer <code>1</code>, telling it to parse one entry. After that,
 <code>HTTPSampler.sample()</code> is called to make the request.</p>
 <source>
 samp = (HTTPSampler) GENERATOR.generateRequest();
 samp.setDomain(this.getDomain());
 samp.setPort(this.getPort());
 samp.setImageParser(this.isImageParser());
 PARSER.parse(1);
 res = samp.sample();
 res.setSampleLabel(samp.toString());
 </source>
 The required methods in <code>LogParser</code> are:
 <ul>
 <li><code>setGenerator(Generator)</code></li>
 <li><code>parse(int)</code></li> 
 </ul>
 <p>
 Classes implementing <code>Generator</code> interface should provide concrete implementation
 for all the methods. For an example of how to implement either interface, refer to
 <code>StandardGenerator</code> and <code>TCLogParser</code>.
 </p>
 </description>
 
 <properties>
         <property name="Name" required="No">Descriptive name for this sampler that is shown in the tree.</property>
         <property name="Server" required="Yes">Domain name or IP address of the web server.</property>
         <property name="Protocol" required="No (defaults to http">Scheme</property>
         <property name="Port" required="No (defaults to 80)">Port the web server is listening to.</property>
         <property name="Log parser class" required="Yes (default provided)">The log parser class is responsible for parsing the logs.</property>
         <property name="Filter" required="No">The filter class is used to filter out certain lines.</property>
         <property name="Location of log file" required="Yes">The location of the access log file.</property>
 </properties>
 <p>
 The <code>TCLogParser</code> processes the access log independently for each thread.
 The <code>SharedTCLogParser</code> and <code>OrderPreservingLogParser</code> share access to the file, 
 i.e. each thread gets the next entry in the log.
 </p>
 <p>
 The <code>SessionFilter</code> is intended to handle Cookies across threads. 
 It does not filter out any entries, but modifies the cookie manager so that the cookies for a given IP are
 processed by a single thread at a time. If two threads try to process samples from the same client IP address,
 then one will be forced to wait until the other has completed.
 </p>
 <p>
 The <code>LogFilter</code> is intended to allow access log entries to be filtered by filename and regex,
 as well as allowing for the replacement of file extensions. However, it is not currently possible
 to configure this via the GUI, so it cannot really be used.
 </p>
 </component>
 
 <component name="BeanShell Sampler" index="&sect-num;.1.10"  width="848" height="566" screenshot="beanshellsampler.png">
     <description><p>This sampler allows you to write a sampler using the BeanShell scripting language.
 </p><p>
 <b>For full details on using BeanShell, please see the <a href="http://www.beanshell.org/">BeanShell website.</a></b>
 </p>
 <p>
 The test element supports the <code>ThreadListener</code> and <code>TestListener</code> interface methods.
 These must be defined in the initialisation file.
 See the file <code>BeanShellListeners.bshrc</code> for example definitions.
 </p>
 <p>
 The BeanShell sampler also supports the <code>Interruptible</code> interface.
 The <code>interrupt()</code> method can be defined in the script or the init file.
 </p>
     </description>
 <properties>
     <property name="Name" required="No">Descriptive name for this sampler that is shown in the tree.
     The name is stored in the script variable Label</property>
     <property name="Reset bsh.Interpreter before each call" required="Yes">
     If this option is selected, then the interpreter will be recreated for each sample.
     This may be necessary for some long running scripts. 
     For further information, see <a href="best-practices#bsh_scripting">Best Practices - BeanShell scripting</a>.
     </property>
     <property name="Parameters" required="No">Parameters to pass to the BeanShell script.
     This is intended for use with script files; for scripts defined in the GUI, you can use whatever
     variable and function references you need within the script itself.
     The parameters are stored in the following variables:
     <dl>
         <dt><code>Parameters</code></dt><dd>string containing the parameters as a single variable</dd>
         <dt><code>bsh.args</code></dt><dd>String array containing parameters, split on white-space</dd>
     </dl></property>
     <property name="Script file" required="No">A file containing the BeanShell script to run.
     The file name is stored in the script variable <code>FileName</code></property>
     <property name="Script" required="Yes (unless script file is provided)">The BeanShell script to run. 
     The return value (if not <code>null</code>) is stored as the sampler result.</property>
 </properties>
 <note>
 N.B. Each Sampler instance has its own BeanShell interpreter,
 and Samplers are only called from a single thread
 </note><p>
 If the property "<code>beanshell.sampler.init</code>" is defined, it is passed to the Interpreter
 as the name of a sourced file.
 This can be used to define common methods and variables. 
 There is a sample init file in the bin directory: <code>BeanShellSampler.bshrc</code>.
 </p><p>
 If a script file is supplied, that will be used, otherwise the script will be used.</p>
 <note>
 JMeter processes function and variable references before passing the script field to the interpreter,
 so the references will only be resolved once.
 Variable and function references in script files will be passed
 verbatim to the interpreter, which is likely to cause a syntax error.
 In order to use runtime variables, please use the appropriate props methods,
 e.g.<code>props.get("START.HMS"); props.put("PROP1","1234");</code>
 <br/>
 BeanShell does not currently support Java 5 syntax such as generics and the enhanced for loop.
 </note>
         <p>Before invoking the script, some variables are set up in the BeanShell interpreter:</p>
         <p>The contents of the Parameters field is put into the variable "<code>Parameters</code>".
             The string is also split into separate tokens using a single space as the separator, and the resulting list
             is stored in the String array <code>bsh.args</code>.</p>
         <p>The full list of BeanShell variables that is set up is as follows:</p>
         <ul>
         <li><code>log</code> - the <a href="http://excalibur.apache.org/apidocs/org/apache/log/Logger.html">Logger</a></li>
         <li><code>Label</code> - the Sampler label</li>
         <li><code>FileName</code> - the file name, if any</li>
         <li><code>Parameters</code> - text from the Parameters field</li>
         <li><code>bsh.args</code> - the parameters, split as described above</li>
         <li><code>SampleResult</code> - pointer to the current <a href="../api/org/apache/jmeter/samplers/SampleResult.html"><code>SampleResult</code></a></li>
             <li><code>ResponseCode</code> defaults to <code>200</code></li>
             <li><code>ResponseMessage</code> defaults to "<code>OK</code>"</li>
             <li><code>IsSuccess</code> defaults to <code>true</code></li>
             <li><code>ctx</code> - <a href="../api/org/apache/jmeter/threads/JMeterContext.html">JMeterContext</a></li>
             <li><code>vars</code> - <a href="../api/org/apache/jmeter/threads/JMeterVariables.html">JMeterVariables</a>  - e.g. 
                <source>vars.get("VAR1");
 vars.put("VAR2","value");
 vars.remove("VAR3");
 vars.putObject("OBJ1",new Object());</source></li>
             <li><code>props</code> - JMeterProperties (class <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Properties.html"><code>java.util.Properties</code></a>) - e.g.
                 <source>props.get("START.HMS");
 props.put("PROP1","1234");</source></li>
         </ul>
         <p>When the script completes, control is returned to the Sampler, and it copies the contents
             of the following script variables into the corresponding variables in the <a href="../api/org/apache/jmeter/samplers/SampleResult.html"><code>SampleResult</code></a>:</p>
             <ul>
             <li><code>ResponseCode</code> - for example <code>200</code></li>
             <li><code>ResponseMessage</code> - for example "<code>OK</code>"</li>
             <li><code>IsSuccess</code> - <code>true</code> or <code>false</code></li>
             </ul>
             <p>The SampleResult ResponseData is set from the return value of the script.
             If the script returns null, it can set the response directly, by using the method 
             <code>SampleResult.setResponseData(data)</code>, where data is either a String or a byte array.
             The data type defaults to "<code>text</code>", but can be set to binary by using the method
             <code>SampleResult.setDataType(SampleResult.BINARY)</code>.
             </p>
             <p>The <code>SampleResult</code> variable gives the script full access to all the fields and
                 methods in the <code>SampleResult</code>. For example, the script has access to the methods
                 <code>setStopThread(boolean)</code> and <code>setStopTest(boolean)</code>.
 
                 Here is a simple (not very useful!) example script:</p>
 
 <source>
 if (bsh.args[0].equalsIgnoreCase("StopThread")) {
     log.info("Stop Thread detected!");
     SampleResult.setStopThread(true);
 }
 return "Data from sample with Label "+Label;
 //or
 SampleResult.setResponseData("My data");
 return null;
 </source>
 <p>Another example:<br></br> ensure that the property <code>beanshell.sampler.init=BeanShellSampler.bshrc</code> is defined in <code>jmeter.properties</code>. 
 The following script will show the values of all the variables in the <code>ResponseData</code> field:
 </p>
 <source>
 return getVariables();
 </source>
 <p>
 For details on the methods available for the various classes (<a href="../api/org/apache/jmeter/threads/JMeterVariables.html"><code>JMeterVariables</code></a>, <a href="../api/org/apache/jmeter/samplers/SampleResult.html"><code>SampleResult</code></a> etc.) please check the Javadoc or the source code.
 Beware however that misuse of any methods can cause subtle faults that may be difficult to find.
 </p>
 </component>
 
 
 <component name="BSF Sampler (DEPRECATED)" index="&sect-num;.1.11"  width="848" height="590" screenshot="bsfsampler.png">
     <description><p>This sampler allows you to write a sampler using a BSF scripting language.<br></br>
         See the <a href="http://commons.apache.org/bsf/index.html">Apache Bean Scripting Framework</a>
         website for details of the languages supported.
         You may need to download the appropriate jars for the language; they should be put in the JMeter <code>lib</code> directory.
         </p>
         <note>
         The BSF API has been largely superseded by JSR-223, which is included in Java 6 onwards.
         Most scripting languages now include support for JSR-223; please use the JSR223 Sampler instead.
         The BSF Sampler should only be needed for supporting legacy languages/test scripts.
         </note>
         <p>By default, JMeter supports the following languages:</p>
         <ul>
         <li>javascript</li>
         <li>xslt</li>
         </ul>
         <note>Unlike the BeanShell sampler, the interpreter is not saved between invocations.</note>
     </description>
 <properties>
     <property name="Name" required="No">Descriptive name for this sampler that is shown in the tree.</property>
     <property name="Scripting Language" required="Yes">Name of the BSF scripting language to be used.
       <note>N.B. Not all the languages in the drop-down list are supported by default.
         The following are supported: javascript, xslt.
         Others may be available if the appropriate jar is installed in the JMeter lib directory.
       </note>
     </property>
     <property name="Script File" required="No">Name of a file to be used as a BSF script, if a relative file path is used, then it will be relative to directory referenced by "<code>user.dir</code>" System property</property>
     <property name="Parameters" required="No">List of parameters to be passed to the script file or the script.</property>
     <property name="Script" required="Yes (unless script file is provided)">Script to be passed to BSF language</property>
 </properties>
 <p>
 If a script file is supplied, that will be used, otherwise the script will be used.</p>
 <note>
 JMeter processes function and variable references before passing the script field to the interpreter,
 so the references will only be resolved once.
 Variable and function references in script files will be passed
 verbatim to the interpreter, which is likely to cause a syntax error.
 In order to use runtime variables, please use the appropriate props methods,
 e.g.<code>props.get("START.HMS"); props.put("PROP1","1234");</code> 
 </note>
 <p>
 Before invoking the script, some variables are set up.
 Note that these are BSF variables - i.e. they can be used directly in the script.
 </p>
 <ul>
 <li><code>log</code> - the <a href="http://excalibur.apache.org/apidocs/org/apache/log/Logger.html">Logger</a></li>
 <li><code>Label</code> - the Sampler label</li>
 <li><code>FileName</code> - the file name, if any</li>
 <li><code>Parameters</code> - text from the Parameters field</li>
 <li><code>args</code> - the parameters, split as described above</li>
 <li><code>SampleResult</code> - pointer to the current <a href="../api/org/apache/jmeter/samplers/SampleResult.html">SampleResult</a></li>
 <li><code>sampler</code> - <a href="../api/org/apache/jmeter/samplers/Sampler.html">Sampler</a> - pointer to current Sampler</li>
 <li><code>ctx</code> - <a href="../api/org/apache/jmeter/threads/JMeterContext.html">JMeterContext</a></li>
 <li><code>vars</code> - <a href="../api/org/apache/jmeter/threads/JMeterVariables.html">JMeterVariables</a>  - e.g. 
   <source>vars.get("VAR1");
 vars.put("VAR2","value");
 vars.remove("VAR3");
 vars.putObject("OBJ1",new Object());</source></li>
 <li><code>props</code> - JMeterProperties  (class <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Properties.html"><code>java.util.Properties</code></a>) - e.g. 
   <source>props.get("START.HMS");
 props.put("PROP1","1234");</source></li>
 <li><code>OUT</code> - System.out - e.g. <code>OUT.println("message")</code></li>
 </ul>
 <p>
 The <a href="../api/org/apache/jmeter/samplers/SampleResult.html">SampleResult</a> ResponseData is set from the return value of the script.
 If the script returns <code>null</code>, it can set the response directly, by using the method 
 <code>SampleResult.setResponseData(data)</code>, where data is either a String or a byte array.
 The data type defaults to "<code>text</code>", but can be set to binary by using the method
 <code>SampleResult.setDataType(SampleResult.BINARY)</code>.
 </p>
 <p>
 The SampleResult variable gives the script full access to all the fields and
 methods in the SampleResult. For example, the script has access to the methods
 <code>setStopThread(boolean)</code> and <code>setStopTest(boolean)</code>.
 </p>
 <p>
 Unlike the BeanShell Sampler, the BSF Sampler does not set the <code>ResponseCode</code>, <code>ResponseMessage</code> and sample status via script variables.
 Currently the only way to change these is via the <a href="../api/org/apache/jmeter/samplers/SampleResult.html">SampleResult</a> methods:
 </p>
 <ul>
 <li><code>SampleResult.setSuccessful(true/false)</code></li>
 <li><code>SampleResult.setResponseCode("code")</code></li>
 <li><code>SampleResult.setResponseMessage("message")</code></li>
 </ul>
 </component>
 
 <component name="JSR223 Sampler" index="&sect-num;.1.11.1" width="861" height="502" screenshot="jsr223-sampler.png">
 <description>
 <p>
 The JSR223 Sampler allows JSR223 script code to be used to perform a sample.
 </p>
 <p>
 The JSR223 test elements have a feature (compilation) that can significantly increase performance.
 To benefit from this feature:
 </p>
 <ul>
     <li>Use Script files instead of inlining them. This will make JMeter compile them if this feature is available on ScriptEngine and cache them.</li>
     <li>Or Use Script Text and check <code>Cache compiled script if available</code> property.
     <note>When using this feature, ensure your script code does not use JMeter variables directly in script code as caching would only cache first replacement. Instead use script parameters.</note>
     <note>To benefit from caching and compilation, the language engine used for scripting must implement JSR223 <code><a href="https://docs.oracle.com/javase/8/docs/api/javax/script/Compilable.html">Compilable</a></code> interface (Groovy is one of these, java, beanshell and javascript are not)</note>
     <note>When using Groovy as scripting language and not checking <code>Cache compiled script if available</code> (while caching is recommended), you should set this JVM Property <code>-Dgroovy.use.classvalue=true</code>
         due to a Groovy Memory leak as of version 2.4.6, see:
         <ul>
             <li><a href="https://issues.apache.org/jira/browse/GROOVY-7683" >GROOVY-7683</a></li>
             <li><a href="https://issues.apache.org/jira/browse/GROOVY-7591">GROOVY-7591</a></li>
             <li><a href="https://bugs.openjdk.java.net/browse/JDK-8136353">JDK-8136353</a></li>
         </ul> 
     </note>
     </li>
 </ul>
 Cache size is controlled by the following jmeter property (<code>jmeter.properties</code>):
 <source>jsr223.compiled_scripts_cache_size=100</source>
 <note>Unlike the <complink name="BeanShell Sampler" />, the interpreter is not saved between invocations.</note>
 <note>
 JSR223 Test Elements using Script file or Script text + checked <code>Cache compiled script if available</code> are now compiled if ScriptEngine supports this feature, this enables great performance enhancements.
 </note>
 </description>
 <note>
 JMeter processes function and variable references before passing the script field to the interpreter,
 so the references will only be resolved once.
 Variable and function references in script files will be passed
 verbatim to the interpreter, which is likely to cause a syntax error.
 In order to use runtime variables, please use the appropriate props methods,
 e.g. <source>props.get("START.HMS");
 props.put("PROP1","1234");</source>
 </note>
 <properties>
     <property name="Name" required="No">Descriptive name for this sampler that is shown in the tree.</property>
     <property name="Scripting Language" required="Yes">Name of the JSR223 scripting language to be used.
       <note>There are other languages supported than those that appear in the drop-down list.
         Others may be available if the appropriate jar is installed in the JMeter lib directory.
       </note>
     </property>
     <property name="Script File" required="No">Name of a file to be used as a JSR223 script, if a relative file path is used, then it will be relative to directory referenced by "<code>user.dir</code>" System property</property>
     <property name="Parameters" required="No">List of parameters to be passed to the script file or the script.</property>
     <property name="Cache compiled script if available" required="No">If checked (advised) and the language used supports <code><a href="https://docs.oracle.com/javase/8/docs/api/javax/script/Compilable.html">Compilable</a></code> interface (Groovy is one of these, java, beanshell and javascript are not), JMeter will compile the Script and cache it using it's MD5 hash as unique cache key</property>
     <property name="Script" required="Yes (unless script file is provided)">Script to be passed to JSR223 language</property>
 </properties>
 <p>
 If a script file is supplied, that will be used, otherwise the script will be used.</p>
 
 <p>
 Before invoking the script, some variables are set up.
 Note that these are JSR223 variables - i.e. they can be used directly in the script.
 </p>
 <ul>
 <li><code>log</code> - the <a href="http://excalibur.apache.org/apidocs/org/apache/log/Logger.html">Logger</a></li>
 <li><code>Label</code> - the Sampler label</li>
 <li><code>FileName</code> - the file name, if any</li>
 <li><code>Parameters</code> - text from the Parameters field</li>
 <li><code>args</code> - the parameters, split as described above</li>
 <li><code>SampleResult</code> - pointer to the current <a href="../api/org/apache/jmeter/samplers/SampleResult.html">SampleResult</a></li>
 <li><code>sampler</code> - (<a href="../api/org/apache/jmeter/samplers/Sampler.html">Sampler</a>) - pointer to current Sampler</li>
 <li><code>ctx</code> - <a href="../api/org/apache/jmeter/threads/JMeterContext.html">JMeterContext</a></li>
 <li><code>vars</code> - <a href="../api/org/apache/jmeter/threads/JMeterVariables.html">JMeterVariables</a>  - e.g. 
   <source>vars.get("VAR1");
 vars.put("VAR2","value");
 vars.remove("VAR3");
 vars.putObject("OBJ1",new Object());</source></li>
 <li><code>props</code> - JMeterProperties  (class <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Properties.html"><code>java.util.Properties</code></a>) - e.g. 
   <source>props.get("START.HMS");
 props.put("PROP1","1234");</source></li>
 <li><code>OUT</code> - System.out - e.g. <code>OUT.println("message")</code></li>
 </ul>
 <p>
 The <a href="../api/org/apache/jmeter/samplers/SampleResult.html">SampleResult</a> ResponseData is set from the return value of the script.
 If the script returns <code>null</code>, it can set the response directly, by using the method 
 <code>SampleResult.setResponseData(data)</code>, where data is either a String or a byte array.
 The data type defaults to "<code>text</code>", but can be set to binary by using the method
 <code>SampleResult.setDataType(SampleResult.BINARY)</code>.
 </p>
 <p>
 The SampleResult variable gives the script full access to all the fields and
 methods in the SampleResult. For example, the script has access to the methods
 <code>setStopThread(boolean)</code> and <code>setStopTest(boolean)</code>.
 </p>
 <p>
 Unlike the BeanShell Sampler, the JSR223 Sampler does not set the <code>ResponseCode</code>, <code>ResponseMessage</code> and sample status via script variables.
 Currently the only way to changes these is via the <a href="../api/org/apache/jmeter/samplers/SampleResult.html">SampleResult</a> methods:
 </p>
 <ul>
 <li><code>SampleResult.setSuccessful(true/false)</code></li>
 <li><code>SampleResult.setResponseCode("code")</code></li>
 <li><code>SampleResult.setResponseMessage("message")</code></li>
@@ -1700,2384 +1699,2352 @@ The following table shows some values which may be useful when configuring JMS:
 </properties>
 </component>
 
 
 
 <component name="JUnit Request" index="&sect-num;.1.16"  width="397" height="536" screenshot="junit_sampler.png">
 <description>
 The current implementation supports standard JUnit convention and extensions. It also
 includes extensions like <code>oneTimeSetUp</code> and <code>oneTimeTearDown</code>. The sampler works like the
 <complink name="Java Request" /> with some differences.
 <ul>
 <li>rather than use Jmeter's test interface, it scans the jar files for classes extending JUnit's <code>TestCase</code> class. That includes any class or subclass.</li>
 <li>JUnit test jar files should be placed in <code>jmeter/lib/junit</code> instead of <code>/lib</code> directory.
 You can also use the "<code>user.classpath</code>" property to specify where to look for <code>TestCase</code> classes.</li>
 <li>JUnit sampler does not use name/value pairs for configuration like the <complink name="Java Request" />. The sampler assumes <code>setUp</code> and <code>tearDown</code> will configure the test correctly.</li>
 <li>The sampler measures the elapsed time only for the test method and does not include <code>setUp</code> and <code>tearDown</code>.</li>
 <li>Each time the test method is called, Jmeter will pass the result to the listeners.</li>
 <li>Support for <code>oneTimeSetUp</code> and <code>oneTimeTearDown</code> is done as a method. Since Jmeter is multi-threaded, we cannot call <code>oneTimeSetUp</code>/<code>oneTimeTearDown</code> the same way Maven does it.</li>
 <li>The sampler reports unexpected exceptions as errors.
 There are some important differences between standard JUnit test runners and JMeter's
 implementation. Rather than make a new instance of the class for each test, JMeter
 creates 1 instance per sampler and reuses it.
 This can be changed with checkbox "<code>Create a new instance per sample</code>".</li>
 </ul>
 The current implementation of the sampler will try to create an instance using the string constructor first. If the test class does not declare a string constructor, the sampler will look for an empty constructor. Example below:
 <example title="JUnit Constructors" anchor="junit_constructor_example">
 Empty Constructor:
 <source>
 public class myTestCase {
   public myTestCase() {}
 }
 </source>
 String Constructor:
 <source>
 public class myTestCase {
   public myTestCase(String text) {
     super(text);
   }
 }
 </source>
 </example>
 By default, Jmeter will provide some default values for the success/failure code and message. Users should define a set of unique success and failure codes and use them uniformly across all tests.
 <note>
 <h3>General Guidelines</h3>
 If you use <code>setUp</code> and <code>tearDown</code>, make sure the methods are declared public. If you do not, the test may not run properly.
 <br></br>
 Here are some general guidelines for writing JUnit tests so they work well with Jmeter. Since Jmeter runs multi-threaded, it is important to keep certain things in mind.
 <ul>
 <li>Write the <code>setUp</code> and <code>tearDown</code> methods so they are thread safe. This generally means avoid using static members.</li>
 <li>Make the test methods discrete units of work and not long sequences of actions. By keeping the test method to a discrete operation, it makes it easier to combine test methods to create new test plans.</li>
 <li>Avoid making test methods depend on each other. Since Jmeter allows arbitrary sequencing of test methods, the runtime behavior is different than the default JUnit behavior.</li>
 <li>If a test method is configurable, be careful about where the properties are stored. Reading the properties from the Jar file is recommended.</li>
 <li>Each sampler creates an instance of the test class, so write your test so the setup happens in <code>oneTimeSetUp</code> and <code>oneTimeTearDown</code>.</li>
 </ul>
 </note>
 </description>
 <properties>
   <property name="Name" required="">Descriptive name for this element that is shown in the tree.</property>
   <property name="Search for JUnit4 annotations" required="Yes">Select this to search for JUnit4 tests (<code>@Test</code> annotations)</property>
   <property name="Package filter" required="">Comma separated list of packages to show. Example, <code>org.apache.jmeter</code>,<code>junit.framework</code>.</property>
   <property name="Class name" required="Yes">Fully qualified name of the JUnit test class.</property>
   <property name="Constructor string" required="">String pass to the string constructor. If a string is set, the sampler will use the
    string constructor instead of the empty constructor.</property>
   <property name="Test method" required="Yes">The method to test.</property>
   <property name="Success message" required="">A descriptive message indicating what success means.</property>
   <property name="Success code" required="">An unique code indicating the test was successful.</property>
   <property name="Failure message" required="">A descriptive message indicating what failure means.</property>
   <property name="Failure code" required="">An unique code indicating the test failed.</property>
   <property name="Error message" required="">A description for errors.</property>
   <property name="Error code" required="">Some code for errors. Does not need to be unique.</property>
   <property name="Do not call setUp and tearDown" required="Yes">Set the sampler not to call <code>setUp</code> and <code>tearDown</code>.
    By default, <code>setUp</code> and <code>tearDown</code> should be called. Not calling those methods could affect the test and make it inaccurate.
     This option should only be used with calling <code>oneTimeSetUp</code> and <code>oneTimeTearDown</code>. If the selected method is <code>oneTimeSetUp</code> or <code>oneTimeTearDown</code>,
      this option should be checked.</property>
   <property name="Append assertion errors" required="Yes">Whether or not to append assertion errors to the response message.</property>
   <property name="Append runtime exceptions" required="Yes">Whether or not to append runtime exceptions to the response message. Only applies if "<code>Append assertion errors</code>" is not selected.</property>
   <property name="Create a new Instance per sample" required="Yes">Whether or not to create a new JUnit instance for each sample. Defaults to false, meaning JUnit <code>TestCase</code> is created one and reused.</property>
 </properties>
 <p>
 The following JUnit4 annotations are recognised:
 </p>
 <dl>
 <dt><code>@Test</code></dt><dd>used to find test methods and classes. The "<code>expected</code>" and "<code>timeout</code>" attributes are supported.</dd>
 <dt><code>@Before</code></dt><dd>treated the same as <code>setUp()</code> in JUnit3</dd>
 <dt><code>@After</code></dt><dd>treated the same as <code>tearDown()</code> in JUnit3</dd>
 <dt><code>@BeforeClass</code>, <code>@AfterClass</code></dt><dd>treated as test methods so they can be run independently as required</dd>
 </dl>
 <note>
 Note that JMeter currently runs the test methods directly, rather than leaving it to JUnit.
 This is to allow the <code>setUp</code>/<code>tearDown</code> methods to be excluded from the sample time.
 </note>
 </component>
 
 <component name="Mail Reader Sampler"  index="&sect-num;.1.17"  width="595" height="413" screenshot="mailreader_sampler.png">
 <description>
 <p>
 The Mail Reader Sampler can read (and optionally delete) mail messages using POP3(S) or IMAP(S) protocols.
 </p>
 </description>
 <properties>
 <property name="Name" required="">Descriptive name for this element that is shown in the tree.</property>
 <property name="Server Type" required="Yes">The protocol used by the provider: e.g. <code>pop3</code>, <code>pop3s</code>, <code>imap</code>, <code>imaps</code>.
 or another string representing the server protocol.
 For example <code>file</code> for use with the read-only mail file provider.
 The actual provider names for POP3 and IMAP are <code>pop3</code> and <code>imap</code>
 </property>
 <property name="Server" required="Yes">Hostname or IP address of the server. See below for use with <code>file</code> protocol.</property>
 <property name="Port" required="No">Port to be used to connect to the server (optional)</property>
 <property name="Username" required="">User login name</property>
 <property name="Password" required="">User login password (N.B. this is stored unencrypted in the test plan)</property>
 <property name="Folder" required="Yes, if using IMAP(S)">The IMAP(S) folder to use. See below for use with <code>file</code> protocol.</property>
 <property name="Number of messages to retrieve" required="Yes">Set this to retrieve all or some messages</property>
 <property name="Fetch headers only" required="Yes">If selected, only the message headers will be retrieved.</property>
 <property name="Delete messages from the server" required="Yes">If set, messages will be deleted after retrieval</property>
 <property name="Store the message using MIME" required="Yes">Whether to store the message as MIME. 
 If so, then the entire raw message is stored in the Response Data; the headers are not stored as they are available in the data. 
 If not, the message headers are stored as Response Headers. 
 A few headers are stored (<code>Date</code>, <code>To</code>, <code>From</code>, <code>Subject</code>) in the body.
 </property>
 <property name="Use no security features" required="">Indicates that the connection to the server does not use any security protocol.</property>
 <property name="Use SSL" required="">Indicates that the connection to the server must use the SSL protocol.</property>
 <property name="Use StartTLS" required="">Indicates that the connection to the server should attempt to start the TLS protocol.</property>
 <property name="Enforce StartTLS" required="">If the server does not start the TLS protocol the connection will be terminated.</property>
 <property name="Trust All Certificates" required="">When selected it will accept all certificates independent of the CA.</property>
 <property name="Use local truststore" required="">When selected it will only accept certificates that are locally trusted.</property>
 <property name="Local truststore" required="">Path to file containing the trusted certificates.
 Relative paths are resolved against the current directory.
 <br />Failing that, against the directory containing the test script (JMX file).
 </property>
 </properties>
 <p>
 Messages are stored as subsamples of the main sampler.
 Multipart message parts are stored as subsamples of the message.
 </p>
 <p>
 <b>Special handling for "<code>file</code>" protocol:</b><br></br>
 The <code>file</code> JavaMail provider can be used to read raw messages from files.
 The <code>server</code> field is used to specify the path to the parent of the <code>folder</code>.
 Individual message files should be stored with the name <code>n.msg</code>,
 where <code>n</code> is the message number.
 Alternatively, the <code>server</code> field can be the name of a file which contains a single message.
 The current implementation is quite basic, and is mainly intended for debugging purposes. 
 </p>
 </component>
 
 <component name="Test Action" index="&sect-num;.1.18" width="467" height="184" screenshot="test_action.png">
 <description>
 The Test Action sampler is a sampler that is intended for use in a conditional controller.
 Rather than generate a sample, the test element either pauses or stops the selected target.
 <p>This sampler can also be useful in conjunction with the Transaction Controller, as it allows
 pauses to be included without needing to generate a sample. 
 For variable delays, set the pause time to zero, and add a Timer as a child.</p>
 <p>
 The "<code>Stop</code>" action stops the thread or test after completing any samples that are in progress.
 The "<code>Stop Now</code>" action stops the test without waiting for samples to complete; it will interrupt any active samples.
 If some threads fail to stop within the 5 second time-limit, a message will be displayed in GUI mode.
 You can try using the <code>Stop</code> command to see if this will stop the threads, but if not, you should exit JMeter.
 In non-GUI mode, JMeter will exit if some threads fail to stop within the 5 second time limit.
 <note>The time to wait can be changed using the JMeter property <code>jmeterengine.threadstop.wait</code>. The time is given in milliseconds.</note>
 </p>
 </description>
 <properties>
   <property name="Name" required="">Descriptive name for this element that is shown in the tree.</property>
   <property name="Target" required="Yes"><code>Current Thread</code> / <code>All Threads</code> (ignored for Pause)</property>
   <property name="Action" required="Yes"><code>Pause</code> / <code>Stop</code> / <code>Stop Now</code> / <code>Go to next loop iteration</code></property>
   <property name="Duration" required="Yes, if Pause is selected">How long to pause for (milliseconds)</property>
 </properties>
 </component>
 
 
 <component name="SMTP Sampler"  index="&sect-num;.1.19"  width="825" height="728" screenshot="smtp_sampler.png">
 <description>
 <p>
 The SMTP Sampler can send mail messages using SMTP/SMTPS protocol. 
 It is possible to set security protocols for the connection (SSL and TLS), as well as user authentication. 
 If a security protocol is used a verification on the server certificate will occur. <br></br>
 Two alternatives to handle this verification are available:<br></br>
 </p>
 <dl>
 <dt><code>Trust all certificates</code></dt><dd>This will ignore certificate chain verification</dd>
 <dt><code>Use a local truststore</code></dt><dd>With this option the certificate chain will be validated against the local truststore file.</dd>
 </dl>
 </description>
 <properties>
 <property name="Server" required="Yes">Hostname or IP address of the server. See below for use with <code>file</code> protocol.</property>
 <property name="Port" required="No">Port to be used to connect to the server.
 Defaults are: SMTP=25, SSL=465, StartTLS=587
 </property>
 <property name="Connection timeout" required="No">Connection timeout value in milliseconds (socket level). Default is infinite timeout.</property>
 <property name="Read timeout" required="No">Read timeout value in milliseconds (socket level). Default is infinite timeout.</property>
 <property name="Address From" required="Yes">The from address that will appear in the e-mail</property>
 <property name="Address To" required="Yes, unless CC or BCC is specified">The destination e-mail address (multiple values separated by "<code>;</code>")</property>
 <property name="Address To CC" required="No">Carbon copy destinations e-mail address (multiple values separated by "<code>;</code>")</property>
 <property name="Address To BCC" required="No">Blind carbon copy destinations e-mail address (multiple values separated by "<code>;</code>")</property>
 <property name="Address Reply-To" required="No">Alternate Reply-To address (multiple values separated by "<code>;</code>")</property>
 <property name="Use Auth" required="">Indicates if the SMTP server requires user authentication</property>
 <property name="Username" required="">User login name</property>
 <property name="Password" required="">User login password (N.B. this is stored unencrypted in the test plan)</property>
 <property name="Use no security features" required="">Indicates that the connection to the SMTP server does not use any security protocol.</property>
 <property name="Use SSL" required="">Indicates that the connection to the SMTP server must use the SSL protocol.</property>
 <property name="Use StartTLS" required="">Indicates that the connection to the SMTP server should attempt to start the TLS protocol.</property>
 <property name="Enforce StartTLS" required="">If the server does not start the TLS protocol the connection will be terminated.</property>
 <property name="Trust All Certificates" required="">When selected it will accept all certificates independent of the CA.</property>
 <property name="Use local truststore" required="">When selected it will only accept certificates that are locally trusted.</property>
 <property name="Local truststore" required="">Path to file containing the trusted certificates.
 Relative paths are resolved against the current directory.
 <br />Failing that, against the directory containing the test script (JMX file).
 </property>
 <property name="Subject" required="">The e-mail message subject.</property>
 <property name="Suppress Subject Header" required="">If selected, the "<code>Subject:</code>" header is omitted from the mail that is sent. 
 This is different from sending an empty "<code>Subject:</code>" header, though some e-mail clients may display it identically.</property>
 <property name="Include timestamp in subject" required="">Includes the <code>System.currentTimemillis()</code> in the subject line.</property>
 <property name="Add Header" required="No">Additional headers can be defined using this button.</property>
 <property name="Message" required="">The message body.</property>
 <property name="Send plain body (i.e. not multipart/mixed)">
 If selected, then send the body as a plain message, i.e. not <code>multipart/mixed</code>, if possible.
 If the message body is empty and there is a single file, then send the file contents as the message body.
 <note>
 Note: If the message body is not empty, and there is at least one attached file, then the body is sent as <code>multipart/mixed</code>.
 </note>
 </property>
 <property name="Attach files" required="">Files to be attached to the message.</property>
 <property name="Send .eml" required="">If set, the <code>.eml</code> file will be sent instead of the entries in the <code>Subject</code>, <code>Message</code>, and <code>Attach file(s)</code> fields</property>
 <property name="Calculate message size" required="">Calculates the message size and stores it in the sample result.</property>
 <property name="Enable debug logging?" required="">If set, then the "<code>mail.debug</code>" property is set to "<code>true</code>"</property>
 </properties>
 </component>
 
 <component name="OS Process Sampler"  index="&sect-num;.1.20"  width="683" height="582" screenshot="os_process_sampler.png">
 <description>
 <p>
 The OS Process Sampler is a sampler that can be used to execute commands on the local machine.<br></br>
 It should allow execution of any command that can be run from the command line.<br></br>
 Validation of the return code can be enabled, and the expected return code can be specified.<br></br>
 </p>
 <p>
 Note that OS shells generally provide command-line parsing. 
 This varies between OSes, but generally the shell will split parameters on white-space.
 Some shells expand wild-card file names; some don't.
 The quoting mechanism also varies between OSes.
 The sampler deliberately does not do any parsing or quote handling.
 The command and its parameters must be provided in the form expected by the executable.
 This means that the sampler settings will not be portable between OSes.
 </p>
 <p>
 Many OSes have some built-in commands which are not provided as separate executables. 
 For example the Windows <code>DIR</code> command is part of the command interpreter (<code>CMD.EXE</code>).
 These built-ins cannot be run as independent programs, but have to be provided as arguments to the appropriate command interpreter.
 </p>
 <p>
 For example, the Windows command-line: <code>DIR C:\TEMP</code> needs to be specified as follows:
 </p>
 <dl>
 <dt>Command:</dt><dd><code>CMD</code></dd>
 <dt>Param 1:</dt><dd><code>/C</code></dd>
 <dt>Param 2:</dt><dd><code>DIR</code></dd>
 <dt>Param 3:</dt><dd><code>C:\TEMP</code></dd>
 </dl>
 </description>
 <properties>
 <property name="Command" required="Yes">The program name to execute.</property>
 <property name="Working directory" required="No">Directory from which command will be executed, defaults to folder referenced by "<code>user.dir</code>" System property</property>
 <property name="Command Parameters" required="No">Parameters passed to the program name.</property>
 <property name="Environment Parameters" required="No">Key/Value pairs added to environment when running command.</property>
 <property name="Standard input (stdin)" required="No">Name of file from which input is to be taken (<code>STDIN</code>).</property>
 <property name="Standard output (stdout" required="No">Name of output file for standard output (<code>STDOUT</code>). 
 If omitted, output is captured and returned as the response data.</property>
 <property name="Standard error (stderr)" required="No">Name of output file for standard error (<code>STDERR</code>). 
 If omitted, output is captured and returned as the response data.</property>
 <property name="Check Return Code" required="No">If checked, sampler will compare return code with <code>Expected Return Code</code>.</property>
 <property name="Expected Return Code" required="No">Expected return code for System Call, required if "<code>Check Return Code</code>" is checked.</property>
 <property name="Timeout" required="No">Timeout for command in milliseconds, defaults to <code>0</code>, which means <em>no</em> timeout.
 If the timeout expires before the command finishes, JMeter will attempt to kill the OS process.
 </property>
 </properties>
 </component>
 
 <component name="MongoDB Script (DEPRECATED)" index="&sect-num;.1.21" width="847" height="635" screenshot="mongodb-script.png">
 <description><p>This sampler lets you send a Request to a MongoDB.</p>
 <p>Before using this you need to set up a
 <complink name="MongoDB Source Config"/> Configuration element
 </p>
 <note>This Element currently uses <code>com.mongodb.DB#eval</code> which takes a global write lock causing a performance impact on the database, see <a href="http://docs.mongodb.org/manual/reference/method/db.eval/"><code>db.eval()</code></a>.
 So it is better to avoid using this element for load testing and use JSR223+Groovy scripting using <a href="../api/org/apache/jmeter/protocol/mongodb/config/MongoDBHolder.html">MongoDBHolder</a> instead.
 MongoDB Script is more suitable for functional testing or test setup (setup/teardown threads)</note>
 </description>
 
 <properties>
         <property name="Name" required="No">Descriptive name for this sampler that is shown in the tree.</property>
         <property name="MongoDB Source" required="Yes">
         Name of the JMeter variable that the MongoDB connection is bound to.
         This must agree with the '<code>MongoDB Source</code>' field of a MongoDB Source Config.
         </property>
         <property name="Database Name" required="Yes">Database Name, will be used in your script
         </property>
         <property name="Username" required="No">
         </property>
         <property name="Password" required="No">
         </property>        
         <property name="Script" required="Yes">
         Mongo script as it would be used in MongoDB shell
         </property>        
 </properties>
 
 <links>
         <complink name="MongoDB Source Config"/>
 </links>
 <note>Ensure Variable Name is unique across Test Plan.</note>
 </component>
 
 <a href="#">^</a>
 
 </section>
 
 <section name="&sect-num;.2 Logic Controllers" anchor="logic_controllers">
 <description>
     <br>Logic Controllers determine the order in which Samplers are processed.</br>
 </description>
 
 <component name="Simple Controller" index="&sect-num;.2.1" anchor="simple_controller" width="330" height="77" screenshot="logic-controller/simple-controller.png">
 <description>
 <p>The Simple Logic Controller lets  you organize your Samplers and other
 Logic Controllers.  Unlike other Logic Controllers, this controller provides no functionality beyond that of a
 storage device.</p>
 </description>
 <properties>
         <property name="Name" required="No">Descriptive name for this controller that is shown in the tree.</property>
 </properties>
 
 <example title="Using the Simple Controller" anchor="simple_controller_example">
 <p><a href="../demos/SimpleTestPlan.jmx">Download</a> this example (see Figure 6).
 In this example, we created a Test Plan that sends two Ant HTTP requests and two
 Log4J HTTP requests.  We grouped the Ant and Log4J requests by placing them inside
 Simple Logic Controllers.  Remember, the Simple Logic Controller has no effect on how JMeter
 processes the controller(s) you add to it.  So, in this example, JMeter sends the requests in the
 following order: Ant Home Page, Ant News Page, Log4J Home Page, Log4J History Page.</p>
 <p>
 Note, the File Reporter
 is configured to store the results in a file named "<code>simple-test.dat</code>" in the current directory.</p>
 <figure width="585" height="213" image="logic-controller/simple-example.png">Figure 6 Simple Controller Example</figure>
 
 </example>
 </component>
 
 <component name="Loop Controller" index="&sect-num;.2.2" anchor="loop" width="326" height="114" screenshot="logic-controller/loop-controller.png">
 <description><p>If you add Generative or Logic Controllers to a Loop Controller, JMeter will
 loop through them a certain number of times, in addition to the loop value you
 specified for the Thread Group.  For example, if you add one HTTP Request to a
 Loop Controller with a loop count of two, and configure the Thread Group loop
 count to three, JMeter will send a total of <code>2 * 3 = 6</code> HTTP Requests.
 </p></description>
 
 <properties>
         <property name="Name" required="No">Descriptive name for this controller that is shown in the tree.</property>
         <property name="Loop Count" required="Yes, unless &quot;Forever&quot; is checked">
                 The number of times the subelements of this controller will be iterated each time
                 through a test run.
                 <p>The value <code>-1</code> is equivalent to checking the <code>Forever</code> toggle.</p>
                 <p><b>Special Case:</b> The Loop Controller embedded in the <a href="test_plan.html#thread_group">Thread Group</a>
                 element behaves slightly different.  Unless set to forever, it stops the test after
                 the given number of iterations have been done.</p>
                 <note>When using a function in this field, be aware it may be evaluated multiple times.
                 Example using <code>__Random</code> will evaluate it to a different value for each child samplers of Loop Controller and result into unwanted behaviour.</note></property>
 </properties>
 
 <example title="Looping Example" anchor="loop_example">
 
 <p><a href="../demos/LoopTestPlan.jmx">Download</a> this example (see Figure 4).
 In this example, we created a Test Plan that sends a particular HTTP Request
 only once and sends another HTTP Request five times.</p>
 
 <figure width="506" height="158" image="logic-controller/loop-example.png">Figure 4 - Loop Controller Example</figure>
 
 <p>We configured the Thread Group for a single thread and a loop count value of
 one. Instead of letting the Thread Group control the looping, we used a Loop
 Controller.  You can see that we added one HTTP Request to the Thread Group and
 another HTTP Request to a Loop Controller.  We configured the Loop Controller
 with a loop count value of five.</p>
 <p>JMeter will send the requests in the following order: Home Page, News Page,
 News Page, News Page, News Page, and News Page.</p>
 <note>Note, the File Reporter
 is configured to store the results in a file named "<code>loop-test.dat</code>" in the current directory.</note>
 
 </example>
 
 </component>
 
 <component name="Once Only Controller" index="&sect-num;.2.3" anchor="once_only_controller" width="330" height="78" screenshot="logic-controller/once-only-controller.png">
 <description>
 <p>The Once Only Logic Controller tells JMeter to process the controller(s) inside it only once per Thread, and pass over any requests under it
 during further iterations through the test plan.</p>
 
 <p>The Once Only Controller will now execute always during the first iteration of any looping parent controller.  
 Thus, if the Once Only Controller is placed under a Loop Controller specified to loop 5 times, then the Once Only Controller will execute only on the first iteration through the Loop Controller 
 (i.e. every 5 times).</p>
 <p>
 Note this means the Once Only Controller will still behave as previously expected if put under a Thread Group (runs only once per test per Thread), 
 but now the user has more flexibility in the use of the Once Only Controller.</p>
 
 <p>For testing that requires a login, consider placing the login request in this controller since each thread only needs
 to login once to establish a session.</p>
 </description>
 <properties>
         <property name="Name" required="No">Descriptive name for this controller that is shown in the tree.</property>
 </properties>
 
 <example title="Once Only Example" anchor="once_only_example">
 <p><a href="../demos/OnceOnlyTestPlan.jmx">Download</a> this example (see Figure 5).
 In this example, we created a Test Plan that has two threads that send HTTP request.
 Each thread sends one request to the Home Page, followed by three requests to the Bug Page.
 Although we configured the Thread Group to iterate three times, each JMeter thread only
 sends one request to the Home Page because this request lives inside a Once Only Controller.</p>
 <figure width="233" height="138" image="logic-controller/once-only-example.png">Figure 5. Once Only Controller Example</figure>
 <p>Each JMeter thread will send the requests in the following order: Home Page, Bug Page,
 Bug Page, Bug Page.</p>
 <p>Note, the File Reporter is configured to store the results in a file named "<code>loop-test.dat</code>" in the current directory.</p>
 
 </example>
 <note>The behaviour of the Once Only controller under anything other than the
 Thread Group or a Loop Controller is not currently defined. Odd things may happen.</note>
 </component>
 
 <component name="Interleave Controller" index="&sect-num;.2.4"  width="626" height="127" screenshot="logic-controller/interleave-controller.png">
 <description><p>If you add Generative or Logic Controllers to an Interleave Controller, JMeter will alternate among each of the
 other controllers for each loop iteration. </p>
 </description>
 <properties>
         <property name="name" required="No">Descriptive name for this controller that is shown in the tree.</property>
         <property name="ignore sub-controller blocks" required="No">If checked, the interleave controller will treat sub-controllers like single request elements and only allow one request per controller at a time.  </property>
         <property name="Interleave accross threads" required="No">If checked, the interleave controller will alternate among each of its children controllers for each loop iteration but accross all threads, for example in a 
         configuration with 4 threads and 3 child controllers, on first iteration
         thread 1 will run first child, thread 2 second child, thread 3 third child, thread 4 first child, on next iteration each thread will run the following child controller</property>
 </properties>
 
 <!--
 For example, if you
 add three HTTP Requests to an Interleave Controller and configure the Thread
 Group to loop, here is the sequence in which JMeter sends the requests:
 </p>
 <table border="1" cellspacing="0" cellpadding="4">
 <tr valign="top"><th>Loop Iteration</th><th>Description</th></tr>
 <tr valign="top"><td>1</td><td>JMeter sends the first HTTP Request.</td></tr>
 <tr valign="top"><td>2</td><td>JMeter sends the second HTTP Request.</td></tr>
 <tr valign="top"><td>3</td><td>JMeter sends the third HTTP Request.</td></tr>
 <tr valign="top"><td>4</td><td>Because there are no more requests in controller, JMeter start over and sends the first HTTP Request.</td></tr>
 <tr valign="top"><td>5</td><td>JMeter sends the second HTTP Request.</td></tr>
 <tr valign="top"><td>(and so on)</td><td>&hellip;</td></tr>
 </table>
 -->
 <example title="Simple Interleave Example" anchor="simple_interleave_example">
 
 <p><a href="../demos/InterleaveTestPlan.jmx">Download</a> this example (see Figure 1).  In this example,
 we configured the Thread Group to have two threads and a loop count of five, for a total of ten
 requests per thread. See the table below for the sequence JMeter sends the HTTP Requests.</p>
 
 <figure width="231" height="153" image="logic-controller/interleave.png">Figure 1 - Interleave Controller Example 1</figure>
 
 <table border="1" cellspacing="0" cellpadding="4">
 <tr valign="top"><th>Loop Iteration</th><th>Each JMeter Thread Sends These HTTP Requests</th></tr>
 <tr valign="top"><td>1</td><td>News Page</td></tr>
 <tr valign="top"><td>1</td><td>Log Page</td></tr>
 <tr valign="top"><td>2</td><td>FAQ Page</td></tr>
 <tr valign="top"><td>2</td><td>Log Page</td></tr>
 <tr valign="top"><td>3</td><td>Gump Page</td></tr>
 <tr valign="top"><td>3</td><td>Log Page</td></tr>
 <tr valign="top"><td>4</td><td>Because there are no more requests in the controller,<br> </br> JMeter starts over and sends the first HTTP Request, which is the News Page.</td></tr>
 <tr valign="top"><td>4</td><td>Log Page</td></tr>
 <tr valign="top"><td>5</td><td>FAQ Page</td></tr>
 <tr valign="top"><td>5</td><td>Log Page</td></tr>
 </table>
 
 
 </example>
 
 <example title="Useful Interleave Example" anchor="useful_interleave_example">
 
 <p><a href="../demos/InterleaveTestPlan2.jmx">Download</a> another example (see Figure 2).  In this
 example, we configured the Thread Group
 to have a single thread and a loop count of eight.  Notice that the Test Plan has an outer Interleave Controller with
 two Interleave Controllers inside of it.</p>
 
 <figure width="251" height="250" image="logic-controller/interleave2.png">
         Figure 2 - Interleave Controller Example 2
 </figure>
 
 <p>The outer Interleave Controller alternates between the
 two inner ones.  Then, each inner Interleave Controller alternates between each of the HTTP Requests.  Each JMeter
 thread will send the requests in the following order: Home Page, Interleaved, Bug Page, Interleaved, CVS Page, Interleaved, and FAQ Page, Interleaved.</p>
 <p>Note, the File Reporter is configured to store the results in a file named "<code>interleave-test2.dat</code>" in the current directory.</p>
 
 <figure width="257" height="253" image="logic-controller/interleave3.png">
         Figure 3 - Interleave Controller Example 3
 </figure>
 <p>If the two interleave controllers under the main interleave controller were instead simple controllers, then the order would be: Home Page, CVS Page, Interleaved, Bug Page, FAQ Page, Interleaved.</p>
 <p>However, if "<code>ignore sub-controller blocks</code>" was checked on the main interleave controller, then the order would be: Home Page, Interleaved, Bug Page, Interleaved, CVS Page, Interleaved, and FAQ Page, Interleaved.</p>
 </example>
 </component>
 
 <component name="Random Controller" index="&sect-num;.2.5" width="328" height="100" screenshot="logic-controller/random-controller.png">
 <description>
 <p>The Random Logic Controller acts similarly to the Interleave Controller, except that
 instead of going in order through its sub-controllers and samplers, it picks one
 at random at each pass.</p>
 <note>Interactions between multiple controllers can yield complex behavior.
 This is particularly true of the Random Controller.  Experiment before you assume
 what results any given interaction will give</note>
 </description>
 <properties>
         <property name="Name" required="No">Descriptive name for this controller that is shown in the tree.</property>
         <property name="ignore sub-controller blocks" required="No">If checked, the interleave controller will treat sub-controllers like single request elements and only allow one request per controller at a time.  </property>
 </properties>
 
 </component>
 
 
 
 <component name="Random Order Controller" index="&sect-num;.2.6" width="328" height="76" screenshot="randomordercontroller.png">
     <description>
         <p>The Random Order Controller is much like a Simple Controller in that it will execute each child
          element at most once, but the order of execution of the nodes will be random.</p>
     </description>
 <properties>
     <property name="Name" required="No">Descriptive name for this controller that is shown in the tree.</property>
 </properties>
 </component>
 
 <component name="Throughput Controller" index="&sect-num;.2.7" width="329" height="167" screenshot="throughput_controller.png">
 <description>
 <p>The Throughput Controller allows the user to control how often it is executed.  
 There are two modes:
 <ul>
 <li>percent execution</li>
 <li>total executions</li>
 </ul>
 <dl>
   <dt><code>Percent executions</code></dt><dd>causes the controller to execute a certain percentage of the iterations through the test plan.</dd>
   <dt><code>Total executions</code></dt><dd>causes the controller to stop executing after a certain number of executions have occurred.</dd>
 </dl>
 Like the Once Only Controller, this setting is reset when a parent Loop Controller restarts.
 </p>
 <note>This controller is badly named, as it does not control throughput.
 Please refer to the <complink name="Constant Throughput Timer"/> for an element that can be used to adjust the throughput.
 </note>
 </description>
 <note>The Throughput Controller can yield very complex behavior when combined with other controllers - in particular with interleave or random controllers as parents (also very useful).</note>
 <properties>
         <property name="Name" required="No">Descriptive name for this controller that is shown in the tree.</property>
         <property name="Execution Style" required="Yes">Whether the controller will run in percent executions or total executions mode.</property>
         <property name="Throughput" required="Yes">A number.  For percent execution mode, a number from <code>0</code>-<code>100</code> that indicates the percentage of times the controller will execute.  "<code>50</code>" means the controller will execute during half the iterations through the test plan.  For total execution mode, the number indicates the total number of times the controller will execute.</property>
         <property name="Per User" required="No">If checked, per user will cause the controller to calculate whether it should execute on a per user (per thread) basis.  If unchecked, then the calculation will be global for all users.  For example, if using total execution mode, and uncheck "<code>per user</code>", then the number given for throughput will be the total number of executions made.  If "<code>per user</code>" is checked, then the total number of executions would be the number of users times the number given for throughput.</property>
 </properties>
 
 </component>
 
 <component name="Runtime Controller" index="&sect-num;.2.8" width="328" height="100" screenshot="runtimecontroller.png">
     <description>
         <p>The Runtime Controller controls how long its children are allowed to run.
         </p>
     </description>
 <properties>
     <property name="Name" required="Yes">Descriptive name for this controller that is shown in the tree, and used to name the transaction.</property>
     <property name="Runtime (seconds)" required="Yes">Desired runtime in seconds</property>
 </properties>
 </component>
 
 <component name="If Controller" index="&sect-num;.2.9" width="497" height="131" screenshot="ifcontroller.png">
     <description>
         <p>The If Controller allows the user to control whether the test elements below it (its children) are run or not.</p>
         <p>
         By default, the condition is evaluated only once on initial entry, but you have the option to have it evaluated for every runnable element contained in the controller.
         </p>
         <p>
         The script can be processed as a variable expression, rather than requiring Javascript.
         It was always possible to use functions and variables in the Javascript condition, so long as they evaluated to "<code>true</code>" or "<code>false</code>";
         now this can be done without the overhead of using Javascript as well. For example, previously one could use the condition:
         <code>${__jexl3(${VAR} == 23)}</code> and this would be evaluated as <code>true</code>/<code>false</code>, the result would then be passed to Javascript
         which would then return <code>true</code>/<code>false</code>. If the Variable Expression option is selected, then the expression is evaluated
         and compared with "<code>true</code>", without needing to use Javascript.
         Also, variable expressions can return any value, whereas the
         Javascript condition must return "<code>true</code>"/"<code>false</code>" or an error is logged.
         </p>
         <note>
         No variables are made available to the script when the condition is interpreted as Javascript.
         If you need access to such variables, then select "<code>Interpret Condition as Variable Expression?</code>" and use
         a <code>__jexl3</code>, <code>__groovy</code> or <code>__javaScript()</code> (discouraged for performance) function call. You can then use the objects "<code>vars</code>", "<code>log</code>", "<code>ctx</code>" etc. in the script.
         </note>
         <note>
         To test if a variable is undefined (or null) do the following, suppose var is named <code>myVar</code>, expression will be:
         <source>"${myVar}" == "\${myVar}"</source>
         Or use:
         <source>"${myVar}" != "\${myVar}"</source>
         to test if a variable is defined and is not null.
         </note>
     </description>
 <properties>
     <property name="Name" required="No">Descriptive name for this controller that is shown in the tree.</property>
     <property name="Condition (default Javascript)" required="Yes">By default the condition is interpreted as <b>Javascript</b> code that returns "<code>true</code>" or "<code>false</code>",
     but this can be overridden (see below)</property>
     <property name="Interpret Condition as Variable Expression?" required="Yes">If this is selected, then the condition must be an expression that evaluates to "<code>true</code>" (case is ignored).
     For example, <code>${FOUND}</code> or <code>${__jexl3(${VAR} &gt; 100)}</code>.
     Unlike the Javascript case, the condition is only checked to see if it matches "<code>true</code>" (case is ignored).
     </property>
     <property name="Evaluate for all children" required="Yes">
     Should condition be evaluated for all children?
     If not checked, then the condition is only evaluated on entry.
     </property>
 </properties>
     <example title="Examples (Javascript)" anchor="example_if_javascript">
         <ul>
             <li><code>${COUNT} &lt; 10</code></li>
             <li><code>"${VAR}" == "abcd"</code></li>
         </ul>
         If there is an error interpreting the code, the condition is assumed to be <code>false</code>, and a message is logged in <code>jmeter.log</code>.
         <note>Note it is advised to avoid using Javascript mode for performances</note>
     </example>
     <example title="Examples (Variable Expression)" anchor="example_if_variable">
         <ul>
             <li><code>${__jexl3(${COUNT} &lt; 10)}</code></li>
             <li><code>${RESULT}</code></li>
             <li><code>${JMeterThread.last_sample_ok}</code> (check if the last sample succeeded)</li>
         </ul>
     </example>
 </component>
 
 
 
 
 
 
 
 
 <component name="While Controller" index="&sect-num;.2.10" width="362" height="102" screenshot="whilecontroller.png">
     <description>
 <p>
 The While Controller runs its children until the condition is "<code>false</code>".
 </p>
 
 <p>Possible condition values:</p>
 <ul>
 <li>blank - exit loop when last sample in loop fails</li>
 <li><code>LAST</code> - exit loop when last sample in loop fails.
 If the last sample just before the loop failed, don't enter loop.</li>
 <li>Otherwise - exit (or don't enter) the loop when the condition is equal to the string "<code>false</code>"</li>
 </ul>
 <note>
 The condition can be any variable or function that eventually evaluates to the string "<code>false</code>".
 This allows the use of JavaScript, BeanShell, properties or variables as needed.
 </note>
 <br></br>
 <note>
 Note that the condition is evaluated twice, once before starting sampling children and once at end of children sampling, so putting
 non idempotent functions in Condition (like <code>__counter</code>) can introduce issues.
 </note>
 <br></br>
 For example:
 <ul>
     <li><code>${VAR}</code> - where <code>VAR</code> is set to false by some other test element</li>
     <li><code>${__javaScript(${C}==10)}</code></li>
     <li><code>${__javaScript("${VAR2}"=="abcd")}</code></li>
     <li><code>${_P(property)}</code> - where property is set to "<code>false</code>" somewhere else</li>
 </ul>
     </description>
 <properties>
     <property name="Name" required="Yes">Descriptive name for this controller that is shown in the tree, and used to name the transaction.</property>
     <property name="Condition" required="Yes">blank, <code>LAST</code>, or variable/function</property>
 </properties>
 </component>
 
 <component name="Switch Controller" index="&sect-num;.2.11" width="361" height="106" screenshot="switchcontroller.png">
     <description>
 <p>
 The Switch Controller acts like the <complink name="Interleave Controller"/> 
 in that it runs one of the subordinate elements on each iteration, but rather than
 run them in sequence, the controller runs the element defined by the switch value.
 </p>
 <note>
 The switch value can also be a name.
 </note>
 <p>If the switch value is out of range, it will run the zeroth element, 
 which therefore acts as the default for the numeric case.
 It also runs the zeroth element if the value is the empty string.</p>
 <p>
 If the value is non-numeric (and non-empty), then the Switch Controller looks for the
 element with the same name (case is significant).
 If none of the names match, then the element named "<code>default</code>" (case not significant) is selected.
 If there is no default, then no element is selected, and the controller will not run anything.
 </p>
 </description>
 <properties>
     <property name="Name" required="Yes">Descriptive name for this controller that is shown in the tree, and used to name the transaction.</property>
     <property name="Switch Value" required="Yes">The number (or name) of the subordinate element to be invoked. Elements are numbered from 0.</property>
 </properties>
 </component>
 
 <component name="ForEach Controller" index="&sect-num;.2.12" anchor="loop" width="342" height="193" screenshot="logic-controller/foreach-controller.png">
 <description><p>A ForEach controller loops through the values of a set of related variables. 
 When you add samplers (or controllers) to a ForEach controller, every sample (or controller)
 is executed one or more times, where during every loop the variable has a new value.
 The input should consist of several variables, each extended with an underscore and a number.
 Each such variable must have a value.
 So for example when the input variable has the name <code>inputVar</code>, the following variables should have been defined:</p>
         <ul>
         <li><code>inputVar_1 = wendy</code></li>
         <li><code>inputVar_2 = charles</code></li>
         <li><code>inputVar_3 = peter</code></li>
         <li><code>inputVar_4 = john</code></li>
         </ul>
         <p>Note: the "<code>_</code>" separator is now optional.</p>
 <p>
 When the return variable is given as "<code>returnVar</code>", the collection of samplers and controllers under the ForEach controller will be executed <code>4</code> consecutive times,
 with the return variable having the respective above values, which can then be used in the samplers.
 </p>
 <p>
 It is especially suited for running with the regular expression post-processor. 
 This can "create" the necessary input variables out of the result data of a previous request.
 By omitting the "<code>_</code>" separator, the ForEach Controller can be used to loop through the groups by using
 the input variable <code>refName_g</code>, and can also loop through all the groups in all the matches
 by using an input variable of the form <code>refName_${C}_g</code>, where <code>C</code> is a counter variable.
 </p>
 <note>The ForEach Controller does not run any samples if <code>inputVar_1</code> is <code>null</code>.
 This would be the case if the Regular Expression returned no matches.</note>
 </description>
 
 <properties>
         <property name="Name" required="No">Descriptive name for this controller that is shown in the tree.</property>
         <property name="Input variable prefix" required="Yes">Prefix for the variable names to be used as input.</property>
         <property name="Start index for loop" required="No">Start index (exclusive) for loop over variables (first element is at start index + 1)</property>
         <property name="End index for loop" required="No">End index (inclusive) for loop over variables</property>
         <property name="Output variable" required="Yes">
                 The name of the variable which can be used in the loop for replacement in the samplers</property>
         <property required="Yes" name="Use Separator">If not checked, the "<code>_</code>" separator is omitted.</property>
 </properties>
 
 <example title="ForEach Example" anchor="foreach_example">
 
 <p><a href="../demos/forEachTestPlan.jmx">Download</a> this example (see Figure 7).
 In this example, we created a Test Plan that sends a particular HTTP Request
 only once and sends another HTTP Request to every link that can be found on the page.</p>
 
 <figure width="300" height="158" image="logic-controller/foreach-example.png">Figure 7 - ForEach Controller Example</figure>
 
 <p>We configured the Thread Group for a single thread and a loop count value of
 one. You can see that we added one HTTP Request to the Thread Group and
 another HTTP Request to the ForEach Controller.</p>
 <p>After the first HTTP request, a regular expression extractor is added, which extracts all the html links
 out of the return page and puts them in the <code>inputVar</code> variable</p>
 <p>In the ForEach loop, a HTTP sampler is added which requests all the links that were extracted from the first returned HTML page.
 </p></example>
 <example title="ForEach Example" anchor="foreach_example2">
 <p>Here is <a href="../demos/ForEachTest2.jmx">another example</a> you can download. 
 This has two Regular Expressions and ForEach Controllers.
 The first RE matches, but the second does not match, 
 so no samples are run by the second ForEach Controller</p>
 <figure width="237" height="249" image="logic-controller/foreach-example2.png">Figure 8 - ForEach Controller Example 2</figure>
 <p>The Thread Group has a single thread and a loop count of two.
 </p><p>
 Sample 1 uses the JavaTest Sampler to return the string "<code>a b c d</code>".
 </p><p>The Regex Extractor uses the expression <code>(\w)\s</code> which matches a letter followed by a space,
 and returns the letter (not the space). Any matches are prefixed with the string "<code>inputVar</code>".
 </p><p>The ForEach Controller extracts all variables with the prefix "<code>inputVar_</code>", and executes its
 sample, passing the value in the variable "<code>returnVar</code>". In this case it will set the variable to the values "<code>a</code>" "<code>b</code>" and "<code>c</code>" in turn.
 </p><p>The <code>For 1</code> Sampler is another Java Sampler which uses the return variable "<code>returnVar</code>" as part of the sample Label
 and as the sampler Data.
 </p><p><code>Sample 2</code>, <code>Regex 2</code> and <code>For 2</code> are almost identical, except that the Regex has been changed to "<code>(\w)\sx</code>",
 which clearly won't match. Thus the <code>For 2</code> Sampler will not be run.
 </p>
 </example>
 </component>
 
 <component name="Module Controller" index="&sect-num;.2.13" width="526" height="318" screenshot="module_controller.png">
 <description>
 <p>
 The Module Controller provides a mechanism for substituting test plan fragments into the current test plan at run-time.
 </p>
 <p>
 A test plan fragment consists of a Controller and all the test elements (samplers etc.) contained in it. 
 The fragment can be located in any Thread Group, or on the <complink name="WorkBench" />.
 If the fragment is located in a Thread Group, then its Controller can be disabled to prevent the fragment being run
 except by the Module Controller. 
 Or you can store the fragments in a dummy Thread Group, and disable the entire Thread Group. 
 </p>
 <p>
 There can be multiple fragments, each with a different series of
 samplers under them.  The module controller can then be used to easily switch between these multiple test cases simply by choosing
 the appropriate controller in its drop down box.  This provides convenience for running many alternate test plans quickly and easily.
 </p>
 <p>
 A fragment name is made up of the Controller name and all its parent names.
 For example:
 </p>
 <pre>
 Test Plan / Protocol: JDBC / Control / Interleave Controller (Module1)
 </pre>
 <p>
 Any <b>fragments used by the Module Controller must have a unique name</b>,
 as the name is used to find the target controller when a test plan is reloaded.
 For this reason it is best to ensure that the Controller name is changed from the default
 - as shown in the example above -
 otherwise a duplicate may be accidentally created when new elements are added to the test plan. 
 </p>
 </description>
 <note>The Module Controller should not be used with remote testing or non-gui testing in conjunction with Workbench components since the Workbench test elements are not part of test plan <code>.jmx</code> files.  Any such test will fail.</note>
 <properties>
         <property name="Name" required="No">Descriptive name for this controller that is shown in the tree.</property>
         <property name="Module to Run" required="Yes">The module controller provides a list of all controllers loaded into the gui.  Select
         the one you want to substitute in at runtime.</property>
 </properties>
 </component>
 
 <component name="Include Controller" index="&sect-num;.2.14" width="417" height="130" screenshot="includecontroller.png">
     <description>
 <p>
 The include controller is designed to use an external jmx file. To use it, create a Test Fragment 
 underneath the Test Plan and add any desired samplers, controllers etc. below it.
 Then save the Test Plan.  The file is now ready to be included as part of other Test Plans.
 </p>
 <p>
 For convenience, a <complink name="Thread Group" /> can also be added in the external JMX file for debugging purposes.
 A <complink name="Module Controller" /> can be used to reference the Test Fragment.  The <complink name="Thread Group" /> will be ignored during the 
 include process.
 </p>
 <p>
 If the test uses a Cookie Manager or User Defined Variables, these should be placed in the top-level
 test plan, not the included file, otherwise they are not guaranteed to work.
 </p>
 <note>
 This element does not support variables/functions in the filename field.<br></br>
 However, if the property <code>includecontroller.prefix</code> is defined, 
 the contents are used to prefix the pathname.
 </note>
 <note>
 When using Include Controller and including the same JMX file, ensure you name the Include Controller differently to avoid facing known issue <bugzilla>50898</bugzilla>.
 </note>
 <p>
 If the file cannot be found at the location given by <code>prefix</code>+<code>Filename</code>, then the controller
 attempts to open the <code>Filename</code> relative to the JMX launch directory.
 </p>
 </description>
 <properties>
     <property name="Filename" required="Yes">The file to include.</property>
 </properties>
 </component>
 
 <component name="Transaction Controller" index="&sect-num;.2.15" width="622" height="140" screenshot="transactioncontroller.png">
     <description>
         <p>
         The Transaction Controller generates an additional
         sample which measures the overall time taken to perform the nested test elements.
         </p>
         <note>
         Note: when the check box "<code>Include duration of timer and pre-post processors in generated sample</code>" is checked,
         the time includes all processing within the controller scope, not just the samples.
         </note>
         <p>
         There are two modes of operation:
         </p>
         <ul>
         <li>additional sample is added after the nested samples</li>
         <li>additional sample is added as a parent of the nested samples</li>
         </ul>
         <p>
         The generated sample time includes all the times for the nested samplers excluding by default (since 2.11) timers and processing time of pre/post processors 
         unless checkbox "<code>Include duration of timer and pre-post processors in generated sample</code>" is checked.
         Depending on the clock resolution, it may be slightly longer than the sum of the individual samplers plus timers.
         The clock might tick after the controller recorded the start time but before the first sample starts.
         Similarly at the end.
         </p>
         <p>The generated sample is only regarded as successful if all its sub-samples are successful.</p>
         <p>
         In parent mode, the individual samples can still be seen in the Tree View Listener,
         but no longer appear as separate entries in other Listeners.
         Also, the sub-samples do not appear in CSV log files, but they can be saved to XML files.
         </p>
         <note>
         In parent mode, Assertions (etc.) can be added to the Transaction Controller.
         However by default they will be applied to both the individual samples and the overall transaction sample.
         To limit the scope of the Assertions, use a Simple Controller to contain the samples, and add the Assertions
         to the Simple Controller.
         Parent mode controllers do not currently properly support nested transaction controllers of either type.
         </note>
     </description>
 <properties>
     <property name="Name" required="Yes">Descriptive name for this controller that is shown in the tree, and used to name the transaction.</property>
     <property name="Generate Parent Sample" required="Yes">
     If checked, then the sample is generated as a parent of the other samples,
     otherwise the sample is generated as an independent sample.
     </property>
     <property name="Include duration of timer and pre-post processors in generated sample" required="Yes">
     Whether to include timer, pre- and post-processing delays in the generated sample.
     Default is <code>false</code>
     </property>
 </properties>
 </component>
 
 <component name="Recording Controller" index="&sect-num;.2.16" width="420" height="79" screenshot="logic-controller/recording-controller.png">
 <description>
 <p>The Recording Controller is a place holder indicating where the proxy server should
 record samples to.  During test run, it has no effect, similar to the Simple Controller.  But during
 recording using the <complink name="HTTP(S) Test Script Recorder" />, all recorded samples will by default
 be saved under the Recording Controller.</p>
 
 </description>
 <properties>
         <property name="Name" required="No">Descriptive name for this controller that is shown in the tree.</property>
 </properties>
 
 </component>
 
 <component name="Critical Section Controller" index="&sect-num;.2.17" width="469" height="129" screenshot="logic-controller/critical-section-controller.png">
 <description>
 <p>The Critical Section Controller ensures that its children elements (samplers/controllers, etc.) will be executed
 by only one thread as a named lock will be taken before executing children of controller.</p>
 </description>
 <p>
     The figure below shows an example of using Critical Section Controller, in the figure below 2 Critical Section Controllers ensure
     that:
 </p>
     <ul>
         <li><code>DS2-${__threadNum}</code> is executed only by one thread at a time</li>
         <li><code>DS4-${__threadNum}</code> is executed only by one thread at a time</li>
     </ul>
 <figure width="276" height="237" image="logic-controller/critical-section-controller-tp.png">Test Plan using Critical Section Controller</figure>
 
 <properties>
         <property name="Lock Name" required="Yes">Lock that will be taken by controller, ensure you use different lock names for unrelated sections</property>
 </properties>
 <note>
 Critical Section Controller takes locks only within one JVM, so if using Distributed testing ensure your use case does not rely on all threads of all JVMs blocking.
 </note>
 
 </component>
 
 <a href="#">^</a>
 
 </section>
 
 <section name="&sect-num;.3 Listeners" anchor="listeners">
 <description>
     <br></br>
 Most of the listeners perform several roles in addition to "listening"
 to the test results.  
 They also provide means to view, save, and read saved test results.
 <p>Note that Listeners are processed at the end of the scope in which they are found.</p>
 <p>
 The saving and reading of test results is generic.  The various
 listeners have a panel whereby one can specify the file to
 which the results will be written (or read from).
 By default, the results are stored as XML
 files, typically with a "<code>.jtl</code>" extension.
 Storing as CSV is the most efficient option, but is less detailed than XML (the other available option).
 </p>
 <p>
 <b>Listeners do <i>not</i> process sample data in non-GUI mode, but the raw data will be saved if an output
 file has been configured.</b>
 In order to analyse the data generated by a non-GUI test run, you need to load the file into the appropriate
 Listener.
 </p>
 <note>
 To read existing results and display them, use the file panel Browse button to open the file.
 </note>
 <p>
 If you want to clear any current data before loading a new file, use the menu item
 <menuchoice>
   <guimenuitem>Run</guimenuitem>
   <guimenuitem>Clear</guimenuitem>
   <shortcut>
     <keycombo><keysym>Ctrl</keysym><keysym>Shift</keysym><keysym>E</keysym></keycombo>
   </shortcut>
 </menuchoice>
 or
 <menuchoice>
   <guimenuitem>Run</guimenuitem>
   <guimenuitem>Clear All</guimenuitem>
   <shortcut>
     <keycombo><keysym>Ctrl</keysym><keysym>E</keysym></keycombo>
   </shortcut>
 </menuchoice>
 before loading the file.
 </p>
 <p>Results can be read from XML or CSV format files.
 When reading from CSV results files, the header (if present) is used to determine which fields are present.
 <b>In order to interpret a header-less CSV file correctly, the appropriate properties must be set in <code>jmeter.properties</code>.</b>
 <note>
 XML files written by JMeter have version 1.0 declared in header while actual file is serialized with 1.1 rules. 
 (This is done for historical compatibility reasons; see <bugzilla>59973</bugzilla> and <bugzilla>58679</bugzilla>) 
 This causes strict XML parsers to fail. Consider using non-strict XML parsers to read JTL files.
 </note>
 </p>
 <note>
 The file name can contain function and/or variable references.
 However variable references do not work in client-server mode (functions work OK).
 This is because the file is created on the client, and the client does not run the test locally so does not set up variables.
 </note>
 <p><b>Listeners can use a lot of memory if there are a lot of samples.</b>
 Most of the listeners currently keep a copy of every sample in their scope, apart from:
 </p>
 <ul>
 <li>Simple Data Writer</li>
 <li>BeanShell/JSR223 Listener</li>
 <li>Mailer Visualizer</li>
-<li>Monitor Results</li>
 <li>Summary Report</li>
 </ul>
 <p>
 The following Listeners no longer need to keep copies of every single sample.
 Instead, samples with the same elapsed time are aggregated.
 Less memory is now needed, especially if most samples only take a second or two at most.
 </p>
 <ul>
 <li>Aggregate Report</li>
 <li>Aggregate Graph</li>
 </ul>
 <p>To minimise the amount of memory needed, use the Simple Data Writer, and use the CSV format.</p>
 <note>
 JMeter variables can be saved to the output files.
 This can only be specified using a property.
 See the <a href="listeners.html#sample_variables">Listener Sample Variables</a> for details
 </note>
 <p>
 For full details on setting up the default items to be saved
 see the <a href="listeners.html#defaults">Listener Default Configuration</a> documentation.
 For details of the contents of the output files,
 see the <a href="listeners.html#csvlogformat">CSV log</a> format or
 the <a href="listeners.html#xmlformat2.1">XML log</a> format.
 </p>
 <note>The entries in <code>jmeter.properties</code> are used to define the defaults; 
 these can be overridden for individual listeners by using the Configure button,
 as shown below. 
 The settings in <code>jmeter.properties</code> also apply to the listener that is added
 by using the <code>-l</code> command-line flag.
 </note>
 <p>
     The figure below shows an example of the result file configuration panel
 </p>
 <figure width="741" height="141" image="simpledatawriter.png">Result file configuration panel</figure>
 <properties>
         <property name="Filename" required="No">Name of the file containing sample results.
         The file name can be specified using either a relative or an absolute path name.
         Relative paths are resolved relative to the current working directory (which defaults to the <code>bin/</code> directory).
         JMeter also support paths relative to the directory containing the current test plan (JMX file).
         If the path name begins with "<code>~/</code>" (or whatever is in the <code>jmeter.save.saveservice.base_prefix</code> JMeter property),
         then the path is assumed to be relative to the JMX file location. 
         </property>
         <property name="Browse &hellip;" required="No">File Browse Button</property>
         <property name="Errors" required="No">Select this to write/read only results with errors</property>
         <property name="Successes" required="No">Select this to write/read only results without errors.
         If neither <code>Errors</code> nor <code>Successes</code> is selected, then all results are processed.</property>
         <property name="Configure" required="No">Configure Button, see below</property>
 </properties>
 </description>
 
 <component name="Sample Result Save Configuration" index="&sect-num;.3.1"  width="760" height="304" screenshot="sample_result_config.png">
 <description>
 <p>
 Listeners can be configured to save different items to the result log files (JTL) by using the Config popup as shown below.
 The defaults are defined as described in  the <a href="listeners.html#defaults">Listener Default Configuration</a> documentation.
 Items with (<code>CSV</code>) after the name only apply to the CSV format; items with (<code>XML</code>) only apply to XML format.
 CSV format cannot currently be used to save any items that include line-breaks.
 </p>
 <p>
 Note that cookies, method and the query string are saved as part of the "<code>Sampler Data</code>" option.
 </p>
 </description>
 </component>
 
 <component name="Graph Results" index="&sect-num;.3.3" width="915" height="686" screenshot="graph_results.png">
 <description>
 <note>
 Graph Results MUST NOT BE USED during load test as it consumes a lot of resources (memory and CPU). Use it only for either functional testing or 
 during Test Plan debugging and Validation.
 </note>
 <p>The Graph Results listener generates a simple graph that plots all sample times.  Along
 the bottom of the graph, the current sample (black), the current average of all samples (blue), the
 current standard deviation (red), and the current throughput rate (green) are displayed in milliseconds.</p>
 <p>The throughput number represents the actual number of requests/minute the server handled.  This calculation
 includes any delays you added to your test and JMeter's own internal processing time.  The advantage
 of doing the calculation like this is that this number represents something
 real - your server in fact handled that many requests per minute, and you can increase the number of threads
 and/or decrease the delays to discover your server's maximum throughput.  Whereas if you made calculations
 that factored out delays and JMeter's processing, it would be unclear what you could conclude from that
 number.</p></description>
 <p>The following table briefly describes the items on the graph. 
 Further details on the precise meaning of the statistical terms can be found on the web
  - e.g. Wikipedia - or by consulting a book on statistics.
  </p>
  <ul>
  <li><code>Data</code> - plot the actual data values</li>
  <li><code>Average</code> - plot the Average</li>
  <li><code>Median</code> - plot the <a href="glossary.html#Median">Median</a> (midway value)</li>
  <li><code>Deviation</code> - plot the <a href="glossary.html#StandardDeviation">Standard Deviation</a> (a measure of the variation)</li>
  <li><code>Throughput</code> - plot the number of samples per unit of time</li>
  </ul>
  <p>The individual figures at the bottom of the display are the current values. 
  "<code>Latest Sample</code>" is the current elapsed sample time, shown on the graph as "<code>Data</code>".</p>
  <p>The value displayed on the top left of graph is the max of 90<sup>th</sup> percentile of response time.</p>
 </component>
 
 <component name="Assertion Results" index="&sect-num;.3.5"  width="954" height="365" screenshot="assertion_results.png">
 <description>
 <note>
 Assertion Results MUST NOT BE USED during load test as it consumes a lot of resources (memory and CPU). Use it only for either functional testing or 
 during Test Plan debugging and Validation.
 </note>
 <p>The Assertion Results visualizer shows the Label of each sample taken.
 It also reports failures of any <a href="test_plan.html#assertions">Assertions</a> that
 are part of the test plan.</p></description>
 
 <links>
         <complink name="Response Assertion"/>
 </links>
 </component>
 
 <component name="View Results Tree" index="&sect-num;.3.6" width="910" height="659" screenshot="view_results_tree.png">
 <description>
 <note>
 View Results Tree MUST NOT BE USED during load test as it consumes a lot of resources (memory and CPU). Use it only for either functional testing or 
 during Test Plan debugging and Validation.
 </note>
 The View Results Tree shows a tree of all sample responses, allowing you to view the
 response for any sample.  In addition to showing the response, you can see the time it took to get
 this response, and some response codes.
 Note that the Request panel only shows the headers added by JMeter.
 It does not show any headers (such as <code>Host</code>) that may be added by the HTTP protocol implementation.
 <p>
 There are several ways to view the response, selectable by a drop-down box at the bottom of the left hand panel.</p>
 
 <table>
 <tr><th><b>Renderer</b></th><th><b>Description</b></th></tr>
 <tr><td><code>CSS/JQuery Tester</code></td>
 <td>The <i>CSS/JQuery Tester</i> only works for text responses. It shows the plain text in the upper panel.
 The "<code>Test</code>" button allows the user to apply the CSS/JQuery to the upper panel and the results
 will be displayed in the lower panel.<br/>
 The CSS/JQuery expression engine can be JSoup or Jodd, syntax of these 2 implementation differs slightly.<br/>
 For example, the Selector <code>a[class=sectionlink]</code> with attribute <code>href</code> applied to the current JMeter functions page gives the following output:
 <br/>
 <source>
 Match count: 74
 Match[1]=#functions
 Match[2]=#what_can_do
 Match[3]=#where
 Match[4]=#how
 Match[5]=#function_helper
 Match[6]=#functions
 Match[7]=#__regexFunction
 Match[8]=#__regexFunction_parms
 Match[9]=#__counter
 &hellip; and so on &hellip;
 </source>
 <br/></td></tr>
 <tr><td><code>Document</code></td>
 <td>The <i>Document view</i> will show the extract text from various type of documents like Microsoft Office
 (Word, Excel, PowerPoint 97-2003, 2007-2010 (openxml), Apache OpenOffice (writer, calc, impress), HTML,
 gzip, jar/zip files (list of content), and some meta-data on "multimedia" files like mp3, mp4, flv, etc. The complete list of 
 support format is available on <a href="http://tika.apache.org/1.2/formats.html">Apache Tika format page.</a>
 <note>A requirement to the <code>Document view</code> is to download the <a href="http://tika.apache.org/download.html">
 Apache Tika binary package</a> (<code>tika-app-x.x.jar</code>) and put this in <code>JMETER_HOME/lib</code> directory.
 </note>
 If the document is larger than 10 MB, then it won't be displayed.
 To change this limit, set the JMeter property <code>document.max_size</code> (unit is byte) or set to <code>0</code> to remove the limit.
 <br/></td></tr>
 <tr><td><code>HTML</code></td>
 <td>The <i>HTML view</i> attempts to render the response as
 HTML.  The rendered HTML is likely to compare poorly to the view one
 would get in any web browser; however, it does provide a quick
 approximation that is helpful for initial result evaluation.<br/>
 Images, style-sheets, etc. aren't downloaded. 
 <br/></td></tr>
 <tr><td><code>HTML (download resources)</code></td>
 <td>If the <i>HTML (download resources) view</i> option is selected, the renderer
 may download images, style-sheets, etc. referenced by the HTML code. 
 <br/></td></tr>
 <tr><td><code>HTML Source formatted</code></td>
 <td>If the <em>HTML Source formatted view</em> option is selected, the renderer will display the HTML source code formatted and cleaned by <a href="https://jsoup.org/">Jsoup</a>. 
 <br/></td></tr>
 <tr><td><code>JSON</code></td>
 <td>The <i>JSON view</i> will show the response in tree style (also handles JSON embedded in JavaScript).
 <br/></td></tr>
 <tr><td><code>JSON Path Tester</code></td>
 <td>The <i>JSON Path Tester view</i> will let you test your JSON-PATH expressions and see the extracted data from a particular response.
 <br/></td></tr>
 <tr><td><code>Regexp Tester</code></td>
 <td>The <i>Regexp Tester view</i> only works for text responses. It shows the plain text in the upper panel.
 The "<code>Test</code>" button allows the user to apply the Regular Expression to the upper panel and the results
 will be displayed in the lower panel.<br/>
 The regular expression engine is the same as that used in the Regular Expression Extractor.<br/>
 For example, the RE <code>(JMeter\w*).*</code> applied to the current JMeter home page gives the following output:
 <br/>
 <source>
 Match count: 26
 Match[1][0]=JMeter - Apache JMeter&lt;/title&gt;
 Match[1][1]=JMeter
 Match[2][0]=JMeter" title="JMeter" border="0"/&gt;&lt;/a&gt;
 Match[2][1]=JMeter
 Match[3][0]=JMeterCommitters"&gt;Contributors&lt;/a&gt;
 Match[3][1]=JMeterCommitters
 &hellip; and so on &hellip;
 </source>
 <br/>
 The first number in <code>[]</code> is the match number; the second number is the group. 
 Group <code>[0]</code> is whatever matched the whole RE.
 Group <code>[1]</code> is whatever matched the 1<sup>st</sup> group, i.e. <code>(JMeter\w*)</code> in this case.
 See Figure 9b (below).
 <br/></td></tr>
 <tr><td><code>Text</code></td>
 <td>
 The default <i>Text view</i> shows all of the text contained in the response. 
 Note that this will only work if the response <code>content-type</code> is considered to be text.
 If the <code>content-type</code> begins with any of the following, it is considered as binary,
 otherwise it is considered to be text.
 <source>
 image/
 audio/
 video/
 </source>
 <br/></td></tr>
 <tr><td><code>XML</code></td>
 <td>The <i>XML view</i> will show response in tree style. 
 Any DTD nodes or Prolog nodes will not show up in tree; however, response may contain those nodes.
 <br/></td></tr>
 <tr><td><code>XPath Tester</code></td>
 <td>The <i>XPath Tester</i> only works for text responses. It shows the plain text in the upper panel.
 The "<code>Test</code>" button allows the user to apply the XPath query to the upper panel and the results
 will be displayed in the lower panel.<br/>
 </td></tr>
 </table>
 <p><code>Scroll automatically?</code> option permit to have last node display in tree selection</p>
 <p>
 With <code>Search</code> option, most of the views also allow the displayed data to be searched; the result of the search will be high-lighted
 in the display above. For example the Control panel screenshot below shows one result of searching for "<code>Java</code>".
 Note that the search operates on the visible text, so you may get different results when searching
 the Text and HTML views.
 <br/>Note: The regular expression uses the Java engine (not ORO engine like the Regular Expression Extractor or Regexp Tester view).
 </p>
 <p>
 If there is no <code>content-type</code> provided, then the content
 will not be displayed in the any of the Response Data panels.
 You can use <complink name="Save Responses to a file"/> to save the data in this case.
 Note that the response data will still be available in the sample result,
 so can still be accessed using Post-Processors.
 </p>
 <p>If the response data is larger than 200K, then it won't be displayed.
 To change this limit, set the JMeter property <code>view.results.tree.max_size</code>.
 You can also use save the entire response to a file using
 <complink name="Save Responses to a file"/>.
 </p>
 <p>
 Additional renderers can be created.
 The class must implement the interface <code>org.apache.jmeter.visualizers.ResultRenderer</code>
 and/or extend the abstract class <code>org.apache.jmeter.visualizers.SamplerResultTab</code>, and the
 compiled code must be available to JMeter (e.g. by adding it to the <code>lib/ext</code> directory).
 </p>
 </description>
 <p>
     The Control Panel (above) shows an example of an HTML display.<br/>
     Figure 9 (below) shows an example of an XML display.<br/>
     Figure 9a (below) shows an example of a Regexp tester display.<br/>
     Figure 9b (below) shows an example of a Document display.<br/>
 </p>
     <div align="center">
 <figure width="903" height="657" image="view_results_tree_xml.png">Figure 9 Sample XML display</figure>
 <figure width="904" height="653" image="view_results_tree_regex.png">Figure 9a Sample Regexp Test display</figure>
 <figure width="849" height="655" image="view_results_tree_document.png">Figure 9b Sample Document (here PDF) display</figure>
 </div>
 </component>
 
 <component name="Aggregate Report" index="&sect-num;.3.7"  width="1206" height="306" screenshot="aggregate_report.png">
 <description>The aggregate report creates a table row for each differently named request in your
 test.  For each request, it totals the response information and provides request count, min, max,
 average, error rate, approximate throughput (request/second) and Kilobytes per second throughput.
 Once the test is done, the throughput is the actual through for the duration of the entire test.
 <p>
 The throughput is calculated from the point of view of the sampler target 
 (e.g. the remote server in the case of HTTP samples).
 JMeter takes into account the total time over which the requests have been generated.
 If other samplers and timers are in the same thread, these will increase the total time,
 and therefore reduce the throughput value. 
 So two identical samplers with different names will have half the throughput of two samplers with the same name.
 It is important to choose the sampler names correctly to get the best results from
 the Aggregate Report.
 </p>
 <p>
 Calculation of the <a href="glossary.html#Median">Median</a> and 90% Line (90<sup>th</sup> <a href="glossary.html#Percentile">percentile</a>) values requires additional memory.
 JMeter now combines samples with the same elapsed time, so far less memory is used.
 However, for samples that take more than a few seconds, the probability is that fewer samples will have identical times,
 in which case more memory will be needed.
 Note you can use this listener afterwards to reload a CSV or XML results file which is the recommended way to avoid performance impacts.
 See the <complink name="Summary Report"/> for a similar Listener that does not store individual samples and so needs constant memory.
 </p>
 <note>
 Starting with JMeter 2.12, you can configure the 3 percentile values you want to compute, this can be done by setting properties:
 <ul>
     <li><code>aggregate_rpt_pct1</code>: defaults to 90<sup>th</sup> <a href="glossary.html#Percentile">percentile</a></li>
     <li><code>aggregate_rpt_pct2</code>: defaults to 95<sup>th</sup> <a href="glossary.html#Percentile">percentile</a></li>
     <li><code>aggregate_rpt_pct3</code>: defaults to 99<sup>th</sup> <a href="glossary.html#Percentile">percentile</a></li>
 </ul>
 </note>
 <ul>
 <li><code>Label</code> - The label of the sample.
 If "<code>Include group name in label?</code>" is selected, then the name of the thread group is added as a prefix.
 This allows identical labels from different thread groups to be collated separately if required.
 </li>
 <li><code># Samples</code> - The number of samples with the same label</li>
 <li><code>Average</code> - The average time of a set of results</li>
 <li><code>Median</code> - The <a href="glossary.html#Median">median</a> is the time in the middle of a set of results.
 50% of the samples took no more than this time; the remainder took at least as long.</li>
 <li><code>90% Line</code> - 90% of the samples took no more than this time.
 The remaining samples took at least as long as this. (90<sup>th</sup> <a href="glossary.html#Percentile">percentile</a>)</li>
 <li><code>95% Line</code> - 95% of the samples took no more than this time.
 The remaining samples took at least as long as this. (95<sup>th</sup> <a href="glossary.html#Percentile">percentile</a>)</li>
 <li><code>99% Line</code> - 99% of the samples took no more than this time.
 The remaining samples took at least as long as this. (99<sup>th</sup> <a href="glossary.html#Percentile">percentile</a>)</li>
 <li><code>Min</code> - The shortest time for the samples with the same label</li>
 <li>Max - The longest time for the samples with the same label</li>
 <li><code>Error %</code> - Percent of requests with errors</li>
 <li><code>Throughput</code> - the <a href="glossary.html#Throughput">Throughput</a> is measured in requests per second/minute/hour.
 The time unit is chosen so that the displayed rate is at least 1.0.
 When the throughput is saved to a CSV file, it is expressed in requests/second,
 i.e. 30.0 requests/minute is saved as 0.5.
 </li>
 <li><code>Received KB/sec</code> - The throughput measured in received Kilobytes per second</li>
 <li><code>Sent KB/sec</code> - The throughput measured in sent Kilobytes per second</li>
 </ul>
 <p>Times are in milliseconds.</p>
 </description>
 <div align="center">
 <p>
     The figure below shows an example of selecting the "<code>Include group name</code>" checkbox.
 </p>
 <figure width="1207" height="298" image="aggregate_report_grouped.png">Sample "<code>Include group name</code>" display</figure>
 </div>
 </component>
 
 <component name="View Results in Table" index="&sect-num;.3.8"  width="966" height="683" screenshot="table_results.png">
 <description>This visualizer creates a row for every sample result.  
 Like the <complink name="View Results Tree"/>, this visualizer uses a lot of memory.
 <p>
 By default, it only displays the main (parent) samples; it does not display the sub-samples (child samples).
 JMeter has a "<code>Child Samples?</code>" check-box.
 If this is selected, then the sub-samples are displayed instead of the main samples.  
 </p>
 </description>
 </component>
 
 <component name="Simple Data Writer" index="&sect-num;.3.9"  width="741" height="141" screenshot="simpledatawriter.png">
 <description>This listener can record results to a file
 but not to the UI.  It is meant to provide an efficient means of
 recording data by eliminating GUI overhead.
 When running in non-GUI mode, the <code>-l</code> flag can be used to create a data file.
 The fields to save are defined by JMeter properties.
 See the <code>jmeter.properties</code> file for details.
 </description>
 </component>
 
-<component name="Monitor Results (DEPRECATED)" index="&sect-num;.3.10"  width="762" height="757" screenshot="monitor_screencap.png">
-<description>
-<p>Monitor Results is a new Visualizer for displaying server
-status. It is designed for Tomcat 5, but any servlet container
-can port the status servlet and use this monitor. There are two primary
-tabs for the monitor. The first is the "<code>Health</code>" tab, which will show the
-status of one or more servers. The second tab labled "<code>Performance</code>" shows
-the performance for one server for the last 1000 samples. The equations
-used for the load calculation is included in the Visualizer.</p>
-<p>Currently, the primary limitation of the monitor is system memory. A
-quick benchmark of memory usage indicates a buffer of 1000 data points for
-100 servers would take roughly 10Mb of RAM. On a 1.4Ghz centrino
-laptop with 1Gb of ram, the monitor should be able to handle several
-hundred servers.</p>
-<p>As a general rule, monitoring production systems should take care to
-set an appropriate interval. Intervals shorter than 5 seconds are too
-aggressive and have a potential of impacting the server. With a buffer of
-1000 data points at 5 second intervals, the monitor would check the server
-status 12 times a minute or 720 times a hour. This means the buffer shows
-the performance history of each machine for the last hour.</p>
-<note>
-The monitor requires Tomcat 5 or above. 
-Use a browser to check that you can access the Tomcat status servlet OK.
-</note>
-<p>
-For a detailed description of how to use the monitor, please refer to
-<a href="build-monitor-test-plan.html">Building a Monitor Test Plan</a>
-</p>
-</description>
-</component>
-
 <component name="Aggregate Graph" index="&sect-num;.3.12"  width="1132" height="872" screenshot="aggregate_graph.png">
 <description>The aggregate graph is similar to the aggregate report. The primary
 difference is the aggregate graph provides an easy way to generate bar graphs and save
 the graph as a PNG file.</description>
 <div align="center">
 <p>
     The figure below shows an example of settings to draw this graph.
 </p>
 <figure width="1147" height="420" image="aggregate_graph_settings.png">Aggregate graph settings</figure>
 </div>
 <note>Please note: All this parameters <em>aren't</em> saved in JMeter jmx script.</note>
 <properties>
         <property name="Column settings" required="Yes">
         <ul>
         <li><code>Columns to display:</code> Choose the column(s) to display in graph.</li>
         <li><code>Rectangles color:</code> Click on right color rectangle open a popup dialog to choose a custom color for column.</li>
         <li><code>Foreground color</code> Allow to change the value text color.</li>
         <li><code>Value font:</code> Allow to define font settings for the text.</li>
         <li><code>Draw outlines bar?</code> To draw or not the border line on bar chart</li>
         <li><code>Show number grouping?</code> Show or not the number grouping in Y Axis labels.</li>
         <li><code>Value labels vertical?</code> Change orientation for value label. (Default is horizontal)</li>
         <li><code>Column label selection:</code> Filter by result label. A regular expression can be used, example: <code>.*Transaction.*</code>
         <br></br>Before display the graph, click on <code>Apply filter</code> button to refresh internal data.</li>
         </ul>
         </property>
         <property name="Title" required="No">Define the graph's title on the head of chart. Empty value is the default value : "<code>Aggregate Graph</code>". 
         The button <code>Synchronize with name</code> define the title with the label of the listener. And define font settings for graph title</property>
         <property name="Graph size" required="No">Compute the graph size by  the width and height depending of the current JMeter's window size.
         Use <code>Width</code> and <code>Height</code> fields to define a custom size. The unit is pixel. </property>
         <property name="X Axis settings" required="No">Define the max length of X Axis label (in pixel).</property>
         <property name="Y Axis settings" required="No">Define a custom maximum value for Y Axis.</property>
         <property name="Legend" required="Yes">Define the placement and font settings for chart legend</property>
 </properties>
 </component>
 
 <component name="Response Time Graph" index="&sect-num;.3.13"  width="921" height="616" screenshot="response_time_graph.png">
 <description>
 The Response Time Graph draws a line chart showing the evolution of response time during the test, for each labelled request. 
 If many samples exist for the same timestamp, the mean value is displayed.
 </description>
 <div align="center">
 <p>
     The figure below shows an example of settings to draw this graph.
 </p>
 <figure width="919" height="481" image="response_time_graph_settings.png">Response time graph settings</figure>
 </div>
 <note>Please note: All this parameters are saved in JMeter <code>.jmx</code> file.</note>
 <properties>
         <property name="Interval (ms)" required="Yes">The time in milli-seconds for X axis interval. Samples are grouped according to this value.
         Before display the graph, click on <code>Apply interval</code> button to refresh internal data.</property>
         <property name="Sampler label selection" required="No">Filter by result label. A regular expression can be used, ex. <code>.*Transaction.*</code>. 
         Before display the graph, click on <code>Apply filter</code> button to refresh internal data.</property>
         <property name="Title" required="No">Define the graph's title on the head of chart. Empty value is the default value : "<code>Response Time Graph</code>". 
         The button <code>Synchronize with name</code> define the title with the label of the listener. And define font settings for graph title</property>
         <property name="Line settings" required="Yes">Define the width of the line. Define the type of each value point. Choose <code>none</code> to have a line without mark</property>
         <property name="Graph size" required="No">Compute the graph size by  the width and height depending of the current JMeter's window size.
         Use <code>Width</code> and <code>Height</code> fields to define a custom size. The unit is pixel. </property>
         <property name="X Axis settings" required="No">Customize the date format of  X axis label.
         The syntax is the Java <a href="http://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html">SimpleDateFormat API</a>.</property>
         <property name="Y Axis settings" required="No">Define a custom maximum value for Y Axis in milli-seconds. Define the increment for the scale (in ms) Show or not the number grouping in Y Axis labels.</property>
         <property name="Legend" required="Yes">Define the placement and font settings for chart legend</property>
 </properties>
 </component>
 
 <component name="Mailer Visualizer" index="&sect-num;.3.14"  width="860" height="403" screenshot="mailervisualizer.png">
 <description><p>The mailer visualizer can be set up to send email if a test run receives too many
 failed responses from the server.</p></description>
 <properties>
         <property name="Name" required="No">Descriptive name for this element that is shown in the tree.</property>
         <property name="From" required="Yes">Email address to send messages from.</property>
         <property name="Addressee(s)" required="Yes">Email address to send messages to, comma-separated.</property>
         <property name="Success Subject" required="No">Email subject line for success messages.</property>
         <property name="Success Limit" required="Yes">Once this number of successful responses is exceeded
         <strong>after previously reaching the failure limit</strong>, a success email
         is sent.  The mailer will thus only send out messages in a sequence of failed-succeeded-failed-succeeded, etc.</property>
         <property name="Failure Subject" required="No">Email subject line for fail messages.</property>
         <property name="Failure Limit" required="Yes">Once this number of failed responses is exceeded, a failure
         email is sent - i.e. set the count to <code>0</code> to send an e-mail on the first failure.</property>
 
         <property name="Host" required="No">IP address or host name of SMTP server (email redirector)
         server.</property>
         <property name="Port" required="No">Port of SMTP server (defaults to <code>25</code>).</property>
         <property name="Login" required="No">Login used to authenticate.</property>
         <property name="Password" required="No">Password used to authenticate.</property>
         <property name="Connection security" required="No">Type of encryption for SMTP authentication (SSL, TLS or none).</property>
 
         <property name="Test Mail" required="No">Press this button to send a test mail</property>
         <property name="Failures" required="No">A field that keeps a running total of number
         of failures so far received.</property>
 </properties>
 </component>
 
 <component name="BeanShell Listener"  index="&sect-num;.3.15"  width="844" height="633" screenshot="beanshell_listener.png">
 <description>
 <p>
 The BeanShell Listener allows the use of BeanShell for processing samples for saving etc.
 </p>
 <p>
 <b>For full details on using BeanShell, please see the <a href="http://www.beanshell.org/">BeanShell website.</a></b>
 </p>
 <p>
 The test element supports the <code>ThreadListener</code> and <code>TestListener</code> methods.
 These should be defined in the initialisation file.
 See the file <code>BeanShellListeners.bshrc</code> for example definitions.
 </p>
 </description>
 <properties>
     <property name="Name" required="">Descriptive name for this element that is shown in the tree.
     The name is stored in the script variable Label</property>
     <property name="Reset bsh.Interpreter before each call" required="Yes">
     If this option is selected, then the interpreter will be recreated for each sample.
     This may be necessary for some long running scripts. 
     For further information, see <a href="best-practices#bsh_scripting">Best Practices - BeanShell scripting</a>.
     </property>
     <property name="Parameters" required="No">Parameters to pass to the BeanShell script.
     The parameters are stored in the following variables:
     <dl>
         <dt><code>Parameters</code></dt><dd>string containing the parameters as a single variable</dd>
         <dt><code>bsh.args</code></dt><dd>String array containing parameters, split on white-space</dd>
     </dl></property>
     <property name="Script file" required="No">A file containing the BeanShell script to run.
     The file name is stored in the script variable <code>FileName</code></property>
     <property name="Script" required="Yes (unless script file is provided)">The BeanShell script to run. The return value is ignored.</property>
 </properties>
 <p>Before invoking the script, some variables are set up in the BeanShell interpreter:</p>
 <ul>
 <li><code>log</code> - (<a href="http://excalibur.apache.org/apidocs/org/apache/log/Logger.html">Logger</a>) - can be used to write to the log file</li>
 <li><code>ctx</code> - (<a href="../api/org/apache/jmeter/threads/JMeterContext.html">JMeterContext</a>) - gives access to the context</li>
 <li><code>vars</code> - (<a href="../api/org/apache/jmeter/threads/JMeterVariables.html">JMeterVariables</a>) - gives read/write access to variables: <source>vars.get(key);
 vars.put(key,val);
 vars.putObject("OBJ1",new Object());
 </source></li>
 <li><code>props</code> - (JMeterProperties - class <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Properties.html"><code>java.util.Properties</code></a>) - e.g. <code>props.get("START.HMS");</code> <code>props.put("PROP1","1234");</code></li>
 <li><code>sampleResult</code>, <code>prev</code> - (<a href="../api/org/apache/jmeter/samplers/SampleResult.html">SampleResult</a>) - gives access to the previous <a href="../api/org/apache/jmeter/samplers/SampleResult.html">SampleResult</a></li>
 <li><code>sampleEvent</code> (<a href="../api/org/apache/jmeter/samplers/SampleEvent.html">SampleEvent</a>) gives access to the current sample event</li>
 </ul>
 <p>For details of all the methods available on each of the above variables, please check the Javadoc</p>
 <p>If the property <code>beanshell.listener.init</code> is defined, this is used to load an initialisation file, which can be used to define methods etc. for use in the BeanShell script.</p>
 </component>
 
 <component name="Summary Report" index="&sect-num;.3.16"  width="1204" height="300" screenshot="summary_report.png">
 <description>The summary report creates a table row for each differently named request in your
 test. This is similar to the <complink name="Aggregate Report"/> , except that it uses less memory.
 <p>
 The throughput is calculated from the point of view of the sampler target 
 (e.g. the remote server in the case of HTTP samples).
 JMeter takes into account the total time over which the requests have been generated.
 If other samplers and timers are in the same thread, these will increase the total time,
 and therefore reduce the throughput value. 
 So two identical samplers with different names will have half the throughput of two samplers with the same name.
 It is important to choose the sampler labels correctly to get the best results from
 the Report.
 </p>
 <ul>
 <li><code>Label</code> - The label of the sample.
 If "<code>Include group name in label?</code>" is selected, then the name of the thread group is added as a prefix.
 This allows identical labels from different thread groups to be collated separately if required.
 </li>
 <li><code># Samples</code> - The number of samples with the same label</li>
 <li><code>Average</code> - The average elapsed time of a set of results</li>
 <li><code>Min</code> - The lowest elapsed time for the samples with the same label</li>
 <li><code>Max</code> - The longest elapsed time for the samples with the same label</li>
 <li><code>Std. Dev.</code> - the <a href="glossary.html#StandardDeviation">Standard Deviation</a> of the sample elapsed time</li>
 <li><code>Error %</code> - Percent of requests with errors</li>
 <li><code>Throughput</code> - the <a href="glossary.html#Throughput">Throughput</a> is measured in requests per second/minute/hour.
 The time unit is chosen so that the displayed rate is at least <code>1.0</code>.
 When the throughput is saved to a CSV file, it is expressed in requests/second,
 i.e. 30.0 requests/minute is saved as <code>0.5</code>.
 </li>
 <li><code>Received KB/sec</code> - The throughput measured in Kilobytes per second</li>
 <li><code>Sent KB/sec</code> - The throughput measured in Kilobytes per second</li>
 <li><code>Avg. Bytes</code> - average size of the sample response in bytes.</li>
 </ul>
 <p>Times are in milliseconds.</p>
 </description>
 <div align="center">
 <p>
     The figure below shows an example of selecting the "<code>Include group name</code>" checkbox.
 </p>
 <figure width="1208" height="302" image="summary_report_grouped.png">Sample "<code>Include group name</code>" display</figure>
 </div>
 </component>
 
 <component name="Save Responses to a file" index="&sect-num;.3.17"  width="488" height="251" screenshot="savetofile.png">
     <description>
         <p>
         This test element can be placed anywhere in the test plan.
         For each sample in its scope, it will create a file of the response Data.
         The primary use for this is in creating functional tests, but it can also
         be useful where the response is too large to be displayed in the 
         <complink name="View Results Tree"/> Listener.
         The file name is created from the specified prefix, plus a number (unless this is disabled, see below).
         The file extension is created from the document type, if known.
         If not known, the file extension is set to '<code>unknown</code>'.
         If numbering is disabled, and adding a suffix is disabled, then the file prefix is
         taken as the entire file name. This allows a fixed file name to be generated if required.
         The generated file name is stored in the sample response, and can be saved
         in the test log output file if required.
         </p>
         <p>
         The current sample is saved first, followed by any sub-samples (child samples).
         If a variable name is provided, then the names of the files are saved in the order
         that the sub-samples appear. See below. 
         </p>
     </description>
  <properties>
  <property name="Name" required="No">Descriptive name for this element that is shown in the tree.</property>
  <property name="Filename Prefix" required="Yes">Prefix for the generated file names; this can include a directory name.
         Relative paths are resolved relative to the current working directory (which defaults to the <code>bin/</code> directory).
         JMeter also supports paths relative to the directory containing the current test plan (JMX file).
         If the path name begins with "<code>~/</code>" (or whatever is in the <code>jmeter.save.saveservice.base_prefix</code> JMeter property),
         then the path is assumed to be relative to the JMX file location. 
  </property>
  <property name="Variable Name" required="No">
  Name of a variable in which to save the generated file name (so it can be used later in the test plan).
  If there are sub-samples then a numeric suffix is added to the variable name.
  E.g. if the variable name is <code>FILENAME</code>, then the parent sample file name is saved in the variable <code>FILENAME</code>, 
  and the filenames for the child samplers are saved in <code>FILENAME1</code>, <code>FILENAME2</code> etc.
  </property>
  <property name="Save Failed Responses only" required="Yes">If selected, then only failed responses are saved</property>
  <property name="Save Successful Responses only" required="Yes">If selected, then only successful responses are saved</property>
  <property name="Don't add number to prefix" required="Yes">If selected, then no number is added to the prefix. If you select this option, make sure that the prefix is unique or the file may be overwritten.</property>
  <property name="Don't add suffix" required="Yes">If selected, then no suffix is added. If you select this option, make sure that the prefix is unique or the file may be overwritten.</property>
  <property name="Minimum Length of sequence number" required="No">If "<code>Don't add number to prefix</code>" is not checked, then numbers added to prefix will be padded by <code>0</code> so that prefix is has size of this value. Defaults to <code>0</code>.</property>
  </properties>
 </component>
 
 <component name="BSF Listener (DEPRECATED)" index="&sect-num;.3.18"  width="847" height="634" screenshot="bsf_listener.png">
 <description>
 <p>
 The BSF Listener allows BSF script code to be applied to sample results.
 </p>
 </description>
 <properties>
     <property name="Name" required="No">Descriptive name for this element that is shown in the tree.</property>
     <property name="Language" required="Yes">The BSF language to be used</property>
     <property name="Parameters" required="No">Parameters to pass to the script.
     The parameters are stored in the following variables:
     <dl>
         <dt><code>Parameters</code></dt><dd>string containing the parameters as a single variable</dd>
         <dt><code>args</code></dt><dd>String array containing parameters, split on white-space</dd>
     </dl></property>
     <property name="Script file" required="No">A file containing the script to run, if a relative file path is used, then it will be relative to directory referenced by "<code>user.dir</code>" System property</property>
     <property name="Script" required="Yes (unless script file is provided)">The script to run.</property>
 </properties>
 <p>
 The script (or file) is processed using the <code>BSFEngine.exec()</code> method, which does not return a value.
 </p>
 <p>
 Before invoking the script, some variables are set up.
 Note that these are BSF variables - i.e. they can be used directly in the script.
 </p>
 <dl>
 <dt><code>log</code></dt><dd>(<a href="http://excalibur.apache.org/apidocs/org/apache/log/Logger.html">Logger</a>) - can be used to write to the log file</dd>
 <dt><code>Label</code></dt><dd>the String Label</dd>
 <dt><code>FileName</code></dt><dd>the script file name (if any)</dd>
 <dt><code>Parameters</code></dt><dd>the parameters (as a String)</dd>
 <dt><code>args</code></dt><dd>the parameters as a String array (split on whitespace)</dd>
 <dt><code>ctx</code></dt><dd>(<a href="../api/org/apache/jmeter/threads/JMeterContext.html">JMeterContext</a>) - gives access to the context</dd>
 <dt><code>vars</code></dt><dd>(<a href="../api/org/apache/jmeter/threads/JMeterVariables.html">JMeterVariables</a>) - gives read/write access to variables: <source>vars.get(key);
 vars.put(key,val);
 vars.putObject("OBJ1",new Object());
 vars.getObject("OBJ2");</source></dd>
 <dt><code>props</code></dt><dd>(JMeterProperties - class <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Properties.html"><code>java.util.Properties</code></a>) - e.g. <code>props.get("START.HMS");</code> <code>props.put("PROP1","1234");</code></dd>
 <dt><code>sampleResult</code>, <code>prev</code></dt><dd>(<a href="../api/org/apache/jmeter/samplers/SampleResult.html">SampleResult</a>) - gives access to the SampleResult</dd>
 <dt><code>sampleEvent</code></dt><dd>(<a href="../api/org/apache/jmeter/samplers/SampleEvent.html">SampleEvent</a>) - gives access to the SampleEvent</dd>
 <dt><code>sampler</code></dt><dd>(<a href="../api/org/apache/jmeter/samplers/Sampler.html">Sampler</a>)- gives access to the last sampler</dd>
 <dt><code>OUT</code></dt><dd><code>System.out</code> - e.g. <code>OUT.println("message")</code></dd>
 </dl>
 <p>For details of all the methods available on each of the above variables, please check the Javadoc</p>
 </component>
 
 <component name="JSR223 Listener" index="&sect-num;.3.18.1">
 <description>
 <p>
 The JSR223 Listener allows JSR223 script code to be applied to sample results.
 </p>
 </description>
 <properties>
     <property name="Name" required="No">Descriptive name for this element that is shown in the tree.</property>
     <property name="Language" required="Yes">The JSR223 language to be used</property>
     <property name="Parameters" required="No">Parameters to pass to the script.
     The parameters are stored in the following variables:
     <dl>
         <dt><code>Parameters</code></dt><dd>string containing the parameters as a single variable</dd>
         <dt><code>args</code></dt><dd>String array containing parameters, split on white-space</dd>
     </dl></property>
     <property name="Script file" required="No">A file containing the script to run, if a relative file path is used, then it will be relative to directory referenced by "<code>user.dir</code>" System property</property>
     <property name="Script compilation caching" required="No">Unique String across Test Plan that JMeter will use to cache result of Script compilation if language used supports <code><a href="https://docs.oracle.com/javase/8/docs/api/javax/script/Compilable.html">Compilable</a></code> interface (Groovy is one of these, java, beanshell and javascript are not).
     <note>See note in JSR223 Sampler Java System property if you're using Groovy without checking this option</note>
     </property>
     <property name="Script" required="Yes (unless script file is provided)">The script to run.</property>
 </properties>
 
 <p>
 Before invoking the script, some variables are set up.
 Note that these are JSR223 variables - i.e. they can be used directly in the script.
 </p>
 <dl>
 <dt><code>log</code></dt><dd>(<a href="http://excalibur.apache.org/apidocs/org/apache/log/Logger.html">Logger</a>) - can be used to write to the log file</dd>
 <dt><code>Label</code></dt><dd>the String Label</dd>
 <dt><code>FileName</code></dt><dd>the script file name (if any)</dd>
 <dt><code>Parameters</code></dt><dd>the parameters (as a String)</dd>
 <dt><code>args</code></dt><dd>the parameters as a String array (split on whitespace)</dd>
 <dt><code>ctx</code></dt><dd>(<a href="../api/org/apache/jmeter/threads/JMeterContext.html">JMeterContext</a>) - gives access to the context</dd>
 <dt><code>vars</code></dt><dd>(<a href="../api/org/apache/jmeter/threads/JMeterVariables.html">JMeterVariables</a>) - gives read/write access to variables: <source>vars.get(key);
 vars.put(key,val);
 vars.putObject("OBJ1",new Object());
 vars.getObject("OBJ2");</source></dd>
 <dt><code>props</code></dt><dd>(JMeterProperties - class <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Properties.html"><code>java.util.Properties</code></a>) - e.g. <code>props.get("START.HMS");</code> <code>props.put("PROP1","1234");</code></dd>
 <dt><code>sampleResult</code>, <code>prev</code></dt><dd>(<a href="../api/org/apache/jmeter/samplers/SampleResult.html">SampleResult</a>) - gives access to the SampleResult</dd>
 <dt><code>sampleEvent</code></dt><dd>(<a href="../api/org/apache/jmeter/samplers/SampleEvent.html">SampleEvent</a>) - gives access to the SampleEvent</dd>
 <dt><code>sampler</code></dt><dd>(<a href="../api/org/apache/jmeter/samplers/Sampler.html">Sampler</a>)- gives access to the last sampler</dd>
 <dt><code>OUT</code></dt><dd><code>System.out</code> - e.g. <code>OUT.println("message")</code></dd>
 </dl>
 <p>For details of all the methods available on each of the above variables, please check the Javadoc</p>
 </component>
 
 <component name="Generate Summary Results" index="&sect-num;.3.19"  width="364" height="76" screenshot="summary.png">
     <description>This test element can be placed anywhere in the test plan.
 Generates a summary of the test run so far to the log file and/or 
 standard output. Both running and differential totals are shown.
 Output is generated every <code>n</code> seconds (default 30 seconds) on the appropriate
 time boundary, so that multiple test runs on the same time will be synchronised.
 See <code>jmeter.properties</code> file for the summariser configuration items:
 <source>
 # Define the following property to automatically start a summariser with that name
 # (applies to non-GUI mode only)
 #summariser.name=summary
 #
 # interval between summaries (in seconds) default 3 minutes
 #summariser.interval=30
 #
 # Write messages to log file
 #summariser.log=true
 #
 # Write messages to System.out
 #summariser.out=true
 </source>
 This element is mainly intended for batch (non-GUI) runs.
 The output looks like the following:
 <source>
 label +     16 in 0:00:12 =    1.3/s Avg:  1608 Min:  1163 Max:  2009 Err:     0 (0.00%) Active: 5 Started: 5 Finished: 0
 label +     82 in 0:00:30 =    2.7/s Avg:  1518 Min:  1003 Max:  2020 Err:     0 (0.00%) Active: 5 Started: 5 Finished: 0
 label =     98 in 0:00:42 =    2.3/s Avg:  1533 Min:  1003 Max:  2020 Err:     0 (0.00%)
 label +     85 in 0:00:30 =    2.8/s Avg:  1505 Min:  1008 Max:  2005 Err:     0 (0.00%) Active: 5 Started: 5 Finished: 0
 label =    183 in 0:01:13 =    2.5/s Avg:  1520 Min:  1003 Max:  2020 Err:     0 (0.00%)
 label +     79 in 0:00:30 =    2.7/s Avg:  1578 Min:  1089 Max:  2012 Err:     0 (0.00%) Active: 5 Started: 5 Finished: 0
 label =    262 in 0:01:43 =    2.6/s Avg:  1538 Min:  1003 Max:  2020 Err:     0 (0.00%)
 label +     80 in 0:00:30 =    2.7/s Avg:  1531 Min:  1013 Max:  2014 Err:     0 (0.00%) Active: 5 Started: 5 Finished: 0
 label =    342 in 0:02:12 =    2.6/s Avg:  1536 Min:  1003 Max:  2020 Err:     0 (0.00%)
 label +     83 in 0:00:31 =    2.7/s Avg:  1512 Min:  1003 Max:  1982 Err:     0 (0.00%) Active: 5 Started: 5 Finished: 0
 label =    425 in 0:02:43 =    2.6/s Avg:  1531 Min:  1003 Max:  2020 Err:     0 (0.00%)
 label +     83 in 0:00:29 =    2.8/s Avg:  1487 Min:  1023 Max:  2013 Err:     0 (0.00%) Active: 5 Started: 5 Finished: 0
 label =    508 in 0:03:12 =    2.6/s Avg:  1524 Min:  1003 Max:  2020 Err:     0 (0.00%)
 label +     78 in 0:00:30 =    2.6/s Avg:  1594 Min:  1013 Max:  2016 Err:     0 (0.00%) Active: 5 Started: 5 Finished: 0
 label =    586 in 0:03:43 =    2.6/s Avg:  1533 Min:  1003 Max:  2020 Err:     0 (0.00%)
 label +     80 in 0:00:30 =    2.7/s Avg:  1516 Min:  1013 Max:  2005 Err:     0 (0.00%) Active: 5 Started: 5 Finished: 0
 label =    666 in 0:04:12 =    2.6/s Avg:  1531 Min:  1003 Max:  2020 Err:     0 (0.00%)
 label +     86 in 0:00:30 =    2.9/s Avg:  1449 Min:  1004 Max:  2017 Err:     0 (0.00%) Active: 5 Started: 5 Finished: 0
 label =    752 in 0:04:43 =    2.7/s Avg:  1522 Min:  1003 Max:  2020 Err:     0 (0.00%)
 label +     65 in 0:00:24 =    2.7/s Avg:  1579 Min:  1007 Max:  2003 Err:     0 (0.00%) Active: 0 Started: 5 Finished: 5
 label =    817 in 0:05:07 =    2.7/s Avg:  1526 Min:  1003 Max:  2020 Err:     0 (0.00%)
 </source>
 The "<code>label</code>" is the name of the element.
 The <code>"+"</code> means that the line is a delta line, i.e. shows the changes since the last output.<br/>
 The <code>"="</code> means that the line is a total line, i.e. it shows the running total.<br/>
 Entries in the JMeter log file also include time-stamps.
 The example "<code>817 in 0:05:07 =    2.7/s</code>" means that there were 817 samples recorded in 5 minutes and 7 seconds,
 and that works out at 2.7 samples per second.<br/>
 The <code>Avg</code> (Average), <code>Min</code> (Minimum) and <code>Max</code> (Maximum) times are in milliseconds.<br/>
 "<code>Err</code>" means number of errors (also shown as percentage).<br/>
 The last two lines will appear at the end of a test.
 They will not be synchronised to the appropriate time boundary.
 Note that the initial and final deltas may be for less than the interval (in the example above this is 30 seconds).
 The first delta will generally be lower, as JMeter synchronizes to the interval boundary.
 The last delta will be lower, as the test will generally not finish on an exact interval boundary.
 <p>
 The label is used to group sample results together. 
 So if you have multiple Thread Groups and want to summarize across them all, then use the same label
  - or add the summariser to the Test Plan (so all thread groups are in scope).
 Different summary groupings can be implemented
 by using suitable labels and adding the summarisers to appropriate parts of the test plan.
 </p>
 <note>
 In Non-GUI mode by default a Generate Summary Results listener named "<code>summariser</code>" is configured, if you have already added one to your Test Plan, ensure you name it differently 
 otherwise results will be accumulated under this label (summary) leading to wrong results (sum of total samples + samples located under the Parent of Generate Summary Results listener).<br/>
 This is not a bug but a design choice allowing to summarize across thread groups.
 </note>
     </description>
  <properties>
  <property name="Name" required="Yes">Descriptive name for this element that is shown in the tree.
  It appears as the "<code>label</code>" in the output. Details for all elements with the same label will be added together.
  </property>
  </properties>
 </component>
 
 <component name="Comparison Assertion Visualizer" index="&sect-num;.3.20"  width="718" height="454" screenshot="comparison_assertion_visualizer.png">
 <description>
 The Comparison Assertion Visualizer shows the results of any <complink name="Compare Assertion"/> elements.
 </description>
  <properties>
  <property name="Name" required="Yes">Descriptive name for this element that is shown in the tree.
  </property>
  </properties>
 </component>
 
 <component name="Backend Listener" index="&sect-num;.3.21"  width="705" height="350" screenshot="backend_listener.png">
 <description>
 The backend listener is an Asynchronous listener that enables you to plug custom implementations of <a href="../api/org/apache/jmeter/visualizers/backend/BackendListenerClient.html">BackendListenerClient</a>.
 By default, a Graphite implementation is provided.
 </description>
  <properties>
  <property name="Name" required="Yes">Descriptive name for this element that is shown in the tree.</property>
  <property name="Backend Listener implementation" required="Yes">Class of the <code>BackendListenerClient</code> implementation.</property>
  <property name="Async Queue size" required="Yes">Size of the queue that holds the SampleResults while they are processed asynchronously.</property>
  <property name="Parameters" required="Yes">Parameters of the <code>BackendListenerClient</code> implementation.</property>
  </properties>
  
  
      <p>The following parameters apply to the <code>GraphiteBackendListenerClient</code> implementation:</p>
 
     <properties>
         <property name="graphiteMetricsSender" required="Yes"><code>org.apache.jmeter.visualizers.backend.graphite.TextGraphiteMetricsSender</code> or <code>org.apache.jmeter.visualizers.backend.graphite.PickleGraphiteMetricsSender</code></property>
         <property name="graphiteHost" required="Yes">Graphite or InfluxDB (with Graphite plugin enabled) server host</property>
         <property name="graphitePort" required="Yes">Graphite or InfluxDB (with Graphite plugin enabled) server port, defaults to <code>2003</code>. Note <code>PickleGraphiteMetricsSender</code> (port <code>2004</code>) can only talk to Graphite server.</property>
         <property name="rootMetricsPrefix" required="Yes">Prefix of metrics sent to backend. Defaults to "<code>jmeter</code>."
         Note that JMeter does not add a separator between the root prefix and the samplerName which is why the trailing dot is currently needed.</property>
         <property name="summaryOnly" required="Yes">Only send a summary with no detail. Defaults to <code>true</code>.</property>
         <property name="samplersList" required="Yes">Defines the names (labels) of sample results to be sent to the back end. 
         If <code>useRegexpForSamplersList=false</code> this is a list of semi-colon separated names.
         If <code>useRegexpForSamplersList=true</code> this is a regular expression which will be matched against the names.</property>
         <property name="useRegexpForSamplersList" required="Yes">Consider samplersList as a regular expression to select the samplers for which you want to report metrics to backend. Defaults to <code>false</code>.</property>
         <property name="percentiles" required="Yes">The percentiles you want to send to the backend.
         A percentile may contain a fractional part, for example <code>12.5</code>.
         (The separator is always ".")
         List must be semicolon separated. Generally 3 or 4 values should be sufficient.</property>
     </properties>
     <p>See also <a href="realtime-results.html" >Real-time results</a> for more details.</p>
     <figure width="1265" height="581" image="grafana_dashboard.png">Grafana dashboard</figure>
 </component>
 
 <a href="#">^</a>
 
 </section>
 
 <section name="&sect-num;.4 Configuration Elements" anchor="config_elements">
 <description>
     <br></br>
     Configuration elements can be used to set up defaults and variables for later use by samplers.
     Note that these elements are processed at the start of the scope in which they are found, 
     i.e. before any samplers in the same scope.
     <br></br>
 </description>
 
 <component name="CSV Data Set Config" index="&sect-num;.4.1"  width="433" height="281" screenshot="csvdatasetconfig.png">
 <description>
     <p>
     CSV Data Set Config is used to read lines from a file, and split them into variables.
     It is easier to use than the <code>__CSVRead()</code> and <code>_StringFromFile()</code> functions.
     It is well suited to handling large numbers of variables, and is also useful for testing with
     "random" and unique values.</p>
     <p>Generating unique random values at run-time is expensive in terms of CPU and memory, so just create the data
     in advance of the test. If necessary, the "random" data from the file can be used in conjunction with
     a run-time parameter to create different sets of values from each run - e.g. using concatenation - which is
     much cheaper than generating everything at run-time.
     </p>
     <p>
     JMeter allows values to be quoted; this allows the value to contain a delimiter.
     If "<code>allow quoted data</code>" is enabled, a value may be enclosed in double-quotes.
     These are removed. To include double-quotes within a quoted field, use two double-quotes.
     For example:
     </p>
 <source>
 1,"2,3","4""5" =>
 1
 2,3
 4"5
 </source>
     <p>
     JMeter supports CSV files which have a header line defining the column names.
     To enable this, leave the "<code>Variable Names</code>" field empty. The correct delimiter must be provided.
     </p>
     <p>
     JMeter supports CSV files with quoted data that includes new-lines.
     </p>
     <p>
     By default, the file is only opened once, and each thread will use a different line from the file.
     However the order in which lines are passed to threads depends on the order in which they execute,
     which may vary between iterations.
     Lines are read at the start of each test iteration.
     The file name and mode are resolved in the first iteration.
     </p>
     <p>
     See the description of the Share mode below for additional options.
     If you want each thread to have its own set of values, then you will need to create a set of files,
     one for each thread. For example <code>test1.csv</code>, <code>test2.csv</code>, &hellip;, <code>test<em>n</em>.csv</code>. Use the filename 
     <code>test${__threadNum}.csv</code> and set the "<code>Sharing mode</code>" to "<code>Current thread</code>".
     </p>
     <note>CSV Dataset variables are defined at the start of each test iteration.
     As this is after configuration processing is completed,
     they cannot be used for some configuration items - such as JDBC Config - 
     that process their contents at configuration time (see <bugzilla>40394</bugzilla>)
     However the variables do work in the HTTP Auth Manager, as the <code>username</code> etc. are processed at run-time.
     </note>
     <p>
     As a special case, the string "<code>\t</code>" (without quotes) in the delimiter field is treated as a Tab.
     </p>
     <p>
     When the end of file (<code>EOF</code>) is reached, and the recycle option is <code>true</code>, reading starts again with the first line of the file.
     </p>
     <p>
     If the recycle option is <code>false</code>, and stopThread is <code>false</code>, then all the variables are set to <code>&lt;EOF&gt;</code> when the end of file is reached.
     This value can be changed by setting the JMeter property <code>csvdataset.eofstring</code>.
     </p>
     <p>
     If the Recycle option is <code>false</code>, and Stop Thread is <code>true</code>, then reaching <code>EOF</code> will cause the thread to be stopped.
     </p>
 </description>
 <properties>
   <property name="Name" required="">Descriptive name for this element that is shown in the tree.</property>
   <property name="Filename" required="Yes">Name of the file to be read. 
   <b>Relative file names are resolved with respect to the path of the active test plan.</b>
   <b>For distributed testing, the CSV file must be stored on the server host system in the correct relative directory to where the jmeter server is started.</b>
   Absolute file names are also supported, but note that they are unlikely to work in remote mode, 
   unless the remote server has the same directory structure.
   If the same physical file is referenced in two different ways - e.g. <code>csvdata.txt</code> and <code>./csvdata.txt</code> -
   then these are treated as different files.
   If the OS does not distinguish between upper and lower case, <code>csvData.TXT</code> would also be opened separately. 
   </property>
   <property name="File Encoding" required="No">The encoding to be used to read the file, if not the platform default.</property>
   <property name="Variable Names" required="Yes">List of variable names (comma-delimited).
   JMeter supports CSV header lines:
   if the variable name field empty, then the first line of the file is read and interpreted as the list of column names.
   The names must be separated by the delimiter character. They can be quoted using double-quotes.
   </property>
   <property name="Delimiter" required="Yes">Delimiter to be used to split the records in the file.
   If there are fewer values on the line than there are variables the remaining variables are not updated -
   so they will retain their previous value (if any).</property>
   <property name="Allow quoted data?" required="Yes">Should the CSV file allow values to be quoted?
   If enabled, then values can be enclosed in <code>"</code> - double-quote - allowing values to contain a delimiter.
   </property>
   <property name="Recycle on EOF?" required="Yes">Should the file be re-read from the beginning on reaching <code>EOF</code>? (default is <code>true</code>)</property>
   <property name="Stop thread on EOF?" required="Yes">Should the thread be stopped on <code>EOF</code>, if Recycle is false? (default is <code>false</code>)</property>
   <property name="Sharing mode" required="Yes">
   <ul>
   <li><code>All threads</code> - (the default) the file is shared between all the threads.</li>
   <li><code>Current thread group</code> - each file is opened once for each thread group in which the element appears</li>
   <li><code>Current thread</code> - each file is opened separately for each thread</li>
   <li><code>Identifier</code> - all threads sharing the same identifier share the same file.
   So for example if you have 4 thread groups, you could use a common id for two or more of the groups
   to share the file between them.
   Or you could use the thread number to share the file between the same thread numbers in different thread groups.
   </li>
   </ul>
   </property>
 </properties>
 </component>
 
 <component name="FTP Request Defaults" index="&sect-num;.4.2"  width="520" height="202" screenshot="ftp-config/ftp-request-defaults.png">
 <description></description>
 </component>
 
 <component name="DNS Cache Manager" index="&sect-num;.4.3"  width="712" height="387" screenshot="dns-cache-manager.png">
     <note>DNS Cache Manager is designed for using in the root of Thread Group or Test Plan. Do not place it as child element of particular HTTP Sampler
     </note>
     <note>DNS Cache Manager working only with the HTTP request using HTTPClient4 implementation.</note>
     <description><p>The DNS Cache Manager element allows to test applications, which have several servers behind load balancers (CDN, etc.), 
     when user receives content from different IP's. By default JMeter uses JVM DNS cache. That's why
     only one server from the cluster receives load. DNS Cache Manager resolves name for each thread separately each iteration and
     saves results of resolving to its internal DNS Cache, which independent from both JVM and OS DNS caches.
     </p>
     </description>
     <properties>
     <property name="Name" required="No">Descriptive name for this element that is shown in the tree. </property>
     <property name="Clear cache each Iteration" required="No">If selected, DNS cache of every  Thread is cleared each time new iteration is started.</property>
     <property name="Use system DNS resolver" required="N/A">System DNS resolver will be used. For correct work edit
        <code>$JAVA_HOME/jre/lib/security/java.security</code> and add <code>networkaddress.cache.ttl=0</code> 
     </property>
     <property name="Use custom DNS resolver" required="N/A">Custom DNS resolver(from dnsjava library) will be used.</property>
     <property name="Hostname or IP address" required="No">List of DNS servers to use. If empty, network configuration DNS will used.</property>
     <property name="Add Button" required="N/A">Add an entry to the DNS servers table.</property>
     <property name="Delete Button" required="N/A">Delete the currently selected table entry.</property>
     </properties>
 </component>
 
 <component name="HTTP Authorization Manager" index="&sect-num;.4.4"  width="538" height="340" screenshot="http-config/http-auth-manager.png">
 <note>If there is more than one Authorization Manager in the scope of a Sampler,
 there is currently no way to specify which one is to be used.</note>
 
 <description>
 <p>The Authorization Manager lets you specify one or more user logins for web pages that are
 restricted using server authentication.  You see this type of authentication when you use
 your browser to access a restricted page, and your browser displays a login dialog box.  JMeter
 transmits the login information when it encounters this type of page.</p>
 <p>
 The Authorization headers may not be shown in the Tree View Listener "<code>Request</code>" tab.
 The Java implementation does pre-emptive authentication, but it does not
 return the Authorization header when JMeter fetches the headers.
 The Commons HttpClient (3.1) implementation defaults to pre-emptive and the header will be shown.
 The HttpComponents (HC 4.5.X) implementation does not do pre-emptive auth 
 (it is supported by the library but JMeter does not enable it)
 </p>
 <p>
 The HttpClient3.1 implementation defaults to pre-emptive authentication
 if the setting has not been defined. To disable this, set the values as below, in which case
 authentication will only be performed in response to a challenge.
 </p>
 <p>
 In the file <code>jmeter.properties</code> set <code>httpclient.parameters.file=httpclient.parameters</code>
 and in <code>httpclient.parameters</code> set <code>http.authentication.preemptive$Boolean=false</code>
 </p>
 <note>
 Note: the above settings only apply to the HttpClient sampler.
 </note>
 <note>
 When looking for a match against a URL, JMeter checks each entry in turn, and stops when it finds the first match.
 Thus the most specific URLs should appear first in the list, followed by less specific ones.
 Duplicate URLs will be ignored.
 If you want to use different usernames/passwords for different threads, you can use variables.
 These can be set up using a <complink name="CSV Data Set Config"/> Element (for example).
 </note>
 </description>
 
 <properties>
         <property name="Name" required="No">Descriptive name for this element that is shown in the tree. </property>
         <property name="Clear auth on each iteration?" required="Yes">Used by Kerberos authentication. If checked, authentication will be done on each iteration of Main Thread Group loop even if it has already been done in a previous one.
         This is usually useful if each main thread group iteration represents behaviour of one Virtual User.
         </property>
   <property name="Base URL" required="Yes">A partial or complete URL that matches one or more HTTP Request URLs.  As an example,
 say you specify a Base URL of "<code>http://localhost/restricted/</code>" with a <code>Username</code> of "<code>jmeter</code>" and
 a <code>Password</code> of "<code>jmeter</code>".  If you send an HTTP request to the URL
 "<code>http://localhost/restricted/ant/myPage.html</code>", the Authorization Manager sends the login
 information for the user named, "<code>jmeter</code>".</property>
   <property name="Username" required="Yes">The username to authorize.</property>
   <property name="Password" required="Yes">The password for the user. (N.B. this is stored unencrypted in the test plan)</property>
   <property name="Domain" required="No">The domain to use for NTLM.</property>
   <property name="Realm" required="No">The realm to use for NTLM.</property>
   <property name="Mechanism" required="No">Type of authentication to perform. JMeter can perform different types of authentications based on used Http Samplers:
 <dl>
 <dt>Java</dt><dd><code>BASIC</code></dd>
 <dt>HttpClient 3.1</dt><dd><code>BASIC</code> and <code>DIGEST</code></dd>
 <dt>HttpClient 4</dt><dd><code>BASIC</code>, <code>DIGEST</code> and <code>Kerberos</code></dd>
 </dl>
 </property>
 </properties>
 <note>
 The Realm only applies to the HttpClient sampler.
 </note>
 <br></br>
 <b>Kerberos Configuration:</b>
 <p>To configure Kerberos you need to setup at least two JVM system properties:</p>
 <ul>
     <li><code>-Djava.security.krb5.conf=krb5.conf</code></li>
     <li><code>-Djava.security.auth.login.config=jaas.conf</code></li>
 </ul>
 <p>
 You can also configure those two properties in the file <code>bin/system.properties</code>.
 Look at the two sample configuration files (<code>krb5.conf</code> and <code>jaas.conf</code>) located in the jmeter <code>bin</code> folder
 for references to more documentation, and tweak them to match your Kerberos configuration.
 </p>
 <p>
 When generating a SPN for Kerberos SPNEGO authentication IE and Firefox will omit the port number
 from the URL. Chrome has an option (<code>--enable-auth-negotiate-port</code>) to include the port
 number if it differs from the standard ones (<code>80</code> and <code>443</code>). That behavior
 can be emulated by setting the following jmeter property as below.
 </p>
 <p>
 In <code>jmeter.properties</code> or <code>user.properties</code>, set:
 </p>
 <ul>
 <li><code>kerberos.spnego.strip_port=false</code></li>
 </ul>
 <br></br>
 <b>Controls:</b>
 <ul>
   <li><code>Add</code> Button - Add an entry to the authorization table.</li>
   <li><code>Delete</code> Button - Delete the currently selected table entry.</li>
   <li><code>Load</code> Button - Load a previously saved authorization table and add the entries to the existing
 authorization table entries.</li>
   <li><code>Save As</code> Button - Save the current authorization table to a file.</li>
 </ul>
 
 <note>When you save the Test Plan, JMeter automatically saves all of the authorization
 table entries - including any passwords, which are not encrypted.</note>
 
 <example title="Authorization Example" anchor="authorization_example">
 
 <p><a href="../demos/AuthManagerTestPlan.jmx">Download</a> this example.  In this example, we created a Test Plan on a local server that sends three HTTP requests, two requiring a login and the
 other is open to everyone.  See figure 10 to see the makeup of our Test Plan.  On our server, we have a restricted
 directory named, "<code>secret</code>", which contains two files, "<code>index.html</code>" and "<code>index2.html</code>".  We created a login id named, "<code>kevin</code>",
 which has a password of "<code>spot</code>".  So, in our Authorization Manager, we created an entry for the restricted directory and
 a username and password (see figure 11).  The two HTTP requests named "<code>SecretPage1</code>" and "<code>SecretPage2</code>" make requests
 to "<code>/secret/index.html</code>" and "<code>/secret/index2.html</code>".  The other HTTP request, named "<code>NoSecretPage</code>" makes a request to
 "<code>/index.html</code>".</p>
 
 <figure width="452" height="177" image="http-config/auth-manager-example1a.png">Figure 10 - Test Plan</figure>
 <figure width="641" height="329" image="http-config/auth-manager-example1b.png">Figure 11 - Authorization Manager Control Panel</figure>
 
 <p>When we run the Test Plan, JMeter looks in the Authorization table for the URL it is requesting.  If the Base URL matches
 the URL, then JMeter passes this information along with the request.</p>
 
 <note>You can download the Test Plan, but since it is built as a test for our local server, you will not
 be able to run it.  However, you can use it as a reference in constructing your own Test Plan.</note>
 </example>
 
 </component>
 
 <component name="HTTP Cache Manager" index="&sect-num;.4.5"  width="511" height="196" screenshot="http-config/http-cache-manager.png">
 <description>
 <p>
 The HTTP Cache Manager is used to add caching functionality to HTTP requests within its scope to simulate browser cache feature.
 Each Virtual User thread has its own Cache. By default, Cache Manager will store up to 5000 items in cache per Virtual User thread, using LRU algorithm. 
 Use property "<code>maxSize</code>" to modify this value. Note that the more you increase this value the more HTTP Cache Manager will consume memory, so be sure to adapt the <code>-Xmx</code> jvm option accordingly.
 </p>
 <p>
 If a sample is successful (i.e. has response code <code>2xx</code>) then the <code>Last-Modified</code> and <code>Etag</code> (and <code>Expired</code> if relevant) values are saved for the URL.
 Before executing the next sample, the sampler checks to see if there is an entry in the cache, 
 and if so, the <code>If-Last-Modified</code> and <code>If-None-Match</code> conditional headers are set for the request.
 </p>
 <p>
 Additionally, if the "<code>Use Cache-Control/Expires header</code>" option is selected, then the <code>Cache-Control</code>/<code>Expires</code> value is checked against the current time.
 If the request is a <code>GET</code> request, and the timestamp is in the future, then the sampler returns immediately,
 without requesting the URL from the remote server. This is intended to emulate browser behaviour.
 Note that if <code>Cache-Control</code> header is "<code>no-cache</code>", the response will be stored in cache as pre-expired,
 so will generate a conditional <code>GET</code> request.
 If <code>Cache-Control</code> has any other value, 
 the "<code>max-age</code>" expiry option is processed to compute entry lifetime, if missing then expire header will be used, if also missing entry will be cached 
 as specified in <a href="http://www.ietf.org/rfc/rfc2616.txt">RFC 2616</a> section 13.2.4. using <code>Last-Modified</code> time and response Date.
 </p>
 <note>
 If the requested document has not changed since it was cached, then the response body will be empty.
 Likewise if the <code>Expires</code> date is in the future.
 This may cause problems for Assertions.
 </note>
 <note>Responses with a <code>Vary</code> header will not be cached.</note>
 </description>
 <properties>
   <property name="Name" required="No">Descriptive name for this element that is shown in the tree. </property>
   <property name="Clear cache each iteration" required="Yes">
   If selected, then the cache is cleared at the start of the thread.
   </property>
   <property name="Use Cache Control/Expires header when processing GET requests" required="Yes">See description above.</property>
   <property name="Max Number of elements in cache" required="Yes">See description above.</property>
 </properties>
 </component>
 
 <component name="HTTP Cookie Manager" index="&sect-num;.4.6"  width="653" height="373" screenshot="http-config/http-cookie-manager.png">
 
 <note>If there is more than one Cookie Manager in the scope of a Sampler,
 there is currently no way to specify which one is to be used.
 Also, a cookie stored in one cookie manager is not available to any other manager,
 so use multiple Cookie Managers with care.</note>
 
 <description><p>The Cookie Manager element has two functions:<br></br>
 First, it stores and sends cookies just like a web browser. If you have an HTTP Request and
 the response contains a cookie, the Cookie Manager automatically stores that cookie and will
 use it for all future requests to that particular web site.  Each JMeter thread has its own
 "cookie storage area".  So, if you are testing a web site that uses a cookie for storing
 session information, each JMeter thread will have its own session.
 Note that such cookies do not appear on the Cookie Manager display, but they can be seen using
 the <complink name="View Results Tree"/> Listener.
 </p>
 <p>
 JMeter checks that received cookies are valid for the URL.
 This means that cross-domain cookies are not stored.
 If you have bugged behaviour or want Cross-Domain cookies to be used, define the JMeter property "<code>CookieManager.check.cookies=false</code>".
 </p>
 <p>
 Received Cookies can be stored as JMeter thread variables.
 To save cookies as variables, define the property "<code>CookieManager.save.cookies=true</code>".
 Also, cookies names are prefixed with "<code>COOKIE_</code>" before they are stored (this avoids accidental corruption of local variables)
 To revert to the original behaviour, define the property "<code>CookieManager.name.prefix= </code>" (one or more spaces).
 If enabled, the value of a cookie with the name <code>TEST</code> can be referred to as <code>${COOKIE_TEST}</code>.
 </p>
 <p>Second, you can manually add a cookie to the Cookie Manager.  However, if you do this,
 the cookie will be shared by all JMeter threads.</p>
 <p>Note that such Cookies are created with an Expiration time far in the future</p>
 <p>
 Cookies with <code>null</code> values are ignored by default.
 This can be changed by setting the JMeter property: <code>CookieManager.delete_null_cookies=false</code>.
 Note that this also applies to manually defined cookies - any such cookies will be removed from the display when it is updated.
 Note also that the cookie name must be unique - if a second cookie is defined with the same name, it will replace the first.
 </p>
 </description>
 <properties>
   <property name="Name" required="No">Descriptive name for this element that is shown in the tree. </property>
   <property name="Clear Cookies each Iteration" required="Yes">If selected, all server-defined cookies are cleared each time the main Thread Group loop is executed.
   Any cookie defined in the GUI are not cleared.</property>
   <property name="Cookie Policy" required="Yes">The cookie policy that will be used to manage the cookies. 
   "<code>standard</code>" is the default since 3.0, and should work in most cases. 
   See <a href="https://hc.apache.org/httpcomponents-client-ga/tutorial/html/statemgmt.html#d5e515">Cookie specifications</a> and 
   <a href="http://hc.apache.org/httpcomponents-client-ga/httpclient/apidocs/org/apache/http/cookie/CookieSpec.html">CookieSpec implementations</a>
   [Note: "<code>ignoreCookies</code>" is equivalent to omitting the CookieManager.]
   
   If you still use HC3CookieHandler (which is DEPRECATED as of 3.0 version, so migration is highly advised), default Cookie Policy is "<code>compatibility</code>", and should work in most cases.
   See <a href="http://hc.apache.org/httpclient-3.x/cookies.html">http://hc.apache.org/httpclient-3.x/cookies.html</a> and 
   <a href="http://hc.apache.org/httpclient-3.x/apidocs/org/apache/commons/httpclient/cookie/CookiePolicy.html">http://hc.apache.org/httpclient-3.x/apidocs/org/apache/commons/httpclient/cookie/CookiePolicy.html</a>
     </property>
  <property name="Implementation" required="Yes"><code>HC4CookieHandler</code> (HttpClient 4.5.X API) or <code>HC3CookieHandler (deprecated)</code> (HttpClient 3 API). 
   Default is <code>HC4CookieHandler</code> since 3.0.
   <br></br>
   <i>[Note: If you have a website to test with IPv6 address, choose <code>HC4CookieHandler</code> (IPv6 compliant)]</i></property>
   <property name="User-Defined Cookies" required="No (discouraged, unless you know what you're doing)">This
   gives you the opportunity to use hardcoded cookies that will be used by all threads during the test execution.
   <br></br>
   The "<code>domain</code>" is the hostname of the server (without <code>http://</code>); the port is currently ignored.
   </property>
   <property name="Add Button" required="N/A">Add an entry to the cookie table.</property>
   <property name="Delete Button" required="N/A">Delete the currently selected table entry.</property>
   <property name="Load Button" required="N/A">Load a previously saved cookie table and add the entries to the existing
 cookie table entries.</property>
   <property name="Save As Button" required="N/A">
   Save the current cookie table to a file (does not save any cookies extracted from HTTP Responses).
   </property>
 </properties>
 
 </component>
 
 <component name="HTTP Request Defaults" index="&sect-num;.4.7" width="879" height="469" 
          screenshot="http-config/http-request-defaults.png">
 <description><p>This element lets you set default values that your HTTP Request controllers use.  For example, if you are
 creating a Test Plan with 25 HTTP Request controllers and all of the requests are being sent to the same server,
 you could add a single HTTP Request Defaults element with the "<code>Server Name or IP</code>" field filled in.  Then, when
 you add the 25 HTTP Request controllers, leave the "<code>Server Name or IP</code>" field empty.  The controllers will inherit
 this field value from the HTTP Request Defaults element.</p>
 <note>
 All port values are treated equally; a sampler that does not specify a port will use the HTTP Request Defaults port, if one is provided.
 </note>
 </description>
 <figure width="881" height="256" image="http-config/http-request-defaults-advanced-tab.png">HTTP Request Advanced config fields</figure>
 
 <properties>
         <property name="Name" required="No">Descriptive name for this element that is shown in the tree.</property>
         <property name="Server" required="No">Domain name or IP address of the web server. e.g. <code>www.example.com</code>. [Do not include the <code>http://</code> prefix.</property>
         <property name="Port" required="No">Port the web server is listening to.</property>
         <property name="Connect Timeout" required="No">Connection Timeout. Number of milliseconds to wait for a connection to open.</property>
         <property name="Response Timeout" required="No">Response Timeout. Number of milliseconds to wait for a response.</property>
         <property name="Implementation" required="No"><code>Java</code>, <code>HttpClient3.1 (DEPRECATED SINCE 3.0)</code>, <code>HttpClient4</code>. 
         If not specified the default depends on the value of the JMeter property
         <code>jmeter.httpsampler</code>, failing that, the <code>Java</code> implementation is used.</property>
         <property name="Protocol" required="No"><code>HTTP</code> or <code>HTTPS</code>.</property>
         <property name="Content encoding" required="No">The encoding to be used for the request.</property>
         <property name="Path" required="No">The path to resource (for example, <code>/servlets/myServlet</code>). If the
         resource requires query string parameters, add them below in the "<code>Send Parameters With the Request</code>" section.
         Note that the path is the default for the full path, not a prefix to be applied to paths
         specified on the HTTP Request screens.
         </property>
         <property name="Send Parameters With the Request" required="No">The query string will
         be generated from the list of parameters you provide.  Each parameter has a <i>name</i> and
         <i>value</i>.  The query string will be generated in the correct fashion, depending on
         the choice of "<code>Method</code>" you made (i.e. if you chose <code>GET</code>, the query string will be
         appended to the URL, if <code>POST</code>, then it will be sent separately).  Also, if you are
         sending a file using a multipart form, the query string will be created using the
         multipart form specifications.</property>
         <property name="Server (proxy)" required="No">Hostname or IP address of a proxy server to perform request. [Do not include the <code>http://</code> prefix.]</property>
         <property name="Port" required="No, unless proxy hostname is specified">Port the proxy server is listening to.</property>
         <property name="Username" required="No">(Optional) username for proxy server.</property>
         <property name="Password" required="No">(Optional) password for proxy server. (N.B. this is stored unencrypted in the test plan)</property>
         <property name="Retrieve All Embedded Resources from HTML Files" required="No">Tell JMeter to parse the HTML file
 and send HTTP/HTTPS requests for all images, Java applets, JavaScript files, CSSs, etc. referenced in the file.
         </property>
         <property name="Use concurrent pool" required="No">Use a pool of concurrent connections to get embedded resources.</property>
         <property name="Size" required="No">Pool size for concurrent connections used to get embedded resources.</property>
         <property name="Embedded URLs must match:" required="No">
         If present, this must be a regular expression that is used to match against any embedded URLs found.
         So if you only want to download embedded resources from <code>http://example.com/</code>, use the expression:
         <code>http://example\.com/.*</code>
         </property>
 </properties>
 <note>
 Note: radio buttons only have two states - on or off.
 This makes it impossible to override settings consistently
 - does off mean off, or does it mean use the current default?
 JMeter uses the latter (otherwise defaults would not work at all).
 So if the button is off, then a later element can set it on,
 but if the button is on, a later element cannot set it off.
 </note>
 </component>
 
 <component name="HTTP Header Manager" index="&sect-num;.4.8"  width="767" height="239" screenshot="http-config/http-header-manager.png">
 <description>
 <p>The Header Manager lets you add or override HTTP request headers.</p>
 <p>
 <b>JMeter now supports multiple Header Managers</b>. The header entries are merged to form the list for the sampler.
 If an entry to be merged matches an existing header name, it replaces the previous entry,
 unless the entry value is empty, in which case any existing entry is removed.
 This allows one to set up a default set of headers, and apply adjustments to particular samplers. 
 </p>
 </description>
 
 <properties>
         <property name="Name" required="No">Descriptive name for this element that is shown in the tree. </property>
   <property name="Name (Header)" required="No (You should have at least one, however)">Name of the request header.
         Two common request headers you may want to experiment with
 are "<code>User-Agent</code>" and "<code>Referer</code>".</property>
   <property name="Value" required="No (You should have at least one, however)">Request header value.</property>
   <property name="Add Button" required="N/A">Add an entry to the header table.</property>
   <property name="Delete Button" required="N/A">Delete the currently selected table entry.</property>
   <property name="Load Button" required="N/A">Load a previously saved header table and add the entries to the existing
 header table entries.</property>
   <property name="Save As Button" required="N/A">Save the current header table to a file.</property>
 </properties>
 
 <example title="Header Manager example" anchor="header_manager_example">
 
 <p><a href="../demos/HeaderManagerTestPlan.jmx">Download</a> this example.  In this example, we created a Test Plan
 that tells JMeter to override the default "<code>User-Agent</code>" request header and use a particular Internet Explorer agent string
 instead. (see figures 12 and 13).</p>
 
 <figure width="247" height="121" image="http-config/header-manager-example1a.png">Figure 12 - Test Plan</figure>
 <figure image="http-config/header-manager-example1b.png">Figure 13 - Header Manager Control Panel</figure>
 </example>
 
 </component>
 
 <component name="Java Request Defaults" index="&sect-num;.4.9"  width="685" height="373" screenshot="java_defaults.png">
 <description><p>The Java Request Defaults component lets you set default values for Java testing.  See the <complink name="Java Request" />.</p>
 </description>
 
 </component>
 
 <component name="JDBC Connection Configuration" index="&sect-num;.4.10" 
                  width="474" height="458" screenshot="jdbc-config/jdbc-conn-config.png">
     <description>Creates a database connection (used by <complink name="JDBC Request"/>Sampler)
      from the supplied JDBC Connection settings. The connection may be optionally pooled between threads.
      Otherwise each thread gets its own connection.
      The connection configuration name is used by the JDBC Sampler to select the appropriate
      connection.
      The used pool is DBCP, see <a href="https://commons.apache.org/proper/commons-dbcp/configuration.html" >BasicDataSource Configuration Parameters</a>
     </description>
     <properties>
         <property name="Name" required="No">Descriptive name for the connection configuration that is shown in the tree.</property>
         <property name="Variable Name" required="Yes">The name of the variable the connection is tied to.  
         Multiple connections can be used, each tied to a different variable, allowing JDBC Samplers
         to select the appropriate connection.
         <note>Each name must be different. If there are two configuration elements using the same name,
         only one will be saved. JMeter logs a message if a duplicate name is detected.</note>
         </property>
         <property name="Max Number of Connections" required="Yes">
         Maximum number of connections allowed in the pool.
         In most cases, <b>set this to zero (0)</b>.
         This means that each thread will get its own pool with a single connection in it, i.e.
         the connections are not shared between threads.
         <br />
         If you really want to use shared pooling (why?), then set the max count to the same as the number of threads
         to ensure threads don't wait on each other.
         </property>
         <property name="Max Wait (ms)" required="Yes">Pool throws an error if the timeout period is exceeded in the 
         process of trying to retrieve a connection, see <a href="https://commons.apache.org/proper/commons-dbcp/api-2.1.1/org/apache/commons/dbcp2/BasicDataSource.html#getMaxWaitMillis--" >BasicDataSource.html#getMaxWaitMillis</a></property>
         <property name="Time Between Eviction Runs (ms)" required="Yes">The number of milliseconds to sleep between runs of the idle object evictor thread. When non-positive, no idle object evictor thread will be run. (Defaults to "<code>60000</code>", 1 minute).
         See <a href="https://commons.apache.org/proper/commons-dbcp/api-2.1.1/org/apache/commons/dbcp2/BasicDataSource.html#getTimeBetweenEvictionRunsMillis--" >BasicDataSource.html#getTimeBetweenEvictionRunsMillis</a></property>
         <property name="Auto Commit" required="Yes">Turn auto commit on or off for the connections.</property>
         <property name="Test While Idle" required="Yes">Test idle connections of the pool, see <a href="https://commons.apache.org/proper/commons-dbcp/api-2.1.1/org/apache/commons/dbcp2/BasicDataSource.html#getTestWhileIdle--">BasicDataSource.html#getTestWhileIdle</a>. 
         Validation Query will be used to test it.</property>
         <property name="Soft Min Evictable Idle Time(ms)" required="Yes">Minimum amount of time a connection may sit idle in the pool before it is eligible for eviction by the idle object evictor, with the extra condition that at least <code>minIdle</code> connections remain in the pool.
         See <a href="https://commons.apache.org/proper/commons-dbcp/api-2.1.1/org/apache/commons/dbcp2/BasicDataSource.html#getSoftMinEvictableIdleTimeMillis--">BasicDataSource.html#getSoftMinEvictableIdleTimeMillis</a>.
         Defaults to 5000 (5 seconds)
         </property>
         <property name="Validation Query" required="No">A simple query used to determine if the database is still responding.
         This defaults to the '<code>isValid()</code>' method of the jdbc driver, which is suitable for many databases.
         However some may require a different query; for example Oracle something like '<code>SELECT 1 FROM DUAL</code>' could be used.
         <note>Note this validation query is used on pool creation to validate it even if "<code>Test While Idle</code>" suggests query would only be used on idle connections.
         This is DBCP behaviour.</note>
         </property>
         <property name="Database URL" required="Yes">JDBC Connection string for the database.</property>
         <property name="JDBC Driver class" required="Yes">Fully qualified name of driver class. (Must be in
         JMeter's classpath - easiest to copy <code>.jar</code> file into JMeter's <code>/lib</code> directory).</property>
         <property name="Username" required="No">Name of user to connect as.</property>
         <property name="Password" required="No">Password to connect with. (N.B. this is stored unencrypted in the test plan)</property>
     </properties>
 <p>Different databases and JDBC drivers require different JDBC settings. 
 The Database URL and JDBC Driver class are defined by the provider of the JDBC implementation.</p>
 <p>Some possible settings are shown below. Please check the exact details in the JDBC driver documentation.</p>
 
 <p>
 If JMeter reports <code>No suitable driver</code>, then this could mean either:
 </p>
 <ul>
 <li>The driver class was not found. In this case, there will be a log message such as <code>DataSourceElement: Could not load driver: {classname} java.lang.ClassNotFoundException: {classname}</code></li>
 <li>The driver class was found, but the class does not support the connection string. This could be because of a syntax error in the connection string, or because the wrong classname was used.</li>
 </ul>
 If the database server is not running or is not accessible, then JMeter will report a <code>java.net.ConnectException</code>.
 <table>
 <tr><th>Database</th><th>Driver class</th><th>Database URL</th></tr>
 <tr><td>MySQL</td><td><code>com.mysql.jdbc.Driver</code></td><td><code>jdbc:mysql://host[:port]/dbname</code></td></tr>
 <tr><td>PostgreSQL</td><td><code>org.postgresql.Driver</code></td><td><code>jdbc:postgresql:{dbname}</code></td></tr>
 <tr><td>Oracle</td><td><code>oracle.jdbc.OracleDriver</code></td><td><code>jdbc:oracle:thin:@//host:port/service</code>
 OR<br/><code>jdbc:oracle:thin:@(description=(address=(host={mc-name})(protocol=tcp)(port={port-no}))(connect_data=(sid={sid})))</code></td></tr>
 <tr><td>Ingres (2006)</td><td><code>ingres.jdbc.IngresDriver</code></td><td><code>jdbc:ingres://host:port/db[;attr=value]</code></td></tr>
 <tr><td>SQL Server (MS JDBC driver)</td><td><code>com.microsoft.sqlserver.jdbc.SQLServerDriver</code></td><td><code>jdbc:sqlserver://host:port;DatabaseName=dbname</code></td></tr>
 <tr><td>Apache Derby</td><td><code>org.apache.derby.jdbc.ClientDriver</code></td><td><code>jdbc:derby://server[:port]/databaseName[;URLAttributes=value[;&hellip;]]</code></td></tr>
 </table>
 <note>The above may not be correct - please check the relevant JDBC driver documentation.</note>
 </component>
 
 
 <component name="Keystore Configuration" index="&sect-num;.4.11"  width="441" height="189" screenshot="keystore_config.png">
 <description><p>The Keystore Config Element lets you configure how Keystore will be loaded and which keys it will use.
 This component is typically used in HTTPS scenarios where you don't want to take into account keystore initialization into account in response time.</p>
